[
  {
    "path": "posts/httpswwwkristinabecvarcompostsnetworks-community/",
    "title": "DACSS 697E Assignment 7",
    "description": "Assignment 7 for DACSS 697E course 'Social and Political Network Analysis': \"Networks: Community\"",
    "author": [
      {
        "name": "Kristina Becvar",
        "url": "https://www.kristinabecvar.com"
      }
    ],
    "date": "2022-04-15",
    "categories": [
      "networks",
      "homework",
      "grateful network"
    ],
    "contents": "\n\nContents\nNetwork Creation\nBasic Visualization\n\nCleaning\nSimplify Function\nGiant Component\n\nFast and Greedy Community\nGroups\nCommunity Membership\nPlot the Network with Community Colors\n\nWalktrap Community Detection and Plot\nPlot the Network with Community Colors\n\nCompare Community Partitions - Fast and Greedy and Walktrap\nCollect & Compare Modularity Scores\n\nLeading Label Propagation Community Detection\nEdge Betweenness Community Detection\nEigenvector Community Detection\nPlot the Network with Community Colors\n\nSpinglass Community Detection\nPlot the Network with Community Colors\n\nModularity\nEvaluation\n\n\nI am continuing to use the Grateful Dead song writing data set that I used in previous assignments to examine co-writing links and centrality. The data set consists of the links between co-writers of songs played by the Grateful Dead over their 30-year touring career that I compiled.\nThere are 26 songwriters that contributed to the songs played over the course of the Grateful Dead history, resulting in 26 nodes in the dataset.\nThere are a total of 183 (updated and still under review!) unique songs played, and the varies combinations of co-writing combinations are now represented in a binary affiliation matrix.\n\n\n\nThis week I will calculate community clusters using various algorithms.\nNetwork Creation\nFirst, I will get my data into an igraph network object and inspect it.\n\n\nShow code\n\n#import data\ngd_vertices <- read.csv(\"gd_nodes.csv\", header=T, stringsAsFactors=F)\ngd_affiliation <- read.csv(\"gd_affiliation_matrix.csv\", row.names = 1, header = TRUE, check.names = FALSE)\ngd_matrix <- as.matrix(gd_affiliation)\ngd_projection <- gd_matrix%*%t(gd_matrix)\n#Create igraph object\ngd_network_ig <- graph.adjacency(gd_projection,mode=\"undirected\")\n\n\n\nBasic Visualization\n\n\n\nCleaning\nSimplify Function\nThe fast and greedy function was giving me an error code of:\nError in cluster_fast_greedy(gd_network_ig):At fast_community.c:660: fast-greedy community finding works only on graphs without multiple edges, Invalid value\nSome community sourcing of opinions led me to run the “simplify()” function to correct this.\n\n\n#create simplified igraph network\nsimple_gd <- simplify(gd_network_ig)\n\n\n\nGiant Component\nCreating a function to extract the giant component. The spinglass model will not evaluate unconnected graphs, so I did this step first. The one isolate node, “Bruce Hornsby”, is the only songwriter who wrote only a song without collaborating with anyone, and would be the only unevaluated node in the spinglass model.\n\n\nShow code\n\ngiant.component <- function(graph) {\n  cl <- clusters(graph)\n  induced.subgraph(graph, which(cl$membership == which.max(cl$csize)))\n}\n\n\n\n\n\nShow code\n\n#extract giant component\ngd_giant<-giant.component(gd_network_ig)\n\n\n\nFast and Greedy Community\nThe method attempts to detect dense sub-graphs by optimizing modularity scores on igraph networks that are un-directed. I’ll start with inspecting the names that are part of the new object.\n\n\nShow code\n\n#run fast_greedy clustering algorithm\n#fg_gd <- cluster_fast_greedy(simple_gd)\n\n\n\n\n\n\n\n\n\n\n\nShow code\n\n#inspect\nnames(fg_gd)\n\n\n[1] \"merges\"     \"modularity\" \"membership\" \"names\"      \"algorithm\" \n[6] \"vcount\"    \n\nGroups\nLooking at the list of which nodes belong to which clusters:\n\n\nShow code\n\nigraph::groups(fg_gd)\n\n\n$`1`\n[1] \"Frank Guida\" \"Dave Parker\" \"Pigpen\"      \"Joe Royster\"\n\n$`2`\n[1] \"Eric Andersen\" \"John Barlow\"   \"Bob Bralove\"   \"Willie Dixon\" \n[5] \"Gerrit Graham\" \"Robert Hunter\" \"Rob Wasserman\" \"Bob Weir\"     \n[9] \"Vince Welnick\"\n\n$`3`\n[1] \"John Dawson\"     \"Jerry Garcia\"    \"Donna Godchaux\" \n[4] \"Keith Godchaux\"  \"Mickey Hart\"     \"Bill Kreutzmann\"\n\n$`4`\n[1] \"Andrew Charles\"  \"Ned Lagin\"       \"Phil Lesh\"      \n[4] \"Peter Monk\"      \"Brent Mydland\"   \"Robert Petersen\"\n\n$`5`\n[1] \"Bruce Hornsby\"\n\nCommunity Membership\nFirst I’m inspecting the community membership as a vector\n\n\nShow code\n\n#Inspect community membership vector\nfg_gd$membership\n\n\n [1] 2 2 2 4 3 2 3 3 3 2 1 3 5 2 3 4 4 4 4 1 4 1 1 2 2 2\n\nAnd I can confirm which of the 5 membership groups each songwriter is part of:\n\n\nShow code\n\n#Membership function\nmembership(fg_gd)\n\n\n  Eric Andersen     John Barlow     Bob Bralove  Andrew Charles \n              2               2               2               4 \n    John Dawson    Willie Dixon    Jerry Garcia  Donna Godchaux \n              3               2               3               3 \n Keith Godchaux   Gerrit Graham     Frank Guida     Mickey Hart \n              3               2               1               3 \n  Bruce Hornsby   Robert Hunter Bill Kreutzmann       Ned Lagin \n              5               2               3               4 \n      Phil Lesh      Peter Monk   Brent Mydland     Dave Parker \n              4               4               4               1 \nRobert Petersen          Pigpen     Joe Royster   Rob Wasserman \n              4               1               1               2 \n       Bob Weir   Vince Welnick \n              2               2 \n\nPlot the Network with Community Colors\nIgraph colors the nodes by community\n\n\nShow code\n\n#plot network with community coloring\nplot(fg_gd,gd_network_ig)\n\n\n\n\nWalktrap Community Detection and Plot\nThe walktrap community detection created two communities; one community is the lone isolate, and the rest of the songwriters are in the other community with the giant component.\n\n\nShow code\n\n#Run clustering algorithm: walktrap\nwt_gd <- walktrap.community(gd_network_ig)\n#Inspect community membership\nigraph::groups(wt_gd)\n\n\n$`1`\n [1] \"Eric Andersen\"   \"John Barlow\"     \"Bob Bralove\"    \n [4] \"Andrew Charles\"  \"John Dawson\"     \"Willie Dixon\"   \n [7] \"Jerry Garcia\"    \"Donna Godchaux\"  \"Keith Godchaux\" \n[10] \"Gerrit Graham\"   \"Frank Guida\"     \"Mickey Hart\"    \n[13] \"Robert Hunter\"   \"Bill Kreutzmann\" \"Ned Lagin\"      \n[16] \"Phil Lesh\"       \"Peter Monk\"      \"Brent Mydland\"  \n[19] \"Dave Parker\"     \"Robert Petersen\" \"Pigpen\"         \n[22] \"Joe Royster\"     \"Rob Wasserman\"   \"Bob Weir\"       \n[25] \"Vince Welnick\"  \n\n$`2`\n[1] \"Bruce Hornsby\"\n\nPlot the Network with Community Colors\nIgraph colors the nodes by community\n\n\nShow code\n\n#plot network with community coloring\nplot(wt_gd,gd_network_ig)\n\n\n\n\nCompare Community Partitions - Fast and Greedy and Walktrap\nThe modularity score for the fast and greedy algorithm is higher than the walktrap algorithm, as predicted by the tutorial.\nIt would be worth comparing these scores on a weighted network in the future since it would take that into consideration.\n\n\nShow code\n\n#compare community partition modularity scores\nmodularity(fg_gd)\n\n\n[1] 0.2792899\n\n\n\nShow code\n\n#compare community partition modularity scores\nmodularity(wt_gd)\n\n\n[1] 0.2482355\n\nCollect & Compare Modularity Scores\nSaving the scores for evaluation and later analysis; I will continue to add the other community modularity scores into this vector as I run them.\n\n\nmods<-c(fastgreedy=modularity(fg_gd), walktrap=modularity(wt_gd))\nmods\n\n\nfastgreedy   walktrap \n 0.2792899  0.2482355 \n\nVariation Method\n\n\nShow code\n\n#compare community partitions using variation of information\ncompare(fg_gd,wt_gd,method=\"vi\")\n\n\n[1] 1.294253\n\nNormalized Mutual Information Method\n\n\nShow code\n\n#compare community partitions\ncompare(fg_gd,wt_gd,method=\"nmi\")\n\n\n[1] 0.2012264\n\nSplit Join Distance Method\n\n\nShow code\n\n#compare community partitions\ncompare(fg_gd,wt_gd,method=\"split.join\")\n\n\n[1] 16\n\nRand Index Method\n\n\nShow code\n\n#compare community partitions\ncompare(fg_gd,wt_gd,method=\"rand\")\n\n\n[1] 0.2984615\n\nAdjusted Rand Index Method\n\n\nShow code\n\n#compare community partitions\ncompare(fg_gd,wt_gd,method=\"adjusted.rand\")\n\n\n[1] 0.04633205\n\nLeading Label Propagation Community Detection\nIn this evaluation, each of the nodes was indicated to be in its’ own community. I will not plot this community.\n\n\nShow code\n\n#Run clustering algorithm: leading label\nlab_gd<-label.propagation.community(gd_network_ig)\n#Inspect community membership\nigraph::groups(lab_gd)\n\n\n$`1`\n[1] \"Eric Andersen\"\n\n$`2`\n[1] \"John Barlow\"\n\n$`3`\n[1] \"Bob Bralove\"\n\n$`4`\n[1] \"Andrew Charles\"\n\n$`5`\n[1] \"John Dawson\"\n\n$`6`\n[1] \"Willie Dixon\"\n\n$`7`\n[1] \"Jerry Garcia\"\n\n$`8`\n[1] \"Donna Godchaux\"\n\n$`9`\n[1] \"Keith Godchaux\"\n\n$`10`\n[1] \"Gerrit Graham\"\n\n$`11`\n[1] \"Frank Guida\"\n\n$`12`\n[1] \"Mickey Hart\"\n\n$`13`\n[1] \"Bruce Hornsby\"\n\n$`14`\n[1] \"Robert Hunter\"\n\n$`15`\n[1] \"Bill Kreutzmann\"\n\n$`16`\n[1] \"Ned Lagin\"\n\n$`17`\n[1] \"Phil Lesh\"\n\n$`18`\n[1] \"Peter Monk\"\n\n$`19`\n[1] \"Brent Mydland\"\n\n$`20`\n[1] \"Dave Parker\"\n\n$`21`\n[1] \"Robert Petersen\"\n\n$`22`\n[1] \"Pigpen\"\n\n$`23`\n[1] \"Joe Royster\"\n\n$`24`\n[1] \"Rob Wasserman\"\n\n$`25`\n[1] \"Bob Weir\"\n\n$`26`\n[1] \"Vince Welnick\"\n\nShow code\n\n#collect modularity scores to compare\nmods<-c(mods, label=modularity(lab_gd))\n\n\n\nEdge Betweenness Community Detection\nAgain, each of the nodes was indicated to be in its’ own community. I will not plot this community.\n\n\nShow code\n\n#Run clustering algorithm: edge betweenness\nedge_gd <- label.propagation.community(gd_network_ig)\n#Inspect community membership\nigraph::groups(edge_gd)\n\n\n$`1`\n[1] \"Eric Andersen\"\n\n$`2`\n[1] \"John Barlow\"\n\n$`3`\n[1] \"Bob Bralove\"\n\n$`4`\n[1] \"Andrew Charles\"\n\n$`5`\n[1] \"John Dawson\"\n\n$`6`\n[1] \"Willie Dixon\"\n\n$`7`\n[1] \"Jerry Garcia\"\n\n$`8`\n[1] \"Donna Godchaux\"\n\n$`9`\n[1] \"Keith Godchaux\"\n\n$`10`\n[1] \"Gerrit Graham\"\n\n$`11`\n[1] \"Frank Guida\"\n\n$`12`\n[1] \"Mickey Hart\"\n\n$`13`\n[1] \"Bruce Hornsby\"\n\n$`14`\n[1] \"Robert Hunter\"\n\n$`15`\n[1] \"Bill Kreutzmann\"\n\n$`16`\n[1] \"Ned Lagin\"\n\n$`17`\n[1] \"Phil Lesh\"\n\n$`18`\n[1] \"Peter Monk\"\n\n$`19`\n[1] \"Brent Mydland\"\n\n$`20`\n[1] \"Dave Parker\"\n\n$`21`\n[1] \"Robert Petersen\"\n\n$`22`\n[1] \"Pigpen\"\n\n$`23`\n[1] \"Joe Royster\"\n\n$`24`\n[1] \"Rob Wasserman\"\n\n$`25`\n[1] \"Bob Weir\"\n\n$`26`\n[1] \"Vince Welnick\"\n\nShow code\n\n#collect modularity scores to compare\nmods<-c(mods, edge=modularity(edge_gd))\n\n\n\nEigenvector Community Detection\nThis method has also created 5 communities to examine.\n\n\nShow code\n\n#Run clustering algorithm: leading eigenvector\neigen_gd <- leading.eigenvector.community(gd_network_ig)\n#Inspect community membership\nigraph::groups(eigen_gd)\n\n\n$`1`\n[1] \"Eric Andersen\" \"John Barlow\"   \"Bob Bralove\"   \"Willie Dixon\" \n[5] \"Gerrit Graham\" \"Brent Mydland\" \"Rob Wasserman\" \"Bob Weir\"     \n[9] \"Vince Welnick\"\n\n$`2`\n[1] \"Bruce Hornsby\"\n\n$`3`\n[1] \"John Dawson\"   \"Jerry Garcia\"  \"Robert Hunter\"\n\n$`4`\n [1] \"Andrew Charles\"  \"Frank Guida\"     \"Bill Kreutzmann\"\n [4] \"Ned Lagin\"       \"Phil Lesh\"       \"Peter Monk\"     \n [7] \"Dave Parker\"     \"Robert Petersen\" \"Pigpen\"         \n[10] \"Joe Royster\"    \n\n$`5`\n[1] \"Donna Godchaux\" \"Keith Godchaux\" \"Mickey Hart\"   \n\nShow code\n\n#collect modularity scores to compare\nmods<-c(mods, eigen=modularity(eigen_gd))\n\n\n\nPlot the Network with Community Colors\nIgraph colors the nodes by community\n\n\nShow code\n\n#plot network with community coloring\nplot(eigen_gd,gd_network_ig)\n\n\n\n\nSpinglass Community Detection\nThis method has, not surprisingly, created 4 communities to examine since we are only looking at the giant component, eliminating the one isolate.\n\n\nShow code\n\n#Run clustering algorithm: spinglass\nspin_gd <- spinglass.community(gd_giant)\n#Inspect community membership\nigraph::groups(spin_gd)\n\n\n$`1`\n[1] \"Frank Guida\" \"Dave Parker\" \"Pigpen\"      \"Joe Royster\"\n\n$`2`\n[1] \"Andrew Charles\"  \"Ned Lagin\"       \"Phil Lesh\"      \n[4] \"Peter Monk\"      \"Brent Mydland\"   \"Robert Petersen\"\n\n$`3`\n[1] \"Eric Andersen\" \"John Barlow\"   \"Bob Bralove\"   \"Willie Dixon\" \n[5] \"Gerrit Graham\" \"Rob Wasserman\" \"Bob Weir\"      \"Vince Welnick\"\n\n$`4`\n[1] \"John Dawson\"     \"Jerry Garcia\"    \"Donna Godchaux\" \n[4] \"Keith Godchaux\"  \"Mickey Hart\"     \"Robert Hunter\"  \n[7] \"Bill Kreutzmann\"\n\nShow code\n\n#collect modularity scores to compare\nmods<-c(mods, spin=modularity(spin_gd))\n\n\n\nPlot the Network with Community Colors\nIgraph colors the nodes by community\n\n\nShow code\n\n#plot network with community coloring\nplot(spin_gd,gd_giant)\n\n\n\n\nModularity\nFinally, for this post, I will look at the modularity scores across the various methods of community evaluation.\n\n\nShow code\n\ngd_mods <- as.matrix(mods)\ngd_mods\n\n\n                 [,1]\nfastgreedy 0.27928994\nwalktrap   0.24823554\nlabel      0.40297240\nedge       0.40297240\neigen      0.45402593\nspin       0.04933856\n\nEvaluation\nAfter an initial look at the network through various community algorithms, it is my instinct that the fast and greedy community structure actually makes very little sense to me, outside the isolate.\nThe eigenvector community makes the most sense to me. Even the inclusion of John Dawson with Jerry Garcia and Robert Hunter makes sense, given the eigenvector principle. The only song John Dawson wrote was a popular song, written with Jerry Garcia and Robert Hunter.\nThe spinglass community structure is interesting, and I would like to look at that in more detail in the future. It has intuitively more of a logical distribution than the fast and greedy model, though it’s not quite as “clean” of a picture as the eigenvector model.\nCitations:\nAllan, Alex; Grateful Dead Lyric & Song Finder: https://whitegum.com/~acsa/intro.htm\nASCAP. 18 March 2022.\nDodd, David; The Annotated Grateful Dead Lyrics: http://artsites.ucsc.edu/gdead/agdl/\nSchofield, Matt; The Grateful Dead Family Discography: http://www.deaddisc.com/\nPhoto by Rosie McGee\nThis information is intended for private research only, and not for any commercial use. Original Grateful Dead songs are ©copyright Ice Nine Music\n\n\n\n  \n    \n      Share:  \n      \n        \n      \n      \n        \n      \n    \n  \n\n\n",
    "preview": "posts/httpswwwkristinabecvarcompostsnetworks-community/distill-preview.png",
    "last_modified": "2022-04-15T17:25:14-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpswwwkristinabecvarcomposts2022-04-04-dacss-697e-assignment-6/",
    "title": "DACSS 697E Assignment 6",
    "description": "Assignment 6 for DACSS 697E course 'Social and Political Network Analysis': \"Network Roles\"",
    "author": [
      {
        "name": "Kristina Becvar",
        "url": "https://www.kristinabecvar.com"
      }
    ],
    "date": "2022-04-15",
    "categories": [
      "networks",
      "homework",
      "grateful network"
    ],
    "contents": "\n\nContents\nNetwork Structure\nCreate a Data Frame\nStructural Equivalence\n“Complete”\n“Average”\n“Single”\n“Ward.D”\n\nPartition Using Clustering\nHeight= 15\nHeight= 10\nHeight= 3\n\nBlockmodel Partitions\n2-partition blockmodel\n5-partition blockmodel\n\nPlotting Network Roles\nStatnet\nIgraph\n\nCentrality by Network Role\nConcoR\nBest model\n\n\nI am continuing to use the Grateful Dead song writing data set that I used in previous assignments to examine co-writing links and centrality. The data set consists of the links between co-writers of songs played by the Grateful Dead over their 30-year touring career that I compiled.\nThere are 26 songwriters that contributed to the songs played over the course of the Grateful Dead history, resulting in 26 nodes in the dataset.\nThere are a total of 183 (updated and still under review!) unique songs played, and the varies combinations of co-writing combinations are now represented in a binary affiliation matrix.\nI plan on eventually introducing the number of times a given song was played live as a method of weighting the network, given the culture of the band and its’ community was one of collaboration and the prominence of a song being representative of the level at which it resonated with the community. I need to continue to investigate the best time and way to incorporate those weights.\n\n\n\nLoading the dataset and creating the network to begin this assignment:\n\n\nShow code\n\ngd_vertices <- read.csv(\"gd_nodes.csv\", header=T, stringsAsFactors=F)\ngd_affiliation <- read.csv(\"gd_affiliation_matrix.csv\", row.names = 1, header = TRUE, check.names = FALSE)\ngd_matrix <- as.matrix(gd_affiliation)\ngd_projection <- gd_matrix%*%t(gd_matrix)\n\n#Create igraph and statnet Objects\n\ngd_network_ig <- graph.adjacency(gd_projection,mode=\"undirected\") #igraph object\ngd_network_stat <- network(gd_projection, directed=F, matrix.type=\"adjacency\") #statnet object\n\n\n\nNetwork Structure\nThe network is an undirected, unweighted network. It has two components; one large component with one isolate.\nThe statnet object has a density of 0.2 and a transitivity of 0.5241.\n\n\nShow code\n\n#Inspect New igraph and statnet objects\n\nprint(gd_network_stat)\n\n\n Network attributes:\n  vertices = 26 \n  directed = FALSE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 65 \n    missing edges= 0 \n    non-missing edges= 65 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nShow code\n\nigraph::components(gd_network_ig)$no\n\n\n[1] 2\n\nShow code\n\ngden(gd_network_stat)\n\n\n[1] 0.2\n\nShow code\n\ngtrans(gd_network_stat)\n\n\n[1] 0.5240964\n\nCreate a Data Frame\nI need to create a data frame of the network node data as in previous tutorials/assignments, but having had trouble using both igraph and statnet in the same .rmd, I used igraph in previous assignments. I’ll use statnet in this assignment and inspect the differences as well.\n\n\nShow code\n\nget.eigen<-function(net, attr=NULL){\n    #set attr=\"weight\" if weighted network\n    eigen<-evcent(net)\n    mat<-as.matrix.network(net, attr=attr)\n    diag(mat)<-0\n    mat2<-mat%*%mat\n    rc<-diag(mat2)/rowSums(mat2)\n    dc<-1-rc\n    data.frame(name=net%v%\"vertex.names\",\n        eigen=eigen,\n        eigen.rc=eigen*rc,\n        eigen.dc=eigen*dc)\n}\nget.brokerage<-function(net, attr=\"attr\"){\n  temp<-data.frame(brokerage(net, cl = net%v%\"attr\")$z.nli)\n  temp$name=net%v%\"vertex.names\"\n  mutate(temp, broker.tot = temp$t,\n         broker.coord = temp$w_I,\n         broker.itin = temp$w_O,\n         broker.rep = temp$b_IO,\n         broker.gate = temp$b_OI,\n         broker.lia = temp$b_O)%>%\n    select(contains(\"broker\"))\n}\n\n\n\nBecause I am again having an issue with using igraph and statnet in one knit chunk, I need to save my data frame then recall it to knit.\n\n\nShow code\n\n#create dataframe with names\n#gd_nodes<-data.frame(name=gd_network_stat%v%\"vertex.names\",\n        #degree=sna::degree(gd_network_stat,gmode=\"graph\"),\n        #bonpow=bonpow(gd_network_stat),\n        #betweenness=betweenness(gd_network_stat, gmode=\"graph\"),\n        #close=sna::closeness(gd_network_stat, gmode=\"graph\", cmode = \"undirected\"),\n        #constraint=constraint(gd_network_ig))\n\n#add eigenvector centrality using custom function\n#gd_nodes<-full_join(gd_nodes,get.eigen(gd_network_stat), by=\"name\")\n\n#write csv for retrieval in knitting document\n#write.csv(gd_nodes, file = \"gd_nodes6.csv\")\n\n\n\n\n\ngd_nodes <- read.csv(\"gd_nodes6.csv\")\n\nhead(gd_nodes)\n\n\n  X           name degree      bonpow betweenness close constraint\n1 1  Eric Andersen      1  0.02612461    0.000000     0  1.0000000\n2 2    John Barlow      3 -1.44991592    0.750000     0  0.6706222\n3 3    Bob Bralove      5 -1.41072900    1.833333     0  0.4989170\n4 4 Andrew Charles      1 -0.48330531    0.000000     0  1.0000000\n5 5    John Dawson      2 -1.18866981    0.000000     0  1.2945238\n6 6   Willie Dixon      2  0.27430842    0.000000     0  0.7040590\n       eigen    eigen.rc   eigen.dc\n1 0.04883644 0.002872732 0.04596371\n2 0.07763512 0.008957898 0.06867722\n3 0.12770600 0.015963250 0.11174275\n4 0.04317463 0.003083902 0.04009073\n5 0.07977694 0.007597803 0.07217913\n6 0.06423801 0.005839819 0.05839819\n\nStructural Equivalence\nCreating the matrix element then taking a look at the summary using the equivalence function “sedist”, the default measure of assessing the approximate structural equivalence of actors, or “complete”.\n“Complete”\n\n\nShow code\n\n#calculate equivalence from specified distance marix\ngd_stat_se<-equiv.clust(gd_network_stat, equiv.fun=\"sedist\", method=\"hamming\",mode=\"graph\")\n\n\n\n\n\n#summary of object produced by sedist()\nsummary(gd_stat_se)\n\n\n               Length Class  Mode     \ncluster         7     hclust list     \nmetric          1     -none- character\nequiv.fun       1     -none- character\ncluster.method  1     -none- character\nglabels        26     -none- character\nplabels        26     -none- character\n\n#plot equivalence clustering\nplot(gd_stat_se,labels=gd_stat_se$glabels)\n\n\n\n\nI need to look at the other methods of clustering as well.\n“Average”\n\n\nShow code\n\n#with average cluster.method\ngd_avg_se<-equiv.clust(gd_network_stat, equiv.fun=\"sedist\", cluster.method=\"average\", method=\"hamming\",mode=\"graph\")\n#plot:\nplot(gd_avg_se,labels=gd_stat_se$glabels)\n\n\n\n\n“Single”\n\n\nShow code\n\n#with average cluster.method\ngd_sing_se<-equiv.clust(gd_network_stat, equiv.fun=\"sedist\", cluster.method=\"single\", method=\"hamming\",mode=\"graph\")\n\n#plot:\nplot(gd_sing_se,labels=gd_stat_se$glabels)\n\n\n\n\n“Ward.D”\n\n\nShow code\n\n#with average cluster.method\ngd_wrd_se<-equiv.clust(gd_network_stat, equiv.fun=\"sedist\", cluster.method=\"ward.D\", method=\"hamming\",mode=\"graph\")\n\n#plot:\nplot(gd_wrd_se,labels=gd_stat_se$glabels)\n\n\n\n\nIt is interesting, because none of these dendograms represent fully what I feel accurately represents this network, but it makes me want to look more deeply and understand the network.\nPartition Using Clustering\nI understand that the number of partitions (or roles) will depend on the height at which the dendrogram is cut. Using the tutorial example, I set the height at 15 and the result is 5 clusters. Using the alternate view from the tutorial, I also set the height at 10, and identify 8 distinct clusters or roles.\nHeight= 15\n\n\nShow code\n\n#plot equivalence clustering\nplot(gd_stat_se,labels=gd_stat_se$glabels)\n#partition the clusters\nrect.hclust(gd_stat_se$cluster,h=15)\n\n\n\n\nHeight= 10\n\n\nShow code\n\n#plot equivalence clustering\nplot(gd_stat_se,labels=gd_stat_se$glabels)\n#partition the clusters\nrect.hclust(gd_stat_se$cluster,h=10)\n\n\n\n\nHeight= 3\nFor my own experimenting, looking at it with an even lower height (“3”), it spreads the clusters out to 16.\n\n\nShow code\n\n#plot equivalence clustering\nplot(gd_stat_se,labels=gd_stat_se$glabels)\n#partition the clusters\nrect.hclust(gd_stat_se$cluster,h=3)\n\n\n\n\nBlockmodel Partitions\nInspecting the goodness of fit of the partitions that result from the clustering steps above using blockmodeling to try and get a better sense of how well the partitioning worked. Using the blockmodel command in statnet and specifying “k=x” means that “x” will indicate how many partitions to create, and “h=x” means that “x” will indicate the height to cut the dendogram.\n2-partition blockmodel\n\n\nShow code\n\n#blockmodel and select partitions\nblk_mod<-blockmodel(gd_network_stat,gd_stat_se,k=2)\n#print blockmodel object\nblk_mod\n\n\n\nNetwork Blockmodel:\n\nBlock membership:\n\n  Eric Andersen     John Barlow     Bob Bralove  Andrew Charles \n              1               1               1               1 \n    John Dawson    Willie Dixon    Jerry Garcia  Donna Godchaux \n              1               1               1               1 \n Keith Godchaux   Gerrit Graham     Frank Guida     Mickey Hart \n              1               1               1               1 \n  Bruce Hornsby   Robert Hunter Bill Kreutzmann       Ned Lagin \n              1               1               1               1 \n      Phil Lesh      Peter Monk   Brent Mydland     Dave Parker \n              2               1               1               1 \nRobert Petersen          Pigpen     Joe Royster   Rob Wasserman \n              1               1               1               1 \n       Bob Weir   Vince Welnick \n              2               1 \n\nReduced form blockmodel:\n\n     Eric Andersen John Barlow Bob Bralove Andrew Charles John Dawson Willie Dixon Jerry Garcia Donna Godchaux Keith Godchaux Gerrit Graham Frank Guida Mickey Hart Bruce Hornsby Robert Hunter Bill Kreutzmann Ned Lagin Phil Lesh Peter Monk Brent Mydland Dave Parker Robert Petersen Pigpen Joe Royster Rob Wasserman Bob Weir Vince Welnick \n          Block 1   Block 2\nBlock 1 0.1268116 0.6041667\nBlock 2 0.6041667 1.0000000\n\n\n\nShow code\n\nplot.block<-function(x=blk_mod, main=NULL, cex.lab=1){\n  plot.sociomatrix(x$blocked.data, labels=list(x$plabels,x$plabels),\n                   main=main, drawlines = FALSE, cex.lab=cex.lab)\n  for (j in 2:length(x$plabels)) if (x$block.membership[j] !=\n                                     x$block.membership[j-1]) \n    abline(v = j - 0.5, h = j - 0.5, lty = 3, xpd=FALSE)\n}\nplot.block(blk_mod,main=\"Grateful Dead Songwriting: 2 Partitions\", cex.lab=.4)\n\n\n\n\n5-partition blockmodel\n\n\nShow code\n\n#blockmodel and select partitions\nblk_mod2<-blockmodel(gd_network_stat,gd_stat_se,k=5)\n#print blockmodel object\nblk_mod2$block.model\n\n\n           Block 1    Block 2 Block 3   Block 4 Block 5\nBlock 1 0.06666667 0.05208333  0.3125 0.0625000     0.5\nBlock 2 0.05208333 0.93333333  1.0000 0.4166667     1.0\nBlock 3 0.31250000 1.00000000     NaN 1.0000000     1.0\nBlock 4 0.06250000 0.41666667  1.0000 1.0000000     1.0\nBlock 5 0.50000000 1.00000000  1.0000 1.0000000     NaN\n\nShow code\n\n#plot blockmodel partitions\nplot.block(blk_mod2,main=\"Grateful Dead Songwriting, 5 Partitions\", cex.lab=.5)\n\n\n\n\nPlotting Network Roles\nTo do this, I will assign “block.membership” as a vertex attribute to my 5-partition blockmodel, then use the role attribute to change the color of plotted nodes in a network plot. I am using this part of the tutorial as well because graphics are always a fun thing to do in the middle of learning new concepts and coding all day! I will definitely want to investigate another aspect of this data and graphing options more later because the results show me that this network is not exactly graphing in a familiar way.\n\n\nShow code\n\nblk_mod3<-blockmodel(gd_network_stat,gd_stat_se,k=5)\n\n\n\nStatnet\n\nIgraph\n\n\nShow code\n\nlibrary(igraph)\n\nV(gd_network_ig)$role<-blk_mod3$block.membership[match(V(gd_network_ig)$name,blk_mod3$plabels)]\n\n#plot network using \"role\" to color nodes: igraph\nplot(gd_network_ig, layout=layout_with_kk, vertex.color=V(gd_network_ig)$role)\n\n\n\n\nCentrality by Network Role\nI am attempting to use the “gd_nodes” table created earlier and adding the role assignments from the “blockmodel” calculations to summarise average node measures of centrality by role.\nYet again, I am finding that the code used for this process using both igraph and statnet worked until I knit the document, but is giving me trouble at that point, so I will revisit this process.\n\n\nShow code\n\nlibrary(igraph)\n#attach role to .nodes dataframe\ngd_new_nodes <- gd_nodes$role<-V(gd_network_ig)$role\n\n\n\nConcoR\nUtilizing the “concoR” package\n\n\nShow code\n\nlibrary(concoR)\n#select partitions with concor\nconcoR::concor_hca(list(gd_projection), p=2)\n\n\n   block          vertex\n1      1   Eric Andersen\n2      1     John Barlow\n7      2     Bob Bralove\n11     3  Andrew Charles\n17     4     John Dawson\n8      2    Willie Dixon\n18     4    Jerry Garcia\n19     4  Donna Godchaux\n20     4  Keith Godchaux\n3      1   Gerrit Graham\n12     3     Frank Guida\n21     4     Mickey Hart\n4      1   Bruce Hornsby\n22     4   Robert Hunter\n23     4 Bill Kreutzmann\n13     3       Ned Lagin\n24     4       Phil Lesh\n14     3      Peter Monk\n5      1   Brent Mydland\n25     4     Dave Parker\n15     3 Robert Petersen\n26     4          Pigpen\n16     3     Joe Royster\n9      2   Rob Wasserman\n6      1        Bob Weir\n10     2   Vince Welnick\n\nTaking this output and plotting it as I tried earlier, I get a better visualization of the blockmodeling:\n\n           Block 1   Block 2    Block 3   Block 4\nBlock 1 0.33333333 0.2083333 0.02777778 0.1666667\nBlock 2 0.20833333 0.6666667 0.00000000 0.0750000\nBlock 3 0.02777778 0.0000000 0.06666667 0.1000000\nBlock 4 0.16666667 0.0750000 0.10000000 0.6666667\n\n\n\nShow code\n\n#plot blockmodel partitions\nplot.block(blk_mod,main=\"Grateful Dead Songwriting, Concor 4 Partitions\", cex.lab=.5)\n\n\n\n\nBest model\nFinally, I want to look at the “optimized” 5 partition model, which in the end seems to represent the network most intuitively of the models I’ve explored so far.\n\n\n\n\n\nShow code\n\n#plot blockmodel partitions\nplot.block(blk_mod,main=\"Grateful Dead Songwriting, Optimized 5 Partitions\", cex.lab=.5)\n\n\n\n\nI have more evaluations to do but I continue to struggle with using igraph and statnet in the same .rmd file, so I will revisit this process in future posts.\nCitations:\nAllan, Alex; Grateful Dead Lyric & Song Finder: https://whitegum.com/~acsa/intro.htm\nASCAP. 18 March 2022.\nDodd, David; The Annotated Grateful Dead Lyrics: http://artsites.ucsc.edu/gdead/agdl/\nSchofield, Matt; The Grateful Dead Family Discography: http://www.deaddisc.com/\nPhoto by Grateful Dead Productions\nThis information is intended for private research only, and not for any commercial use. Original Grateful Dead songs are ©copyright Ice Nine Music\n\n\n\n  \n    \n      Share:  \n      \n        \n      \n      \n        \n      \n    \n  \n\n\n",
    "preview": "posts/httpswwwkristinabecvarcomposts2022-04-04-dacss-697e-assignment-6/distill-preview.png",
    "last_modified": "2022-04-15T17:24:55-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpswwwkristinabecvarcomposts2022-04-04-dacss-697e-assignment-5/",
    "title": "DACSS 697E Assignment 5",
    "description": "Assignment 5 for DACSS 697E course 'Social and Political Network Analysis': \"Brokerage and Betweenness\"",
    "author": [
      {
        "name": "Kristina Becvar",
        "url": "https://www.kristinabecvar.com"
      }
    ],
    "date": "2022-04-15",
    "categories": [
      "networks",
      "homework",
      "grateful network"
    ],
    "contents": "\n\nContents\nNetwork Details\nCentrality Scores\nEigenvector Centrality\nCloseness\nBetweenness\nTop Betweenness\nTop Closeness\nNetwork Constraint (Burt)\n\n\nNetwork Details\nI am continuing to use the Grateful Dead song writing data set that I used in previous assignments to examine co-writing links and centrality.\nThe data set consists of the links between co-writers of songs played by the Grateful Dead over their 30-year touring career that I compiled. One aspect of the Grateful Dead song data is that the connections between co-writers is weighted, with the weights representing the number of time each song was played live.\nThere are 26 songwriters that contributed to the songs played over the course of the Grateful Dead history, resulting in 26 nodes in the dataset.\nThere are a total of 183 (updated and still under review!) unique songs played, and the varies combinations of co-writing combinations are now represented in a binary affiliation matrix.\n\n\n\nLoading the dataset and creating the network to begin this assignment:\n\n\nShow code\n\ngd_vertices <- read.csv(\"gd_nodes.csv\", header=T, stringsAsFactors=F)\ngd_affiliation <- read.csv(\"gd_affiliation_matrix.csv\", row.names = 1, header = TRUE, check.names = FALSE)\ngd_matrix <- as.matrix(gd_affiliation)\ngd_projection <- gd_matrix%*%t(gd_matrix)\n\n#Create Igraph Object\n\ngd_network_ig <- graph.adjacency(gd_projection,mode=\"undirected\") #igraph object\n\n\n\nThis is a non-directed, unweighted igraph object. It has two components; one large component with one isolate.\n\n\n#Inspect New Object\n\nigraph::vertex_attr_names(gd_network_ig)\n\n\n[1] \"name\"\n\nigraph::edge_attr_names(gd_network_ig)\n\n\ncharacter(0)\n\nhead(V(gd_network_ig)$name)\n\n\n[1] \"Eric Andersen\"  \"John Barlow\"    \"Bob Bralove\"   \n[4] \"Andrew Charles\" \"John Dawson\"    \"Willie Dixon\"  \n\nis_directed(gd_network_ig)\n\n\n[1] FALSE\n\nis_weighted(gd_network_ig)\n\n\n[1] FALSE\n\nis_bipartite(gd_network_ig)\n\n\n[1] FALSE\n\nigraph::dyad.census(gd_network_ig)\n\n\n$mut\n[1] 738\n\n$asym\n[1] 0\n\n$null\n[1] -413\n\nigraph::triad.census(gd_network_ig)\n\n\n [1] 1788    0  488    0    0    0    0    0    0    0  237    0    0\n[14]    0    0   87\n\nCentrality Scores\nTo examine the centrality and power scores of the nodes, I’m creating a data frame with the centrality degree, normalized centrality, Bonacich power, Eigenvector centrality scores and the breakdown of reflected and derived centrality scores.\nTo calculate the reflected and derived centrality scores, I first run some operations on the adjacency matrix and keep in mind that these two scores make up the entire calculation of the Eigenvector centrality score.\n\n\nShow code\n\ngd_adjacency <- as.matrix(as_adjacency_matrix(gd_network_ig))\ngd_adjacency_2 <- gd_adjacency %*% gd_adjacency\n\n#calculate portion of reflected centrality\ngd_reflective <- diag(as.matrix(gd_adjacency_2))/rowSums(as.matrix(gd_adjacency_2))\ngd_reflective <- ifelse(is.nan(gd_reflective),0,gd_reflective)\n\n#calculate derived centrality\ngd_derived <- 1-diag(as.matrix(gd_adjacency_2))/rowSums(as.matrix(gd_adjacency_2))\ngd_derived <- ifelse(is.nan(gd_derived),1,gd_derived)\n\ncentrality_gd <-data.frame(id=1:vcount(gd_network_ig),\n                        name=V(gd_network_ig)$name,\n                        degree_all=igraph::degree(gd_network_ig),\n                        degree_norm=igraph::degree(gd_network_ig,normalized=T),\n                        BC_power=power_centrality(gd_network_ig),\n                        EV_cent=centr_eigen(gd_network_ig,directed = F)$vector,\n                        reflect_EV=gd_reflective*centr_eigen(gd_network_ig,directed = F)$vector,\n                        derive_EV=gd_derived*centr_eigen(gd_network_ig,directed = F)$vector)\n\nrow.names(centrality_gd)<-NULL\ncentrality_gd%>%\n  arrange(desc(degree_all))%>%\n  slice(1:5)\n\n\n  id            name degree_all degree_norm   BC_power    EV_cent\n1  7    Jerry Garcia        328       13.12 -0.2551417 0.96094165\n2 14   Robert Hunter        313       12.52 -0.1735142 1.00000000\n3 25        Bob Weir        213        8.52 -0.5430836 0.18725953\n4 17       Phil Lesh        149        5.96 -0.1806656 0.15133380\n5 15 Bill Kreutzmann        100        4.00 -0.7011548 0.09223647\n   reflect_EV  derive_EV\n1 0.332625452 0.62831620\n2 0.371327549 0.62867245\n3 0.040709421 0.14655011\n4 0.022140576 0.12919322\n5 0.009710558 0.08252591\n\nRight away, I see the highest degree are clearly Jerry Garcia and Robert Hunter, which makes sense given that they were a songwriting pair that were prolific in creating the Grateful Dead original songbook. Bob Weir also contributed quite a bit, though the songs he wrote with his writing partner John Barlow numbered many less than those that he wrote as part of the whole band, judging by Barlow’s absence in the top counts.\nThe original lineup of Jerry Garcia, Bob Weir, Phil Lesh, Bill Kreutzmann, and Pigpen as well as Robert Hunter’s presence in the formative years of the band’s most collaborative era, means that this degree ranking makes sense intuitively.\nEigenvector Centrality\nI am also interested in the Eigenvector centrality scores - Both the top as well as the lowest value scores.\n\n\nShow code\n\ncentrality_gd%>%\n  arrange(desc(EV_cent))%>%\n  slice(1:5)\n\n\n  id            name degree_all degree_norm   BC_power    EV_cent\n1 14   Robert Hunter        313       12.52 -0.1735142 1.00000000\n2  7    Jerry Garcia        328       13.12 -0.2551417 0.96094165\n3 25        Bob Weir        213        8.52 -0.5430836 0.18725953\n4 17       Phil Lesh        149        5.96 -0.1806656 0.15133380\n5 15 Bill Kreutzmann        100        4.00 -0.7011548 0.09223647\n   reflect_EV  derive_EV\n1 0.371327549 0.62867245\n2 0.332625452 0.62831620\n3 0.040709421 0.14655011\n4 0.022140576 0.12919322\n5 0.009710558 0.08252591\n\nRobert Hunter having the top Eigenvector centrality score is not a shock - he has long held the unofficial title of band member and as the person behind the songwriting magic of the Grateful Dead. His primary songwriting partner was Jerry Garcia, but he also wrote songs with the early, full band and later with almost all of the individual members of the band.\nIt is a little surprising, though, that the Eigenvector scores fall off so quickly after Robert Hunter and Jerry Garcia.\nCloseness\nThe closeness centrality of a node is defined as the sum of the geodesic distances between that node and all other nodes in a network. This works; however, I get a warning that closeness centrality is not well-defined for disconnected graphs.\n\n\n#calculate closeness centrality: igraph\nigraph::closeness(gd_network_ig)\n\n\n  Eric Andersen     John Barlow     Bob Bralove  Andrew Charles \n    0.012500000     0.012987013     0.013333333     0.012048193 \n    John Dawson    Willie Dixon    Jerry Garcia  Donna Godchaux \n    0.012048193     0.012658228     0.015625000     0.014285714 \n Keith Godchaux   Gerrit Graham     Frank Guida     Mickey Hart \n    0.014492754     0.012500000     0.011363636     0.014492754 \n  Bruce Hornsby   Robert Hunter Bill Kreutzmann       Ned Lagin \n    0.001538462     0.015873016     0.015384615     0.012048193 \n      Phil Lesh      Peter Monk   Brent Mydland     Dave Parker \n    0.016666667     0.012048193     0.013698630     0.014492754 \nRobert Petersen          Pigpen     Joe Royster   Rob Wasserman \n    0.012345679     0.015151515     0.011363636     0.013333333 \n       Bob Weir   Vince Welnick \n    0.017543860     0.013157895 \n\nIn addition to node-level centrality scores, I also want to calculate the network level centralization index for closeness centrality measures. Again, I get a warning that closeness centrality is not well-defined for disconnected graphs.\n\n\n#calculate closeness centralization index: igraph\ncentr_clo(gd_network_ig)$centralization\n\n\n[1] 0.2310331\n\nBetweenness\nBetweenness represents the number of geodesics on which a node sits.\n\n\n#calculate betweenness centrality: igraph\nigraph::betweenness(gd_network_ig, directed=FALSE)\n\n\n  Eric Andersen     John Barlow     Bob Bralove  Andrew Charles \n   0.000000e+00    6.708464e-01    1.216013e-01    0.000000e+00 \n    John Dawson    Willie Dixon    Jerry Garcia  Donna Godchaux \n   0.000000e+00    0.000000e+00    1.658436e+01    0.000000e+00 \n Keith Godchaux   Gerrit Graham     Frank Guida     Mickey Hart \n   9.345794e-03    0.000000e+00    0.000000e+00    3.738318e-02 \n  Bruce Hornsby   Robert Hunter Bill Kreutzmann       Ned Lagin \n   0.000000e+00    2.410682e+01    3.132042e+00    0.000000e+00 \n      Phil Lesh      Peter Monk   Brent Mydland     Dave Parker \n   9.039664e+01    0.000000e+00    1.306941e+00    0.000000e+00 \nRobert Petersen          Pigpen     Joe Royster   Rob Wasserman \n   0.000000e+00    4.402857e+01    0.000000e+00    9.459707e-01 \n       Bob Weir   Vince Welnick \n   1.216595e+02    0.000000e+00 \n\nTop Betweenness\nNow I want to add the closeness and betweenness to my centrality data frame and first, sort by and take a look at the nodes with the highest betweenness:\n\n\nShow code\n\ncentrality_gd <-data.frame(id=1:vcount(gd_network_ig),\n                        name=V(gd_network_ig)$name,\n                        degree_all=igraph::degree(gd_network_ig),\n                        degree_norm=igraph::degree(gd_network_ig,normalized=T),\n                        BC_power=power_centrality(gd_network_ig),\n                        EV_cent=centr_eigen(gd_network_ig,directed = F)$vector,\n                        reflect_EV=gd_reflective*centr_eigen(gd_network_ig,directed = F)$vector,\n                        derive_EV=gd_derived*centr_eigen(gd_network_ig,directed = F)$vector,\n                        close=closeness(gd_network_ig),\n                        between=betweenness(gd_network_ig, directed=FALSE))\n                        \n\nrow.names(centrality_gd)<-NULL\ncentrality_gd%>%\n  arrange(desc(between))%>%\n  slice(1:5)\n\n\n  id          name degree_all degree_norm   BC_power    EV_cent\n1 25      Bob Weir        213        8.52 -0.5430836 0.18725953\n2 17     Phil Lesh        149        5.96 -0.1806656 0.15133380\n3 22        Pigpen         95        3.80 -0.5257366 0.07985305\n4 14 Robert Hunter        313       12.52 -0.1735142 1.00000000\n5  7  Jerry Garcia        328       13.12 -0.2551417 0.96094165\n   reflect_EV  derive_EV      close   between\n1 0.040709421 0.14655011 0.01754386 121.65948\n2 0.022140576 0.12919322 0.01666667  90.39664\n3 0.009031643 0.07082141 0.01515152  44.02857\n4 0.371327549 0.62867245 0.01587302  24.10682\n5 0.332625452 0.62831620 0.01562500  16.58436\n\nThe most immediate observations I have is that the highest degree node (Jerry Garcia) is not the node with the highest scoring betweenness. That goes to Bob Weir, who is still a relatively high degree node, but significantly lower than Jerry Garcia given that his betweenness score is so much higher (~121 compared to Garcia’s ~16).\nI can make a guess that the two highest degree nodes, Jerry Garcia and Robert Hunter, having relatively low betweenness scores can be linked to the fact that the two wrote mostly together. Although the pair wrote the most songs in the originals catalog, Bob Weir wrote many songs with a variety of other songwrriters; giving him a higher level of betweenness.\nSimilarly, Phil Lesh and Pigpen, original band members who wrote relatively fewer songs, contributed to more songs that were written by the entire band, giving them more exposure to connections on the songs that they did write.\nTop Closeness\nNow a look at the top closeness scores:\n\n\nShow code\n\ncentrality_gd%>%\n  arrange(desc(close))%>%\n  slice(1:5)\n\n\n  id            name degree_all degree_norm   BC_power    EV_cent\n1 25        Bob Weir        213        8.52 -0.5430836 0.18725953\n2 17       Phil Lesh        149        5.96 -0.1806656 0.15133380\n3 14   Robert Hunter        313       12.52 -0.1735142 1.00000000\n4  7    Jerry Garcia        328       13.12 -0.2551417 0.96094165\n5 15 Bill Kreutzmann        100        4.00 -0.7011548 0.09223647\n   reflect_EV  derive_EV      close    between\n1 0.040709421 0.14655011 0.01754386 121.659478\n2 0.022140576 0.12919322 0.01666667  90.396640\n3 0.371327549 0.62867245 0.01587302  24.106816\n4 0.332625452 0.62831620 0.01562500  16.584364\n5 0.009710558 0.08252591 0.01538462   3.132042\n\nThis evaluation is more difficult as the range is made up of much less clearly defined scores.\nNetwork Constraint (Burt)\nConstraint is a measure of the redundancy of a node’s connections. It is bound between 0 and 1, with 0 being a complete lack, and 1 being complete redundancy.\n\n\nShow code\n\nconstraint(gd_network_ig)\n\n\n  Eric Andersen     John Barlow     Bob Bralove  Andrew Charles \n      1.0000000       0.6706222       0.4989170       1.0000000 \n    John Dawson    Willie Dixon    Jerry Garcia  Donna Godchaux \n      1.2945238       0.7040590       0.5061908       0.4514219 \n Keith Godchaux   Gerrit Graham     Frank Guida     Mickey Hart \n      0.5143887       1.0000000       0.8224000       0.5294014 \n  Bruce Hornsby   Robert Hunter Bill Kreutzmann       Ned Lagin \n      0.0000000       0.6332636       0.5159787       1.0000000 \n      Phil Lesh      Peter Monk   Brent Mydland     Dave Parker \n      0.4521996       1.0000000       0.9325133       0.5591083 \nRobert Petersen          Pigpen     Joe Royster   Rob Wasserman \n      0.7134697       0.5404552       0.8224000       0.4756234 \n       Bob Weir   Vince Welnick \n      0.3367355       0.5216319 \n\nFinally, I’m going to save all of this data into a .csv file for future analysis.\n\n\nShow code\n\ncentrality_gd <-data.frame(id=1:vcount(gd_network_ig),\n                        name=V(gd_network_ig)$name,\n                        degree_all=igraph::degree(gd_network_ig),\n                        degree_norm=igraph::degree(gd_network_ig,normalized=T),\n                        BC_power=power_centrality(gd_network_ig),\n                        EV_cent=centr_eigen(gd_network_ig,directed = F)$vector,\n                        reflect_EV=gd_reflective*centr_eigen(gd_network_ig,directed = F)$vector,\n                        derive_EV=gd_derived*centr_eigen(gd_network_ig,directed = F)$vector,\n                        close=closeness(gd_network_ig),\n                        between=betweenness(gd_network_ig, directed=FALSE),\n                        burt=constraint(gd_network_ig))\n\nwrite.csv(centrality_gd, file = \"centrality_df.csv\")\n\n\n\nCitations:\nAllan, Alex; Grateful Dead Lyric & Song Finder: https://whitegum.com/~acsa/intro.htm\nASCAP. 18 March 2022.\nDodd, David; The Annotated Grateful Dead Lyrics: http://artsites.ucsc.edu/gdead/agdl/\nSchofield, Matt; The Grateful Dead Family Discography: http://www.deaddisc.com/\nThis information is intended for private research only, and not for any commercial use. Original Grateful Dead songs are ©copyright Ice Nine Music\n\n\n\n  \n    \n      Share:  \n      \n        \n      \n      \n        \n      \n    \n  \n\n\n",
    "preview": {},
    "last_modified": "2022-04-15T17:25:00-04:00",
    "input_file": {}
  },
  {
    "path": "posts/httpswwwkristinabecvarcomposts2022-04-04-dacss-697e-assignment-4/",
    "title": "DACSS 697E Assignment 4",
    "description": "Assignment 4 for DACSS 697E course 'Social and Political Network Analysis': \"Status & Eigenvector Centrality\"",
    "author": [
      {
        "name": "Kristina Becvar",
        "url": "https://www.kristinabecvar.com"
      }
    ],
    "date": "2022-04-15",
    "categories": [
      "networks",
      "homework",
      "grateful network"
    ],
    "contents": "\n\nContents\nNetwork Details\nAffiliation Matrix\nBipartite Projection\nNetwork Creation\nDyad & Triad Census\nTransitivity\nGeodesic Distance\nComponents\nDensity\n\nDegree Centrality\nIgraph\nStatnet\nSummary Statistics\nStatnet v. Igraph Degree Treatment\nOverall Eigenvector Score\nBonacich Power\nGraphing Centrality Scores\n\n\n\nNetwork Details\nI am continuing to use the Grateful Dead song writing data set that I am using in this series of posts to examine co-writing links and centrality.\nThe data set consists of the links between co-writers of songs played by the Grateful Dead over their 30-year touring career that I compiled.\nThere are 26 songwriters that contributed to the songs played over the course of the Grateful Dead history, resulting in 26 nodes in the dataset.\nThere are a total of 183 (updated and still under review!) unique songs played, and the varies combinations of co-writing combinations are now represented in a binary affiliation matrix.\nI have not weighted this version of the data; I am trying to build it from a binary affiliation matrix first, and hope to later add the number of times a given song was played live as a weight.\n\n\n\nAffiliation Matrix\nLoading the dataset and creating the network to begin this assignment:\n\n\nShow code\n\ngd_vertices <- read.csv(\"gd_nodes.csv\", header=T, stringsAsFactors=F)\ngd_affiliation <- read.csv(\"gd_affiliation_matrix.csv\", row.names = 1, header = TRUE, check.names = FALSE)\ngd_matrix <- as.matrix(gd_affiliation)\n\n\n\nInspecting the first 8 columns of the data structure in the affiliation matrix format:\n\n\nShow code\n\ndim(gd_matrix)\n\n\n[1]  26 183\n\nShow code\n\ngd_matrix[1:10, 1:4]\n\n\n               Alabama Getaway Alice D Millionaire Alligator Althea\nEric Andersen                0                   0         0      0\nJohn Barlow                  0                   0         0      0\nBob Bralove                  0                   0         0      0\nAndrew Charles               0                   0         0      0\nJohn Dawson                  0                   0         0      0\nWillie Dixon                 0                   0         0      0\nJerry Garcia                 1                   1         0      1\nDonna Godchaux               0                   0         0      0\nKeith Godchaux               0                   0         0      0\nGerrit Graham                0                   0         0      0\n\nBipartite Projection\nNow I can create the single mode network and examine the bipartite projection. After converting the matrix to a square adjacency matrix, I can look at the full matrix.\nI can also call the adjacency matrix count for co-writing incidences between certain songwriters, such as between writing partners Jerry Garcia and Robert Hunter and between John Barlow and Bob Weir.\n\n\nShow code\n\ngd_projection <- gd_matrix%*%t(gd_matrix)\ndim(gd_projection)\n\n\n[1] 26 26\n\nShow code\n\ngd_projection[1:10, 1:4]\n\n\n               Eric Andersen John Barlow Bob Bralove Andrew Charles\nEric Andersen              1           0           0              0\nJohn Barlow                0          26           1              0\nBob Bralove                0           1           3              0\nAndrew Charles             0           0           0              1\nJohn Dawson                0           0           0              0\nWillie Dixon               0           0           0              0\nJerry Garcia               0           0           0              0\nDonna Godchaux             0           0           0              0\nKeith Godchaux             0           0           0              0\nGerrit Graham              0           0           0              0\n\nShow code\n\ngd_projection[\"Jerry Garcia\", \"Robert Hunter\"]\n\n\n[1] 78\n\nShow code\n\ngd_projection[\"John Barlow\", \"Bob Weir\"]\n\n\n[1] 21\n\nNetwork Creation\nNow I will use this adjacency matrix to create both igraph and statnet network objects and take a look at their resulting features. This is a non-directed, unweighted dataset.\n\n\nShow code\n\n#Create Igraph and Statnet Objects\n\ngd_network_ig <- graph.adjacency(gd_projection,mode=\"undirected\") #igraph object\ngd_network_stat <- network(gd_projection, directed=F, matrix.type=\"adjacency\") #statnet object\n\n#Inspect New Objects\nprint(gd_network_stat)\n\n\n Network attributes:\n  vertices = 26 \n  directed = FALSE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 65 \n    missing edges= 0 \n    non-missing edges= 65 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nShow code\n\nigraph::vertex_attr_names(gd_network_ig)\n\n\n[1] \"name\"\n\nShow code\n\nigraph::edge_attr_names(gd_network_ig)\n\n\ncharacter(0)\n\nShow code\n\nhead(V(gd_network_ig)$name)\n\n\n[1] \"Eric Andersen\"  \"John Barlow\"    \"Bob Bralove\"   \n[4] \"Andrew Charles\" \"John Dawson\"    \"Willie Dixon\"  \n\nShow code\n\nis_directed(gd_network_ig)\n\n\n[1] FALSE\n\nShow code\n\nis_weighted(gd_network_ig)\n\n\n[1] FALSE\n\nShow code\n\nis_bipartite(gd_network_ig)\n\n\n[1] FALSE\n\nDyad & Triad Census\nLooking at the dyad/triad census info in igraph and statnet:\n\n\nShow code\n\nigraph::dyad.census(gd_network_ig)\n\n\n$mut\n[1] 738\n\n$asym\n[1] 0\n\n$null\n[1] -413\n\nShow code\n\nigraph::triad.census(gd_network_ig)\n\n\n [1] 1788    0  488    0    0    0    0    0    0    0  237    0    0\n[14]    0    0   87\n\nShow code\n\nsna::dyad.census(gd_network_stat)\n\n\n     Mut Asym Null\n[1,]  65    0  260\n\nShow code\n\nsna::triad.census(gd_network_stat)\n\n\n      003 012 102 021D 021U 021C 111D 111U 030T 030C 201 120D 120U\n[1,] 1451   0 825    0    0    0    0    0    0    0 237    0    0\n     120C 210 300\n[1,]    0   0  87\n\nKnowing this network has 26 vertices, I want to see if the triad census is working correctly by comparing the following data, which I can confirm it is here!\n\n\nShow code\n\n#possible triads in network\n26*25*24/6\n\n\n[1] 2600\n\nShow code\n\nsum(igraph::triad.census(gd_network_ig))\n\n\n[1] 2600\n\nTransitivity\nLooking next at the global v. average local transitivity of the network in igraph and confirming global transitivity in statnet and igraph (Statnet and igraph network transitivity = 0.5241, igraph local transitivity = 0.7756)\n\n\nShow code\n\n#network transitivity: statnet\ngtrans(gd_network_stat)\n\n\n[1] 0.5240964\n\nShow code\n\n#global clustering cofficient: igraph\ntransitivity(gd_network_ig, type=\"global\")\n\n\n[1] 0.5240964\n\nShow code\n\n#average local clustering coefficient: igraph\ntransitivity(gd_network_ig, type=\"average\")\n\n\n[1] 0.7755587\n\nThese transitivity results tells me that the average local network transitivity is significantly higher than the global transitivity, indicating, again from my still naive network knowledge, that the overall network is generally more loose, and that there is a more connected sub-network.\nGeodesic Distance\nLooking at the geodesic distance tells me that on average, I can confirm that the path length is just over 2, so on average, each node is two “stops” from each other on the geodesic path.\n\n\nShow code\n\naverage.path.length(gd_network_ig,directed=F)\n\n\n[1] 2.01\n\nComponents\nGetting a look at the components of the network comfirms that there are 2 components in the network, and 25 of the 26 nodes make up the giant component with 1 isolate.\n\n\nShow code\n\nnames(igraph::components(gd_network_ig))\n\n\n[1] \"membership\" \"csize\"      \"no\"        \n\nShow code\n\nigraph::components(gd_network_ig)$no \n\n\n[1] 2\n\nShow code\n\nigraph::components(gd_network_ig)$csize\n\n\n[1] 25  1\n\nDensity\nThe network density measure: First with just the call “graph.density” and then with adding “loops=TRUE”. In igraph, I know that its’ default output assumes that loops are not included but does not remove them, which wwe had corrected with the addition of “loops=TRUE” per the course tutorials when comparing output to statnet. In this case, the statnet output is far different, so I am not sure what is happening with this aspect of the network.\n\n\nShow code\n\ngraph.density(gd_network_ig, loops=TRUE)\n\n\n[1] 2.102564\n\nShow code\n\nnetwork.density(gd_network_stat)\n\n\n[1] 0.2\n\nDegree Centrality\nThe network degree measure: This gives me a clear output showing the degree of each particular node (songwriter). It is not surprising, knowing my subject matter, that Jerry Garcia is the highest degree node in this network as the practical and figurative head of the band. The other band members’ degree measures are not necessarily what I expected, though. I did not anticipate that his songwriting partner, Robert Hunter, would have a lower degree than band members Phil Lesh and Bob Weir. Further, I did not anticipate that the degree measure of band member ‘Pigpen’ would be so high given his early death in the first years of the band’s touring life.\n\n\nShow code\n\nigraph::degree(gd_network_ig)\n\n\n  Eric Andersen     John Barlow     Bob Bralove  Andrew Charles \n              3              81              14               3 \n    John Dawson    Willie Dixon    Jerry Garcia  Donna Godchaux \n              4               4             328              12 \n Keith Godchaux   Gerrit Graham     Frank Guida     Mickey Hart \n             16               3               4              36 \n  Bruce Hornsby   Robert Hunter Bill Kreutzmann       Ned Lagin \n              4             313             100               3 \n      Phil Lesh      Peter Monk   Brent Mydland     Dave Parker \n            149               3              41               7 \nRobert Petersen          Pigpen     Joe Royster   Rob Wasserman \n             13              95               4              10 \n       Bob Weir   Vince Welnick \n            213              13 \n\nShow code\n\nsna::degree(gd_network_stat)\n\n\n [1]  2  6 10  2  4  4 20 12 14  2  4 14  0 22 18  2 28  2  8 10  4 16\n[23]  4 10 34  8\n\nTo look further I will create a dataframe in igraph first, then statnet.\nIgraph\n\n\nShow code\n\nig_nodes<-data.frame(name=V(gd_network_ig)$name, degree=igraph::degree(gd_network_ig))\nhead(ig_nodes)\n\n\n                         name degree\nEric Andersen   Eric Andersen      3\nJohn Barlow       John Barlow     81\nBob Bralove       Bob Bralove     14\nAndrew Charles Andrew Charles      3\nJohn Dawson       John Dawson      4\nWillie Dixon     Willie Dixon      4\n\nStatnet\n\n\nShow code\n\nstat_nodes<-data.frame(name=gd_network_stat%v%\"vertex.names\", degree=sna::degree(gd_network_stat))\nhead(stat_nodes)\n\n\n            name degree\n1  Eric Andersen      2\n2    John Barlow      6\n3    Bob Bralove     10\n4 Andrew Charles      2\n5    John Dawson      4\n6   Willie Dixon      4\n\nThe igraph and statnet dataframes give very different results.\nSummary Statistics\nA quick look at the summary statistics confirms for me the minimum, maximum, median, and mean node degree data using each package.\n\n\nShow code\n\nsummary(ig_nodes)\n\n\n     name               degree      \n Length:26          Min.   :  3.00  \n Class :character   1st Qu.:  4.00  \n Mode  :character   Median : 12.50  \n                    Mean   : 56.77  \n                    3rd Qu.: 71.00  \n                    Max.   :328.00  \n\nShow code\n\nsummary(stat_nodes)\n\n\n     name               degree  \n Length:26          Min.   : 0  \n Class :character   1st Qu.: 4  \n Mode  :character   Median : 8  \n                    Mean   :10  \n                    3rd Qu.:14  \n                    Max.   :34  \n\nStatnet v. Igraph Degree Treatment\nI’m taking a look at the dataframe of the degree nodes, though since it is not a directed network the in and out degrees are not measured or relevant to our network. But it is still interesting to look at how igraph and statnet handle these datasets differently.\nStatnet\n\n\nShow code\n\n#create a dataframe of the total, in and out-degree of nodes in the stat network\ngd_stat_nodes <- data.frame(name=gd_network_stat%v%\"vertex.names\",\n    totdegree=sna::degree(gd_network_stat),\n    indegree=sna::degree(gd_network_stat, cmode=\"indegree\"),\n    outdegree=sna::degree(gd_network_stat, cmode=\"outdegree\"))\n\n#sort the top total degree of nodes in the stat network\narrange(gd_stat_nodes, desc(totdegree))%>%slice(1:5)\n\n\n             name totdegree indegree outdegree\n1        Bob Weir        34       17        17\n2       Phil Lesh        28       14        14\n3   Robert Hunter        22       11        11\n4    Jerry Garcia        20       10        10\n5 Bill Kreutzmann        18        9         9\n\nIgraph\n\n\nShow code\n\n#create a dataframe of the total, in and out-degree of nodes in the igraph network\ngd_ig_nodes<-data.frame(name=V(gd_network_ig)$name, \n                     degree=igraph::degree(gd_network_ig), mode=\"tot\",\n                     degree=igraph::degree(gd_network_ig), mode=\"in\",\n                     degree=igraph::degree(gd_network_ig), mode=\"out\")\n\n#sort the top total degree of nodes in the igraph network\narrange(gd_ig_nodes, desc(degree))%>%slice(1:5)\n\n\n                           name degree mode degree.1 mode.1 degree.2\nJerry Garcia       Jerry Garcia    328  tot      328     in      328\nRobert Hunter     Robert Hunter    313  tot      313     in      313\nBob Weir               Bob Weir    213  tot      213     in      213\nPhil Lesh             Phil Lesh    149  tot      149     in      149\nBill Kreutzmann Bill Kreutzmann    100  tot      100     in      100\n                mode.2\nJerry Garcia       out\nRobert Hunter      out\nBob Weir           out\nPhil Lesh          out\nBill Kreutzmann    out\n\nOverall Eigenvector Score\nThe Eigenvector centrality score for each node can be accessed by calling “vector”, and I can examine the top eigenvector scores in the igraph network:\n\n\n#Eigenvector centrality, top 10 in igraph network\n\neigen_ig <- eigen_centrality(gd_network_ig)\neigen_gd_ig <- data.frame(eigen_ig)\narrange(eigen_gd_ig[1], desc(vector))%>%slice(1:10)\n\n\n                    vector\nRobert Hunter   1.00000000\nJerry Garcia    0.96094165\nBob Weir        0.18725953\nPhil Lesh       0.15133380\nBill Kreutzmann 0.09223647\nPigpen          0.07985305\nMickey Hart     0.02523896\nJohn Barlow     0.01773746\nKeith Godchaux  0.01382256\nVince Welnick   0.01192303\n\nBonacich Power\nThe Bonacich power centrality score for each node can be accessed first just using defaults, including setting the index to “1”; then, I can “rescale” so that all of the scores sum “1”.\nTo display my results, I have to run the calculations and save the results as a dataframe to recall, since the command “bonpow()” is the same in igraph and statnet, which is causing trouble in running then knitting this file.\nI need to understand more nuance to the Bonacich power measure in order to fully understand what these two measures say about my specific network.\n\n\nShow code\n\n#Compute Bonpow scores\n\n#bp_ig1 <- bonpow(gd_network_ig) #with a default index of \"1\"\n#bonpow_gd_ig1 <- data.frame(bp_ig1)\n#write.csv(bonpow_gd_ig1, file = \"bonpow_gd_ig1.csv\")\n\n#Rescaled so that they sum to \"1\"\n\n#bp_ig2 <- bonpow(gd_network_ig, rescale = TRUE) #with a default index of \"1\"\n#bonpow_gd_ig2 <- data.frame(bp_ig2)\n#write.csv(bonpow_gd_ig2, file = \"bonpow_gd_ig2.csv\")\n\n\n\n\n\nShow code\n\n#Read in dataframe from previous chunk\n\nbon1 <- read.csv(\"bonpow_gd_ig1.csv\")\nbon2 <- read.csv(\"bonpow_gd_ig2.csv\")\n\ntotalbonpow <- merge(bon1,bon2)\n\ntotalbonpow\n\n\n                 X      bp_ig1      bp_ig2\n1   Andrew Charles  0.08220268  0.01522717\n2  Bill Kreutzmann -0.70115475 -0.12988143\n3      Bob Bralove -0.22064550 -0.04087222\n4         Bob Weir -0.54308358 -0.10060043\n5    Brent Mydland  0.52651322  0.09753095\n6    Bruce Hornsby  0.00000000  0.00000000\n7      Dave Parker -0.89144078 -0.16512988\n8   Donna Godchaux  1.23038839  0.22791631\n9    Eric Andersen -0.28021530 -0.05190689\n10     Frank Guida  3.07056607  0.56878957\n11   Gerrit Graham -0.28021530 -0.05190689\n12    Jerry Garcia -0.25514168 -0.04726227\n13     Joe Royster  3.07056607  0.56878957\n14     John Barlow -0.31662818 -0.05865199\n15     John Dawson  0.09708065  0.01798315\n16  Keith Godchaux  1.17992241  0.21856802\n17     Mickey Hart  0.15330194  0.02839755\n18       Ned Lagin  0.08220268  0.01522717\n19      Peter Monk  0.08220268  0.01522717\n20       Phil Lesh -0.18066559 -0.03346637\n21          Pigpen -0.52573655 -0.09738708\n22   Rob Wasserman -0.41469644 -0.07681809\n23   Robert Hunter -0.17351422 -0.03214166\n24 Robert Petersen  1.11819222  0.20713317\n25   Vince Welnick -0.07953575 -0.01473315\n26    Willie Dixon -0.43204347 -0.08003144\n\nCreating a data frame summarizing all of this information and doing basic visualization on a couple of them:\n\n\nShow code\n\ngd_adjacency <- as.matrix(as_adjacency_matrix(gd_network_ig))\ngd_adjacency_2 <- gd_adjacency %*% gd_adjacency\n\n#calculate portion of reflected centrality\ngd_reflective <- diag(as.matrix(gd_adjacency_2))/rowSums(as.matrix(gd_adjacency_2))\ngd_reflective <- ifelse(is.nan(gd_reflective),0,gd_reflective)\n\n#calculate derived centrality\ngd_derived <- 1-diag(as.matrix(gd_adjacency_2))/rowSums(as.matrix(gd_adjacency_2))\ngd_derived <- ifelse(is.nan(gd_derived),1,gd_derived)\n#create data frame of centrality measures\ncentrality_gd <-data.frame(id=1:vcount(gd_network_ig),\n                        name=V(gd_network_ig)$name,\n                        degree_all=igraph::degree(gd_network_ig),\n                        BC_power=power_centrality(gd_network_ig),\n                        degree_norm=igraph::degree(gd_network_ig,normalized=T),\n                        EV_cent=centr_eigen(gd_network_ig,directed = F)$vector,\n                        reflect_EV=gd_reflective*centr_eigen(gd_network_ig,directed = F)$vector,\n                        derive_EV=gd_derived*centr_eigen(gd_network_ig,directed = F)$vector)\n\nrow.names(centrality_gd)<-NULL\ncentrality_gd\n\n\n   id            name degree_all    BC_power degree_norm      EV_cent\n1   1   Eric Andersen          3 -0.28021530        0.12 6.852805e-04\n2   2     John Barlow         81 -0.31662818        3.24 1.773746e-02\n3   3     Bob Bralove         14 -0.22064550        0.56 8.992246e-03\n4   4  Andrew Charles          3  0.08220268        0.12 5.538095e-04\n5   5     John Dawson          4  0.09708065        0.16 7.176110e-03\n6   6    Willie Dixon          4 -0.43204347        0.16 7.041156e-04\n7   7    Jerry Garcia        328 -0.25514168       13.12 9.609417e-01\n8   8  Donna Godchaux         12  1.23038839        0.48 5.313952e-03\n9   9  Keith Godchaux         16  1.17992241        0.64 1.382256e-02\n10 10   Gerrit Graham          3 -0.28021530        0.12 6.852805e-04\n11 11     Frank Guida          4  3.07056607        0.16 2.932974e-04\n12 12     Mickey Hart         36  0.15330194        1.44 2.523896e-02\n13 13   Bruce Hornsby          4  0.00000000        0.16 2.574501e-17\n14 14   Robert Hunter        313 -0.17351422       12.52 1.000000e+00\n15 15 Bill Kreutzmann        100 -0.70115475        4.00 9.223647e-02\n16 16       Ned Lagin          3  0.08220268        0.12 5.538095e-04\n17 17       Phil Lesh        149 -0.18066559        5.96 1.513338e-01\n18 18      Peter Monk          3  0.08220268        0.12 5.538095e-04\n19 19   Brent Mydland         41  0.52651322        1.64 2.659589e-03\n20 20     Dave Parker          7 -0.89144078        0.28 5.385443e-03\n21 21 Robert Petersen         13  1.11819222        0.52 2.274921e-03\n22 22          Pigpen         95 -0.52573655        3.80 7.985305e-02\n23 23     Joe Royster          4  3.07056607        0.16 2.932974e-04\n24 24   Rob Wasserman         10 -0.41469644        0.40 5.146870e-03\n25 25        Bob Weir        213 -0.54308358        8.52 1.872595e-01\n26 26   Vince Welnick         13 -0.07953575        0.52 1.192303e-02\n     reflect_EV    derive_EV\n1  8.512801e-06 0.0006767677\n2  4.171627e-03 0.0135658315\n3  2.393769e-04 0.0087528693\n4  9.466828e-06 0.0005443426\n5  4.752391e-05 0.0071285863\n6  1.242557e-05 0.0006916900\n7  3.326255e-01 0.6283162014\n8  1.213231e-04 0.0051926286\n9  2.487863e-04 0.0135737779\n10 8.512801e-06 0.0006767677\n11 1.113787e-05 0.0002821595\n12 1.390973e-03 0.0238479844\n13 1.593739e-17 0.0000000000\n14 3.713275e-01 0.6286724511\n15 9.710558e-03 0.0825259133\n16 9.466828e-06 0.0005443426\n17 2.214058e-02 0.1291932241\n18 9.466828e-06 0.0005443426\n19 6.119022e-04 0.0020476869\n20 4.829994e-05 0.0053371431\n21 1.438169e-04 0.0021311045\n22 9.031643e-03 0.0708214079\n23 1.113787e-05 0.0002821595\n24 1.077879e-04 0.0050390825\n25 4.070942e-02 0.1465501114\n26 3.311952e-04 0.0115918330\n\nGraphing Centrality Scores\n\n\nShow code\n\nattach(centrality_gd)\nbreaks<-round(vcount(gd_network_ig))\nhist(degree_all,breaks=breaks,\n     main=paste(\"Distribution of Total Degree Scores in GD Songwriters \",sep=\"\"),\n     xlab=\"Total Degree Score\")\n\n\n\nShow code\n\nhist(EV_cent,breaks=breaks,\n     main=paste(\"Distribution of Eigenvector Centrality Scores in GD Songwriters \",sep=\"\"),\n    xlab=\"Eigenvector Centrality Score\")\n\n\n\nShow code\n\nhist(BC_power,breaks=breaks,\n     main=paste(\"Distribution of Bonacich Power Scores in GD Songwriters\",sep=\"\"),\n     xlab=\"Bonacich Power Score\")\n\n\n\n\nI can independently look at the correlations between all scores now. Using prompts from this week’s tutorial, it looks that all of the variables except Bonacich power are strongly correlated, so I think I’ll want to begin subsetting my network to get more meaningful interpretations.\n\n\nShow code\n\nnames(centrality_gd) #Find the columns we want to run the correlation on\n\n\n[1] \"id\"          \"name\"        \"degree_all\"  \"BC_power\"   \n[5] \"degree_norm\" \"EV_cent\"     \"reflect_EV\"  \"derive_EV\"  \n\nShow code\n\ncols<-c(3:8) #All except the id and name in this instance\ncorMat<-cor(centrality_gd[,cols],use=\"complete.obs\") #Specify those in the bracket\ncorMat #Let's look at it, which variables are most strongly correlated?\n\n\n            degree_all   BC_power degree_norm    EV_cent reflect_EV\ndegree_all   1.0000000 -0.2782755   1.0000000  0.9131592  0.8729045\nBC_power    -0.2782755  1.0000000  -0.2782755 -0.1782509 -0.1481903\ndegree_norm  1.0000000 -0.2782755   1.0000000  0.9131592  0.8729045\nEV_cent      0.9131592 -0.1782509   0.9131592  1.0000000  0.9946549\nreflect_EV   0.8729045 -0.1481903   0.8729045  0.9946549  1.0000000\nderive_EV    0.9314936 -0.1943027   0.9314936  0.9983162  0.9869907\n             derive_EV\ndegree_all   0.9314936\nBC_power    -0.1943027\ndegree_norm  0.9314936\nEV_cent      0.9983162\nreflect_EV   0.9869907\nderive_EV    1.0000000\n\nHowever, I will also make a pretty visualization of the correlation matrix, just because.\n\n\nlibrary(corrplot)\ncorrplot(corMat)\n\n\n\n\nCitations:\nAllan, Alex; Grateful Dead Lyric & Song Finder: https://whitegum.com/~acsa/intro.htm\nASCAP. 18 March 2022.\nDodd, David; The Annotated Grateful Dead Lyrics: http://artsites.ucsc.edu/gdead/agdl/\nSchofield, Matt; The Grateful Dead Family Discography: http://www.deaddisc.com/\nPhoto by Grateful Dead Productions\nThis information is intended for private research only, and not for any commercial use. Original Grateful Dead songs are ©copyright Ice Nine Music\n\n\n\n  \n    \n      Share:  \n      \n        \n      \n      \n        \n      \n    \n  \n\n\n",
    "preview": "posts/httpswwwkristinabecvarcomposts2022-04-04-dacss-697e-assignment-4/distill-preview.png",
    "last_modified": "2022-04-15T17:25:04-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpswwwkristinabecvarcomposts2022-04-03-dacss-697e-assignment-3/",
    "title": "DACSS 697E Assignment 3",
    "description": "Assignment 3 for DACSS 697E course 'Social and Political Network Analysis': \"Grateful Research: Creating a Network\"",
    "author": [
      {
        "name": "Kristina Becvar",
        "url": "https://www.kristinabecvar.com"
      }
    ],
    "date": "2022-04-15",
    "categories": [
      "networks",
      "homework",
      "grateful network"
    ],
    "contents": "\n\nContents\nNetwork Creation\nPurpose\nFirst Try - A Miss\nRegouping\nNetwork Creation\n\nNetwork Details\nVisualizing the Network\nDyad and Triad Census\nTransitivity\nGeodesic Distance\nComponents\nDensity\nDegree\nSummary Statistics\nPlotting the Network\nBetter Plotting\nAdding More Detail\n\n\n\nNetwork Creation\nPurpose\nFor my final project, I am using a data set that is somewhat similar in structure to that of my final project to try and get a feel for the process of creating the appropriate network. After recovering data from thousands of New York Times articles pulled through their API on Afghanistan from a 2-year period, I will be analyzing the network of article authorship and themes of articles. To understand the process, I am using for my assignment a data set of co-writers of songs played by the Grateful Dead over their 30-year touring career that I compiled. While compiling the data, I added an attribute that represents the connections between co-writers as songs with the added observation of the number of times each song was played live. The nature of the band was that of a collaborative subculture where the energy of the live shows reflected the crowd’s buy-in to the songs being played. Since the band was primarily one whose popularity was measured by ticket sales, not album sales. I’m still not sure if that will serve appropriately as a ‘weight’ for the network data, so I need to explore the process more thoroughly.\n\n\n\nFirst Try - A Miss\nUnderstanding this as an affiliation network, I first created a matrix linking actors (songwriters) to an event (songs). I began by assigning a unique ID to each actor and event. Taking the data I have pulled from my research, I created an affiliation spreadsheet with the songwriters as rows and the songs as columns. When a songwriter was affiliated with a song, there was a number in that matrix spot. However, I struggled to get this affiliation data into a network in R because I was using weights incorrectly, so I took a different approach.\nRegouping\nIn this example, I used a node list where unique IDs are numbers which correspond to the name of a songwriter.\nThe edgelist is in a separate spreadsheet where the first two columns are the IDs of the source and the target node (songwriter ID), regardless of whether the network is directed, for each edge. Each row contains an observation of a connection between writers for a given song, and since there are multiple collaborations, there may be multiple rows of writer combinations for a given song ID. If there was only one writer on a song, that songwriter’s ID is indicated in both the source and target column for that song.\nThe following columns are edge attributes. In my edgelist, I have the two songwriters representing the co-writing relationship in columns “1” and “2”, the song ID in column “3”, the song name in column “4”, and the number of times the corresponding song was played live is indicated in column “5”.\nI have NOT utilized the number of times the song was played live as a network weight at this point. Additionally, this edgelist format is not the ideal format, but it is the first step in the process I am working through to utilize different methods of working through the data.\nNetwork Creation\n\n\n# Loading nodes and vertices\ngd_vertices <- read.csv(\"gd_nodes.csv\")\ngd_edgelist <- read.csv(\"gd_clean_data.csv\")\n\n\n\nConverting network data into igraph objects using the “graph.data.frame: function, which takes two data frames: d and vertices.\n“d” describes the edges of the network and “vertices” the nodes.\n\n\nset.seed(1234)\ngrateful_data <- graph_from_data_frame(d = gd_edgelist, vertices = gd_vertices, directed = FALSE)\n\n\n\nNetwork Details\nNow to check the vertices and edges in the graph I’ve created to ensure they represent the data accurately, and confirm that all of the attributes have been represented properly:\n\n\nhead(V(grateful_data)$name)\n\n\n[1] \"Eric Andersen\"  \"John Barlow\"    \"Bob Bralove\"   \n[4] \"Andrew Charles\" \"John Dawson\"    \"Willie Dixon\"  \n\nhead(E(grateful_data)$song.id)\n\n\n[1] 1 2 2 2 2 2\n\nhead(E(grateful_data)$song.name)\n\n\n[1] \"Alabama Getaway\"     \"Alice D Millionaire\" \"Alice D Millionaire\"\n[4] \"Alice D Millionaire\" \"Alice D Millionaire\" \"Alice D Millionaire\"\n\nhead(E(grateful_data)$weight)\n\n\nNULL\n\nis_directed(grateful_data)\n\n\n[1] FALSE\n\nis_weighted(grateful_data)\n\n\n[1] FALSE\n\nis_bipartite(grateful_data)\n\n\n[1] FALSE\n\nigraph::vertex_attr_names(grateful_data)\n\n\n[1] \"name\"\n\nigraph::edge_attr_names(grateful_data)\n\n\n[1] \"song.id\"      \"song.name\"    \"times.played\"\n\nVisualizing the Network\n\n\nShow code\n\nplot(grateful_data)\n\n\n\n\nIt’s basically plotting what I want it to illustrate, though I will need to do a lot more work to make the graph represent anything meaningful!\nDyad and Triad Census\nFinishing the look at the basic network information such as the dyad and triad census: I have 558 mutual dyads and null value of “-233”, with a warning that calling a dyad census on an undirected graph. This does indicate to me that the edgelist format is not the best representation of this data.\n\n\nShow code\n\nigraph::dyad.census(grateful_data)\n\n\n$mut\n[1] 558\n\n$asym\n[1] 0\n\n$null\n[1] -233\n\nShow code\n\nigraph::triad.census(grateful_data)\n\n\n [1] 2043    0  233    0    0    0    0    0    0    0  237    0    0\n[14]    0    0   87\n\nKnowing this network has 26 vertices, I want to see if the triad census is working correctly by comparing the following data, which I can confirm using this calculation.\n\n\nShow code\n\n#possible triads in network\n26*25*24/6\n\n\n[1] 2600\n\nShow code\n\nsum(igraph::triad.census(grateful_data))\n\n\n[1] 2600\n\nTransitivity\nLooking next at the global v. average local transitivity of the network:\n\n\nShow code\n\n#get global clustering cofficient: igraph\ntransitivity(grateful_data, type=\"global\")\n\n\n[1] 0.5240964\n\nShow code\n\n#get average local clustering coefficient: igraph\ntransitivity(grateful_data, type=\"average\")\n\n\n[1] 0.7755587\n\nThis transitivity tells me that the average network transitivity is significantly higher than the global transitivity, indicating, from my still naive network knowledge, that the overall network is generally more loose, and that there is a more connected sub-network.\nGeodesic Distance\nLooking at the geodesic distance tells me that on average, the path length is just over 2.\n\n\nShow code\n\naverage.path.length(grateful_data,directed=F)\n\n\n[1] 2.01\n\nComponents\nGetting a look at the components of the network shows that there are 2 components in the network, and 25 of the 26 nodes make up the giant component with 1 isolate.\n\n\nShow code\n\nnames(igraph::components(grateful_data))\n\n\n[1] \"membership\" \"csize\"      \"no\"        \n\nShow code\n\nigraph::components(grateful_data)$no \n\n\n[1] 2\n\nShow code\n\nigraph::components(grateful_data)$csize\n\n\n[1] 25  1\n\nThis is a great start - now I can get to looking at the network density, centrality, and centralization.\nDensity\nThe network density measure: First with just the call “graph.density” and then with adding “loops=TRUE”. Since I’m using igraph, I know that its’ default output assumes that loops are not included but does not remove them, which can be corrected with the addition of “loops=TRUE” per the course tutorials when comparing output to statnet. This gives me confidence that my network density is closer to 1.58.\n\n\nShow code\n\ngraph.density(grateful_data)\n\n\n[1] 1.716923\n\nShow code\n\ngraph.density(grateful_data, loops=TRUE)\n\n\n[1] 1.589744\n\nDegree\nThe network degree measure: This gives me a clear output showing the degree of each particular node (songwriter). It is not suprising, knowing my subject matter, that Jerry Garcia is the highest degree node in this network as the practical and figurative head of the band. The other band members’ degree measures are not necessarily what I expected, though. I did not anticipate that his songwriting partner, Robert Hunter, would have a lower degree than band members Phil Lesh and Bob Weir. Further, I did not anticipate that the degree measure of band member ‘Pigpen’ would be so high given his early death in the first years of the band’s touring life.\n\n\nShow code\n\nigraph::degree(grateful_data)\n\n\n  Eric Andersen     John Barlow     Bob Bralove  Andrew Charles \n              1              30              12               1 \n    John Dawson    Willie Dixon    Jerry Garcia  Donna Godchaux \n              2               2             215              16 \n Keith Godchaux   Gerrit Graham     Frank Guida     Mickey Hart \n             19               1               2              25 \n  Bruce Hornsby   Robert Hunter Bill Kreutzmann       Ned Lagin \n              4             136             121               1 \n      Phil Lesh      Peter Monk   Brent Mydland     Dave Parker \n            158               1              24              10 \nRobert Petersen          Pigpen     Joe Royster   Rob Wasserman \n              5             119               2              10 \n       Bob Weir   Vince Welnick \n            188              11 \n\nTo look further I will create a dataframe for easier review going forward.\n\n\nShow code\n\ngrateful_nodes<-data.frame(name=V(grateful_data)$name, degree=igraph::degree(grateful_data))\nhead(grateful_nodes)\n\n\n                         name degree\nEric Andersen   Eric Andersen      1\nJohn Barlow       John Barlow     30\nBob Bralove       Bob Bralove     12\nAndrew Charles Andrew Charles      1\nJohn Dawson       John Dawson      2\nWillie Dixon     Willie Dixon      2\n\nSummary Statistics\nA quick look at the summary statistics confirms for me the minimum, maximum, median, and mean node degree data.\n\n\nShow code\n\nsummary(grateful_nodes)\n\n\n     name               degree      \n Length:26          Min.   :  1.00  \n Class :character   1st Qu.:  2.00  \n Mode  :character   Median : 10.50  \n                    Mean   : 42.92  \n                    3rd Qu.: 28.75  \n                    Max.   :215.00  \n\nPlotting the Network\nNow I want to take a step back and try to visually represent this data better.\n\n\nShow code\n\n# Community detection algoritm \ncommunity <- cluster_louvain(grateful_data) \n\n# Attach communities to relevant vertices\nV(grateful_data)$color <- community$membership \n\n# Graph layout\nlayout <- layout.random(grateful_data) \n\n# igraph plot \nplot(grateful_data, layout = layout)\n\n\n\n\nBetter Plotting\nBetter, but not quite.\n\n\nShow code\n\nggraph(grateful_data, layout = \"fr\") +\n  geom_edge_link() + \n  geom_node_point(aes(color = factor(color))) + \n  geom_node_text(aes(label = name), repel = TRUE) +\n  theme_void() +\n  theme(legend.position = \"none\") \n\n\n\n\nAdding More Detail\nThat is starting to look more meaningful!\n\n\nShow code\n\n# Set size to degree centrality \nV(grateful_data)$size = degree(grateful_data)\n\n# Additional customisation for better legibility \nggraph(grateful_data, layout = \"fr\") +\n  geom_edge_arc(strength = 0.2, width = 0.5, alpha = 0.15) + \n  geom_node_point(aes(size = size, color = factor(color))) + \n  geom_node_text(aes(label = name, size = size), repel = TRUE) +\n  theme_void() +\n  theme(legend.position = \"none\") \n\n\n\n\nThere is a lot more to do, but this is a great start.\nCitations:\nAllan, Alex; Grateful Dead Lyric & Song Finder: https://whitegum.com/~acsa/intro.htm\nASCAP. 18 March 2022.\nDodd, David; The Annotated Grateful Dead Lyrics: http://artsites.ucsc.edu/gdead/agdl/\nSchofield, Matt; The Grateful Dead Family Discography: http://www.deaddisc.com/\nThis information is intended for private research only, and not for any commercial use. Original Grateful Dead songs are ©copyright Ice Nine Music\n\n\n\n  \n    \n      Share:  \n      \n        \n      \n      \n        \n      \n    \n  \n\n\n",
    "preview": "posts/httpswwwkristinabecvarcomposts2022-04-03-dacss-697e-assignment-3/distill-preview.png",
    "last_modified": "2022-04-15T17:25:07-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsrpubscomburnworthj886887/",
    "title": "Elitism of the Supreme Court: Liberals v. Conservatives",
    "description": "\"After the feedback about this homework, I hopefully fixed my dataset. A tie now consists of a Justice and the school they attened and every school they have hired a clerk from. This solved my issue from before where there was limited connections. \n\nMy results were chaotic involving the entire history of Justices. I decided to focus on the current Justices on the Supreme Court. Further, I thought it would be interesting to split up and compare networks of conservative and liberal Justices(based on the party of the appointing president).\n\nThe Democrat Appointed Justices Network has 27 nodes, is directed, and has 243 total edges. The REpublican Appointed Justices Network has 35 nodes, is directed, and has 334 total edges.\"",
    "author": [
      {
        "name": "Justin Burnworth",
        "url": {}
      }
    ],
    "date": "2022-04-11",
    "categories": [],
    "contents": "\n\n\n\n\n\n\n\n\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 1 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 23.45622\n\n“There is a tiny possibility that the Democrat Appointed Justices Network transitivity observed value of 1 could be randomly generated conditional on only the size of the network, meaning that the observed transitivity is higher than would be expected from a random network. It is 23.46 standard deviations from what we would expect.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 1 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 23.45622\n\n“The Republican Appointed Justices Network is the exact same as the Demcorats.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 1 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 22.03544\n\n“The Democrat Appointed Justices network transitivity is 22.03 standard deviations from what we would expect compared to null conditional on size.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 1 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 29.37328\n\n“The Republican Appointed Justices network transitivity is 29.37 standard deviations from what we would expect compared to null conditional on size.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 2.636095 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 50.64118\n\n“The Democrat Appointed Justices network have a observed value of 2.64 degree centralization which is 52.68 standard deviations what we would expect from a random network null conditional on size.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 2.163495 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 48.32089\n\n“The Republican Appointed Justices network have a observed value of 2.16 degree centralization which is 49.29 standard deviations what we would expect from a random network null conditional on size.”\n\n\n[1] -3.406754\n\n“The Democrat Appointed Justices network has an observed value of 0 which is -3.01 standard deviations from what we would expect from a random network null conditional on size.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 0 \nPr(X>=Obs): 1 \nPr(X<=Obs): 0 \n\n[1] -3.404384\n\n“The Republican Appointed Justices network has an observed value of 0 which is -4.20 standard deviations from what we would expect from a random network null conditional on size.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: edges \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 1 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 57.79646\n\n“The Democrat Appointed Justices network has an observed value of 1 which is 57.81 standard deviations from what we would expect from a random network null conditional on size.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: edges \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 1 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 61.3773\n\n“The Republican Appointed Justices network has an observed value of 1 which is 60.39 standard deviations from what we would expect from a random network null conditional on size.”\n\n\n\n",
    "preview": "posts/httpsrpubscomburnworthj886887/distill-preview.png",
    "last_modified": "2022-04-11T16:43:19-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsyli210813githubiosocialnetworkanalysishw9/",
    "title": "Homework 9",
    "description": "Week 9 Assignment: Network Statistics.",
    "author": [
      {
        "name": "Yifan Li",
        "url": {}
      }
    ],
    "date": "2022-04-11",
    "categories": [],
    "contents": "\n\n\n\n\n\n\n\n\n\nDescriptive Statistics\n\n[1] FALSE\n[1] TRUE\n[1] TRUE\n\nThe original dataset is the trade dataset version 4 from the Correlates of War Project. In this subject I only use trade data of year 2014. The format is edgelist. The nodes are countries, and the ties are the trading relations between countries in 2014. The network is directed and weighted.\nLet’s look at some basic descriptive facts.\n\n[1] 186\n[1] 22451\n[1] 241.4086\n[1] 0.6524557\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n     0.0      0.2      4.9    813.1     78.5 472525.2 \n\nThe network in 2014 has 186 nodes, i.e. 186 countries involed in the trading network. There are 22451 egdes. Each country has 241 connected edges on average. On average, one country import 813 million dollars of good from another country each year. 65% of potential ties exit.\nLet’s classify all dyads and traids in the network:\n\n$mut\n[1] 9933\n\n$asym\n[1] 2585\n\n$null\n[1] 4687\n [1]  75574  62420  92513  11021   9514  11233  60137  45246   5530\n[10]    788 188669  14094   9006  15882 147383 306230\n[1] 0.07161783\n[1] 0.3484117\n[1] 1\n\nThere are 9933 mutual bilateral trade relations, 2585 unilateral trade relations, and 4687 pairs of coutries have no trading in 2014.\n7% of the triads are empty, and 65% of them are triangle. The network is quite dense.\nCentrality Scores\nLet’s look at the distribution of nodes centrality.\n\n\n\nThe betweenness centrality and reflected centrality are right-skewed as expected. Limited coutries locate at the central bridging positions. But the bonachic-power and closeness show nearly normal distribution, and the eigenvector centrality and deprived centrality are highly left-skewed, which might show a decentralized network. The deprived centrality contribute to largest part of eigenvector centrality. Every country kind of plays as bridge in the network.\n\n\n\n\n Network attributes:\n  vertices = 186 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 22451 \n    missing edges= 0 \n    non-missing edges= 22451 \n\n Vertex attribute names: \n    vertex.names \n\n Edge attribute names not shown \n\nUsing CUG-tests to test network properties\nAfter learning statistics about the network, let’s test whether these statistics are significantly different from null hypothesis. Compare to null network conditioning on size is almost meaningless. The world market is too closely connected and dense. Let’s test against null hypothesis conditioning on density.\n\n\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: edges \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 0.7765289 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 490.4112\n\nThe observed network transitivity is 0.78. We can feel confident accepting the alternative hypothesis that the observed transitivity is clearly higher than would be expected from a random network.(p<0.001)\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: edges \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 11702.88 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 887366.5\n\nThe observed network degree centralization is 11702.88. We can feel confident accepting the alternative hypothesis that the observed 11702.88 is clearly higher than would be expected from a random network.(p<0.001)\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: edges \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 50 \n\nObserved Value: 0.007458064 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 129.5252\n\nThe observed network betweenness centralization is 0.0075. We can feel confident accepting the alternative hypothesis that the observed betweenness centralization is clearly higher than would be expected from a random network.(p<0.001)\nCompare to Simulated Networks\n\n\n\n\n\n\n\n                Observed   Simulated         SD   tvalue\ndensity      0.652455681 0.005376344 0.00000000      Inf\ntransitivity 0.776528929 0.000000000 0.00000000      Inf\nindegCent    0.343988313 0.142198977 0.05181549 3.894382\nbetwCent     0.007458064 0.002974834 0.00167135 2.682401\n\n\nThe density and transitivity scores are significantly higher than expected. (p>0.001) The indegree and betweenness centrality scores are also sighnificantly higher than simulation.(p>0.01)\nSince the density is very high, let’s model a preferential attachment network with higher average degree.\n\n                Observed Simulated SD tvalue\ndensity      0.652455681 0.5000000  0    Inf\ntransitivity 0.776528929 1.0000000  0   -Inf\nindegCent    0.343988313 0.5027027  0   -Inf\nbetwCent     0.007458064 0.0000000  0    Inf\n\n\nBased on PA model, the observed density and betweeness centrality are still significantly high compared with simulation, while transivity and indegree centrality are lower.(p<0.001)\nNotice that the mean of simulated transitivity score is 1.0, indicating a fully transitive network. I think it’s not a good null hypothesis.\nThen, simulate a preferential attachment network conditional on the degree distribution we observe, using the out.seq= option。\n\n                Observed   Simulated           SD     tvalue\ndensity      0.652455681 0.477390294 0.0000000000        Inf\ntransitivity 0.776528929 0.990193508 0.0005187225 -411.90536\nindegCent    0.343988313 0.513152374 0.0051016389  -33.15877\nbetwCent     0.007458064 0.001389953 0.0005487202   11.05866\n\n\nSimilarly, the observed density and betweeness centrality are still significantly high compared with simulation, while transivity and indegree centrality are lower. The mean of simulated transitivity score is also near 1.\nCompare with other network.\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] 0.9442986\n\n\n\nQAP Test Results\n\nEstimated p-values:\n    p(f(perm) >= f(d)): 0 \n    p(f(perm) <= f(d)): 1 \n\n\nThe world trade network in 2004 is very similar with trade2014, with a correlation of 0.94. It’s significantly higher than correlation between two random networks.(p>0.001) During the ten years, the trade partnership didn’t change much.\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] 0.5554877\n\n\n\nQAP Test Results\n\nEstimated p-values:\n    p(f(perm) >= f(d)): 0 \n    p(f(perm) <= f(d)): 1 \n\n\nThe correlation between trade 1964 and 2014 is much lower (0.56). It indicates the trade relationship does change a lot during the 50 years. But still, the score is significantly higher than random. (p>0.001) The trade network in 2014 can be predicted a lot by network in 1964.\n\n\n\n",
    "preview": "posts/httpsyli210813githubiosocialnetworkanalysishw9/distill-preview.png",
    "last_modified": "2022-04-11T16:43:40-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsnmilsteinumagithubiomyblogposts2022-04-11-networks-blog-post-9/",
    "title": "Networks Blog Post 9",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Noah Milstein",
        "url": {}
      }
    ],
    "date": "2022-04-11",
    "categories": [],
    "contents": "\n\n\n\nLoading the Networks\nPutting Network into\nNecessary Formats\n\n\n\nAdding Attributes\n\n\n\nBrokerage scores in the\n1000s\n\n\n\n\n\n\nBrokerage scores in the\n1100s\n\n\n\nBrokerage scores in the\n1200s\n\n\n\n\n\n\n\n\n\nInital Graphical\nRepresentation\n1000s GGplot\n\n\n\n1100s GGplot\n\n\n\n1200s GGplot\n\n\n\n\n\nwars_in_1000s_edgelist <- as.matrix(wars_in_1000s)\n\nwars_in_1000s_edgelist_network_edgelist <- graph.edgelist(wars_in_1000s_edgelist, directed=TRUE)\n\nwars_in_1000s.ig<-graph_from_data_frame(wars_in_1000s)\n\nwars_in_1000s_network <- asNetwork(wars_in_1000s.ig)\n\n\n\n\n\naspects_of_1000s_states <- read_excel(\"~/Desktop/Spring 2022/Networks/aspects_of_1000s_states.xlsx\")\n\ntotal_1000s <- merge(aspects_of_1000s_states, wars_in_1000s.nodes.stat_2, by=\"name\")\n\n\n\n\n\naspects_of_1100s_states <- read_excel(\"~/Desktop/Spring 2022/Networks/aspects_of_1100s_states.xlsx\")\n\ntotal_1100s <- merge(aspects_of_1100s_states, wars_in_1100s.nodes.stat_2, by=\"name\")\n\n\n\n\n\naspects_of_1200s_states <- read_excel(\"~/Desktop/Spring 2022/Networks/aspects_of_1200s_states.xlsx\")\n\ntotal_1200s <- merge(aspects_of_1200s_states, wars_in_1200s.nodes.stat_2, by=\"name\")\n\n\n\n\n\ntotal_1000s_brokerag_reg<-total_1000s\n\ntotal_1000s_brokerag_reg$win_rate <- (total_1000s_brokerag_reg$outdegree/total_1000s_brokerag_reg$totdegree)\n\ntotal_1000s_brokerag_reg$loss_rate <- (total_1000s_brokerag_reg$indegree/total_1000s_brokerag_reg$totdegree)\n\ntotal_1000s_brokerag_reg_binom <- total_1000s_brokerag_reg %>% mutate(more_win_or_loss = case_when(\n  win_rate < 0.5 ~ 0,\n    win_rate >= 0.5 ~ 1))\n\nFirst_1000s_regression <- glm(more_win_or_loss~.-name-totdegree-indegree-outdegree-dc-eigen.dc-win_rate-loss_rate, total_1000s_brokerag_reg_binom, family=binomial)\n\nFirst_1000s_regression\n\n\n\nCall:  glm(formula = more_win_or_loss ~ . - name - totdegree - indegree - \n    outdegree - dc - eigen.dc - win_rate - loss_rate, family = binomial, \n    data = total_1000s_brokerag_reg_binom)\n\nCoefficients:\n (Intercept)      Catholic         Islam      Orthodox      Buddhist  \n  -2.090e+01     1.446e-01    -7.108e-02    -4.043e-01    -8.572e-02  \n       Pagan      Tengrism        Shinto         Hindu     Shamanism  \n   5.506e-01    -5.656e+01     1.820e+00    -2.142e+00    -1.506e+00  \n       eigen         close            rc      eigen.rc    broker.tot  \n  -1.877e+03     5.146e+03    -3.979e+00     1.574e+03     2.378e+02  \nbroker.coord   broker.itin    broker.rep   broker.gate    broker.lia  \n  -9.610e+01    -9.449e+01    -7.164e+01    -2.810e+01    -1.298e+02  \n\nDegrees of Freedom: 101 Total (i.e. Null);  82 Residual\n  (8 observations deleted due to missingness)\nNull Deviance:      140.8 \nResidual Deviance: 4.53e-09     AIC: 40\n\n\n\nset.seed(292)\n\ntotal_1000s_for_regression <- total_1000s[,-c(1, 20:25)]\n\ntotal_1000s_for_regression$win_rate <- (total_1000s_for_regression$outdegree/total_1000s_for_regression$totdegree)\n\ntotal_1000s_for_regression$loss_rate <- (total_1000s_for_regression$indegree/total_1000s_for_regression$totdegree)\n\ntotal_1000s_for_regression <- total_1000s_for_regression %>% mutate(more_win_or_loss = case_when(\n  win_rate < 0.5 ~ 0,\n    win_rate >= 0.5 ~ 1))\n\nFirst_1000s_regression <- glm(more_win_or_loss~.-loss_rate-win_rate-totdegree-indegree-outdegree-dc-eigen.dc, total_1000s_for_regression, family=binomial)\n\nFirst_1000s_regression\n\n\n\nCall:  glm(formula = more_win_or_loss ~ . - loss_rate - win_rate - totdegree - \n    indegree - outdegree - dc - eigen.dc, family = binomial, \n    data = total_1000s_for_regression)\n\nCoefficients:\n(Intercept)     Catholic        Islam     Orthodox     Buddhist  \n   -15.1948      13.9008      12.7531      14.6893      15.0858  \n      Pagan     Tengrism       Shinto        Hindu    Shamanism  \n     0.9610      11.6691      16.0623       9.1358      -0.1497  \n      eigen        close           rc     eigen.rc  \n   -82.1100     256.5294      -3.3322     -17.3152  \n\nDegrees of Freedom: 109 Total (i.e. Null);  96 Residual\nNull Deviance:      152.3 \nResidual Deviance: 58.4     AIC: 86.4\n\n\n\nset.seed(6738)\n\nin_training<- sample(1:nrow(total_1000s_for_regression),  nrow(total_1000s_for_regression) * 0.7 )\n\ntraining_1000s <- total_1000s_for_regression[in_training,]\n\ntest_1000s <- total_1000s_for_regression[-in_training,]\n\nlm_1000s_binom_subset_1 <- glm(more_win_or_loss~.-loss_rate-win_rate-totdegree-indegree-outdegree-dc-eigen.dc, total_1000s_for_regression, family=binomial, subset = in_training )\n\nlogsitic_1_1000s_prob <- predict(lm_1000s_binom_subset_1, test_1000s,\ntype = \"response\")\n\nlog_preds_1<-ifelse(logsitic_1_1000s_prob >= 0.5, 1, 0)\n\nprediction_1_logs <-mean(log_preds_1 == test_1000s$more_win_or_loss)\n\nprediction_1_logs %>% kable()\n\n\nx\n0.9090909\n\n\n\nlibrary(glmnet)\nlibrary(MASS)\n\n\n\n\n\nset.seed(246)\n\nx_ridge <- model.matrix(more_win_or_loss ~ .-loss_rate-win_rate-totdegree-indegree-outdegree-dc-eigen.dc, total_1000s_for_regression)[, -1] \n\ny_ridge <- total_1000s_for_regression$more_win_or_loss\n\ngrid <- 10^seq(10, -2, length = 100)\n\nridge.mod <- glmnet(x_ridge, y_ridge, alpha = 0, lambda = grid)\n\ndim(coef(ridge.mod))\n\n\n[1]  14 100\n\n\n\nset.seed(729)\ntrain_ridge <- sample(1:nrow(x_ridge), nrow(x_ridge)*0.8 ) \n\ntest_ridge <- (-train_ridge)\n\ny.test_ridge <- y_ridge[test_ridge]\n\n\n\n\n\nset.seed(9292)\n\nridge.mod <- glmnet(x_ridge[train_ridge, ], y_ridge[train_ridge], \n                    alpha = 0, lambda = grid, thresh = 1e-12)\n\nridge.pred <- predict(ridge.mod, s = 4, newx = x_ridge[test_ridge,])\n\nmean((ridge.pred - y.test_ridge)^2) %>% kable()\n\n\nx\n0.2416376\n\n\n\nset.seed(231)\nridge.pred <- predict(ridge.mod, s = 0, newx = x_ridge[test_ridge, ], \n                      exact = T, x = x_ridge[train_ridge, ], y = y_ridge[train_ridge])\n\npredict(ridge.mod, s = 0, exact = T, type = \"coefficients\", \n        x = x_ridge[train_ridge, ], y = y_ridge[train_ridge])[1:14, ]\n\n\n(Intercept)    Catholic       Islam    Orthodox    Buddhist \n 0.21024033  0.21827317 -0.01160454  0.21312966  0.35601806 \n      Pagan    Tengrism      Shinto       Hindu   Shamanism \n 0.08955257  0.14069809  0.38278477 -0.07034364 -0.01038790 \n      eigen       close          rc    eigen.rc \n-4.61480591 12.51011844 -0.29977861  4.64835194 \n\n\n\nset.seed(9292)\n\ncv.out <- cv.glmnet(x_ridge[train_ridge, ], y_ridge[train_ridge], alpha = 0) \n\nplot(cv.out)\n\n\n\n\n\n\nset.seed(9292)\n\nbestlam <- cv.out$lambda.min\n\nbestlam\n\n\n[1] 0.415338\n\n\n\nset.seed(9292)\n\nridge.pred <- predict(cv.out, s = bestlam, newx = x_ridge[test_ridge,])\n\nmean((ridge.pred - y.test_ridge)^2) %>% kable()\n\n\nx\n0.174632\n\n\n\nset.seed(2897)\n\nx_lasso <- model.matrix(more_win_or_loss ~ .-loss_rate-win_rate-totdegree-indegree-outdegree-dc-eigen.dc, total_1000s_for_regression)[, -1] \n\ny_lasso <- total_1000s_for_regression$more_win_or_loss\n\ngrid <- 10^seq(10, -2, length = 100)\n\nlasso.mod <- glmnet(x_lasso, y_lasso, alpha = 0, lambda = grid)\n\ndim(coef(lasso.mod))\n\n\n[1]  14 100\n\n\n\nset.seed(729)\n\ntrain_lasso <- sample(1:nrow(x_ridge), nrow(x_ridge)*0.8 ) \n\ntest_lasso <- (-train_lasso)\n\ny.test_lasso <- y_lasso[test_lasso]\n\n\n\n\n\nset.seed(9292)\n\nlasso.mod <- glmnet(x_lasso[train_lasso, ], y_lasso[train_lasso], \n                    alpha = 1, lambda = grid)\n\nplot(lasso.mod)\n\n\n\n\n\n\nset.seed(1029)\n\ncv.out_2 <- cv.glmnet(x_lasso[train_lasso, ], y_lasso[train_lasso], alpha = 1) \n\nplot(cv.out_2)\n\n\n\n\n\n\nset.seed(1920)\n\nbestlam_2 <- cv.out_2$lambda.min\n\nlasso.pred <- predict(cv.out_2, s = bestlam_2, newx = x_ridge[test_ridge,])\n\nmean((lasso.pred - y.test_ridge)^2) %>% kable()\n\n\nx\n0.1749583\n\n\n\nset.seed(2739)\n\nout <- glmnet(x_lasso[train_lasso, ], y_lasso[train_lasso], \n              alpha = 1, lambda = grid)\n\nlasso.coef <- predict(out, type = \"coefficients\", s = bestlam_2)[1:14, ]\n\nlasso.coef\n\n\n(Intercept)    Catholic       Islam    Orthodox    Buddhist \n 0.42561685  0.05577020 -0.09275344  0.00000000  0.00000000 \n      Pagan    Tengrism      Shinto       Hindu   Shamanism \n 0.00000000  0.00000000  0.00000000  0.00000000  0.00000000 \n      eigen       close          rc    eigen.rc \n 0.00000000  3.22570629 -0.21240622  0.00000000 \n\nCommunity Grouping\nLabel Propagation 1000s:\nThe first community cluster below is done using label propagation.\nThis results in 39 groups\n\n\nset.seed(23)\ncomm.lab<-label.propagation.community(wars_in_1000s.ig)\n#Inspect clustering object\n# igraph::groups(comm.lab)\n\n\n\n\n\n\nWalktrap 1000s:\nWalktrap classification as seen below results in 19 distinct\ncommunities.\n\n\nset.seed(238)\n#Run clustering algorithm: fast_greedy\nwars_in_1000s.wt<-walktrap.community(wars_in_1000s.ig)\n\n#igraph::groups(wars_in_1000s.wt)\n\n\n\nAdding more steps resulted in 19 groups for both 10 and 20 steps.\n\n\n#Run & inspect clustering algorithm: 10 steps\n#igraph::groups(walktrap.community(wars_in_1000s.ig, steps=10)) \n#Run & inspect clustering algorithm: 20 steps\n#igraph::groups(walktrap.community(wars_in_1000s.ig ,steps=20))\n#Run & inspect clustering algorithm\n\n\n\n\n\n\nMachine\nLearning, Regression and Principle Components:\n\n\ntotal_1000s_for_PCA <- total_1000s_brokerag_reg_binom[-c(20:27)]\n\napply(total_1000s_for_PCA[-1], 2, mean)\n\n\n        Catholic            Islam         Orthodox         Buddhist \n     0.454545455      0.181818182      0.154545455      0.063636364 \n           Pagan         Tengrism           Shinto            Hindu \n     0.036363636      0.018181818      0.054545455      0.045454545 \n       Shamanism        totdegree         indegree        outdegree \n     0.009090909      2.754545455      1.336363636      1.418181818 \n           eigen            close               rc         eigen.rc \n     0.028058711      0.023546832      0.287358773      0.003637773 \n              dc         eigen.dc more_win_or_loss \n     0.712641227      0.024420939      0.481818182 \n\n\n\napply(total_1000s_for_PCA[-1], 2, var)\n\n\n        Catholic            Islam         Orthodox         Buddhist \n    0.2502085071     0.1501251043     0.1318598832     0.0601334445 \n           Pagan         Tengrism           Shinto            Hindu \n    0.0353628023     0.0180150125     0.0520433695     0.0437864887 \n       Shamanism        totdegree         indegree        outdegree \n    0.0090909091     8.9208507089     2.6656380317     6.3189324437 \n           eigen            close               rc         eigen.rc \n    0.0076304265     0.0019575460     0.1260782284     0.0004728954 \n              dc         eigen.dc more_win_or_loss \n    0.1260782284     0.0056490031     0.2519599666 \n\n\n\npr.out <- prcomp(total_1000s_for_PCA[-1], scale = TRUE)\n\n\n\n\n\nnames(pr.out)\n\n\n[1] \"sdev\"     \"rotation\" \"center\"   \"scale\"    \"x\"       \n\n\n\npr.out$center\n\n\n        Catholic            Islam         Orthodox         Buddhist \n     0.454545455      0.181818182      0.154545455      0.063636364 \n           Pagan         Tengrism           Shinto            Hindu \n     0.036363636      0.018181818      0.054545455      0.045454545 \n       Shamanism        totdegree         indegree        outdegree \n     0.009090909      2.754545455      1.336363636      1.418181818 \n           eigen            close               rc         eigen.rc \n     0.028058711      0.023546832      0.287358773      0.003637773 \n              dc         eigen.dc more_win_or_loss \n     0.712641227      0.024420939      0.481818182 \n\n\n\npr.out$scale\n\n\n        Catholic            Islam         Orthodox         Buddhist \n      0.50020846       0.38745981       0.36312516       0.24522122 \n           Pagan         Tengrism           Shinto            Hindu \n      0.18805000       0.13422002       0.22813016       0.20925221 \n       Shamanism        totdegree         indegree        outdegree \n      0.09534626       2.98677932       1.63267818       2.51374868 \n           eigen            close               rc         eigen.rc \n      0.08735231       0.04424416       0.35507496       0.02174616 \n              dc         eigen.dc more_win_or_loss \n      0.35507496       0.07515985       0.50195614 \n\n\n\n\n\n\nbiplot(pr.out, scale = 0)\n\n\n\n\n\n\nset.seed(172)\n\nggbiplot(pr.out, labels =  total_1000s_for_PCA$name, labels.size  =1.5)\n\n\n\n\n\n\npr.out$rotation = -pr.out$rotation \n\npr.out$x = -pr.out$x\n\nbiplot(pr.out, scale = 0)\n\n\n\n\n\n\npr.out$sdev\n\n\n [1] 2.217501e+00 1.681548e+00 1.239242e+00 1.211199e+00 1.065982e+00\n [6] 1.037692e+00 1.029507e+00 1.011117e+00 1.005425e+00 9.514802e-01\n[11] 8.848499e-01 7.782431e-01 6.162540e-01 4.426224e-01 2.541422e-01\n[16] 1.091189e-01 7.597269e-16 6.258811e-16 2.174635e-16\n\n\n\npr.var <- pr.out$sdev^2\n\npr.var\n\n\n [1] 4.917311e+00 2.827605e+00 1.535720e+00 1.467004e+00 1.136318e+00\n [6] 1.076804e+00 1.059884e+00 1.022359e+00 1.010879e+00 9.053146e-01\n[11] 7.829594e-01 6.056623e-01 3.797690e-01 1.959146e-01 6.458828e-02\n[16] 1.190694e-02 5.771849e-31 3.917271e-31 4.729037e-32\n\n\n\npve <- pr.var / sum(pr.var)\n\npve\n\n\n [1] 2.588059e-01 1.488213e-01 8.082739e-02 7.721075e-02 5.980622e-02\n [6] 5.667390e-02 5.578337e-02 5.380835e-02 5.320417e-02 4.764814e-02\n[11] 4.120839e-02 3.187696e-02 1.998784e-02 1.031129e-02 3.399383e-03\n[16] 6.266808e-04 3.037815e-32 2.061722e-32 2.488967e-33\n\n\n\npar(mfrow = c(1, 2))\nplot(pve, xlab = \"Principal Component\",\nylab = \"Proportion of Variance Explained\", ylim = c(0, 1),\ntype = \"b\")\n\nplot(cumsum(pve), xlab = \"Principal Component\",\nylab = \"Cumulative Proportion of Variance Explained\", ylim = c(0, 1), type = \"b\")\n\n\n\n\n\n\nnames(total_1200s)\n\n\n [1] \"name\"         \"Catholic\"     \"Islam\"        \"Orthodox\"    \n [5] \"Buddhist\"     \"Pagan\"        \"Tengrism\"     \"Shinto\"      \n [9] \"Hindu\"        \"Shamanism\"    \"totdegree\"    \"indegree\"    \n[13] \"outdegree\"    \"eigen\"        \"rc\"           \"eigen.rc\"    \n[17] \"dc\"           \"eigen.dc\"     \"broker.tot\"   \"broker.coord\"\n[21] \"broker.itin\"  \"broker.rep\"   \"broker.gate\"  \"broker.lia\"  \n\n\n\ntotal_1200s_brokerag_reg<-total_1200s\n\n\n\n\n\ntotal_1200s_brokerag_reg$win_rate <- (total_1200s_brokerag_reg$outdegree/total_1200s_brokerag_reg$totdegree)\n\n\n\n\n\ntotal_1200s_brokerag_reg$loss_rate <- (total_1200s_brokerag_reg$indegree/total_1200s_brokerag_reg$totdegree)\n\n\n\n\n\ntotal_1200s_brokerag_reg_binom <- total_1200s_brokerag_reg %>% mutate(more_win_or_loss = case_when(\n  win_rate < 0.5 ~ 0,\n    win_rate >= 0.5 ~ 1))\n\n\n\n\n\ntotal_1200s_for_PCA <- total_1200s_brokerag_reg_binom[-c(20:27)]\n\n\napply(total_1200s_for_PCA[-1], 2, mean)\n\n\n   Catholic       Islam    Orthodox    Buddhist       Pagan \n0.712500000 0.068750000 0.087500000 0.087500000 0.012500000 \n   Tengrism      Shinto       Hindu   Shamanism   totdegree \n0.025000000 0.000000000 0.006250000 0.000000000 3.918750000 \n   indegree   outdegree       eigen          rc    eigen.rc \n1.962500000 1.956250000 0.025567955 0.158754617 0.002192746 \n         dc    eigen.dc  broker.tot \n0.841245383 0.023375209 0.341581810 \n\n\n\napply(total_1200s_for_PCA[-1], 2, var)\n\n\n    Catholic        Islam     Orthodox     Buddhist        Pagan \n2.061321e-01 6.442610e-02 8.034591e-02 8.034591e-02 1.242138e-02 \n    Tengrism       Shinto        Hindu    Shamanism    totdegree \n2.452830e-02 0.000000e+00 6.250000e-03 0.000000e+00 2.666631e+01 \n    indegree    outdegree        eigen           rc     eigen.rc \n6.237579e+00 1.595405e+01 5.631476e-03 7.141295e-02 7.316162e-05 \n          dc     eigen.dc   broker.tot \n7.141295e-02 4.574350e-03 3.001236e+01 \n\n\n\n# I cannot scale variables with \n\ntotal_1200s_for_PCA<-total_1200s_for_PCA[-c(8,10)]\n\n\n\n\n\npr.out_2 <- prcomp(total_1200s_for_PCA[-1], scale = TRUE)\n\n\n\n\n\nnames(pr.out_2)\n\n\n[1] \"sdev\"     \"rotation\" \"center\"   \"scale\"    \"x\"       \n\n\n\npr.out_2$center\n\n\n   Catholic       Islam    Orthodox    Buddhist       Pagan \n0.712500000 0.068750000 0.087500000 0.087500000 0.012500000 \n   Tengrism       Hindu   totdegree    indegree   outdegree \n0.025000000 0.006250000 3.918750000 1.962500000 1.956250000 \n      eigen          rc    eigen.rc          dc    eigen.dc \n0.025567955 0.158754617 0.002192746 0.841245383 0.023375209 \n broker.tot \n0.341581810 \n\n\n\npr.out_2$scale\n\n\n   Catholic       Islam    Orthodox    Buddhist       Pagan \n0.454017704 0.253822971 0.283453545 0.283453545 0.111451261 \n   Tengrism       Hindu   totdegree    indegree   outdegree \n0.156615139 0.079056942 5.163943541 2.497514488 3.994251963 \n      eigen          rc    eigen.rc          dc    eigen.dc \n0.075043164 0.267232010 0.008553457 0.267232010 0.067633938 \n broker.tot \n5.478353760 \n\n\n\n\n\n\nbiplot(pr.out_2, scale = 0)\n\n\n\n\n\n\npr.out_2$rotation = -pr.out_2$rotation \n\npr.out_2$x = -pr.out_2$x\n\nbiplot(pr.out_2, scale = 0)\n\n\n\n\n\n\nset.seed(8192)\n\nggbiplot(pr.out_2, labels =  total_1200s_for_PCA$name, labels.size  =1.5)\n\n\n\n\n\n\npr.out$sdev\n\n\n [1] 2.217501e+00 1.681548e+00 1.239242e+00 1.211199e+00 1.065982e+00\n [6] 1.037692e+00 1.029507e+00 1.011117e+00 1.005425e+00 9.514802e-01\n[11] 8.848499e-01 7.782431e-01 6.162540e-01 4.426224e-01 2.541422e-01\n[16] 1.091189e-01 7.597269e-16 6.258811e-16 2.174635e-16\n\n\n\npr.var_2 <- pr.out_2$sdev^2\n\npr.var_2\n\n\n [1] 4.903737e+00 2.344663e+00 1.670548e+00 1.250176e+00 1.132904e+00\n [6] 1.097802e+00 1.011326e+00 9.460639e-01 8.661454e-01 5.139677e-01\n[11] 1.659928e-01 9.667541e-02 2.916516e-30 4.832251e-31 2.292490e-31\n[16] 1.889562e-32\n\n\n\npve_2 <- pr.var_2 / sum(pr.var_2)\n\npve_2\n\n\n [1] 3.064835e-01 1.465414e-01 1.044092e-01 7.813602e-02 7.080651e-02\n [6] 6.861260e-02 6.320785e-02 5.912899e-02 5.413409e-02 3.212298e-02\n[11] 1.037455e-02 6.042213e-03 1.822822e-31 3.020157e-32 1.432806e-32\n[16] 1.180977e-33\n\n\n\npar(mfrow = c(1, 2))\nplot(pve_2, xlab = \"Principal Component\",\nylab = \"Proportion of Variance Explained\", ylim = c(0, 1),\ntype = \"b\")\n\nplot(cumsum(pve_2), xlab = \"Principal Component\",\nylab = \"Cumulative Proportion of Variance Explained\", ylim = c(0, 1), type = \"b\")\n\n\n\n\nCUG 1000s\n\n\ntrans.cug<-cug.test(wars_1000s,FUN=gtrans,mode=\"digraph\",cmode=\"size\")\ntrans.cug\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 0.0984456 \nPr(X>=Obs): 1 \nPr(X<=Obs): 0 \n\n\n\nplot(trans.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\n(trans.cug$obs.stat-mean(trans.cug$rep.stat))/sd(trans.cug$rep.stat)\n\n\n[1] -88.00188\n\n\n\ncug.t<-function(cug.object){\n  (cug.object$obs.stat-mean(cug.object$rep.stat))/sd(cug.object$rep.stat)\n}\n\n\n\n\n\n#compare network transitivity to null conditional on size\ntrans.cug<-cug.test(wars_1000s,FUN=gtrans,mode=\"digraph\",cmode=\"size\", reps = 100)\ntrans.cug\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 0.0984456 \nPr(X>=Obs): 1 \nPr(X<=Obs): 0 \n\n\n\n#plot vs. simulation results\nplot(trans.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\ncug.t(trans.cug)\n\n\n[1] -83.27903\n\nCUG 1100s\n\n\ntrans.cug<-cug.test(wars_1100s,FUN=gtrans,mode=\"digraph\",cmode=\"size\")\ntrans.cug\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 0.1388889 \nPr(X>=Obs): 1 \nPr(X<=Obs): 0 \n\n\n\nplot(trans.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\n(trans.cug$obs.stat-mean(trans.cug$rep.stat))/sd(trans.cug$rep.stat)\n\n\n[1] -67.57014\n\n\n\ncug.t<-function(cug.object){\n  (cug.object$obs.stat-mean(cug.object$rep.stat))/sd(cug.object$rep.stat)\n}\n\n\n\n\n\n#compare network transitivity to null conditional on size\ntrans.cug<-cug.test(wars_1100s,FUN=gtrans,mode=\"digraph\",cmode=\"size\", reps = 100)\ntrans.cug\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 0.1388889 \nPr(X>=Obs): 1 \nPr(X<=Obs): 0 \n\n\n\n#plot vs. simulation results\nplot(trans.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\ncug.t(trans.cug)\n\n\n[1] -62.85368\n\nCUG 1200s\n\n\ntrans.cug<-cug.test(wars_1200s,FUN=gtrans,mode=\"digraph\",cmode=\"size\")\ntrans.cug\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 0.1111111 \nPr(X>=Obs): 1 \nPr(X<=Obs): 0 \n\n\n\nplot(trans.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\n(trans.cug$obs.stat-mean(trans.cug$rep.stat))/sd(trans.cug$rep.stat)\n\n\n[1] -120.9757\n\n\n\ncug.t<-function(cug.object){\n  (cug.object$obs.stat-mean(cug.object$rep.stat))/sd(cug.object$rep.stat)\n}\n\n\n\n\n\n#compare network transitivity to null conditional on size\ntrans.cug<-cug.test(wars_1200s,FUN=gtrans,mode=\"digraph\",cmode=\"size\", reps = 100)\ntrans.cug\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 0.1111111 \nPr(X>=Obs): 1 \nPr(X<=Obs): 0 \n\n\n\n#plot vs. simulation results\nplot(trans.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\ncug.t(trans.cug)\n\n\n[1] -123.9686\n\nCUG Test Centralization\n1000s\n\n\n#compare network degree centralization to null conditional on size\nc.degree.cug <-cug.test(wars_1000s,FUN=centralization,  FUN.arg=list(FUN=degree, cmode=\"indegree\"), mode=\"digraph\", cmode=\"size\") \n#plot vs simulation results\nplot(c.degree.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\ncug.t(c.degree.cug)\n\n\n[1] -3.691657\n\n\n\n#compare network betweenness centralization to null conditional on size\nb.degree.cug <-cug.test(wars_1000s,FUN=centralization,  FUN.arg=list(FUN=betweenness, cmode=\"directed\"), mode=\"digraph\", cmode=\"size\", reps=100) \n#plot vs simulation results\nplot(b.degree.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\ncug.t(b.degree.cug)\n\n\n[1] 52.41828\n\nCUG Test Centralization\n1200s\n\n\n#compare network degree centralization to null conditional on size\nc.degree.cug <-cug.test(wars_1100s,FUN=centralization,  FUN.arg=list(FUN=degree, cmode=\"indegree\"), mode=\"digraph\", cmode=\"size\") \n#plot vs simulation results\nplot(c.degree.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\ncug.t(c.degree.cug)\n\n\n[1] 0.1300734\n\n\n\n#compare network betweenness centralization to null conditional on size\nb.degree.cug <-cug.test(wars_1100s,FUN=centralization,  FUN.arg=list(FUN=betweenness, cmode=\"directed\"), mode=\"digraph\", cmode=\"size\", reps=100) \n#plot vs simulation results\nplot(b.degree.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\ncug.t(b.degree.cug)\n\n\n[1] 29.04174\n\nCUG Test Centralization\n1200s\n\n\n#compare network degree centralization to null conditional on size\nc.degree.cug <-cug.test(wars_1200s,FUN=centralization,  FUN.arg=list(FUN=degree, cmode=\"indegree\"), mode=\"digraph\", cmode=\"size\") \n#plot vs simulation results\nplot(c.degree.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\ncug.t(c.degree.cug)\n\n\n[1] -1.973945\n\n\n\n#compare network betweenness centralization to null conditional on size\nb.degree.cug <-cug.test(wars_1200s,FUN=centralization,  FUN.arg=list(FUN=betweenness, cmode=\"directed\"), mode=\"digraph\", cmode=\"size\", reps=100) \n#plot vs simulation results\nplot(b.degree.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\ncug.t(b.degree.cug)\n\n\n[1] 220.5521\n\nConditioning\non Different Network Properties 1000s\n\n\n#compare network transitivity to null conditional on dyads\ntrans.cug<-cug.test(wars_1000s,FUN=gtrans,mode=\"digraph\",cmode=\"dyad\")\ntrans.cug\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: dyad.census \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 0.0984456 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n\n\n#plot vs simulation results\nplot(trans.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\ncug.t(trans.cug)\n\n\n[1] 11.14202\n\n\n\n#compare network transitivity to null conditional on edges (density)\ntrans.cug<-cug.test(wars_1000s,FUN=gtrans,mode=\"digraph\",cmode=\"edges\", reps=100)\ntrans.cug\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: edges \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 0.0984456 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n\n\n#plot vs simulation results\nplot(trans.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\ncug.t(trans.cug)\n\n\n[1] 12.58383\n\nConditioning\non Different Network Properties 1100s\n\n\n#compare network transitivity to null conditional on dyads\ntrans.cug<-cug.test(wars_1100s,FUN=gtrans,mode=\"digraph\",cmode=\"dyad\")\ntrans.cug\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: dyad.census \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 0.1388889 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n\n\n#plot vs simulation results\nplot(trans.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\ncug.t(trans.cug)\n\n\n[1] 16.10525\n\n\n\n#compare network transitivity to null conditional on edges (density)\ntrans.cug<-cug.test(wars_1100s,FUN=gtrans,mode=\"digraph\",cmode=\"edges\", reps=100)\ntrans.cug\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: edges \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 0.1388889 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n\n\n#plot vs simulation results\nplot(trans.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\ncug.t(trans.cug)\n\n\n[1] 17.64935\n\nConditioning\non Different Network Properties 1200s\n\n\n#compare network transitivity to null conditional on dyads\ntrans.cug<-cug.test(wars_1200s,FUN=gtrans,mode=\"digraph\",cmode=\"dyad\")\ntrans.cug\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: dyad.census \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 0.1111111 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n\n\n#plot vs simulation results\nplot(trans.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\ncug.t(trans.cug)\n\n\n[1] 19.55207\n\n\n\n#compare network transitivity to null conditional on edges (density)\ntrans.cug<-cug.test(wars_1200s,FUN=gtrans,mode=\"digraph\",cmode=\"edges\", reps=100)\ntrans.cug\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: edges \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 0.1111111 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n\n\n#plot vs simulation results\nplot(trans.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\ncug.t(trans.cug)\n\n\n[1] 20.27918\n\nCompare to Simulated\nNetworks\nSimulated Networks 1000s\n\n\n#create empty dataframe for simulations\ntrials<-data.frame(id=1:100, gdens=NA, gtrans=NA, cent.deg=NA, cent.bet=NA)\n\n\n\n\n\n#as.network(wars_in_1000s)\n\nwars_in_1000s_2 <- wars_in_1000s[-c(19, 64, 65, 71),]\n\nwars_in_1000s_2.stat <- as.network(wars_in_1000s_2)\n\n\n\n\n\n#simulate PA networks and add stats to trials dataframe: size\nfor ( i in 1:100 ){ \n  pa.ig<- igraph::sample_pa(n = network.size(wars_in_1000s_2.stat), directed=TRUE)\n  pa.stat<-intergraph::asNetwork(pa.ig)\n  trials$gdens<-gden(pa.stat)\n  trials$gtrans[i] <- gtrans(pa.stat)\n  trials$cent.deg[i] <- centralization(pa.stat, FUN=degree, cmode=\"indegree\")\n  trials$cent.bet[i] <-centralization(pa.stat, FUN=betweenness)\n}\n\n\n\n\n\nsummary(trials)\n\n\n       id             gdens              gtrans     cent.deg      \n Min.   :  1.00   Min.   :0.009009   Min.   :0   Min.   :0.07347  \n 1st Qu.: 25.75   1st Qu.:0.009009   1st Qu.:0   1st Qu.:0.13769  \n Median : 50.50   Median :0.009009   Median :0   Median :0.17438  \n Mean   : 50.50   Mean   :0.009009   Mean   :0   Mean   :0.18631  \n 3rd Qu.: 75.25   3rd Qu.:0.009009   3rd Qu.:0   3rd Qu.:0.21107  \n Max.   :100.00   Max.   :0.009009   Max.   :0   Max.   :0.50463  \n    cent.bet        \n Min.   :0.0009174  \n 1st Qu.:0.0026569  \n Median :0.0042626  \n Mean   :0.0048482  \n 3rd Qu.:0.0061481  \n Max.   :0.0155508  \n\n\n\nsim.t<-function(g, trials){\n  temp<-data.frame(density=c(gden(g),mean(trials$gdens),sd(trials$gdens)),\n             transitivity=c(gtrans(g),mean(trials$gtrans),sd(trials$gtrans)),\n             indegCent=c(centralization(g, FUN=degree, cmode=\"indegree\"),mean(trials$cent.deg), sd(trials$cent.deg)),\n             betwCent=c(centralization(g, FUN=betweenness), mean(trials$cent.bet), sd(trials$cent.bet)))\n  rownames(temp)<-c(\"Observed\",\"Simulated\", \"SD\")\n  temp<-data.frame(t(temp))\n  temp$tvalue<-(temp$Observed-temp$Simulated)/temp$SD\n  temp\n}\n\n\n\n\n\nplot.sim.t<-function(g,trials){\n  temp<-data.frame(net.stat=c(\"gtrans\",\"cent.deg\",\"cent.bet\"), x=c(gtrans(g),centralization(g, FUN=degree, cmode=\"indegree\"), centralization(g, FUN=betweenness)))\n  trials[c(3:5)]%>%\n    gather(key=\"net.stat\",value = \"estimate\")%>%\n    ggplot(aes(estimate)) +\n    geom_histogram() +\n    facet_wrap(net.stat ~ ., scales=\"free\", ncol=3) +\n    geom_vline(data=temp, aes(xintercept=x),\n               linetype=\"dashed\", size=1, colour=\"red\")\n}\n\n\n\n\n\n#check for differences from null\n\nsim.t(g=wars_1000s, trials)\n\n\n               Observed   Simulated          SD    tvalue\ndensity      0.01253071 0.009009009 0.000000000       Inf\ntransitivity 0.09844560 0.000000000 0.000000000       Inf\nindegCent    0.05157025 0.186305785 0.072871174 -1.848955\nbetwCent     0.01810448 0.004848199 0.002948065  4.496604\n\n\n\nplot.sim.t(wars_in_1000s_2.stat, trials)\n\n\n\n\nSimulated Networks 1100s\n\n\n#as.network(wars_in_1100s)\n\nwars_in_1100s_2 <- wars_in_1100s[-c(47, 61, 62, 77, 78, 83),]\n\n#as.network(wars_in_1100s_2)\n\nwars_in_1100s_2_1 <- wars_in_1100s_2[-c(178,181, 182, 184, 185, 188),]\n\n#as.network(wars_in_1100s_2_1)\n\nwars_in_1100s_2_2 <- wars_in_1100s_2_1[-c(183, 202, 203, 204, 205, 206),]\n\n#as.network(wars_in_1100s_2_2)\n\nwars_in_1100s_2_3<- wars_in_1100s_2_2[-c(201, 202),]\n\nwars_in_1100s_2.stat <- as.network(wars_in_1100s_2_3)\n\n\n\n\n\n#simulate PA networks and add stats to trials dataframe: size\nfor ( i in 1:100 ){ \n  pa.ig<- igraph::sample_pa(n = network.size(wars_in_1100s_2.stat), directed=TRUE)\n  pa.stat<-intergraph::asNetwork(pa.ig)\n  trials$gdens<-gden(pa.stat)\n  trials$gtrans[i] <- gtrans(pa.stat)\n  trials$cent.deg[i] <- centralization(pa.stat, FUN=degree, cmode=\"indegree\")\n  trials$cent.bet[i] <-centralization(pa.stat, FUN=betweenness)\n}\n\n\n\n\n\nsummary(trials)\n\n\n       id             gdens             gtrans     cent.deg      \n Min.   :  1.00   Min.   :0.01031   Min.   :0   Min.   :0.09484  \n 1st Qu.: 25.75   1st Qu.:0.01031   1st Qu.:0   1st Qu.:0.14746  \n Median : 50.50   Median :0.01031   Median :0   Median :0.18956  \n Mean   : 50.50   Mean   :0.01031   Mean   :0   Mean   :0.19567  \n 3rd Qu.: 75.25   3rd Qu.:0.01031   3rd Qu.:0   3rd Qu.:0.23166  \n Max.   :100.00   Max.   :0.01031   Max.   :0   Max.   :0.37901  \n    cent.bet       \n Min.   :0.001162  \n 1st Qu.:0.003045  \n Median :0.004794  \n Mean   :0.005423  \n 3rd Qu.:0.007267  \n Max.   :0.017632  \n\n\n\nsim.t<-function(g, trials){\n  temp<-data.frame(density=c(gden(g),mean(trials$gdens),sd(trials$gdens)),\n             transitivity=c(gtrans(g),mean(trials$gtrans),sd(trials$gtrans)),\n             indegCent=c(centralization(g, FUN=degree, cmode=\"indegree\"),mean(trials$cent.deg), sd(trials$cent.deg)),\n             betwCent=c(centralization(g, FUN=betweenness), mean(trials$cent.bet), sd(trials$cent.bet)))\n  rownames(temp)<-c(\"Observed\",\"Simulated\", \"SD\")\n  temp<-data.frame(t(temp))\n  temp$tvalue<-(temp$Observed-temp$Simulated)/temp$SD\n  temp\n}\n\n\n\ncent.bet, cent.deg, gtrans\n\n\nplot.sim.t<-function(g,trials){\n  temp<-data.frame(net.stat=c(\"gtrans\",\"cent.deg\",\"cent.bet\"), x=c(gtrans(g),centralization(g, FUN=degree, cmode=\"indegree\"), centralization(g, FUN=betweenness)))\n  trials[c(3:5)]%>%\n    gather(key=\"net.stat\",value = \"estimate\")%>%\n    ggplot(aes(estimate)) +\n    geom_histogram() +\n    facet_wrap(net.stat ~ ., scales=\"free\", ncol=3) +\n    geom_vline(data=temp, aes(xintercept=x),\n               linetype=\"dashed\", size=1, colour=\"red\")\n}\n\n\n\n\n\n#check for differences from null\n\nsim.t(g=wars_1100s, trials)\n\n\n               Observed   Simulated          SD    tvalue\ndensity      0.02555842 0.010309278 0.000000000       Inf\ntransitivity 0.13888889 0.000000000 0.000000000       Inf\nindegCent    0.13205295 0.195666233 0.058576476 -1.085987\nbetwCent     0.01398369 0.005423314 0.003073955  2.784808\n\n\n\nplot.sim.t(wars_in_1100s_2.stat, trials)\n\n\n\n\nSimulated Networks 1200s\n\n\n# as.network(wars_in_1200s)\n\nwars_in_1200s_2 <- wars_in_1200s[-c(23, 93, 96, 142, 163, 167),]\n\n# as.network(wars_in_1200s_2)\n\nwars_in_1200s_2_1 <- wars_in_1200s_2[-c(162, 189, 225, 236, 302, 304),]\n\n# as.network(wars_in_1200s_2_1)\n\nwars_in_1200s_2_2 <- wars_in_1200s_2_1[-c(299),]\n\nwars_in_1200s_2.stat <- as.network(wars_in_1200s_2_2)\n\n\n\n\n\n#simulate PA networks and add stats to trials dataframe: size\nfor ( i in 1:100 ){ \n  pa.ig<- igraph::sample_pa(n = network.size(wars_in_1200s_2.stat), directed=TRUE)\n  pa.stat<-intergraph::asNetwork(pa.ig)\n  trials$gdens<-gden(pa.stat)\n  trials$gtrans[i] <- gtrans(pa.stat)\n  trials$cent.deg[i] <- centralization(pa.stat, FUN=degree, cmode=\"indegree\")\n  trials$cent.bet[i] <-centralization(pa.stat, FUN=betweenness)\n}\n\n\n\n\n\nsummary(trials)\n\n\n       id             gdens              gtrans     cent.deg      \n Min.   :  1.00   Min.   :0.006211   Min.   :0   Min.   :0.06922  \n 1st Qu.: 25.75   1st Qu.:0.006211   1st Qu.:0   1st Qu.:0.12582  \n Median : 50.50   Median :0.006211   Median :0   Median :0.14469  \n Mean   : 50.50   Mean   :0.006211   Mean   :0   Mean   :0.15997  \n 3rd Qu.: 75.25   3rd Qu.:0.006211   3rd Qu.:0   3rd Qu.:0.18871  \n Max.   :100.00   Max.   :0.006211   Max.   :0   Max.   :0.35852  \n    cent.bet        \n Min.   :0.0005646  \n 1st Qu.:0.0018678  \n Median :0.0028960  \n Mean   :0.0033793  \n 3rd Qu.:0.0043615  \n Max.   :0.0125295  \n\n\n\nsim.t<-function(g, trials){\n  temp<-data.frame(density=c(gden(g),mean(trials$gdens),sd(trials$gdens)),\n             transitivity=c(gtrans(g),mean(trials$gtrans),sd(trials$gtrans)),\n             indegCent=c(centralization(g, FUN=degree, cmode=\"indegree\"),mean(trials$cent.deg), sd(trials$cent.deg)),\n             betwCent=c(centralization(g, FUN=betweenness), mean(trials$cent.bet), sd(trials$cent.bet)))\n  rownames(temp)<-c(\"Observed\",\"Simulated\", \"SD\")\n  temp<-data.frame(t(temp))\n  temp$tvalue<-(temp$Observed-temp$Simulated)/temp$SD\n  temp\n}\n\n\n\n\n\nplot.sim.t<-function(g,trials){\n  temp<-data.frame(net.stat=c(\"gtrans\",\"cent.deg\",\"cent.bet\"), x=c(gtrans(g),centralization(g, FUN=degree, cmode=\"indegree\"), centralization(g, FUN=betweenness)))\n  trials[c(3:5)]%>%\n    gather(key=\"net.stat\",value = \"estimate\")%>%\n    ggplot(aes(estimate)) +\n    geom_histogram() +\n    facet_wrap(net.stat ~ ., scales=\"free\", ncol=3) +\n    geom_vline(data=temp, aes(xintercept=x),\n               linetype=\"dashed\", size=1, colour=\"red\")\n}\n\n\n\n\n\n#check for differences from null\n\nsim.t(g=wars_1100s, trials)\n\n\n               Observed  Simulated          SD     tvalue\ndensity      0.02555842 0.00621118 0.000000000        Inf\ntransitivity 0.13888889 0.00000000 0.000000000        Inf\nindegCent    0.13205295 0.15996992 0.052300150 -0.5337838\nbetwCent     0.01398369 0.00337929 0.002025597  5.2351971\n\n\n\nplot.sim.t(wars_in_1100s_2.stat, trials)\n\n\n\n\n\n\n\n",
    "preview": "posts/httpsnmilsteinumagithubiomyblogposts2022-04-11-networks-blog-post-9/networks-blog-post-9_files/figure-html5/unnamed-chunk-10-1.png",
    "last_modified": "2022-04-11T16:44:19-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/elitism-of-the-supreme-court-liberals-v-conservatives/",
    "title": "Elitism of the Supreme Court: Liberals v. Conservatives",
    "description": "\"After the feedback about this homework, I hopefully fixed my dataset. A tie now consists of a Justice and the school they attened and every school they have hired a clerk from. This solved my issue from before where there was limited connections. \n\nMy results were chaotic involving the entire history of Justices. I decided to focus on the current Justices on the Supreme Court. Further, I thought it would be interesting to split up and compare networks of conservative and liberal Justices(based on the party of the appointing president).\n\nThe Democrat Appointed Justices Network has 27 nodes, is directed, and has 243 total edges. The REpublican Appointed Justices Network has 35 nodes, is directed, and has 334 total edges.\"",
    "author": [
      {
        "name": "Justin Burnworth",
        "url": {}
      }
    ],
    "date": "2022-04-11",
    "categories": [],
    "contents": "\n\n\n\n\n\n\n\n\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 1 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 23.45622\n\n“There is a tiny possibility that the Democrat Appointed Justices Network transitivity observed value of 1 could be randomly generated conditional on only the size of the network, meaning that the observed transitivity is higher than would be expected from a random network. It is 23.46 standard deviations from what we would expect.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 1 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 23.45622\n\n“The Republican Appointed Justices Network is the exact same as the Demcorats.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 1 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 22.03544\n\n“The Democrat Appointed Justices network transitivity is 22.03 standard deviations from what we would expect compared to null conditional on size.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 1 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 29.37328\n\n“The Republican Appointed Justices network transitivity is 29.37 standard deviations from what we would expect compared to null conditional on size.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 2.636095 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 50.64118\n\n“The Democrat Appointed Justices network have a observed value of 2.64 degree centralization which is 52.68 standard deviations what we would expect from a random network null conditional on size.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 2.163495 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 48.32089\n\n“The Republican Appointed Justices network have a observed value of 2.16 degree centralization which is 49.29 standard deviations what we would expect from a random network null conditional on size.”\n\n\n[1] -3.406754\n\n“The Democrat Appointed Justices network has an observed value of 0 which is -3.01 standard deviations from what we would expect from a random network null conditional on size.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 0 \nPr(X>=Obs): 1 \nPr(X<=Obs): 0 \n\n[1] -3.404384\n\n“The Republican Appointed Justices network has an observed value of 0 which is -4.20 standard deviations from what we would expect from a random network null conditional on size.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: edges \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 1 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 57.79646\n\n“The Democrat Appointed Justices network has an observed value of 1 which is 57.81 standard deviations from what we would expect from a random network null conditional on size.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: edges \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 1 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 61.3773\n\n“The Republican Appointed Justices network has an observed value of 1 which is 60.39 standard deviations from what we would expect from a random network null conditional on size.”\n\n\n\n",
    "preview": "posts/elitism-of-the-supreme-court-liberals-v-conservatives/distill-preview.png",
    "last_modified": "2022-04-11T16:47:13-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsrpubscomburnworthj884412/",
    "title": "Elitism of the Supreme Court: Liberals v. Conservatives",
    "description": "\"After the feedback about this homework, I hopefully fixed my dataset. A tie now consists of a Justice and the school they attened and every school they have hired a clerk from. This solved my issue from before where there was limited connections. \n\nMy results were chaotic involving the entire history of Justices. I decided to focus on the current Justices on the Supreme Court. Further, I thought it would be interesting to split up and compare networks of conservative and liberal Justices(based on the party of the appointing president).\"",
    "author": [
      {
        "name": "Justin Burnworth",
        "url": {}
      }
    ],
    "date": "2022-04-03",
    "categories": [],
    "contents": "\n\n\n\n\n\n\n\n\n\n\n\n\n“Network graph for liberal Justices”\n\n\n\n“Network graph for conservative Justices.”\n\n\n\n\n\n\n“Leading Eigenvector Community Detection: Liberal”\n\n$`1`\n[1] \"Stephen Breyer\"    \"Boston University\" \"Boston College\"   \n[4] \"Duke\"              \"Georgia\"           \"GW\"               \n[7] \"North Carolina\"    \"Virginia\"          \"Yale\"             \n\n$`2`\n[1] \"Elena Kagan\"           \"Kentaji Brown Jackson\"\n[3] \"Berkeley\"              \"Harvard\"              \n[5] \"Stanford\"             \n\n$`3`\n [1] \"Sonia Sotomayor\" \"Georgetown\"      \"Michigan\"       \n [4] \"NYU\"             \"UCLA\"            \"Brooklyn\"       \n [7] \"Hawaii\"          \"Cornell\"         \"Northwestern\"   \n[10] \"Vanderbilt\"      \"Texas\"          \n\n$`4`\n[1] \"Chicago\"  \"Columbia\"\n\n\n“Spinglass Community Detection: Liberal”\n\n\n\n\n$`1`\n[1] \"Kentaji Brown Jackson\" \"Harvard\"              \n\n$`2`\n[1] \"Elena Kagan\" \"Berkeley\"    \"Chicago\"     \"Columbia\"   \n[5] \"Georgetown\"  \"Michigan\"    \"Stanford\"   \n\n$`3`\n[1] \"Sonia Sotomayor\" \"Duke\"            \"Yale\"           \n[4] \"Brooklyn\"        \"Hawaii\"          \"Cornell\"        \n[7] \"Northwestern\"    \"Vanderbilt\"      \"Texas\"          \n\n$`4`\n[1] \"Stephen Breyer\"    \"Boston University\" \"Boston College\"   \n[4] \"Georgia\"           \"GW\"                \"North Carolina\"   \n[7] \"NYU\"               \"UCLA\"              \"Virginia\"         \n\n\n\n\n\n\n\n\n\n\n“Spinglass Community Detection: Conservative”\n\n$`1`\n[1] \"Samuel Alito\" \"BYU\"          \"Duke\"         \"Georgetown\"  \n[5] \"Ohio State\"   \"Texas\"        \"UCLA\"         \"Vanderbilt\"  \n\n$`2`\n[1] \"Neil Gorsuch\"    \"Brett Kavanaugh\" \"Chicago\"        \n[4] \"Michigan\"        \"NYU\"             \"Yale\"           \n[7] \"Cornell\"         \"Iowa\"            \"Mississippi\"    \n\n$`3`\n[1] \"Clarence Thomas\" \"Columbia\"        \"Penn\"           \n[4] \"Berkeley\"        \"Georgia\"         \"Catholic\"       \n[7] \"Kansas\"          \"North Carolina\"  \"Seattle\"        \n\n$`4`\n[1] \"John Roberts\"      \"Amy Coney Barrett\" \"Harvard\"          \n[4] \"Stanford\"          \"Virginia\"          \"GW\"               \n[7] \"Northwestern\"      \"Notre Dame\"        \"yale\"             \n\n\n\n\n\n\n\n",
    "preview": "posts/httpsrpubscomburnworthj884412/distill-preview.png",
    "last_modified": "2022-04-03T21:52:06-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpswalidmedanigithubionetworks-blogposts2022-03-24-assignment7/",
    "title": "Assignment_7",
    "description": "Community Detection (Marriages between characters in the Game of Thrones Novels)",
    "author": [
      {
        "name": "Walid Medani",
        "url": "https://walidmedani.github.io/networks-blog/"
      }
    ],
    "date": "2022-04-03",
    "categories": [],
    "contents": "\nGame of Thrones Marriages\n\n\nplot.igraph(gotmarr.ig, \n            vertex.label.cex=1)\n\n\n\n\nNetwork Size\n\n\nvcount(gotmarr.ig)\n\n\n[1] 18\n\necount(gotmarr.ig)\n\n\n[1] 61\n\nAttributes\n\n\nis_bipartite(gotmarr.ig)\n\n\n[1] FALSE\n\nis_directed(gotmarr.ig)\n\n\n[1] FALSE\n\nis_weighted(gotmarr.ig)\n\n\n[1] TRUE\n\nvertex_attr_names(gotmarr.ig)\n\n\n[1] \"color\"        \"na\"           \"region\"       \"vertex.names\"\n[5] \"name\"        \n\nedge_attr_names(gotmarr.ig)\n\n\n[1] \"na\"     \"weight\"\n\nCommunity Detection\nFast and greedy\n\n\n#Run clustering algorithm: fast_greedy\ngot.fg<-cluster_fast_greedy(gotmarr.ig)\n#Retrieve list of nodes in communities\nigraph::groups(got.fg)\n\n\n$`1`\n[1] \"Arryn\" \"Tully\" \"Vale\" \n\n$`2`\n[1] \"Martell\"    \"Crownlands\" \"Essos\"      \"Targaryen\"  \"Dorne\"     \n\n$`3`\n[1] \"Baratheon\" \"Reach\"     \"Tyrell\"   \n\n$`4`\n[1] \"Stormlands\" \"Riverlands\" \"Frey\"      \n\n$`5`\n[1] \"Lannister\"   \"Westerlands\"\n\n$`6`\n[1] \"Stark\" \"North\"\n\nplot(got.fg,gotmarr.ig)\n\n\n\n\nWalktrap\n\n\nnodes.by.gp<-function(network.nodes, groupvar){\n  network.nodes%>%\n  select(-name)%>%\n  group_by_(groupvar) %>%\n  mutate(n=n())%>%\n  summarise_all(mean, na.rm=TRUE)%>%\n  as.matrix()%>%\n  print(digits=2)\n}\n\n\ngot.wt<-walktrap.community(gotmarr.ig)\nigraph::groups(got.wt)\n\n\n$`1`\n[1] \"Arryn\"      \"Tully\"      \"Vale\"       \"Stormlands\" \"Riverlands\"\n[6] \"Frey\"      \n\n$`2`\n[1] \"Martell\"    \"Crownlands\" \"Essos\"      \"Targaryen\"  \"Dorne\"     \n\n$`3`\n[1] \"Baratheon\" \"Reach\"     \"Tyrell\"   \n\n$`4`\n[1] \"Stark\" \"North\"\n\n$`5`\n[1] \"Lannister\"   \"Westerlands\"\n\ngotmarr.nodes$comm.wt<-got.wt$membership\nnodes.by.gp(gotmarr.nodes,\"comm.wt\")\n\n\n     comm.wt degree degree.wt bonpow betweenness close constraint n\n[1,]       1    5.5        23  -1.31         4.5  0.58       0.41 6\n[2,]       2    5.2        22  -0.79         9.3  0.57       0.62 5\n[3,]       3    6.0        22  -0.96         8.9  0.59       0.45 3\n[4,]       4    6.0        36  -0.29         6.9  0.59       0.53 2\n[5,]       5    5.5        25  -0.15         1.4  0.58       0.57 2\n\nplot(got.wt,gotmarr.ig)\n\n\n\n\nLabel Propagation\n\n\ngot.lab<-walktrap.community(gotmarr.ig)\nigraph::groups(got.lab)\n\n\n$`1`\n[1] \"Arryn\"      \"Tully\"      \"Vale\"       \"Stormlands\" \"Riverlands\"\n[6] \"Frey\"      \n\n$`2`\n[1] \"Martell\"    \"Crownlands\" \"Essos\"      \"Targaryen\"  \"Dorne\"     \n\n$`3`\n[1] \"Baratheon\" \"Reach\"     \"Tyrell\"   \n\n$`4`\n[1] \"Stark\" \"North\"\n\n$`5`\n[1] \"Lannister\"   \"Westerlands\"\n\ngotmarr.nodes$comm.lab<-got.lab$membership\nnodes.by.gp(gotmarr.nodes,\"comm.lab\")\n\n\n     comm.lab degree degree.wt bonpow betweenness close constraint\n[1,]        1    5.5        23  -1.31         4.5  0.58       0.41\n[2,]        2    5.2        22  -0.79         9.3  0.57       0.62\n[3,]        3    6.0        22  -0.96         8.9  0.59       0.45\n[4,]        4    6.0        36  -0.29         6.9  0.59       0.53\n[5,]        5    5.5        25  -0.15         1.4  0.58       0.57\n     comm.wt n\n[1,]       1 6\n[2,]       2 5\n[3,]       3 3\n[4,]       4 2\n[5,]       5 2\n\nplot(got.lab,gotmarr.ig)\n\n\n\n\nEdge betweeness\n\n\ngot.edge<-edge.betweenness.community(gotmarr.ig)\nigraph::groups(got.edge)\n\n\n$`1`\n[1] \"Arryn\"\n\n$`2`\n[1] \"Tully\"\n\n$`3`\n[1] \"Vale\"\n\n$`4`\n[1] \"Baratheon\"\n\n$`5`\n[1] \"Lannister\"\n\n$`6`\n[1] \"Martell\"\n\n$`7`\n[1] \"Reach\"\n\n$`8`\n[1] \"Stark\"\n\n$`9`\n[1] \"Stormlands\"\n\n$`10`\n[1] \"Tyrell\"\n\n$`11`\n[1] \"Crownlands\"\n\n$`12`\n[1] \"Essos\"\n\n$`13`\n[1] \"Riverlands\"\n\n$`14`\n[1] \"Westerlands\"\n\n$`15`\n[1] \"Frey\"\n\n$`16`\n[1] \"North\"\n\n$`17`\n[1] \"Targaryen\"\n\n$`18`\n[1] \"Dorne\"\n\ngotmarr.nodes$comm.edge<-got.edge$membership\nnodes.by.gp(gotmarr.nodes,\"comm.edge\")\n\n\n      comm.edge degree degree.wt bonpow betweenness close constraint\n [1,]         1      3        10 -1.113        0.67  0.50       0.51\n [2,]         2      5         5 -1.042        2.31  0.53       0.48\n [3,]         3      5        34 -1.085        2.51  0.57       0.36\n [4,]         4      7        10 -0.757       10.86  0.63       0.38\n [5,]         5      5        22 -0.086        0.89  0.55       0.65\n [6,]         6      3         8 -0.699        0.75  0.52       0.74\n [7,]         7      9        46 -1.442       15.76  0.68       0.32\n [8,]         8      9        33  0.057       13.56  0.68       0.40\n [9,]         9      4        10 -1.941        0.62  0.57       0.41\n[10,]        10      2        11 -0.685        0.00  0.45       0.66\n[11,]        11      6        17 -0.514        1.80  0.59       0.50\n[12,]        12      4        10 -0.956        2.15  0.55       0.70\n[13,]        13      6        32 -1.171        2.85  0.61       0.46\n[14,]        14      6        28 -0.214        1.97  0.61       0.49\n[15,]        15     10        48 -1.513       17.98  0.68       0.24\n[16,]        16      3        39 -0.628        0.31  0.50       0.65\n[17,]        17     12        73 -1.256       42.02  0.77       0.18\n[18,]        18      1         2 -0.500        0.00  0.45       1.00\n      comm.wt comm.lab n\n [1,]       1        1 1\n [2,]       1        1 1\n [3,]       1        1 1\n [4,]       3        3 1\n [5,]       5        5 1\n [6,]       2        2 1\n [7,]       3        3 1\n [8,]       4        4 1\n [9,]       1        1 1\n[10,]       3        3 1\n[11,]       2        2 1\n[12,]       2        2 1\n[13,]       1        1 1\n[14,]       5        5 1\n[15,]       1        1 1\n[16,]       4        4 1\n[17,]       2        2 1\n[18,]       2        2 1\n\nplot(got.edge,gotmarr.ig)\n\n\n\n\nEigenvector\n\n\ngot.eigen<-leading.eigenvector.community(gotmarr.ig)\nigraph::groups(got.eigen)\n\n\n$`1`\n[1] \"Arryn\"      \"Baratheon\"  \"Martell\"    \"Stormlands\" \"Crownlands\"\n[6] \"Essos\"      \"Targaryen\"  \"Dorne\"     \n\n$`2`\n[1] \"Tully\"      \"Vale\"       \"Riverlands\" \"Frey\"      \n\n$`3`\n[1] \"Reach\"\n\n$`4`\n[1] \"Stark\" \"North\"\n\n$`5`\n[1] \"Lannister\"   \"Westerlands\"\n\n$`6`\n[1] \"Tyrell\"\n\ngotmarr.nodes$comm.eigen<-got.eigen$membership\nnodes.by.gp(gotmarr.nodes,\"comm.eigen\")\n\n\n     comm.eigen degree degree.wt bonpow betweenness close constraint\n[1,]          1    5.0        18  -0.97         7.4  0.57       0.55\n[2,]          2    6.5        30  -1.20         6.4  0.60       0.38\n[3,]          3    9.0        46  -1.44        15.8  0.68       0.32\n[4,]          4    6.0        36  -0.29         6.9  0.59       0.53\n[5,]          5    5.5        25  -0.15         1.4  0.58       0.57\n[6,]          6    2.0        11  -0.69         0.0  0.45       0.66\n     comm.wt comm.lab comm.edge n\n[1,]     1.9      1.9       9.8 8\n[2,]     1.0      1.0       8.2 4\n[3,]     3.0      3.0       7.0 1\n[4,]     4.0      4.0      12.0 2\n[5,]     5.0      5.0       9.5 2\n[6,]     3.0      3.0      10.0 1\n\nplot(got.eigen,gotmarr.ig)\n\n\n\n\nModularity Scores\n\nfastgreedy   walktrap      label       edge      eigen \n 0.5173683  0.3289444  0.3289444  0.2051354  0.4572361 \n\nObservations\nFor the GOT marriages data set, the fast/greedy, walktrap, and label propagation made the most sense in identifying communities. Fast and greedy was the most successful method due to it partitioning “Baratheon”, “Reach”, and “Tyrell” as a separate community from the northern kingdoms of “Tully” and “Arryn” where there was a weak or no relationship between the factions.\nEdge betweeness failed to identify any communities within the dataset, whereas the Eigenvector failed to cluster some memberships such as the Reach being distinct from the Tyrell family (rulers of the region) and has strong marriage connections with the Baratheons.\n\n\n\n",
    "preview": "posts/httpswalidmedanigithubionetworks-blogposts2022-03-24-assignment7/assignment7_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2022-04-03T21:52:27-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpswalidmedanigithubionetworks-blogposts2022-03-10-assignment6/",
    "title": "Assignment_6",
    "description": "Roles and Blockmodels (Marriages between characters in the Game of Thrones Novels)",
    "author": [
      {
        "name": "Walid Medani",
        "url": "https://walidmedani.github.io/networks-blog/"
      }
    ],
    "date": "2022-04-03",
    "categories": [],
    "contents": "\n\n\n\n\n\n\nGame of Thrones Marriages\n\n\nplot.igraph(gotmarr.ig, \n            vertex.label.cex=1)\n\n\n\n\nNetwork Size\n\n\nvcount(gotmarr.ig)\n\n\n[1] 18\n\necount(gotmarr.ig)\n\n\n[1] 61\n\nAttributes\n\n\nis_bipartite(gotmarr.ig)\n\n\n[1] FALSE\n\nis_directed(gotmarr.ig)\n\n\n[1] FALSE\n\nis_weighted(gotmarr.ig)\n\n\n[1] TRUE\n\nvertex_attr_names(gotmarr.ig)\n\n\n[1] \"color\"        \"na\"           \"region\"       \"vertex.names\"\n[5] \"name\"        \n\nedge_attr_names(gotmarr.ig)\n\n\n[1] \"na\"     \"weight\"\n\nCentrality Measures\nBetweenness Centrality\n\n\nigraph::betweenness(gotmarr.ig, directed=TRUE)\n\n\n      Arryn       Tully        Vale   Baratheon   Lannister \n   0.000000   32.222222    0.000000   37.038889    2.705556 \n    Martell       Reach       Stark  Stormlands      Tyrell \n   1.250000   21.988889   52.366667    0.000000    0.000000 \n Crownlands       Essos  Riverlands Westerlands        Frey \n   8.000000    2.833333    0.000000   12.358333    7.063889 \n      North   Targaryen       Dorne \n   0.000000   16.569444    0.000000 \n\nBetweeness Centralization\n\n\ncentr_betw(gotmarr.ig,directed=T)$centralization\n\n\n[1] 0.2765138\n\nCloseness Centralization\n\n\ncentr_clo(gotmarr.ig)$centralization\n\n\n[1] 0.4240252\n\nStructural Equivalance\n\n\ngotmarr.nodes<-data.frame(name=gotmarr.stat%v%\"vertex.names\",\n        degree=sna::degree(gotmarr.stat,gmode=\"graph\"),\n        degree.wt=strength(gotmarr.ig),\n        bonpow=bonpow(gotmarr.stat),\n        betweenness=betweenness(gotmarr.stat, gmode=\"graph\"),\n        close=sna::closeness(gotmarr.stat, gmode=\"graph\"),\n        constraint=constraint(gotmarr.ig))\n\n#got partners\ngotmarr.se<-equiv.clust(gotmarr.stat, equiv.fun=\"sedist\", method=\"hamming\",mode=\"graph\")\n\n#plot equivalence clustering\nplot(gotmarr.se,labels=gotmarr.se$glabels)\nrect.hclust(gotmarr.se$cluster,h=15)\n\n\n\n\n\n\nplot.block<-function(x=blk_mod, main=NULL, cex.lab=1){\n  plot.sociomatrix(x$blocked.data, labels=list(x$plabels,x$plabels),\n                   main=main, drawlines = FALSE, cex.lab=cex.lab)\n  for (j in 2:length(x$plabels)) if (x$block.membership[j] !=\n                                     x$block.membership[j-1]) \n    abline(v = j - 0.5, h = j - 0.5, lty = 3, xpd=FALSE)\n}\n\n#blockmodel and select partitions\nblk_mod<-blockmodel(gotmarr.stat,gotmarr.se,k=4)\n#print blockmodel object\nblk_mod$block.model\n\n\n           Block 1    Block 2   Block 3   Block 4\nBlock 1 0.40000000 0.04166667 0.6666667 0.8333333\nBlock 2 0.04166667 0.17857143 0.5000000 0.6250000\nBlock 3 0.66666667 0.50000000 0.3333333 0.6666667\nBlock 4 0.83333333 0.62500000 0.6666667       NaN\n\n#plot blockmodel partitions\nplot.block(blk_mod,main=\"GoT Marriages, 4 Partitions\", cex.lab=.5)\n\n\n\n#blockmodel and select partitions\nblk_mod2<-blockmodel(gotmarr.stat,gotmarr.se,k=6)\n#print blockmodel object\nblk_mod2$block.model\n\n\n           Block 1    Block 2    Block 3   Block 4   Block 5\nBlock 1 0.40000000 0.03333333 0.05555556 0.3333333 0.8333333\nBlock 2 0.03333333 0.30000000 0.06666667 1.0000000 0.6000000\nBlock 3 0.05555556 0.06666667 0.33333333 0.0000000 0.1666667\nBlock 4 0.33333333 1.00000000 0.00000000       NaN 0.5000000\nBlock 5 0.83333333 0.60000000 0.16666667 0.5000000 0.0000000\nBlock 6 0.83333333 0.40000000 1.00000000 1.0000000 0.5000000\n          Block 6\nBlock 1 0.8333333\nBlock 2 0.4000000\nBlock 3 1.0000000\nBlock 4 1.0000000\nBlock 5 0.5000000\nBlock 6       NaN\n\n#plot blockmodel partitions\nplot.block(blk_mod2,main=\"GoT Marriages, 6 Partitions\", cex.lab=.5)\n\n\n\n\nPlotting the block role assignments gives us easy insight into observing marriages between the houses. We see that eastern continents and houses didn’t have many marriage connections between northern houses such as Tully, Vale, and Arryn yet they do with other northern houses such as the Starks and Frey.\n\n\n\n",
    "preview": "posts/httpswalidmedanigithubionetworks-blogposts2022-03-10-assignment6/assignment6_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2022-04-03T21:52:32-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpssvirguezgithubioichrnetworksposts2022-03-23-community-detection/",
    "title": "Community Detection",
    "description": "A comparison of community clusters in the IACtHR network using different algorithms",
    "author": [
      {
        "name": "Santiago Virgüez",
        "url": {}
      }
    ],
    "date": "2022-03-27",
    "categories": [],
    "contents": "\nRecap\naffiliation and one-mode network\nLet’s organize the data one more time. I’m gonna work again with the\none-matrix (actorxactor). As you might remember, this one-mode matrix is\na projection of the affiliation network (actorxcase), which means that\nthe actors (the nodes) are tied by virtue of their participation in the\nsame cases.\n\n\n#Affiliation network data\nlibrary(igraph)\nlibrary(tidyr)\ndata <- read.csv(\"Cleaned_Data.csv\")\n##New column count\ndata$count <- 1\n\n##Gather the data at case level\nlev_data <- pivot_wider(data,id_cols = CaseID, names_from = `Name`, \n                        values_from = count, values_fn = list(count = length), \n                        values_fill = list(count = 0))\n\n##transpose lev_data to have amici grouped by case\nlibrary(data.table)\nT_lev_data <- transpose(lev_data,)\nrownames(T_lev_data) <- colnames(lev_data)\ncolnames(T_lev_data) <- lev_data$CaseID\nT_lev_data <- T_lev_data[-c(1),]\n\n##create affiliation network graph using 'igraph'\nAff_network <- graph.incidence(T_lev_data)\n\n############\n\n#One-Mode matrix (actor x actor)\n\n##extracting the one-mode projection\nAff_network.pr <- bipartite.projection(Aff_network)\n\n##Actor x actor adjacency matrix\n\namici_net <- Aff_network.pr$proj1\n\namici_ad <- graph.adjacency(get.adjacency(amici_net, sparse = FALSE,attr = \"weight\"))\n\n\n\nBefore testing the different methods of community detection, it is\nimportant to remember that the one-mode matrix actor x actor is a\nprojection from an affiliation network where amici actors are tied to\nother amici by virtue of their participation in the same case. What this\nmeans is that we expect that the communities among the amici actors\ncorrespond to the cases where they participate together, with some\nexceptions due to multiple participation of some actors in different\ncases.\nSubstantively, the community detection algorithms will not provide\ntoo much new information about clustering but it would be interesting to\nsee the outcomes. We may expect that, because of the case clustering,\neach algorithm will provide a similar result in terms of the communities\nwithin the actor x actor network.\n\n\n#Node data frame\namici.nodes<-data.frame(name=V(amici_ad)$name,\n                              degree=igraph::degree(amici_ad),\n                              degree.wt=strength(amici_ad),\n                              betweenness=igraph::betweenness(amici_ad, directed=FALSE),\n                              close=igraph::closeness(amici_ad),\n                              constraint=constraint(amici_ad))\n\ntemp<-centr_eigen(amici_ad,directed=F)\namici.nodes$eigen<-temp$vector\n\n\n\nFast and\nGreedy Community Detection\n\n\ncomm.fg<-cluster_fast_greedy(as.undirected(amici_ad))\ncomm.fg\n\n\nIGRAPH clustering fast greedy, groups: 46, mod: 0.74\n+ groups:\n  $`1`\n   [1] \"Rights International\"                                                               \n   [2] \"The International Foundation for the Protection of Human Rights Defenders\"          \n   [3] \"World Organisation Against Torture\"                                                 \n   [4] \"Corporacion Colectivo de Abogados Jose Alvear Restrepo\"                             \n   [5] \"Movimiento Nacional de\\nDerechos Humanos\"                                           \n   [6] \"Una Ventana a la Libertad\"                                                          \n   [7] \"Comite de Familiares de Detenidos Desaparecidos\"                                    \n   [8] \"Robert F. Kennedy Memorial Center for Human Rights\"                                 \n   [9] \"Centro de Derechos Economicos y Sociales\"                                           \n  + ... omitted several groups/vertices\n\namici.nodes$comm.fg<-comm.fg$membership\n\nplot(comm.fg,amici_ad, vertex.label=NA)\n\n\n\n\nWalktrap Clustering\n\n\ncomm.wt<-walktrap.community(amici_ad)\ncomm.wt\n\n\nIGRAPH clustering walktrap, groups: 59, mod: 0.75\n+ groups:\n  $`1`\n  [1] \"Human Rights Clinic of the Universidad de Palermo\"                         \n  [2] \"Universidad Carlos III\"                                                    \n  [3] \"World Press Freedom Committee\"                                             \n  [4] \"Equal Rights Trust\"                                                        \n  [5] \"Asylum and Human Rights Clinic of the Boston University School of Law\"     \n  [6] \"Consejo Latinoamericano de Estudiosos de Derecho Internacional y Comparado\"\n  \n  $`2`\n   [1] \"Amnesty International\"                                              \n  + ... omitted several groups/vertices\n\namici.nodes$comm.wt<-comm.wt$membership\n\nplot(comm.wt,amici_ad, vertex.label=NA)\n\n\n\n\nLeading Label\nPropagation Community Detection\n\n\ncomm.lab<-label.propagation.community(as.undirected(amici_ad))\ncomm.lab\n\n\nIGRAPH clustering label propagation, groups: 57, mod: 0.75\n+ groups:\n  $`1`\n  [1] \"Fernando Linares\"\n  \n  $`2`\n   [1] \"Amnesty International\"                                              \n   [2] \"Legal Research Institute UNAM\"                                      \n   [3] \"International Reproductive and Sexual Health Law Program\"           \n   [4] \"University of Toronto Law School\"                                   \n   [5] \"Women's Link Worldwide\"                                             \n   [6] \"World Organization Against Torture\"                                 \n  + ... omitted several groups/vertices\n\namici.nodes$comm.wt<-comm.lab$membership\n\nplot(comm.lab,amici_ad, vertex.label=NA)\n\n\n\n\nComparing\nCommunity Partitions\nFrom what we saw in the figures, it is possible to say that all the\npartition methods detected similar communities. But to have a better\nsense of their differences, it is necessary to compare the outcomes.\n\n\nmods<-c(fastgreedy=modularity(comm.fg), walktrap=modularity(comm.wt), walktrap=modularity(comm.lab))\nmods\n\n\nfastgreedy   walktrap   walktrap \n 0.7357490  0.7469115  0.7505719 \n\nAs expected, all of the community detection methods seem to have\nsimilar value. Even when we compare them using different comparison\nmethods, the results seem to be very close to each other:\n\n\ncompare.algs<-function(alg.a,alg.b,compare.meth=c(\"vi\", \"nmi\", \"split.join\", \"rand\", \"adjusted.rand\")){\n  #create list of community objects and methods\n  comm.compare<-expand.grid(alg.a=alg.a, alg.b=alg.b, meth=compare.meth, result=NA, stringsAsFactors = FALSE)\n  #compare community partitions using a loop\n  for(i in 1:nrow(comm.compare)){\n    comm1<-get(comm.compare$alg.a[i])\n    comm2<-get(comm.compare$alg.b[i])\n    method<-comm.compare$meth[i]\n    comm.compare$result[i]<-compare(comm1, comm2, method)\n  }\n  return(comm.compare)\n}\n\ncompare.algs(alg.a=c(\"comm.fg\",\"comm.wt\"),alg.b=\"comm.lab\")\n\n\n     alg.a    alg.b          meth     result\n1  comm.fg comm.lab            vi  0.6598215\n2  comm.wt comm.lab            vi  0.1560076\n3  comm.fg comm.lab           nmi  0.8899333\n4  comm.wt comm.lab           nmi  0.9761064\n5  comm.fg comm.lab    split.join 95.0000000\n6  comm.wt comm.lab    split.join 21.0000000\n7  comm.fg comm.lab          rand  0.9529987\n8  comm.wt comm.lab          rand  0.9943683\n9  comm.fg comm.lab adjusted.rand  0.6931815\n10 comm.wt comm.lab adjusted.rand  0.9520560\n\n\n\n\n",
    "preview": "posts/httpssvirguezgithubioichrnetworksposts2022-03-23-community-detection/community-detection_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2022-03-27T15:50:22-04:00",
    "input_file": {},
    "preview_width": 2688,
    "preview_height": 2304
  },
  {
    "path": "posts/httpsrpubscomburnworthj881541/",
    "title": "How Elite is the Supreme Court?",
    "description": "\"After struggling most weeks trying to work with my dataset, I realized from our classes that I was looking at my dataset the wrong way. So, I decided to flip the format. I am now looking at just how elite the Supreme Court has been over its history. I do this by grouping Justices to the school they attended. It was such a relief to be able to run the different network commands and actually get graphs or data. I will save working on formating the graphs for the future when my brain recovers.\n\nThe new version of my dataset has 104 vertices. It is a directed network. It is not bipartite and there are a total of 76 edges.\n\nThis was my record for going the longest in R without running into a wall. I feel a lot more comfortable with R and using network analysis in R ,but I still have a lot of work to do when it comes to understanding the results.\"",
    "author": [
      {
        "name": "Justin Burnworth",
        "url": {}
      }
    ],
    "date": "2022-03-27",
    "categories": [],
    "contents": "\n\n\n\n\n\n\n\n\n\n\n Network attributes:\n  vertices = 104 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 76 \n    missing edges= 0 \n    non-missing edges= 76 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\n\n\n\n\n\n\n\n[1] \"merges\"     \"modularity\" \"membership\" \"names\"      \"algorithm\" \n[6] \"vcount\"    \nIGRAPH clustering fast greedy, groups: 28, mod: 0.9\n+ groups:\n  $`1`\n   [1] \"Harvard\"                   \"John Roberts\"             \n   [3] \"Anthony Kennedy\"           \"Horace Gray\"              \n   [5] \"Oliver Wendell Holmes Jr.\" \"Felix Frankfurter\"        \n   [7] \"Harry Blackmun\"            \"Stephen Breyer\"           \n   [9] \"William Brennan Jr.\"       \"David Souter\"             \n  [11] \"William Moody\"             \"Louis Brandeis\"           \n  [13] \"Elena Kagan\"               \"Edward Sanford\"           \n  [15] \"Harold Burton\"             \"Antonin Scalia\"           \n  [17] \"Neil Gorsuch\"             \n  + ... omitted several groups/vertices\n\n\n$`1`\n [1] \"Harvard\"                   \"John Roberts\"             \n [3] \"Anthony Kennedy\"           \"Horace Gray\"              \n [5] \"Oliver Wendell Holmes Jr.\" \"Felix Frankfurter\"        \n [7] \"Harry Blackmun\"            \"Stephen Breyer\"           \n [9] \"William Brennan Jr.\"       \"David Souter\"             \n[11] \"William Moody\"             \"Louis Brandeis\"           \n[13] \"Elena Kagan\"               \"Edward Sanford\"           \n[15] \"Harold Burton\"             \"Antonin Scalia\"           \n[17] \"Neil Gorsuch\"             \n\n$`2`\n [1] \"Apprenticeship\"        \"Rufus W. Peckham\"     \n [3] \"James F. Byrnes\"       \"Samuel Freeman Miller\"\n [5] \"Stanley Matthews\"      \"John Clarke\"          \n [7] \"Mahon Pitney\"          \"Stephen Field\"        \n [9] \"George Shiras Jr.\"     \"Wiliam R. Day\"        \n[11] \"Pierce Butler\"         \"Joseph Bradley\"       \n\n$`3`\n [1] \"Yale\"                  \"Morrison White\"       \n [3] \"Brett Kavanaugh\"       \"Abe Fortas\"           \n [5] \"William Burnham Woods\" \"Sonia Sotomayor\"      \n [7] \"Henry Billings Brown\"  \"Byron White\"          \n [9] \"Potter Stewart\"        \"Samuel Alito\"         \n[11] \"Clarence Thomas\"      \n\n$`4`\n[1] \"Columbia\"             \"Charles Evans Hughes\"\n[3] \"Harland F. Stone\"     \"Samuel Blatchford\"   \n[5] \"Benjamin N. Cardozo\"  \"William O. Douglas\"  \n[7] \"Stanley Reed\"         \"Ruth Bader Ginsburg\" \n[9] \"Joseph McKenna\"      \n\n$`5`\n[1] \"Cumberland School of Law\" \"Howell Edmunds Jackson\"  \n[3] \"Horace Lurton\"           \n\n$`6`\n[1] \"Washington and Lee\"  \"Lewis F. Powell Jr.\" \"Joseph Lamar\"       \n\n$`7`\n[1] \"Cincinnati\"          \"William Howard Taft\" \"Willis Van Devanter\"\n\n$`8`\n[1] \"Albany\"            \"David Brewer\"      \"Robert H. Jackson\"\n\n$`9`\n[1] \"Michigan\"          \"George Sutherland\" \"Frank Murphy\"     \n\n$`10`\n[1] \"Northwestern\"      \"Arthur Goldberg\"   \"John Paul Stevens\"\n\n$`11`\n[1] \"Stanford\"            \"William Rehnquist\"   \"Sandra Day O'Connor\"\n\n$`12`\n[1] \"Colorado\"       \"Wiley Rutledge\"\n\n$`13`\n[1] \"Virginia\"         \"James McReynolds\"\n\n$`14`\n[1] \"Transylvania University\" \"John Marshall Harlan\"   \n\n$`15`\n[1] \"Texas\"     \"Tom Clark\"\n\n$`16`\n[1] \"Berkeley\"    \"Earl Warren\"\n\n$`17`\n[1] \"St. Paul College of Law\" \"Warren E. Burger\"       \n\n$`18`\n[1] \"School\"  \"Justice\"\n\n$`19`\n[1] \"Emory University\" \"Lucius Lamar\"    \n\n$`20`\n[1] \"Centre Colllege\" \"Fred M. Vinson\" \n\n$`21`\n[1] \"Tulane\"               \"Edward Douglas White\"\n\n$`22`\n[1] \"Kansas City\"       \"Charles Whittaker\"\n\n$`23`\n[1] \"Indiana\"        \"Sherman Minton\"\n\n$`24`\n[1] \"Penn\"         \"Owen Roberts\"\n\n$`25`\n[1] \"Howard\"            \"Thurgood Marhsall\"\n\n$`26`\n[1] \"Notre Dame\"        \"Amy Coney Barrett\"\n\n$`27`\n[1] \"New York Law School\"     \"John Marshall Harlan II\"\n\n$`28`\n[1] \"Bowdoin College\" \"Melville Fuller\"\n\n\n\nNetwork Blockmodel:\n\nBlock membership:\n\n  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17 \n  8   2  16  28  20   7  12   4   5  19   1  25  23  22   9  27  10 \n 18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34 \n 26  24  18  17  11  15  14  21  13   6   3   8   8   2   2   2   2 \n 35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51 \n  2   2   2   2   2   2   2  16  28  20   7   7  12   4   4   4   4 \n 52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68 \n  4   4   4   4   5   5  19   1   1   1   1   1   1   1   1   1   1 \n 69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85 \n  1   1   1   1   1   1  25  23  22   9   9  27  10  10  26  24  18 \n 86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 \n 17  11  11  15  14  21  13   6   6   3   3   3   3   3   3   3   3 \n103 104 \n  3   3 \n\nReduced form blockmodel:\n\n     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 \n            Block 1    Block 2    Block 3   Block 4   Block 5\nBlock 1  0.05882353 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 2  0.00000000 0.08333333 0.00000000 0.0000000 0.0000000\nBlock 3  0.00000000 0.00000000 0.09090909 0.0000000 0.0000000\nBlock 4  0.00000000 0.00000000 0.00000000 0.1111111 0.0000000\nBlock 5  0.00000000 0.00000000 0.00000000 0.0000000 0.3333333\nBlock 6  0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 7  0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 8  0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 9  0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 10 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 11 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 12 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 13 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 14 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 15 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 16 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 17 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 18 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 19 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 20 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 21 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 22 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 23 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 24 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 25 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 26 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 27 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 28 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\n           Block 6   Block 7   Block 8   Block 9  Block 10  Block 11\nBlock 1  0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 2  0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 3  0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 4  0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 5  0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 6  0.3333333 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 7  0.0000000 0.3333333 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 8  0.0000000 0.0000000 0.3333333 0.0000000 0.0000000 0.0000000\nBlock 9  0.0000000 0.0000000 0.0000000 0.3333333 0.0000000 0.0000000\nBlock 10 0.0000000 0.0000000 0.0000000 0.0000000 0.3333333 0.0000000\nBlock 11 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.3333333\nBlock 12 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 13 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 14 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 15 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 16 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 17 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 18 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 19 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 20 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 21 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 22 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 23 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 24 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 25 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 26 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 27 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 28 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\n         Block 12 Block 13 Block 14 Block 15 Block 16 Block 17\nBlock 1       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 2       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 3       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 4       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 5       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 6       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 7       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 8       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 9       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 10      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 11      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 12      0.5      0.0      0.0      0.0      0.0      0.0\nBlock 13      0.0      0.5      0.0      0.0      0.0      0.0\nBlock 14      0.0      0.0      0.5      0.0      0.0      0.0\nBlock 15      0.0      0.0      0.0      0.5      0.0      0.0\nBlock 16      0.0      0.0      0.0      0.0      0.5      0.0\nBlock 17      0.0      0.0      0.0      0.0      0.0      0.5\nBlock 18      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 19      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 20      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 21      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 22      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 23      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 24      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 25      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 26      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 27      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 28      0.0      0.0      0.0      0.0      0.0      0.0\n         Block 18 Block 19 Block 20 Block 21 Block 22 Block 23\nBlock 1       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 2       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 3       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 4       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 5       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 6       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 7       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 8       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 9       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 10      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 11      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 12      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 13      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 14      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 15      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 16      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 17      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 18      0.5      0.0      0.0      0.0      0.0      0.0\nBlock 19      0.0      0.5      0.0      0.0      0.0      0.0\nBlock 20      0.0      0.0      0.5      0.0      0.0      0.0\nBlock 21      0.0      0.0      0.0      0.5      0.0      0.0\nBlock 22      0.0      0.0      0.0      0.0      0.5      0.0\nBlock 23      0.0      0.0      0.0      0.0      0.0      0.5\nBlock 24      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 25      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 26      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 27      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 28      0.0      0.0      0.0      0.0      0.0      0.0\n         Block 24 Block 25 Block 26 Block 27 Block 28\nBlock 1       0.0      0.0      0.0      0.0      0.0\nBlock 2       0.0      0.0      0.0      0.0      0.0\nBlock 3       0.0      0.0      0.0      0.0      0.0\nBlock 4       0.0      0.0      0.0      0.0      0.0\nBlock 5       0.0      0.0      0.0      0.0      0.0\nBlock 6       0.0      0.0      0.0      0.0      0.0\nBlock 7       0.0      0.0      0.0      0.0      0.0\nBlock 8       0.0      0.0      0.0      0.0      0.0\nBlock 9       0.0      0.0      0.0      0.0      0.0\nBlock 10      0.0      0.0      0.0      0.0      0.0\nBlock 11      0.0      0.0      0.0      0.0      0.0\nBlock 12      0.0      0.0      0.0      0.0      0.0\nBlock 13      0.0      0.0      0.0      0.0      0.0\nBlock 14      0.0      0.0      0.0      0.0      0.0\nBlock 15      0.0      0.0      0.0      0.0      0.0\nBlock 16      0.0      0.0      0.0      0.0      0.0\nBlock 17      0.0      0.0      0.0      0.0      0.0\nBlock 18      0.0      0.0      0.0      0.0      0.0\nBlock 19      0.0      0.0      0.0      0.0      0.0\nBlock 20      0.0      0.0      0.0      0.0      0.0\nBlock 21      0.0      0.0      0.0      0.0      0.0\nBlock 22      0.0      0.0      0.0      0.0      0.0\nBlock 23      0.0      0.0      0.0      0.0      0.0\nBlock 24      0.5      0.0      0.0      0.0      0.0\nBlock 25      0.0      0.5      0.0      0.0      0.0\nBlock 26      0.0      0.0      0.5      0.0      0.0\nBlock 27      0.0      0.0      0.0      0.5      0.0\nBlock 28      0.0      0.0      0.0      0.0      0.5\n            Block 1    Block 2    Block 3   Block 4   Block 5\nBlock 1  0.05882353 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 2  0.00000000 0.08333333 0.00000000 0.0000000 0.0000000\nBlock 3  0.00000000 0.00000000 0.09090909 0.0000000 0.0000000\nBlock 4  0.00000000 0.00000000 0.00000000 0.1111111 0.0000000\nBlock 5  0.00000000 0.00000000 0.00000000 0.0000000 0.3333333\nBlock 6  0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 7  0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 8  0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 9  0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 10 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 11 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 12 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 13 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 14 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 15 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 16 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 17 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 18 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 19 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 20 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 21 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 22 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 23 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 24 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 25 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 26 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 27 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 28 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\n           Block 6   Block 7   Block 8   Block 9  Block 10  Block 11\nBlock 1  0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 2  0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 3  0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 4  0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 5  0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 6  0.3333333 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 7  0.0000000 0.3333333 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 8  0.0000000 0.0000000 0.3333333 0.0000000 0.0000000 0.0000000\nBlock 9  0.0000000 0.0000000 0.0000000 0.3333333 0.0000000 0.0000000\nBlock 10 0.0000000 0.0000000 0.0000000 0.0000000 0.3333333 0.0000000\nBlock 11 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.3333333\nBlock 12 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 13 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 14 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 15 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 16 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 17 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 18 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 19 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 20 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 21 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 22 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 23 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 24 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 25 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 26 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 27 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 28 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\n         Block 12 Block 13 Block 14 Block 15 Block 16 Block 17\nBlock 1       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 2       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 3       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 4       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 5       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 6       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 7       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 8       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 9       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 10      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 11      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 12      0.5      0.0      0.0      0.0      0.0      0.0\nBlock 13      0.0      0.5      0.0      0.0      0.0      0.0\nBlock 14      0.0      0.0      0.5      0.0      0.0      0.0\nBlock 15      0.0      0.0      0.0      0.5      0.0      0.0\nBlock 16      0.0      0.0      0.0      0.0      0.5      0.0\nBlock 17      0.0      0.0      0.0      0.0      0.0      0.5\nBlock 18      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 19      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 20      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 21      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 22      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 23      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 24      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 25      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 26      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 27      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 28      0.0      0.0      0.0      0.0      0.0      0.0\n         Block 18 Block 19 Block 20 Block 21 Block 22 Block 23\nBlock 1       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 2       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 3       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 4       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 5       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 6       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 7       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 8       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 9       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 10      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 11      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 12      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 13      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 14      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 15      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 16      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 17      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 18      0.5      0.0      0.0      0.0      0.0      0.0\nBlock 19      0.0      0.5      0.0      0.0      0.0      0.0\nBlock 20      0.0      0.0      0.5      0.0      0.0      0.0\nBlock 21      0.0      0.0      0.0      0.5      0.0      0.0\nBlock 22      0.0      0.0      0.0      0.0      0.5      0.0\nBlock 23      0.0      0.0      0.0      0.0      0.0      0.5\nBlock 24      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 25      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 26      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 27      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 28      0.0      0.0      0.0      0.0      0.0      0.0\n         Block 24 Block 25 Block 26 Block 27 Block 28\nBlock 1       0.0      0.0      0.0      0.0      0.0\nBlock 2       0.0      0.0      0.0      0.0      0.0\nBlock 3       0.0      0.0      0.0      0.0      0.0\nBlock 4       0.0      0.0      0.0      0.0      0.0\nBlock 5       0.0      0.0      0.0      0.0      0.0\nBlock 6       0.0      0.0      0.0      0.0      0.0\nBlock 7       0.0      0.0      0.0      0.0      0.0\nBlock 8       0.0      0.0      0.0      0.0      0.0\nBlock 9       0.0      0.0      0.0      0.0      0.0\nBlock 10      0.0      0.0      0.0      0.0      0.0\nBlock 11      0.0      0.0      0.0      0.0      0.0\nBlock 12      0.0      0.0      0.0      0.0      0.0\nBlock 13      0.0      0.0      0.0      0.0      0.0\nBlock 14      0.0      0.0      0.0      0.0      0.0\nBlock 15      0.0      0.0      0.0      0.0      0.0\nBlock 16      0.0      0.0      0.0      0.0      0.0\nBlock 17      0.0      0.0      0.0      0.0      0.0\nBlock 18      0.0      0.0      0.0      0.0      0.0\nBlock 19      0.0      0.0      0.0      0.0      0.0\nBlock 20      0.0      0.0      0.0      0.0      0.0\nBlock 21      0.0      0.0      0.0      0.0      0.0\nBlock 22      0.0      0.0      0.0      0.0      0.0\nBlock 23      0.0      0.0      0.0      0.0      0.0\nBlock 24      0.5      0.0      0.0      0.0      0.0\nBlock 25      0.0      0.5      0.0      0.0      0.0\nBlock 26      0.0      0.0      0.5      0.0      0.0\nBlock 27      0.0      0.0      0.0      0.5      0.0\nBlock 28      0.0      0.0      0.0      0.0      0.5\n         Block 1 Block 2 Block 3 Block 4 Block 5 Block 6 Block 7\nBlock 1    0.059   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 2    0.000   0.083   0.000    0.00    0.00    0.00    0.00\nBlock 3    0.000   0.000   0.091    0.00    0.00    0.00    0.00\nBlock 4    0.000   0.000   0.000    0.11    0.00    0.00    0.00\nBlock 5    0.000   0.000   0.000    0.00    0.33    0.00    0.00\nBlock 6    0.000   0.000   0.000    0.00    0.00    0.33    0.00\nBlock 7    0.000   0.000   0.000    0.00    0.00    0.00    0.33\nBlock 8    0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 9    0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 10   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 11   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 12   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 13   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 14   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 15   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 16   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 17   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 18   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 19   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 20   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 21   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 22   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 23   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 24   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 25   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 26   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 27   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 28   0.000   0.000   0.000    0.00    0.00    0.00    0.00\n         Block 8 Block 9 Block 10 Block 11 Block 12 Block 13 Block 14\nBlock 1     0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 2     0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 3     0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 4     0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 5     0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 6     0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 7     0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 8     0.33    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 9     0.00    0.33     0.00     0.00      0.0      0.0      0.0\nBlock 10    0.00    0.00     0.33     0.00      0.0      0.0      0.0\nBlock 11    0.00    0.00     0.00     0.33      0.0      0.0      0.0\nBlock 12    0.00    0.00     0.00     0.00      0.5      0.0      0.0\nBlock 13    0.00    0.00     0.00     0.00      0.0      0.5      0.0\nBlock 14    0.00    0.00     0.00     0.00      0.0      0.0      0.5\nBlock 15    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 16    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 17    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 18    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 19    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 20    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 21    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 22    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 23    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 24    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 25    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 26    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 27    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 28    0.00    0.00     0.00     0.00      0.0      0.0      0.0\n         Block 15 Block 16 Block 17 Block 18 Block 19 Block 20\nBlock 1       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 2       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 3       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 4       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 5       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 6       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 7       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 8       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 9       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 10      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 11      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 12      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 13      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 14      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 15      0.5      0.0      0.0      0.0      0.0      0.0\nBlock 16      0.0      0.5      0.0      0.0      0.0      0.0\nBlock 17      0.0      0.0      0.5      0.0      0.0      0.0\nBlock 18      0.0      0.0      0.0      0.5      0.0      0.0\nBlock 19      0.0      0.0      0.0      0.0      0.5      0.0\nBlock 20      0.0      0.0      0.0      0.0      0.0      0.5\nBlock 21      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 22      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 23      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 24      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 25      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 26      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 27      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 28      0.0      0.0      0.0      0.0      0.0      0.0\n         Block 21 Block 22 Block 23 Block 24 Block 25 Block 26\nBlock 1       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 2       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 3       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 4       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 5       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 6       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 7       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 8       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 9       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 10      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 11      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 12      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 13      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 14      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 15      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 16      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 17      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 18      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 19      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 20      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 21      0.5      0.0      0.0      0.0      0.0      0.0\nBlock 22      0.0      0.5      0.0      0.0      0.0      0.0\nBlock 23      0.0      0.0      0.5      0.0      0.0      0.0\nBlock 24      0.0      0.0      0.0      0.5      0.0      0.0\nBlock 25      0.0      0.0      0.0      0.0      0.5      0.0\nBlock 26      0.0      0.0      0.0      0.0      0.0      0.5\nBlock 27      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 28      0.0      0.0      0.0      0.0      0.0      0.0\n         Block 27 Block 28\nBlock 1       0.0      0.0\nBlock 2       0.0      0.0\nBlock 3       0.0      0.0\nBlock 4       0.0      0.0\nBlock 5       0.0      0.0\nBlock 6       0.0      0.0\nBlock 7       0.0      0.0\nBlock 8       0.0      0.0\nBlock 9       0.0      0.0\nBlock 10      0.0      0.0\nBlock 11      0.0      0.0\nBlock 12      0.0      0.0\nBlock 13      0.0      0.0\nBlock 14      0.0      0.0\nBlock 15      0.0      0.0\nBlock 16      0.0      0.0\nBlock 17      0.0      0.0\nBlock 18      0.0      0.0\nBlock 19      0.0      0.0\nBlock 20      0.0      0.0\nBlock 21      0.0      0.0\nBlock 22      0.0      0.0\nBlock 23      0.0      0.0\nBlock 24      0.0      0.0\nBlock 25      0.0      0.0\nBlock 26      0.0      0.0\nBlock 27      0.5      0.0\nBlock 28      0.0      0.5\n\n\n  [1]  8  2 16 28 20  7 12  4  5 19  1 25 23 22  9 27 10 26 24 18 17\n [22] 11 15 14 21 13  6  3  8  8  2  2  2  2  2  2  2  2  2  2  2 16\n [43] 28 20  7  7 12  4  4  4  4  4  4  4  4  5  5 19  1  1  1  1  1\n [64]  1  1  1  1  1  1  1  1  1  1  1 25 23 22  9  9 27 10 10 26 24\n [85] 18 17 11 11 15 14 21 13  6  6  3  3  3  3  3  3  3  3  3  3\n  [1] \"Albany\"                    \"Apprenticeship\"           \n  [3] \"Berkeley\"                  \"Bowdoin College\"          \n  [5] \"Centre Colllege\"           \"Cincinnati\"               \n  [7] \"Colorado\"                  \"Columbia\"                 \n  [9] \"Cumberland School of Law\"  \"Emory University\"         \n [11] \"Harvard\"                   \"Howard\"                   \n [13] \"Indiana\"                   \"Kansas City\"              \n [15] \"Michigan\"                  \"New York Law School\"      \n [17] \"Northwestern\"              \"Notre Dame\"               \n [19] \"Penn\"                      \"School\"                   \n [21] \"St. Paul College of Law\"   \"Stanford\"                 \n [23] \"Texas\"                     \"Transylvania University\"  \n [25] \"Tulane\"                    \"Virginia\"                 \n [27] \"Washington and Lee\"        \"Yale\"                     \n [29] \"David Brewer\"              \"Robert H. Jackson\"        \n [31] \"Rufus W. Peckham\"          \"James F. Byrnes\"          \n [33] \"Samuel Freeman Miller\"     \"Stanley Matthews\"         \n [35] \"John Clarke\"               \"Mahon Pitney\"             \n [37] \"Stephen Field\"             \"George Shiras Jr.\"        \n [39] \"Wiliam R. Day\"             \"Pierce Butler\"            \n [41] \"Joseph Bradley\"            \"Earl Warren\"              \n [43] \"Melville Fuller\"           \"Fred M. Vinson\"           \n [45] \"William Howard Taft\"       \"Willis Van Devanter\"      \n [47] \"Wiley Rutledge\"            \"Charles Evans Hughes\"     \n [49] \"Harland F. Stone\"          \"Samuel Blatchford\"        \n [51] \"Benjamin N. Cardozo\"       \"William O. Douglas\"       \n [53] \"Stanley Reed\"              \"Ruth Bader Ginsburg\"      \n [55] \"Joseph McKenna\"            \"Howell Edmunds Jackson\"   \n [57] \"Horace Lurton\"             \"Lucius Lamar\"             \n [59] \"John Roberts\"              \"Anthony Kennedy\"          \n [61] \"Horace Gray\"               \"Oliver Wendell Holmes Jr.\"\n [63] \"Felix Frankfurter\"         \"Harry Blackmun\"           \n [65] \"Stephen Breyer\"            \"William Brennan Jr.\"      \n [67] \"David Souter\"              \"William Moody\"            \n [69] \"Louis Brandeis\"            \"Elena Kagan\"              \n [71] \"Edward Sanford\"            \"Harold Burton\"            \n [73] \"Antonin Scalia\"            \"Neil Gorsuch\"             \n [75] \"Thurgood Marhsall\"         \"Sherman Minton\"           \n [77] \"Charles Whittaker\"         \"George Sutherland\"        \n [79] \"Frank Murphy\"              \"John Marshall Harlan II\"  \n [81] \"Arthur Goldberg\"           \"John Paul Stevens\"        \n [83] \"Amy Coney Barrett\"         \"Owen Roberts\"             \n [85] \"Justice\"                   \"Warren E. Burger\"         \n [87] \"William Rehnquist\"         \"Sandra Day O'Connor\"      \n [89] \"Tom Clark\"                 \"John Marshall Harlan\"     \n [91] \"Edward Douglas White\"      \"James McReynolds\"         \n [93] \"Lewis F. Powell Jr.\"       \"Joseph Lamar\"             \n [95] \"Morrison White\"            \"Brett Kavanaugh\"          \n [97] \"Abe Fortas\"                \"William Burnham Woods\"    \n [99] \"Sonia Sotomayor\"           \"Henry Billings Brown\"     \n[101] \"Byron White\"               \"Potter Stewart\"           \n[103] \"Samuel Alito\"              \"Clarence Thomas\"          \n                   Albany            Apprenticeship \n                        8                         2 \n                 Berkeley           Bowdoin College \n                       16                        28 \n          Centre Colllege                Cincinnati \n                       20                         7 \n                 Colorado                  Columbia \n                       12                         4 \n Cumberland School of Law          Emory University \n                        5                        19 \n                  Harvard                    Howard \n                        1                        25 \n                  Indiana               Kansas City \n                       23                        22 \n                 Michigan       New York Law School \n                        9                        27 \n             Northwestern                Notre Dame \n                       10                        26 \n                     Penn                    School \n                       24                        18 \n  St. Paul College of Law                  Stanford \n                       17                        11 \n                    Texas   Transylvania University \n                       15                        14 \n                   Tulane                  Virginia \n                       21                        13 \n       Washington and Lee                      Yale \n                        6                         3 \n             David Brewer         Robert H. Jackson \n                        8                         8 \n         Rufus W. Peckham           James F. Byrnes \n                        2                         2 \n    Samuel Freeman Miller          Stanley Matthews \n                        2                         2 \n              John Clarke              Mahon Pitney \n                        2                         2 \n            Stephen Field         George Shiras Jr. \n                        2                         2 \n            Wiliam R. Day             Pierce Butler \n                        2                         2 \n           Joseph Bradley               Earl Warren \n                        2                        16 \n          Melville Fuller            Fred M. Vinson \n                       28                        20 \n      William Howard Taft       Willis Van Devanter \n                        7                         7 \n           Wiley Rutledge      Charles Evans Hughes \n                       12                         4 \n         Harland F. Stone         Samuel Blatchford \n                        4                         4 \n      Benjamin N. Cardozo        William O. Douglas \n                        4                         4 \n             Stanley Reed       Ruth Bader Ginsburg \n                        4                         4 \n           Joseph McKenna    Howell Edmunds Jackson \n                        4                         5 \n            Horace Lurton              Lucius Lamar \n                        5                        19 \n             John Roberts           Anthony Kennedy \n                        1                         1 \n              Horace Gray Oliver Wendell Holmes Jr. \n                        1                         1 \n        Felix Frankfurter            Harry Blackmun \n                        1                         1 \n           Stephen Breyer       William Brennan Jr. \n                        1                         1 \n             David Souter             William Moody \n                        1                         1 \n           Louis Brandeis               Elena Kagan \n                        1                         1 \n           Edward Sanford             Harold Burton \n                        1                         1 \n           Antonin Scalia              Neil Gorsuch \n                        1                         1 \n        Thurgood Marhsall            Sherman Minton \n                       25                        23 \n        Charles Whittaker         George Sutherland \n                       22                         9 \n             Frank Murphy   John Marshall Harlan II \n                        9                        27 \n          Arthur Goldberg         John Paul Stevens \n                       10                        10 \n        Amy Coney Barrett              Owen Roberts \n                       26                        24 \n                  Justice          Warren E. Burger \n                       18                        17 \n        William Rehnquist       Sandra Day O'Connor \n                       11                        11 \n                Tom Clark      John Marshall Harlan \n                       15                        14 \n     Edward Douglas White          James McReynolds \n                       21                        13 \n      Lewis F. Powell Jr.              Joseph Lamar \n                        6                         6 \n           Morrison White           Brett Kavanaugh \n                        3                         3 \n               Abe Fortas     William Burnham Woods \n                        3                         3 \n          Sonia Sotomayor      Henry Billings Brown \n                        3                         3 \n              Byron White            Potter Stewart \n                        3                         3 \n             Samuel Alito           Clarence Thomas \n                        3                         3 \nNULL\n\n\n      comm.fg degree degree.wt betweenness  close constraint  n\n [1,]       1    1.9       1.9           0 0.0091       0.94 17\n [2,]       2    1.8       1.8           0 0.0089       0.92 12\n [3,]       3    1.8       1.8           0 0.0088       0.92 11\n [4,]       4    1.8       1.8           0 0.0086       0.90  9\n [5,]       5    1.3       1.3           0 0.0065       0.83  3\n [6,]       6    1.3       1.3           0 0.0065       0.83  3\n [7,]       7    1.3       1.3           0 0.0065       0.83  3\n [8,]       8    1.3       1.3           0 0.0065       0.83  3\n [9,]       9    1.3       1.3           0 0.0065       0.83  3\n[10,]      10    1.3       1.3           0 0.0065       0.83  3\n[11,]      11    1.3       1.3           0 0.0065       0.83  3\n[12,]      12    1.0       1.0           0 0.0049       1.00  2\n[13,]      13    1.0       1.0           0 0.0049       1.00  2\n[14,]      14    1.0       1.0           0 0.0049       1.00  2\n[15,]      15    1.0       1.0           0 0.0049       1.00  2\n[16,]      16    1.0       1.0           0 0.0049       1.00  2\n[17,]      17    1.0       1.0           0 0.0049       1.00  2\n[18,]      18    1.0       1.0           0 0.0049       1.00  2\n[19,]      19    1.0       1.0           0 0.0049       1.00  2\n[20,]      20    1.0       1.0           0 0.0049       1.00  2\n[21,]      21    1.0       1.0           0 0.0049       1.00  2\n[22,]      22    1.0       1.0           0 0.0049       1.00  2\n[23,]      23    1.0       1.0           0 0.0049       1.00  2\n[24,]      24    1.0       1.0           0 0.0049       1.00  2\n[25,]      25    1.0       1.0           0 0.0049       1.00  2\n[26,]      26    1.0       1.0           0 0.0049       1.00  2\n[27,]      27    1.0       1.0           0 0.0049       1.00  2\n[28,]      28    1.0       1.0           0 0.0049       1.00  2\n\n\n\n\n\n$`1`\n [1] \"Harvard\"                   \"John Roberts\"             \n [3] \"Anthony Kennedy\"           \"Horace Gray\"              \n [5] \"Oliver Wendell Holmes Jr.\" \"Felix Frankfurter\"        \n [7] \"Harry Blackmun\"            \"Stephen Breyer\"           \n [9] \"William Brennan Jr.\"       \"David Souter\"             \n[11] \"William Moody\"             \"Louis Brandeis\"           \n[13] \"Elena Kagan\"               \"Edward Sanford\"           \n[15] \"Harold Burton\"             \"Antonin Scalia\"           \n[17] \"Neil Gorsuch\"             \n\n$`2`\n [1] \"Apprenticeship\"        \"Rufus W. Peckham\"     \n [3] \"James F. Byrnes\"       \"Samuel Freeman Miller\"\n [5] \"Stanley Matthews\"      \"John Clarke\"          \n [7] \"Mahon Pitney\"          \"Stephen Field\"        \n [9] \"George Shiras Jr.\"     \"Wiliam R. Day\"        \n[11] \"Pierce Butler\"         \"Joseph Bradley\"       \n\n$`3`\n [1] \"Yale\"                  \"Morrison White\"       \n [3] \"Brett Kavanaugh\"       \"Abe Fortas\"           \n [5] \"William Burnham Woods\" \"Sonia Sotomayor\"      \n [7] \"Henry Billings Brown\"  \"Byron White\"          \n [9] \"Potter Stewart\"        \"Samuel Alito\"         \n[11] \"Clarence Thomas\"      \n\n$`4`\n[1] \"Columbia\"             \"Charles Evans Hughes\"\n[3] \"Harland F. Stone\"     \"Samuel Blatchford\"   \n[5] \"Benjamin N. Cardozo\"  \"William O. Douglas\"  \n[7] \"Stanley Reed\"         \"Ruth Bader Ginsburg\" \n[9] \"Joseph McKenna\"      \n\n$`5`\n[1] \"Washington and Lee\"  \"Lewis F. Powell Jr.\" \"Joseph Lamar\"       \n\n$`6`\n[1] \"Cincinnati\"          \"William Howard Taft\" \"Willis Van Devanter\"\n\n$`7`\n[1] \"Northwestern\"      \"Arthur Goldberg\"   \"John Paul Stevens\"\n\n$`8`\n[1] \"Albany\"            \"David Brewer\"      \"Robert H. Jackson\"\n\n$`9`\n[1] \"Cumberland School of Law\" \"Howell Edmunds Jackson\"  \n[3] \"Horace Lurton\"           \n\n$`10`\n[1] \"Stanford\"            \"William Rehnquist\"   \"Sandra Day O'Connor\"\n\n$`11`\n[1] \"Michigan\"          \"George Sutherland\" \"Frank Murphy\"     \n\n$`12`\n[1] \"Centre Colllege\" \"Fred M. Vinson\" \n\n$`13`\n[1] \"Emory University\" \"Lucius Lamar\"    \n\n$`14`\n[1] \"St. Paul College of Law\" \"Warren E. Burger\"       \n\n$`15`\n[1] \"Texas\"     \"Tom Clark\"\n\n$`16`\n[1] \"Bowdoin College\" \"Melville Fuller\"\n\n$`17`\n[1] \"Notre Dame\"        \"Amy Coney Barrett\"\n\n$`18`\n[1] \"Penn\"         \"Owen Roberts\"\n\n$`19`\n[1] \"School\"  \"Justice\"\n\n$`20`\n[1] \"Transylvania University\" \"John Marshall Harlan\"   \n\n$`21`\n[1] \"Berkeley\"    \"Earl Warren\"\n\n$`22`\n[1] \"New York Law School\"     \"John Marshall Harlan II\"\n\n$`23`\n[1] \"Indiana\"        \"Sherman Minton\"\n\n$`24`\n[1] \"Howard\"            \"Thurgood Marhsall\"\n\n$`25`\n[1] \"Kansas City\"       \"Charles Whittaker\"\n\n$`26`\n[1] \"Colorado\"       \"Wiley Rutledge\"\n\n$`27`\n[1] \"Tulane\"               \"Edward Douglas White\"\n\n$`28`\n[1] \"Virginia\"         \"James McReynolds\"\n$`1`\n [1] \"Harvard\"                   \"John Roberts\"             \n [3] \"Anthony Kennedy\"           \"Horace Gray\"              \n [5] \"Oliver Wendell Holmes Jr.\" \"Felix Frankfurter\"        \n [7] \"Harry Blackmun\"            \"Stephen Breyer\"           \n [9] \"William Brennan Jr.\"       \"David Souter\"             \n[11] \"William Moody\"             \"Louis Brandeis\"           \n[13] \"Elena Kagan\"               \"Edward Sanford\"           \n[15] \"Harold Burton\"             \"Antonin Scalia\"           \n[17] \"Neil Gorsuch\"             \n\n$`2`\n [1] \"Apprenticeship\"        \"Rufus W. Peckham\"     \n [3] \"James F. Byrnes\"       \"Samuel Freeman Miller\"\n [5] \"Stanley Matthews\"      \"John Clarke\"          \n [7] \"Mahon Pitney\"          \"Stephen Field\"        \n [9] \"George Shiras Jr.\"     \"Wiliam R. Day\"        \n[11] \"Pierce Butler\"         \"Joseph Bradley\"       \n\n$`3`\n [1] \"Yale\"                  \"Morrison White\"       \n [3] \"Brett Kavanaugh\"       \"Abe Fortas\"           \n [5] \"William Burnham Woods\" \"Sonia Sotomayor\"      \n [7] \"Henry Billings Brown\"  \"Byron White\"          \n [9] \"Potter Stewart\"        \"Samuel Alito\"         \n[11] \"Clarence Thomas\"      \n\n$`4`\n[1] \"Columbia\"             \"Charles Evans Hughes\"\n[3] \"Harland F. Stone\"     \"Samuel Blatchford\"   \n[5] \"Benjamin N. Cardozo\"  \"William O. Douglas\"  \n[7] \"Stanley Reed\"         \"Ruth Bader Ginsburg\" \n[9] \"Joseph McKenna\"      \n\n$`5`\n[1] \"Washington and Lee\"  \"Lewis F. Powell Jr.\" \"Joseph Lamar\"       \n\n$`6`\n[1] \"Cincinnati\"          \"William Howard Taft\" \"Willis Van Devanter\"\n\n$`7`\n[1] \"Northwestern\"      \"Arthur Goldberg\"   \"John Paul Stevens\"\n\n$`8`\n[1] \"Albany\"            \"David Brewer\"      \"Robert H. Jackson\"\n\n$`9`\n[1] \"Michigan\"          \"George Sutherland\" \"Frank Murphy\"     \n\n$`10`\n[1] \"Cumberland School of Law\" \"Howell Edmunds Jackson\"  \n[3] \"Horace Lurton\"           \n\n$`11`\n[1] \"Stanford\"            \"William Rehnquist\"   \"Sandra Day O'Connor\"\n\n$`12`\n[1] \"Centre Colllege\" \"Fred M. Vinson\" \n\n$`13`\n[1] \"Emory University\" \"Lucius Lamar\"    \n\n$`14`\n[1] \"St. Paul College of Law\" \"Warren E. Burger\"       \n\n$`15`\n[1] \"Texas\"     \"Tom Clark\"\n\n$`16`\n[1] \"Bowdoin College\" \"Melville Fuller\"\n\n$`17`\n[1] \"Notre Dame\"        \"Amy Coney Barrett\"\n\n$`18`\n[1] \"Penn\"         \"Owen Roberts\"\n\n$`19`\n[1] \"School\"  \"Justice\"\n\n$`20`\n[1] \"Transylvania University\" \"John Marshall Harlan\"   \n\n$`21`\n[1] \"Berkeley\"    \"Earl Warren\"\n\n$`22`\n[1] \"New York Law School\"     \"John Marshall Harlan II\"\n\n$`23`\n[1] \"Indiana\"        \"Sherman Minton\"\n\n$`24`\n[1] \"Howard\"            \"Thurgood Marhsall\"\n\n$`25`\n[1] \"Kansas City\"       \"Charles Whittaker\"\n\n$`26`\n[1] \"Colorado\"       \"Wiley Rutledge\"\n\n$`27`\n[1] \"Tulane\"               \"Edward Douglas White\"\n\n$`28`\n[1] \"Virginia\"         \"James McReynolds\"\n$`1`\n [1] \"Apprenticeship\"        \"Rufus W. Peckham\"     \n [3] \"James F. Byrnes\"       \"Samuel Freeman Miller\"\n [5] \"Stanley Matthews\"      \"John Clarke\"          \n [7] \"Mahon Pitney\"          \"Stephen Field\"        \n [9] \"George Shiras Jr.\"     \"Wiliam R. Day\"        \n[11] \"Pierce Butler\"         \"Joseph Bradley\"       \n\n$`2`\n [1] \"Harvard\"                   \"John Roberts\"             \n [3] \"Anthony Kennedy\"           \"Horace Gray\"              \n [5] \"Oliver Wendell Holmes Jr.\" \"Felix Frankfurter\"        \n [7] \"Harry Blackmun\"            \"Stephen Breyer\"           \n [9] \"William Brennan Jr.\"       \"David Souter\"             \n[11] \"William Moody\"             \"Louis Brandeis\"           \n[13] \"Elena Kagan\"               \"Edward Sanford\"           \n[15] \"Harold Burton\"             \"Antonin Scalia\"           \n[17] \"Neil Gorsuch\"             \n\n$`3`\n [1] \"Yale\"                  \"Morrison White\"       \n [3] \"Brett Kavanaugh\"       \"Abe Fortas\"           \n [5] \"William Burnham Woods\" \"Sonia Sotomayor\"      \n [7] \"Henry Billings Brown\"  \"Byron White\"          \n [9] \"Potter Stewart\"        \"Samuel Alito\"         \n[11] \"Clarence Thomas\"      \n\n$`4`\n[1] \"Columbia\"             \"Charles Evans Hughes\"\n[3] \"Harland F. Stone\"     \"Samuel Blatchford\"   \n[5] \"Benjamin N. Cardozo\"  \"William O. Douglas\"  \n[7] \"Stanley Reed\"         \"Ruth Bader Ginsburg\" \n[9] \"Joseph McKenna\"      \n\n$`5`\n[1] \"Washington and Lee\"  \"Lewis F. Powell Jr.\" \"Joseph Lamar\"       \n\n$`6`\n[1] \"Cincinnati\"          \"William Howard Taft\" \"Willis Van Devanter\"\n\n$`7`\n[1] \"Northwestern\"      \"Arthur Goldberg\"   \"John Paul Stevens\"\n\n$`8`\n[1] \"Albany\"            \"David Brewer\"      \"Robert H. Jackson\"\n\n$`9`\n[1] \"Cumberland School of Law\" \"Howell Edmunds Jackson\"  \n[3] \"Horace Lurton\"           \n\n$`10`\n[1] \"Stanford\"            \"William Rehnquist\"   \"Sandra Day O'Connor\"\n\n$`11`\n[1] \"Michigan\"          \"George Sutherland\" \"Frank Murphy\"     \n\n$`12`\n[1] \"Centre Colllege\" \"Fred M. Vinson\" \n\n$`13`\n[1] \"Emory University\" \"Lucius Lamar\"    \n\n$`14`\n[1] \"St. Paul College of Law\" \"Warren E. Burger\"       \n\n$`15`\n[1] \"Texas\"     \"Tom Clark\"\n\n$`16`\n[1] \"Bowdoin College\" \"Melville Fuller\"\n\n$`17`\n[1] \"Notre Dame\"        \"Amy Coney Barrett\"\n\n$`18`\n[1] \"Penn\"         \"Owen Roberts\"\n\n$`19`\n[1] \"School\"  \"Justice\"\n\n$`20`\n[1] \"Transylvania University\" \"John Marshall Harlan\"   \n\n$`21`\n[1] \"Berkeley\"    \"Earl Warren\"\n\n$`22`\n[1] \"New York Law School\"     \"John Marshall Harlan II\"\n\n$`23`\n[1] \"Indiana\"        \"Sherman Minton\"\n\n$`24`\n[1] \"Howard\"            \"Thurgood Marhsall\"\n\n$`25`\n[1] \"Kansas City\"       \"Charles Whittaker\"\n\n$`26`\n[1] \"Colorado\"       \"Wiley Rutledge\"\n\n$`27`\n[1] \"Tulane\"               \"Edward Douglas White\"\n\n$`28`\n[1] \"Virginia\"         \"James McReynolds\"\n$`1`\n [1] \"Apprenticeship\"        \"Rufus W. Peckham\"     \n [3] \"James F. Byrnes\"       \"Samuel Freeman Miller\"\n [5] \"Stanley Matthews\"      \"John Clarke\"          \n [7] \"Mahon Pitney\"          \"Stephen Field\"        \n [9] \"George Shiras Jr.\"     \"Wiliam R. Day\"        \n[11] \"Pierce Butler\"         \"Joseph Bradley\"       \n\n$`2`\n [1] \"Harvard\"                   \"John Roberts\"             \n [3] \"Anthony Kennedy\"           \"Horace Gray\"              \n [5] \"Oliver Wendell Holmes Jr.\" \"Felix Frankfurter\"        \n [7] \"Harry Blackmun\"            \"Stephen Breyer\"           \n [9] \"William Brennan Jr.\"       \"David Souter\"             \n[11] \"William Moody\"             \"Louis Brandeis\"           \n[13] \"Elena Kagan\"               \"Edward Sanford\"           \n[15] \"Harold Burton\"             \"Antonin Scalia\"           \n[17] \"Neil Gorsuch\"             \n\n$`3`\n[1] \"Northwestern\"      \"Arthur Goldberg\"   \"John Paul Stevens\"\n\n$`4`\n[1] \"Stanford\"            \"William Rehnquist\"   \"Sandra Day O'Connor\"\n\n$`5`\n[1] \"Cincinnati\"          \"William Howard Taft\" \"Willis Van Devanter\"\n\n$`6`\n[1] \"Michigan\"          \"George Sutherland\" \"Frank Murphy\"     \n\n$`7`\n[1] \"Albany\"            \"David Brewer\"      \"Robert H. Jackson\"\n\n$`8`\n[1] \"Cumberland School of Law\" \"Howell Edmunds Jackson\"  \n[3] \"Horace Lurton\"           \n\n$`9`\n[1] \"Washington and Lee\"  \"Lewis F. Powell Jr.\" \"Joseph Lamar\"       \n\n$`10`\n [1] \"Yale\"                  \"Morrison White\"       \n [3] \"Brett Kavanaugh\"       \"Abe Fortas\"           \n [5] \"William Burnham Woods\" \"Sonia Sotomayor\"      \n [7] \"Henry Billings Brown\"  \"Byron White\"          \n [9] \"Potter Stewart\"        \"Samuel Alito\"         \n[11] \"Clarence Thomas\"      \n\n$`11`\n[1] \"Columbia\"             \"Charles Evans Hughes\"\n[3] \"Harland F. Stone\"     \"Samuel Blatchford\"   \n[5] \"Benjamin N. Cardozo\"  \"William O. Douglas\"  \n[7] \"Stanley Reed\"         \"Ruth Bader Ginsburg\" \n[9] \"Joseph McKenna\"      \n\n$`12`\n[1] \"Centre Colllege\" \"Fred M. Vinson\" \n\n$`13`\n[1] \"St. Paul College of Law\" \"Warren E. Burger\"       \n\n$`14`\n[1] \"Texas\"     \"Tom Clark\"\n\n$`15`\n[1] \"Bowdoin College\" \"Melville Fuller\"\n\n$`16`\n[1] \"Notre Dame\"        \"Amy Coney Barrett\"\n\n$`17`\n[1] \"Penn\"         \"Owen Roberts\"\n\n$`18`\n[1] \"School\"  \"Justice\"\n\n$`19`\n[1] \"Emory University\" \"Lucius Lamar\"    \n\n$`20`\n[1] \"Transylvania University\" \"John Marshall Harlan\"   \n\n$`21`\n[1] \"Berkeley\"    \"Earl Warren\"\n\n$`22`\n[1] \"New York Law School\"     \"John Marshall Harlan II\"\n\n$`23`\n[1] \"Indiana\"        \"Sherman Minton\"\n\n$`24`\n[1] \"Howard\"            \"Thurgood Marhsall\"\n\n$`25`\n[1] \"Kansas City\"       \"Charles Whittaker\"\n\n$`26`\n[1] \"Colorado\"       \"Wiley Rutledge\"\n\n$`27`\n[1] \"Tulane\"               \"Edward Douglas White\"\n\n$`28`\n[1] \"Virginia\"         \"James McReynolds\"\n\n\n         Block 1 Block 2 Block 3 Block 4 Block 5 Block 6 Block 7\nBlock 1    0.059   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 2    0.000   0.083   0.000    0.00    0.00    0.00    0.00\nBlock 3    0.000   0.000   0.091    0.00    0.00    0.00    0.00\nBlock 4    0.000   0.000   0.000    0.11    0.00    0.00    0.00\nBlock 5    0.000   0.000   0.000    0.00    0.33    0.00    0.00\nBlock 6    0.000   0.000   0.000    0.00    0.00    0.33    0.00\nBlock 7    0.000   0.000   0.000    0.00    0.00    0.00    0.33\nBlock 8    0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 9    0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 10   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 11   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 12   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 13   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 14   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 15   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 16   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 17   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 18   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 19   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 20   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 21   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 22   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 23   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 24   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 25   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 26   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 27   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 28   0.000   0.000   0.000    0.00    0.00    0.00    0.00\n         Block 8 Block 9 Block 10 Block 11 Block 12 Block 13 Block 14\nBlock 1     0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 2     0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 3     0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 4     0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 5     0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 6     0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 7     0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 8     0.33    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 9     0.00    0.33     0.00     0.00      0.0      0.0      0.0\nBlock 10    0.00    0.00     0.33     0.00      0.0      0.0      0.0\nBlock 11    0.00    0.00     0.00     0.33      0.0      0.0      0.0\nBlock 12    0.00    0.00     0.00     0.00      0.5      0.0      0.0\nBlock 13    0.00    0.00     0.00     0.00      0.0      0.5      0.0\nBlock 14    0.00    0.00     0.00     0.00      0.0      0.0      0.5\nBlock 15    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 16    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 17    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 18    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 19    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 20    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 21    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 22    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 23    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 24    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 25    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 26    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 27    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 28    0.00    0.00     0.00     0.00      0.0      0.0      0.0\n         Block 15 Block 16 Block 17 Block 18 Block 19 Block 20\nBlock 1       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 2       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 3       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 4       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 5       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 6       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 7       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 8       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 9       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 10      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 11      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 12      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 13      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 14      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 15      0.5      0.0      0.0      0.0      0.0      0.0\nBlock 16      0.0      0.5      0.0      0.0      0.0      0.0\nBlock 17      0.0      0.0      0.5      0.0      0.0      0.0\nBlock 18      0.0      0.0      0.0      0.5      0.0      0.0\nBlock 19      0.0      0.0      0.0      0.0      0.5      0.0\nBlock 20      0.0      0.0      0.0      0.0      0.0      0.5\nBlock 21      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 22      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 23      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 24      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 25      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 26      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 27      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 28      0.0      0.0      0.0      0.0      0.0      0.0\n         Block 21 Block 22 Block 23 Block 24 Block 25 Block 26\nBlock 1       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 2       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 3       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 4       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 5       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 6       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 7       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 8       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 9       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 10      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 11      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 12      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 13      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 14      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 15      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 16      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 17      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 18      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 19      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 20      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 21      0.5      0.0      0.0      0.0      0.0      0.0\nBlock 22      0.0      0.5      0.0      0.0      0.0      0.0\nBlock 23      0.0      0.0      0.5      0.0      0.0      0.0\nBlock 24      0.0      0.0      0.0      0.5      0.0      0.0\nBlock 25      0.0      0.0      0.0      0.0      0.5      0.0\nBlock 26      0.0      0.0      0.0      0.0      0.0      0.5\nBlock 27      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 28      0.0      0.0      0.0      0.0      0.0      0.0\n         Block 27 Block 28\nBlock 1       0.0      0.0\nBlock 2       0.0      0.0\nBlock 3       0.0      0.0\nBlock 4       0.0      0.0\nBlock 5       0.0      0.0\nBlock 6       0.0      0.0\nBlock 7       0.0      0.0\nBlock 8       0.0      0.0\nBlock 9       0.0      0.0\nBlock 10      0.0      0.0\nBlock 11      0.0      0.0\nBlock 12      0.0      0.0\nBlock 13      0.0      0.0\nBlock 14      0.0      0.0\nBlock 15      0.0      0.0\nBlock 16      0.0      0.0\nBlock 17      0.0      0.0\nBlock 18      0.0      0.0\nBlock 19      0.0      0.0\nBlock 20      0.0      0.0\nBlock 21      0.0      0.0\nBlock 22      0.0      0.0\nBlock 23      0.0      0.0\nBlock 24      0.0      0.0\nBlock 25      0.0      0.0\nBlock 26      0.0      0.0\nBlock 27      0.5      0.0\nBlock 28      0.0      0.5\n\n\n\n\n\n\n\n\n[1] 0.8985457\n[1] 0.8985457\n\n\n[1] 0\n[1] 0\n[1] 1\n[1] 1\n\n\n$`1`\n[1] \"Albany\"            \"David Brewer\"      \"Robert H. Jackson\"\n\n$`2`\n [1] \"Apprenticeship\"        \"Rufus W. Peckham\"     \n [3] \"James F. Byrnes\"       \"Samuel Freeman Miller\"\n [5] \"Stanley Matthews\"      \"John Clarke\"          \n [7] \"Mahon Pitney\"          \"Stephen Field\"        \n [9] \"George Shiras Jr.\"     \"Wiliam R. Day\"        \n[11] \"Pierce Butler\"         \"Joseph Bradley\"       \n\n$`3`\n[1] \"Berkeley\"    \"Earl Warren\"\n\n$`4`\n[1] \"Bowdoin College\" \"Melville Fuller\"\n\n$`5`\n[1] \"Centre Colllege\" \"Fred M. Vinson\" \n\n$`6`\n[1] \"Cincinnati\"          \"William Howard Taft\" \"Willis Van Devanter\"\n\n$`7`\n[1] \"Colorado\"       \"Wiley Rutledge\"\n\n$`8`\n[1] \"Columbia\"             \"Charles Evans Hughes\"\n[3] \"Harland F. Stone\"     \"Samuel Blatchford\"   \n[5] \"Benjamin N. Cardozo\"  \"William O. Douglas\"  \n[7] \"Stanley Reed\"         \"Ruth Bader Ginsburg\" \n[9] \"Joseph McKenna\"      \n\n$`9`\n[1] \"Cumberland School of Law\" \"Howell Edmunds Jackson\"  \n[3] \"Horace Lurton\"           \n\n$`10`\n[1] \"Emory University\" \"Lucius Lamar\"    \n\n$`11`\n [1] \"Harvard\"                   \"John Roberts\"             \n [3] \"Anthony Kennedy\"           \"Horace Gray\"              \n [5] \"Oliver Wendell Holmes Jr.\" \"Felix Frankfurter\"        \n [7] \"Harry Blackmun\"            \"Stephen Breyer\"           \n [9] \"William Brennan Jr.\"       \"David Souter\"             \n[11] \"William Moody\"             \"Louis Brandeis\"           \n[13] \"Elena Kagan\"               \"Edward Sanford\"           \n[15] \"Harold Burton\"             \"Antonin Scalia\"           \n[17] \"Neil Gorsuch\"             \n\n$`12`\n[1] \"Howard\"            \"Thurgood Marhsall\"\n\n$`13`\n[1] \"Indiana\"        \"Sherman Minton\"\n\n$`14`\n[1] \"Kansas City\"       \"Charles Whittaker\"\n\n$`15`\n[1] \"Michigan\"          \"George Sutherland\" \"Frank Murphy\"     \n\n$`16`\n[1] \"New York Law School\"     \"John Marshall Harlan II\"\n\n$`17`\n[1] \"Northwestern\"      \"Arthur Goldberg\"   \"John Paul Stevens\"\n\n$`18`\n[1] \"Notre Dame\"        \"Amy Coney Barrett\"\n\n$`19`\n[1] \"Penn\"         \"Owen Roberts\"\n\n$`20`\n[1] \"School\"  \"Justice\"\n\n$`21`\n[1] \"St. Paul College of Law\" \"Warren E. Burger\"       \n\n$`22`\n[1] \"Stanford\"            \"William Rehnquist\"   \"Sandra Day O'Connor\"\n\n$`23`\n[1] \"Texas\"     \"Tom Clark\"\n\n$`24`\n[1] \"Transylvania University\" \"John Marshall Harlan\"   \n\n$`25`\n[1] \"Tulane\"               \"Edward Douglas White\"\n\n$`26`\n[1] \"Virginia\"         \"James McReynolds\"\n\n$`27`\n[1] \"Washington and Lee\"  \"Lewis F. Powell Jr.\" \"Joseph Lamar\"       \n\n$`28`\n [1] \"Yale\"                  \"Morrison White\"       \n [3] \"Brett Kavanaugh\"       \"Abe Fortas\"           \n [5] \"William Burnham Woods\" \"Sonia Sotomayor\"      \n [7] \"Henry Billings Brown\"  \"Byron White\"          \n [9] \"Potter Stewart\"        \"Samuel Alito\"         \n[11] \"Clarence Thomas\"      \n         Block 1 Block 2 Block 3 Block 4 Block 5 Block 6 Block 7\nBlock 1     0.33   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 2     0.00   0.083     0.0     0.0     0.0    0.00     0.0\nBlock 3     0.00   0.000     0.5     0.0     0.0    0.00     0.0\nBlock 4     0.00   0.000     0.0     0.5     0.0    0.00     0.0\nBlock 5     0.00   0.000     0.0     0.0     0.5    0.00     0.0\nBlock 6     0.00   0.000     0.0     0.0     0.0    0.33     0.0\nBlock 7     0.00   0.000     0.0     0.0     0.0    0.00     0.5\nBlock 8     0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 9     0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 10    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 11    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 12    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 13    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 14    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 15    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 16    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 17    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 18    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 19    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 20    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 21    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 22    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 23    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 24    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 25    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 26    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 27    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 28    0.00   0.000     0.0     0.0     0.0    0.00     0.0\n         Block 8 Block 9 Block 10 Block 11 Block 12 Block 13 Block 14\nBlock 1     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 2     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 3     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 4     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 5     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 6     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 7     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 8     0.11    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 9     0.00    0.33      0.0    0.000      0.0      0.0      0.0\nBlock 10    0.00    0.00      0.5    0.000      0.0      0.0      0.0\nBlock 11    0.00    0.00      0.0    0.059      0.0      0.0      0.0\nBlock 12    0.00    0.00      0.0    0.000      0.5      0.0      0.0\nBlock 13    0.00    0.00      0.0    0.000      0.0      0.5      0.0\nBlock 14    0.00    0.00      0.0    0.000      0.0      0.0      0.5\nBlock 15    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 16    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 17    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 18    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 19    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 20    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 21    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 22    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 23    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 24    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 25    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 26    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 27    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 28    0.00    0.00      0.0    0.000      0.0      0.0      0.0\n         Block 15 Block 16 Block 17 Block 18 Block 19 Block 20\nBlock 1      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 2      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 3      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 4      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 5      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 6      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 7      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 8      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 9      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 10     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 11     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 12     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 13     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 14     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 15     0.33      0.0     0.00      0.0      0.0      0.0\nBlock 16     0.00      0.5     0.00      0.0      0.0      0.0\nBlock 17     0.00      0.0     0.33      0.0      0.0      0.0\nBlock 18     0.00      0.0     0.00      0.5      0.0      0.0\nBlock 19     0.00      0.0     0.00      0.0      0.5      0.0\nBlock 20     0.00      0.0     0.00      0.0      0.0      0.5\nBlock 21     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 22     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 23     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 24     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 25     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 26     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 27     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 28     0.00      0.0     0.00      0.0      0.0      0.0\n         Block 21 Block 22 Block 23 Block 24 Block 25 Block 26\nBlock 1       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 2       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 3       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 4       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 5       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 6       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 7       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 8       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 9       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 10      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 11      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 12      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 13      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 14      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 15      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 16      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 17      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 18      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 19      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 20      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 21      0.5     0.00      0.0      0.0      0.0      0.0\nBlock 22      0.0     0.33      0.0      0.0      0.0      0.0\nBlock 23      0.0     0.00      0.5      0.0      0.0      0.0\nBlock 24      0.0     0.00      0.0      0.5      0.0      0.0\nBlock 25      0.0     0.00      0.0      0.0      0.5      0.0\nBlock 26      0.0     0.00      0.0      0.0      0.0      0.5\nBlock 27      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 28      0.0     0.00      0.0      0.0      0.0      0.0\n         Block 27 Block 28\nBlock 1      0.00    0.000\nBlock 2      0.00    0.000\nBlock 3      0.00    0.000\nBlock 4      0.00    0.000\nBlock 5      0.00    0.000\nBlock 6      0.00    0.000\nBlock 7      0.00    0.000\nBlock 8      0.00    0.000\nBlock 9      0.00    0.000\nBlock 10     0.00    0.000\nBlock 11     0.00    0.000\nBlock 12     0.00    0.000\nBlock 13     0.00    0.000\nBlock 14     0.00    0.000\nBlock 15     0.00    0.000\nBlock 16     0.00    0.000\nBlock 17     0.00    0.000\nBlock 18     0.00    0.000\nBlock 19     0.00    0.000\nBlock 20     0.00    0.000\nBlock 21     0.00    0.000\nBlock 22     0.00    0.000\nBlock 23     0.00    0.000\nBlock 24     0.00    0.000\nBlock 25     0.00    0.000\nBlock 26     0.00    0.000\nBlock 27     0.33    0.000\nBlock 28     0.00    0.091\n\n\n\n$`1`\n[1] \"Albany\"            \"David Brewer\"      \"Robert H. Jackson\"\n\n$`2`\n [1] \"Apprenticeship\"        \"Rufus W. Peckham\"     \n [3] \"James F. Byrnes\"       \"Samuel Freeman Miller\"\n [5] \"Stanley Matthews\"      \"John Clarke\"          \n [7] \"Mahon Pitney\"          \"Stephen Field\"        \n [9] \"George Shiras Jr.\"     \"Wiliam R. Day\"        \n[11] \"Pierce Butler\"         \"Joseph Bradley\"       \n\n$`3`\n[1] \"Berkeley\"    \"Earl Warren\"\n\n$`4`\n[1] \"Bowdoin College\" \"Melville Fuller\"\n\n$`5`\n[1] \"Centre Colllege\" \"Fred M. Vinson\" \n\n$`6`\n[1] \"Cincinnati\"          \"William Howard Taft\" \"Willis Van Devanter\"\n\n$`7`\n[1] \"Colorado\"       \"Wiley Rutledge\"\n\n$`8`\n[1] \"Columbia\"             \"Charles Evans Hughes\"\n[3] \"Harland F. Stone\"     \"Samuel Blatchford\"   \n[5] \"Benjamin N. Cardozo\"  \"William O. Douglas\"  \n[7] \"Stanley Reed\"         \"Ruth Bader Ginsburg\" \n[9] \"Joseph McKenna\"      \n\n$`9`\n[1] \"Cumberland School of Law\" \"Howell Edmunds Jackson\"  \n[3] \"Horace Lurton\"           \n\n$`10`\n[1] \"Emory University\" \"Lucius Lamar\"    \n\n$`11`\n [1] \"Harvard\"                   \"John Roberts\"             \n [3] \"Anthony Kennedy\"           \"Horace Gray\"              \n [5] \"Oliver Wendell Holmes Jr.\" \"Felix Frankfurter\"        \n [7] \"Harry Blackmun\"            \"Stephen Breyer\"           \n [9] \"William Brennan Jr.\"       \"David Souter\"             \n[11] \"William Moody\"             \"Louis Brandeis\"           \n[13] \"Elena Kagan\"               \"Edward Sanford\"           \n[15] \"Harold Burton\"             \"Antonin Scalia\"           \n[17] \"Neil Gorsuch\"             \n\n$`12`\n[1] \"Howard\"            \"Thurgood Marhsall\"\n\n$`13`\n[1] \"Indiana\"        \"Sherman Minton\"\n\n$`14`\n[1] \"Kansas City\"       \"Charles Whittaker\"\n\n$`15`\n[1] \"Michigan\"          \"George Sutherland\" \"Frank Murphy\"     \n\n$`16`\n[1] \"New York Law School\"     \"John Marshall Harlan II\"\n\n$`17`\n[1] \"Northwestern\"      \"Arthur Goldberg\"   \"John Paul Stevens\"\n\n$`18`\n[1] \"Notre Dame\"        \"Amy Coney Barrett\"\n\n$`19`\n[1] \"Penn\"         \"Owen Roberts\"\n\n$`20`\n[1] \"School\"  \"Justice\"\n\n$`21`\n[1] \"St. Paul College of Law\" \"Warren E. Burger\"       \n\n$`22`\n[1] \"Stanford\"            \"William Rehnquist\"   \"Sandra Day O'Connor\"\n\n$`23`\n[1] \"Texas\"     \"Tom Clark\"\n\n$`24`\n[1] \"Transylvania University\" \"John Marshall Harlan\"   \n\n$`25`\n[1] \"Tulane\"               \"Edward Douglas White\"\n\n$`26`\n[1] \"Virginia\"         \"James McReynolds\"\n\n$`27`\n[1] \"Washington and Lee\"  \"Lewis F. Powell Jr.\" \"Joseph Lamar\"       \n\n$`28`\n [1] \"Yale\"                  \"Morrison White\"       \n [3] \"Brett Kavanaugh\"       \"Abe Fortas\"           \n [5] \"William Burnham Woods\" \"Sonia Sotomayor\"      \n [7] \"Henry Billings Brown\"  \"Byron White\"          \n [9] \"Potter Stewart\"        \"Samuel Alito\"         \n[11] \"Clarence Thomas\"      \n\n\n         Block 1 Block 2 Block 3 Block 4 Block 5 Block 6 Block 7\nBlock 1     0.33   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 2     0.00   0.083     0.0     0.0     0.0    0.00     0.0\nBlock 3     0.00   0.000     0.5     0.0     0.0    0.00     0.0\nBlock 4     0.00   0.000     0.0     0.5     0.0    0.00     0.0\nBlock 5     0.00   0.000     0.0     0.0     0.5    0.00     0.0\nBlock 6     0.00   0.000     0.0     0.0     0.0    0.33     0.0\nBlock 7     0.00   0.000     0.0     0.0     0.0    0.00     0.5\nBlock 8     0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 9     0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 10    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 11    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 12    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 13    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 14    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 15    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 16    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 17    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 18    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 19    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 20    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 21    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 22    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 23    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 24    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 25    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 26    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 27    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 28    0.00   0.000     0.0     0.0     0.0    0.00     0.0\n         Block 8 Block 9 Block 10 Block 11 Block 12 Block 13 Block 14\nBlock 1     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 2     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 3     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 4     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 5     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 6     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 7     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 8     0.11    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 9     0.00    0.33      0.0    0.000      0.0      0.0      0.0\nBlock 10    0.00    0.00      0.5    0.000      0.0      0.0      0.0\nBlock 11    0.00    0.00      0.0    0.059      0.0      0.0      0.0\nBlock 12    0.00    0.00      0.0    0.000      0.5      0.0      0.0\nBlock 13    0.00    0.00      0.0    0.000      0.0      0.5      0.0\nBlock 14    0.00    0.00      0.0    0.000      0.0      0.0      0.5\nBlock 15    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 16    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 17    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 18    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 19    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 20    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 21    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 22    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 23    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 24    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 25    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 26    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 27    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 28    0.00    0.00      0.0    0.000      0.0      0.0      0.0\n         Block 15 Block 16 Block 17 Block 18 Block 19 Block 20\nBlock 1      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 2      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 3      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 4      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 5      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 6      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 7      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 8      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 9      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 10     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 11     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 12     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 13     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 14     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 15     0.33      0.0     0.00      0.0      0.0      0.0\nBlock 16     0.00      0.5     0.00      0.0      0.0      0.0\nBlock 17     0.00      0.0     0.33      0.0      0.0      0.0\nBlock 18     0.00      0.0     0.00      0.5      0.0      0.0\nBlock 19     0.00      0.0     0.00      0.0      0.5      0.0\nBlock 20     0.00      0.0     0.00      0.0      0.0      0.5\nBlock 21     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 22     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 23     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 24     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 25     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 26     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 27     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 28     0.00      0.0     0.00      0.0      0.0      0.0\n         Block 21 Block 22 Block 23 Block 24 Block 25 Block 26\nBlock 1       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 2       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 3       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 4       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 5       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 6       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 7       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 8       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 9       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 10      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 11      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 12      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 13      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 14      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 15      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 16      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 17      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 18      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 19      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 20      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 21      0.5     0.00      0.0      0.0      0.0      0.0\nBlock 22      0.0     0.33      0.0      0.0      0.0      0.0\nBlock 23      0.0     0.00      0.5      0.0      0.0      0.0\nBlock 24      0.0     0.00      0.0      0.5      0.0      0.0\nBlock 25      0.0     0.00      0.0      0.0      0.5      0.0\nBlock 26      0.0     0.00      0.0      0.0      0.0      0.5\nBlock 27      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 28      0.0     0.00      0.0      0.0      0.0      0.0\n         Block 27 Block 28\nBlock 1      0.00    0.000\nBlock 2      0.00    0.000\nBlock 3      0.00    0.000\nBlock 4      0.00    0.000\nBlock 5      0.00    0.000\nBlock 6      0.00    0.000\nBlock 7      0.00    0.000\nBlock 8      0.00    0.000\nBlock 9      0.00    0.000\nBlock 10     0.00    0.000\nBlock 11     0.00    0.000\nBlock 12     0.00    0.000\nBlock 13     0.00    0.000\nBlock 14     0.00    0.000\nBlock 15     0.00    0.000\nBlock 16     0.00    0.000\nBlock 17     0.00    0.000\nBlock 18     0.00    0.000\nBlock 19     0.00    0.000\nBlock 20     0.00    0.000\nBlock 21     0.00    0.000\nBlock 22     0.00    0.000\nBlock 23     0.00    0.000\nBlock 24     0.00    0.000\nBlock 25     0.00    0.000\nBlock 26     0.00    0.000\nBlock 27     0.33    0.000\nBlock 28     0.00    0.091\n\n\n\n$`1`\n[1] \"Albany\"            \"David Brewer\"      \"Robert H. Jackson\"\n\n$`2`\n [1] \"Apprenticeship\"        \"Rufus W. Peckham\"     \n [3] \"James F. Byrnes\"       \"Samuel Freeman Miller\"\n [5] \"Stanley Matthews\"      \"John Clarke\"          \n [7] \"Mahon Pitney\"          \"Stephen Field\"        \n [9] \"George Shiras Jr.\"     \"Wiliam R. Day\"        \n[11] \"Pierce Butler\"         \"Joseph Bradley\"       \n\n$`3`\n[1] \"Berkeley\"    \"Earl Warren\"\n\n$`4`\n[1] \"Bowdoin College\" \"Melville Fuller\"\n\n$`5`\n[1] \"Centre Colllege\" \"Fred M. Vinson\" \n\n$`6`\n[1] \"Cincinnati\"          \"William Howard Taft\" \"Willis Van Devanter\"\n\n$`7`\n[1] \"Colorado\"       \"Wiley Rutledge\"\n\n$`8`\n[1] \"Columbia\"             \"Charles Evans Hughes\"\n[3] \"Harland F. Stone\"     \"Samuel Blatchford\"   \n[5] \"Benjamin N. Cardozo\"  \"William O. Douglas\"  \n[7] \"Stanley Reed\"         \"Ruth Bader Ginsburg\" \n[9] \"Joseph McKenna\"      \n\n$`9`\n[1] \"Cumberland School of Law\" \"Howell Edmunds Jackson\"  \n[3] \"Horace Lurton\"           \n\n$`10`\n[1] \"Emory University\" \"Lucius Lamar\"    \n\n$`11`\n [1] \"Harvard\"                   \"John Roberts\"             \n [3] \"Anthony Kennedy\"           \"Horace Gray\"              \n [5] \"Oliver Wendell Holmes Jr.\" \"Felix Frankfurter\"        \n [7] \"Harry Blackmun\"            \"Stephen Breyer\"           \n [9] \"William Brennan Jr.\"       \"David Souter\"             \n[11] \"William Moody\"             \"Louis Brandeis\"           \n[13] \"Elena Kagan\"               \"Edward Sanford\"           \n[15] \"Harold Burton\"             \"Antonin Scalia\"           \n[17] \"Neil Gorsuch\"             \n\n$`12`\n[1] \"Howard\"            \"Thurgood Marhsall\"\n\n$`13`\n[1] \"Indiana\"        \"Sherman Minton\"\n\n$`14`\n[1] \"Kansas City\"       \"Charles Whittaker\"\n\n$`15`\n[1] \"Michigan\"          \"George Sutherland\" \"Frank Murphy\"     \n\n$`16`\n[1] \"New York Law School\"     \"John Marshall Harlan II\"\n\n$`17`\n[1] \"Northwestern\"      \"Arthur Goldberg\"   \"John Paul Stevens\"\n\n$`18`\n[1] \"Notre Dame\"        \"Amy Coney Barrett\"\n\n$`19`\n[1] \"Penn\"         \"Owen Roberts\"\n\n$`20`\n[1] \"School\"  \"Justice\"\n\n$`21`\n[1] \"St. Paul College of Law\" \"Warren E. Burger\"       \n\n$`22`\n[1] \"Stanford\"            \"William Rehnquist\"   \"Sandra Day O'Connor\"\n\n$`23`\n[1] \"Texas\"     \"Tom Clark\"\n\n$`24`\n[1] \"Transylvania University\" \"John Marshall Harlan\"   \n\n$`25`\n[1] \"Tulane\"               \"Edward Douglas White\"\n\n$`26`\n[1] \"Virginia\"         \"James McReynolds\"\n\n$`27`\n[1] \"Washington and Lee\"  \"Lewis F. Powell Jr.\" \"Joseph Lamar\"       \n\n$`28`\n [1] \"Yale\"                  \"Morrison White\"       \n [3] \"Brett Kavanaugh\"       \"Abe Fortas\"           \n [5] \"William Burnham Woods\" \"Sonia Sotomayor\"      \n [7] \"Henry Billings Brown\"  \"Byron White\"          \n [9] \"Potter Stewart\"        \"Samuel Alito\"         \n[11] \"Clarence Thomas\"      \n         Block 1 Block 2 Block 3 Block 4 Block 5 Block 6 Block 7\nBlock 1     0.33   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 2     0.00   0.083     0.0     0.0     0.0    0.00     0.0\nBlock 3     0.00   0.000     0.5     0.0     0.0    0.00     0.0\nBlock 4     0.00   0.000     0.0     0.5     0.0    0.00     0.0\nBlock 5     0.00   0.000     0.0     0.0     0.5    0.00     0.0\nBlock 6     0.00   0.000     0.0     0.0     0.0    0.33     0.0\nBlock 7     0.00   0.000     0.0     0.0     0.0    0.00     0.5\nBlock 8     0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 9     0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 10    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 11    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 12    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 13    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 14    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 15    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 16    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 17    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 18    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 19    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 20    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 21    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 22    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 23    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 24    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 25    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 26    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 27    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 28    0.00   0.000     0.0     0.0     0.0    0.00     0.0\n         Block 8 Block 9 Block 10 Block 11 Block 12 Block 13 Block 14\nBlock 1     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 2     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 3     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 4     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 5     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 6     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 7     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 8     0.11    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 9     0.00    0.33      0.0    0.000      0.0      0.0      0.0\nBlock 10    0.00    0.00      0.5    0.000      0.0      0.0      0.0\nBlock 11    0.00    0.00      0.0    0.059      0.0      0.0      0.0\nBlock 12    0.00    0.00      0.0    0.000      0.5      0.0      0.0\nBlock 13    0.00    0.00      0.0    0.000      0.0      0.5      0.0\nBlock 14    0.00    0.00      0.0    0.000      0.0      0.0      0.5\nBlock 15    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 16    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 17    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 18    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 19    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 20    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 21    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 22    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 23    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 24    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 25    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 26    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 27    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 28    0.00    0.00      0.0    0.000      0.0      0.0      0.0\n         Block 15 Block 16 Block 17 Block 18 Block 19 Block 20\nBlock 1      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 2      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 3      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 4      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 5      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 6      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 7      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 8      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 9      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 10     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 11     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 12     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 13     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 14     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 15     0.33      0.0     0.00      0.0      0.0      0.0\nBlock 16     0.00      0.5     0.00      0.0      0.0      0.0\nBlock 17     0.00      0.0     0.33      0.0      0.0      0.0\nBlock 18     0.00      0.0     0.00      0.5      0.0      0.0\nBlock 19     0.00      0.0     0.00      0.0      0.5      0.0\nBlock 20     0.00      0.0     0.00      0.0      0.0      0.5\nBlock 21     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 22     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 23     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 24     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 25     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 26     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 27     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 28     0.00      0.0     0.00      0.0      0.0      0.0\n         Block 21 Block 22 Block 23 Block 24 Block 25 Block 26\nBlock 1       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 2       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 3       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 4       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 5       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 6       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 7       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 8       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 9       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 10      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 11      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 12      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 13      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 14      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 15      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 16      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 17      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 18      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 19      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 20      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 21      0.5     0.00      0.0      0.0      0.0      0.0\nBlock 22      0.0     0.33      0.0      0.0      0.0      0.0\nBlock 23      0.0     0.00      0.5      0.0      0.0      0.0\nBlock 24      0.0     0.00      0.0      0.5      0.0      0.0\nBlock 25      0.0     0.00      0.0      0.0      0.5      0.0\nBlock 26      0.0     0.00      0.0      0.0      0.0      0.5\nBlock 27      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 28      0.0     0.00      0.0      0.0      0.0      0.0\n         Block 27 Block 28\nBlock 1      0.00    0.000\nBlock 2      0.00    0.000\nBlock 3      0.00    0.000\nBlock 4      0.00    0.000\nBlock 5      0.00    0.000\nBlock 6      0.00    0.000\nBlock 7      0.00    0.000\nBlock 8      0.00    0.000\nBlock 9      0.00    0.000\nBlock 10     0.00    0.000\nBlock 11     0.00    0.000\nBlock 12     0.00    0.000\nBlock 13     0.00    0.000\nBlock 14     0.00    0.000\nBlock 15     0.00    0.000\nBlock 16     0.00    0.000\nBlock 17     0.00    0.000\nBlock 18     0.00    0.000\nBlock 19     0.00    0.000\nBlock 20     0.00    0.000\nBlock 21     0.00    0.000\nBlock 22     0.00    0.000\nBlock 23     0.00    0.000\nBlock 24     0.00    0.000\nBlock 25     0.00    0.000\nBlock 26     0.00    0.000\nBlock 27     0.33    0.000\nBlock 28     0.00    0.091\n\n\n\n\n\n\n$`1`\n [1] \"Harvard\"                   \"John Roberts\"             \n [3] \"Anthony Kennedy\"           \"Horace Gray\"              \n [5] \"Oliver Wendell Holmes Jr.\" \"Felix Frankfurter\"        \n [7] \"Harry Blackmun\"            \"Stephen Breyer\"           \n [9] \"William Brennan Jr.\"       \"David Souter\"             \n[11] \"William Moody\"             \"Louis Brandeis\"           \n[13] \"Elena Kagan\"               \"Harold Burton\"            \n[15] \"Antonin Scalia\"            \"Neil Gorsuch\"             \n\n$`2`\n[1] \"Edward Sanford\"\n\n\n        Block 1 Block 2\nBlock 1  0.0074  0.0085\nBlock 2  0.0017  0.0000\n\n\n\n\n\n\n\n",
    "preview": "posts/httpsrpubscomburnworthj881541/distill-preview.png",
    "last_modified": "2022-03-27T15:50:31-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsyli210813githubiosocialnetworkanalysishw7/",
    "title": "Social Network Analysis Homework 7",
    "description": "Roles & Communities.",
    "author": [
      {
        "name": "Yifan Li",
        "url": {}
      }
    ],
    "date": "2022-03-27",
    "categories": [],
    "contents": "\n\n\n\n##Description of Game of Throne marriage network.\n\n\n\n\n Network attributes:\n  vertices = 18 \n  directed = FALSE \n  hyper = FALSE \n  loops = TRUE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 61 \n    missing edges= 0 \n    non-missing edges= 61 \n\n Vertex attribute names: \n    color region vertex.names \n\n Edge attribute names: \n    weight \n[1] 0.3267974\n[1] 0.3787375\n[1] 1\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.00    1.00    2.00    3.59    4.00   17.00 \n\nSince blockmodel works better with small network, I use the Game of Throne marriage network (instead of the huge world trade network) for homework 6 & 7.\nThis network is a undirected network showing the marriage between important families in Westeros. (I think if we distinguish which family the bride and groom belong to in each marriage, we can also create a directed network. I may try it later.) Each node represents a family (or a set of less important families of one region), while each tie indicates there are one or more marriage between the two families. The weights represents how many marriages have occurred between the family. There is only one component in this network, indicating all the important Westeros ruling families are connected by marriage.\n##Roles & blockmodels.\n\n\n\n\n\n\n\n\n\nExcept for using single clustering method, the three other methods give a clear hierarchical structures which capture differences in network position between the families. All the four method identify Targaryen as an unique role to some extent, which is bery reasonable due to its status in the book.\n\n\n\nFor me, it’s a little confusing what these red rectangles mean. The partition is crossing the branches. The role values assigned by blockmodels are also different from the division in those plots. So I will focus more on the blocks partitioned by the blockmodels, and use the cluster dendrograms just as visual reference.\n\n\n\n\n           Block 1    Block 2   Block 3   Block 4\nBlock 1 0.40000000 0.04166667 0.6666667 0.8333333\nBlock 2 0.04166667 0.17857143 0.5000000 0.6250000\nBlock 3 0.66666667 0.50000000 0.3333333 0.6666667\nBlock 4 0.83333333 0.62500000 0.6666667       NaN\n\n          Block 1   Block 2   Block 3   Block 4\nBlock 1 0.1153846 0.3846154 0.6153846 0.6923077\nBlock 2 0.3846154 1.0000000 0.5000000 1.0000000\nBlock 3 0.6153846 0.5000000 0.0000000 0.5000000\nBlock 4 0.6923077 1.0000000 0.5000000       NaN\n\n          Block 1   Block 2   Block 3   Block 4\nBlock 1 0.1904762 0.5333333 0.6666667 0.7333333\nBlock 2 0.5333333       NaN 0.0000000 1.0000000\nBlock 3 0.6666667 0.0000000       NaN 0.0000000\nBlock 4 0.7333333 1.0000000 0.0000000       NaN\n\n           Block 1   Block 2    Block 3   Block 4\nBlock 1 1.00000000 0.0000000 0.03333333 0.6666667\nBlock 2 0.00000000 1.0000000 0.50000000 0.6666667\nBlock 3 0.03333333 0.5000000 0.11111111 0.6333333\nBlock 4 0.66666667 0.6666667 0.63333333 0.3333333\n\n\nAgain, the single clustering method makes the least sense. 3 families get one block for each, and the others are all in the same block.\nAmong the other three, the Ward D method give the most 0s and 1s (or near 0 or 1). It seems to best capture differences in network position between the families. Let’s explore it further.\n\n\n\n\n           Block 1   Block 2    Block 3   Block 4\nBlock 1 1.00000000 0.0000000 0.03333333 0.6666667\nBlock 2 0.00000000 1.0000000 0.50000000 0.6666667\nBlock 3 0.03333333 0.5000000 0.11111111 0.6333333\nBlock 4 0.66666667 0.6666667 0.63333333 0.3333333\n\n\n\n          name role_wrd\n1        Arryn        1\n2        Tully        1\n3         Vale        1\n4    Baratheon        2\n5        Reach        2\n6    Lannister        3\n7      Martell        3\n8   Stormlands        3\n9       Tyrell        3\n10  Crownlands        3\n11       Essos        3\n12  Riverlands        3\n13 Westerlands        3\n14       North        3\n15       Dorne        3\n16       Stark        4\n17        Frey        4\n18   Targaryen        4\n\nBlock 1(Arryn, Tully, and Vale) and Block 2 (Baratheon and Reach) show a faction pattern. They are fully connected to each other within factions by marriage ties while have no marriage with the other faction. It’s understandable since the Arryn family rule the Vale, so they have close relation to nobles of the Vale. The Tully family rule the riverlands, which is next the Vale. And this part of Westoros has few connections to Baratheons and nobles in Reach. (Not quite sure why the Baratheon and the Reach are viewed as the same role and a faction. Maybe I’m not familiar enough with the book.)\nBlock 3 consists of most other families. They are loosely connected to each other. The block 1 or faction of Vale and Riverlands has very limited connections with block 3, indicating that they are not deeply involved in other affairs in Westeros. The Baratheon block have some relation with them, which might provide the support for the throne. Sadly, this connection is not enough. Perhaps this is one of the causes of the War of the Five Kings.\nBlock 4 (Targaryen, Stark and Frey) is loosely self connected, but have a relative high connection to all the other 3 blocks. It is quite interesting since these there families (especially the Targaryen and the Stark) are the central families to the story of the book. The three families have extensive and similar political resources in Westeros. They marry each other and compete with each other at the same time. The most important marriages in the story take place between these three families. Meanwhile, House Stark’s war to help Baratheon against Targaryen, and Frey’s betrayal of Stark, are two of the most significant turning points in Westeros history. The role analysis shows us they fight each other because they occupy similar roles.\nInterestingly, one of the other major family for the book, the Lannister has no unique roles in all four methods. This fact might help explain why the Lannisters try to grasp the power and make many political enemies on the one hand, and struggling so much in the process on the other hand.\n\n\n\nThe plot show the pattern more clearly. The Stark, Frey and Targaryen sit in the center of the network and compete with each other. Baratheon and Reach sit near the center. Other families are surrounding around the core five, while Tully, Vale and Arryn are located at the periphery. (Dorne is also quite periphery, which is align with the book.)\n\n     role_wrd degree degree.wt bonpow betweenness close constraint\n[1,]        1    4.3        16  -1.08         1.8  0.53       0.45\n[2,]        2    8.0        28  -1.10        13.3  0.65       0.35\n[3,]        3    4.0        18  -0.74         1.1  0.54       0.63\n[4,]        4   10.3        51  -0.90        24.5  0.71       0.27\n     eigen eigen.rc eigen.dc role_cmpl role_avg role_sing  n\n[1,]  0.17    0.018     0.15       1.0      1.0         1  3\n[2,]  0.28    0.044     0.24       2.5      2.0         1  2\n[3,]  0.18    0.046     0.13       1.7      1.0         1 10\n[4,]  0.35    0.142     0.21       3.3      3.3         3  3\n     role_cmpl degree degree.wt bonpow betweenness close constraint\n[1,]         1   1.17      12.1   0.40        0.76 0.043      0.056\n[2,]         2   1.85      11.5   0.53        3.66 0.062      0.193\n[3,]         3   0.58       8.1   0.89        2.21 0.000      0.084\n[4,]         4     NA        NA     NA          NA    NA         NA\n      eigen eigen.rc eigen.dc role_avg role_sing role_wrd  n\n[1,] 0.0636    0.035    0.041     0.00         0     1.10  0\n[2,] 0.0663    0.030    0.059     0.35         0     0.35  0\n[3,] 0.0066    0.051    0.047     0.58         1     1.15  0\n[4,]     NA       NA       NA       NA        NA       NA NA\n\nBy summarising the centrality scores by roles, we can identify their characteristics to some extent. The block 1 is in the periphery, and have the lowerst weighted degree, closeness and eigenvector centrality score, and have relatively low degree, Bonacich power and betweenness.\nBlock 2, the Baratheon and Reach, has the second high degree, weighted degree, betweenness, closeness and eigenvector centrality score (just next to block 4), and have the second low constraint, indicating their central position (not central enough though). Their reflected centrality is quite low compared with the derived centrality, indicating that they may actually only have limited direct resources and instead rely on indirect relationships (probably especially on Stark). This further explain the failure of the rule of Baratheon. Robert had to rule by compromise.They have the lowest Bonacich power.(DOn’t know how to interpret a negative value.)\nBlock 3, the collection of “normal” noble families, have low scores for almost every parameters and high constraint as expected.\nBlock 4, the collection of the most important families, have highest centrality scores and lowest constraint as expected. Moreoever, compared with other blocks, they have quite high reflected - derived centrality ratio, indicating they have the most direct political resources. Combined with the low constrain, we can easily identify them as structural holes. This is the origin of their power.\n——————————————–\n##Community\n##Fast and Greedy Community Detection\n\n$`1`\n[1] \"Arryn\" \"Tully\" \"Vale\" \n\n$`2`\n[1] \"Martell\"    \"Crownlands\" \"Essos\"      \"Targaryen\"  \"Dorne\"     \n\n$`3`\n[1] \"Baratheon\" \"Reach\"     \"Tyrell\"   \n\n$`4`\n[1] \"Stormlands\" \"Riverlands\" \"Frey\"      \n\n$`5`\n[1] \"Lannister\"   \"Westerlands\"\n\n$`6`\n[1] \"Stark\" \"North\"\n\n\n        Block 1 Block 2 Block 3 Block 4 Block 5 Block 6\nBlock 1    1.00    0.13    0.00    0.33    0.00    0.33\nBlock 2    0.13    0.60    0.20    0.33    0.20    0.20\nBlock 3    0.00    0.20    1.00    0.44    0.50    0.33\nBlock 4    0.33    0.33    0.44    0.67    0.33    0.33\nBlock 5    0.00    0.20    0.50    0.33    1.00    0.50\nBlock 6    0.33    0.20    0.33    0.33    0.50    1.00\n\n\n\n\n\n     comm.fg degree degree.wt bonpow betweenness close constraint\n[1,]       1    4.3        16  -1.08         1.8  0.53       0.45\n[2,]       2    5.2        22  -0.79         9.3  0.57       0.62\n[3,]       3    6.0        22  -0.96         8.9  0.59       0.45\n[4,]       4    6.7        30  -1.54         7.1  0.62       0.37\n[5,]       5    5.5        25  -0.15         1.4  0.58       0.57\n[6,]       6    6.0        36  -0.29         6.9  0.59       0.53\n     eigen eigen.rc eigen.dc role_cmpl role_avg role_sing role_wrd n\n[1,]  0.17    0.018     0.15       1.0      1.0       1.0      1.0 3\n[2,]  0.20    0.041     0.16       2.2      1.6       1.6      3.2 5\n[3,]  0.22    0.039     0.18       2.3      1.7       1.0      2.3 3\n[4,]  0.27    0.076     0.19       2.0      1.7       1.7      3.3 3\n[5,]  0.25    0.095     0.16       1.5      1.0       1.0      3.0 2\n[6,]  0.24    0.114     0.12       2.5      2.0       1.5      3.5 2\n\n\n\n\nIn this partition, most major families are in the same community with their ruling territories, which is very reasonable. The block model clear 0-1 pattern. The within-community density is mostly 1, with two of them are 0.60 and 0.67. Density of ties between communities are relatively low.\nThe means of centrality scores by community don’t show a clear pattern. Compared with roles, communities focus on the within-group connection. To some extent, each community is a combination of different roles (core + periphery.) Each community has similar means of centrality scores, since they are averages of core roles (high value) and periphery(low value). Roughly, we can say community one has lower influence, which align with conclusio I got in last assignment (about roles.)\n##Walktrap Community Detection\n\n$`1`\n[1] \"Arryn\"      \"Tully\"      \"Vale\"       \"Stormlands\" \"Riverlands\"\n[6] \"Frey\"      \n\n$`2`\n[1] \"Martell\"    \"Crownlands\" \"Essos\"      \"Targaryen\"  \"Dorne\"     \n\n$`3`\n[1] \"Baratheon\" \"Reach\"     \"Tyrell\"   \n\n$`4`\n[1] \"Stark\" \"North\"\n\n$`5`\n[1] \"Lannister\"   \"Westerlands\"\n        Block 1 Block 2 Block 3 Block 4 Block 5\nBlock 1    0.53    0.23    0.22    0.33    0.17\nBlock 2    0.23    0.60    0.20    0.20    0.20\nBlock 3    0.22    0.20    1.00    0.33    0.50\nBlock 4    0.33    0.20    0.33    1.00    0.50\nBlock 5    0.17    0.20    0.50    0.50    1.00\n     comm.wt degree degree.wt bonpow betweenness close constraint\n[1,]       1    5.5        23  -1.31         4.5  0.58       0.41\n[2,]       2    5.2        22  -0.79         9.3  0.57       0.62\n[3,]       3    6.0        22  -0.96         8.9  0.59       0.45\n[4,]       4    6.0        36  -0.29         6.9  0.59       0.53\n[5,]       5    5.5        25  -0.15         1.4  0.58       0.57\n     eigen eigen.rc eigen.dc role_cmpl role_avg role_sing role_wrd\n[1,]  0.22    0.047     0.17       1.5      1.3       1.3      2.2\n[2,]  0.20    0.041     0.16       2.2      1.6       1.6      3.2\n[3,]  0.22    0.039     0.18       2.3      1.7       1.0      2.3\n[4,]  0.24    0.114     0.12       2.5      2.0       1.5      3.5\n[5,]  0.25    0.095     0.16       1.5      1.0       1.0      3.0\n     comm.fg n\n[1,]     2.5 6\n[2,]     2.0 5\n[3,]     3.0 3\n[4,]     6.0 2\n[5,]     5.0 2\n\n\nSimilarly, communities partitioned by Walktrap algorithm also show (roughly) major family + ruling territory pattern. The difference is, that community 1 & 4 are combined together.\n##Leading Label Propagation Community Detection\n\n$`1`\n[1] \"Arryn\" \"Vale\" \n\n$`2`\n[1] \"Tully\"      \"Stormlands\" \"Riverlands\" \"Frey\"      \n\n$`3`\n[1] \"Baratheon\" \"Reach\"     \"Tyrell\"   \n\n$`4`\n[1] \"Lannister\"   \"Westerlands\"\n\n$`5`\n[1] \"Martell\"    \"Crownlands\" \"Essos\"      \"Targaryen\"  \"Dorne\"     \n\n$`6`\n[1] \"Stark\" \"North\"\n        Block 1 Block 2 Block 3 Block 4 Block 5 Block 6\nBlock 1    1.00    0.38    0.00    0.00    0.20    0.25\nBlock 2    0.38    0.67    0.33    0.25    0.25    0.38\nBlock 3    0.00    0.33    1.00    0.50    0.20    0.33\nBlock 4    0.00    0.25    0.50    1.00    0.20    0.50\nBlock 5    0.20    0.25    0.20    0.20    0.60    0.20\nBlock 6    0.25    0.38    0.33    0.50    0.20    1.00\n     comm.lab degree degree.wt bonpow betweenness close constraint\n[1,]        1    4.0        22  -1.10         1.6  0.53       0.44\n[2,]        2    6.2        24  -1.42         5.9  0.60       0.40\n[3,]        3    6.0        22  -0.96         8.9  0.59       0.45\n[4,]        4    5.5        25  -0.15         1.4  0.58       0.57\n[5,]        5    5.2        22  -0.79         9.3  0.57       0.62\n[6,]        6    6.0        36  -0.29         6.9  0.59       0.53\n     eigen eigen.rc eigen.dc role_cmpl role_avg role_sing role_wrd\n[1,]  0.16    0.024     0.13       1.0      1.0       1.0      1.0\n[2,]  0.25    0.059     0.19       1.8      1.5       1.5      2.8\n[3,]  0.22    0.039     0.18       2.3      1.7       1.0      2.3\n[4,]  0.25    0.095     0.16       1.5      1.0       1.0      3.0\n[5,]  0.20    0.041     0.16       2.2      1.6       1.6      3.2\n[6,]  0.24    0.114     0.12       2.5      2.0       1.5      3.5\n     comm.fg comm.wt n\n[1,]     1.0       1 2\n[2,]     3.2       1 4\n[3,]     3.0       3 3\n[4,]     5.0       5 2\n[5,]     2.0       2 5\n[6,]     6.0       4 2\n\n\nLeading label propagation algorithm gives the same partition with the fast and greedy one.\n##Edge Betweenness Community Detection\n\n$`1`\n[1] \"Arryn\" \"Vale\" \n\n$`2`\n[1] \"Tully\"      \"Stormlands\" \"Riverlands\" \"Frey\"      \n\n$`3`\n[1] \"Baratheon\" \"Reach\"     \"Tyrell\"   \n\n$`4`\n[1] \"Lannister\"   \"Westerlands\"\n\n$`5`\n[1] \"Martell\"    \"Crownlands\" \"Essos\"      \"Targaryen\"  \"Dorne\"     \n\n$`6`\n[1] \"Stark\" \"North\"\n        Block 1 Block 2 Block 3 Block 4 Block 5 Block 6\nBlock 1    1.00    0.38    0.00    0.00    0.20    0.25\nBlock 2    0.38    0.67    0.33    0.25    0.25    0.38\nBlock 3    0.00    0.33    1.00    0.50    0.20    0.33\nBlock 4    0.00    0.25    0.50    1.00    0.20    0.50\nBlock 5    0.20    0.25    0.20    0.20    0.60    0.20\nBlock 6    0.25    0.38    0.33    0.50    0.20    1.00\n     comm.edge degree degree.wt bonpow betweenness close constraint\n[1,]         1    4.0        22  -1.10         1.6  0.53       0.44\n[2,]         2    6.2        24  -1.42         5.9  0.60       0.40\n[3,]         3    6.0        22  -0.96         8.9  0.59       0.45\n[4,]         4    5.5        25  -0.15         1.4  0.58       0.57\n[5,]         5    5.2        22  -0.79         9.3  0.57       0.62\n[6,]         6    6.0        36  -0.29         6.9  0.59       0.53\n     eigen eigen.rc eigen.dc role_cmpl role_avg role_sing role_wrd\n[1,]  0.16    0.024     0.13       1.0      1.0       1.0      1.0\n[2,]  0.25    0.059     0.19       1.8      1.5       1.5      2.8\n[3,]  0.22    0.039     0.18       2.3      1.7       1.0      2.3\n[4,]  0.25    0.095     0.16       1.5      1.0       1.0      3.0\n[5,]  0.20    0.041     0.16       2.2      1.6       1.6      3.2\n[6,]  0.24    0.114     0.12       2.5      2.0       1.5      3.5\n     comm.fg comm.wt comm.lab n\n[1,]     1.0       1        1 2\n[2,]     3.2       1        2 4\n[3,]     3.0       3        3 3\n[4,]     5.0       5        4 2\n[5,]     2.0       2        5 5\n[6,]     6.0       4        6 2\n\n\nEdge betweenness algorithm gives very similar results. The only difference is that the Tully family is divided into Frey’s community.\n##Eigenvector Community Detection\n\n$`1`\n[1] \"Arryn\"      \"Baratheon\"  \"Martell\"    \"Stormlands\" \"Crownlands\"\n[6] \"Essos\"      \"Targaryen\"  \"Dorne\"     \n\n$`2`\n[1] \"Tully\"      \"Vale\"       \"Riverlands\" \"Frey\"      \n\n$`3`\n[1] \"Reach\"\n\n$`4`\n[1] \"Stark\" \"North\"\n\n$`5`\n[1] \"Lannister\"   \"Westerlands\"\n\n$`6`\n[1] \"Tyrell\"\n        Block 1 Block 2 Block 3 Block 4 Block 5 Block 6\nBlock 1    0.39    0.25    0.38    0.19    0.19    0.12\nBlock 2    0.25    0.83    0.50    0.50    0.25    0.00\nBlock 3    0.38    0.50     NaN    0.50    1.00    1.00\nBlock 4    0.19    0.50    0.50    1.00    0.50    0.00\nBlock 5    0.19    0.25    1.00    0.50    1.00    0.00\nBlock 6    0.12    0.00    1.00    0.00    0.00     NaN\n     comm.eigen degree degree.wt bonpow betweenness close constraint\n[1,]          1    5.0        18  -0.97         7.4  0.57       0.55\n[2,]          2    6.5        30  -1.20         6.4  0.60       0.38\n[3,]          3    9.0        46  -1.44        15.8  0.68       0.32\n[4,]          4    6.0        36  -0.29         6.9  0.59       0.53\n[5,]          5    5.5        25  -0.15         1.4  0.58       0.57\n[6,]          6    2.0        11  -0.69         0.0  0.45       0.66\n     eigen eigen.rc eigen.dc role_cmpl role_avg role_sing role_wrd\n[1,] 0.192    0.033    0.159       2.0      1.5       1.4      2.8\n[2,] 0.249    0.062    0.186       1.5      1.5       1.5      2.2\n[3,] 0.323    0.065    0.258       3.0      2.0       1.0      2.0\n[4,] 0.238    0.114    0.123       2.5      2.0       1.5      3.5\n[5,] 0.251    0.095    0.156       1.5      1.0       1.0      3.0\n[6,] 0.085    0.030    0.055       2.0      1.0       1.0      3.0\n     comm.fg comm.wt comm.lab comm.edge n\n[1,]     2.2     1.9      3.9       3.9 8\n[2,]     2.5     1.0      1.8       1.8 4\n[3,]     3.0     3.0      3.0       3.0 1\n[4,]     6.0     4.0      6.0       6.0 2\n[5,]     5.0     5.0      4.0       4.0 2\n[6,]     3.0     3.0      3.0       3.0 1\n\n\nEigenvector algorithm gives quite a different result, which seems not to make sense according to the novel. The within-community density is not as high, and have some 1-value for between communities density.\n##Spinglass Community Detection\n\n$`1`\n[1] \"Baratheon\" \"Reach\"     \"Tyrell\"   \n\n$`2`\n[1] \"Stark\" \"North\"\n\n$`3`\n[1] \"Arryn\"      \"Tully\"      \"Vale\"       \"Stormlands\" \"Riverlands\"\n[6] \"Frey\"      \n\n$`4`\n[1] \"Lannister\"   \"Westerlands\"\n\n$`5`\n[1] \"Martell\"    \"Crownlands\" \"Essos\"      \"Targaryen\"  \"Dorne\"     \n        Block 1 Block 2 Block 3 Block 4 Block 5\nBlock 1    1.00    0.33    0.22    0.50    0.20\nBlock 2    0.33    1.00    0.33    0.50    0.20\nBlock 3    0.22    0.33    0.53    0.17    0.23\nBlock 4    0.50    0.50    0.17    1.00    0.20\nBlock 5    0.20    0.20    0.23    0.20    0.60\n     comm.spin degree degree.wt bonpow betweenness close constraint\n[1,]         1    6.0        22  -0.96         8.9  0.59       0.45\n[2,]         2    6.0        36  -0.29         6.9  0.59       0.53\n[3,]         3    5.5        23  -1.31         4.5  0.58       0.41\n[4,]         4    5.5        25  -0.15         1.4  0.58       0.57\n[5,]         5    5.2        22  -0.79         9.3  0.57       0.62\n     eigen eigen.rc eigen.dc role_cmpl role_avg role_sing role_wrd\n[1,]  0.22    0.039     0.18       2.3      1.7       1.0      2.3\n[2,]  0.24    0.114     0.12       2.5      2.0       1.5      3.5\n[3,]  0.22    0.047     0.17       1.5      1.3       1.3      2.2\n[4,]  0.25    0.095     0.16       1.5      1.0       1.0      3.0\n[5,]  0.20    0.041     0.16       2.2      1.6       1.6      3.2\n     comm.fg comm.wt comm.lab comm.edge comm.eigen n\n[1,]     3.0       3      3.0       3.0        3.3 3\n[2,]     6.0       4      6.0       6.0        4.0 2\n[3,]     2.5       1      1.7       1.7        1.7 6\n[4,]     5.0       5      4.0       4.0        5.0 2\n[5,]     2.0       2      5.0       5.0        1.0 5\n\n\nSpinglass algorithm gives the same result with walktrap one.\n##Compare Community Partitions\n\n\n\n\nfastgreedy   walktrap      label       edge      eigen       spin \n 0.5173683  0.3289444  0.5149705  0.5149705  0.4572361  0.0744876 \n    alg.a   alg.b          meth    result\n1 comm.fg comm.wt            vi 0.2310491\n2 comm.fg comm.wt           nmi 0.9288836\n3 comm.fg comm.wt    split.join 3.0000000\n4 comm.fg comm.wt          rand 0.9411765\n5 comm.fg comm.wt adjusted.rand 0.7895461\n    alg.a    alg.b          meth    result\n1 comm.fg comm.lab            vi 0.2310491\n2 comm.fg comm.lab           nmi 0.9332432\n3 comm.fg comm.lab    split.join 2.0000000\n4 comm.fg comm.lab          rand 0.9673203\n5 comm.fg comm.lab adjusted.rand 0.8647215\n    alg.a     alg.b          meth    result\n1 comm.fg comm.edge            vi 0.2310491\n2 comm.fg comm.edge           nmi 0.9332432\n3 comm.fg comm.edge    split.join 2.0000000\n4 comm.fg comm.edge          rand 0.9673203\n5 comm.fg comm.edge adjusted.rand 0.8647215\n    alg.a      alg.b          meth    result\n1 comm.fg comm.eigen            vi 1.0264363\n2 comm.fg comm.eigen           nmi 0.6835936\n3 comm.fg comm.eigen    split.join 9.0000000\n4 comm.fg comm.eigen          rand 0.8104575\n5 comm.fg comm.eigen adjusted.rand 0.3845194\n    alg.a     alg.b          meth    result\n1 comm.fg comm.spin            vi 0.2310491\n2 comm.fg comm.spin           nmi 0.9288836\n3 comm.fg comm.spin    split.join 3.0000000\n4 comm.fg comm.spin          rand 0.9411765\n5 comm.fg comm.spin adjusted.rand 0.7895461\n\nThe comparison also shows that the fast and greedy method and leading label propagation give the same partition, and waltrap and edge betweenness give very similar ones. All these 4 partitions make sense.\n(Can’t understand why spinglass algorithm get such a low modularity score, since it has exactly the same partition with walktrap algorithm.)\n\n\n\n",
    "preview": "posts/httpsyli210813githubiosocialnetworkanalysishw7/distill-preview.png",
    "last_modified": "2022-03-27T15:50:36-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsrpubscombean22z881579/",
    "title": "Assignment7",
    "description": "assignment for political and social network analysis",
    "author": [
      {
        "name": "Zoe Bean",
        "url": {}
      }
    ],
    "date": "2022-03-27",
    "categories": [],
    "contents": "\r\n\r\n\r\nlibrary(tidyverse)\r\nlibrary(GGally)\r\n\r\nsource(\"./Import Scripts/Game of Thrones Interactions.R\")\r\n\r\n\r\n\r\nThe Network\r\nThis is an edgelist dataset. It has 298 vertices and 9131 edges, it is not directed or bipartite, and it is weighted. The vertices are the people, with attributes regarding the time and location of their appearances, as well as the point of view the story is in for these appearances.\r\nThe dataset is the Game of Thrones Interactions dataset, with characters as nodes, and instances of characters being mentioned in the same vicinity are the edges.\r\nHere is the network plots that I have managed to create with this data so far:\r\n\r\n\r\nV(network_igraph)$size<-5\r\nV(network_igraph)$label.cex = 1/2\r\nplot(network_igraph, layout_with_lgl(network_igraph), vertex.label=NA)\r\n\r\n\r\n\r\n#a subset of the data with a lot of weight on the edges- meaning more interactions between the characters\r\n#weight chosen by rerunning until the plot is somewhat readable \r\nsub_stat<-get.inducedSubgraph(network_statnet,eid=which(network_statnet%e%'weight'>10))\r\nplot(sub_stat)\r\n\r\n\r\n\r\n#create the same igrpah subset\r\nsub_igraph <- subgraph.edges(network_igraph, E(network_igraph)[E(network_igraph)$weight>10], del=F)\r\nsub_igraph <- delete_vertices(sub_igraph, degree(sub_igraph, mode = \"in\")==0)\r\n\r\n#format igrpah subset to be more readable\r\nV(sub_igraph)$size<-5\r\nV(sub_igraph)$label.cex = 1/2\r\n#plot igrpah\r\nplot(sub_igraph, layout=layout_nicely)\r\n\r\n\r\n\r\n\r\nCommunity Clusters\r\nI know that this is a big mess, but I couldn’t figure out how to make a subset of the network_nodes variable such that it has the same nodes as the above subgraphs. Which means that it is very dfficult to actually see and understand the created communites. So this is the code I have for now… I’ll hold off on analysis until I can figure out the nodes thing\r\n\r\n\r\n#function to summarize the node statistics by community group\r\nnodes.by.gp<-function(network.nodes, groupvar){\r\n  network.nodes%>%\r\n  select(-Name)%>%\r\n  group_by_(groupvar) %>%\r\n  mutate(n=n())%>%\r\n  summarise_all(mean, na.rm=TRUE)%>%\r\n  as.matrix()%>%\r\n  print(digits=2)\r\n}\r\n\r\n\r\n\r\nFast and Greedy Detection\r\n\r\n\r\n#Run clustering algorithm: fast_greedy\r\ngot.fg<-cluster_fast_greedy(network_igraph)\r\n\r\n#to get an idea of who is in what group\r\nigraph::groups(network_igraph)\r\n\r\n\r\nlist()\r\n\r\n#blockmodel with community membership\r\nprint(blockmodel(network_statnet,got.fg$membership)$block.model, digits=2)\r\n\r\n\r\n        Block 1 Block 2 Block 3 Block 4\r\nBlock 1   0.303   0.090    0.13   0.055\r\nBlock 2   0.090   0.500    0.20   0.051\r\nBlock 3   0.134   0.203    0.41   0.117\r\nBlock 4   0.055   0.051    0.12   0.500\r\n\r\n#add community membership as a node attribute\r\nnetwork_nodes$got.fg<-got.fg$membership\r\n\r\n#summarize node statistics by community\r\nnodes.by.gp(network_nodes,\"got.fg\")\r\n\r\n\r\n     got.fg Appear   pov majorpov major   n\r\n[1,]      1   12.7 0.118    0.094  0.14 127\r\n[2,]      2   14.0 0.153    0.119  0.19  59\r\n[3,]      3   15.0 0.071    0.071  0.13  99\r\n[4,]      4    5.4 0.000    0.000  0.00  13\r\n\r\n#plot network with community coloringy\r\nplot(got.fg,network_igraph, layout=layout_with_graphopt, max.sa.movement=10 )\r\n\r\n\r\n\r\n\r\nWalktrap Detection\r\n\r\n\r\n#Run clustering algorithm: walktrap\r\ngot.wt<-walktrap.community(network_igraph,steps=55)\r\n\r\n#to get an idea of who is in what group\r\nigraph::groups(got.wt)\r\n\r\n\r\n$`1`\r\n [1] \"Aegon Frey (Jinglebell)\" \"Aegon Targaryen\"        \r\n [3] \"Allar Deem\"              \"Barra\"                  \r\n [5] \"Benjen Stark\"            \"Beric Dondarrion\"       \r\n [7] \"Bronn\"                   \"Cersei Lannister\"       \r\n [9] \"Chiswyck\"                \"Colemon\"                \r\n[11] \"Cortnay Penrose\"         \"Dick Crabb\"             \r\n[13] \"Dontos Hollard\"          \"Eddard Karstark\"        \r\n[15] \"Edmure Tully\"            \"Emmon Frey\"             \r\n[17] \"Garlan Tyrell\"           \"Gerris Drinkwater\"      \r\n[19] \"Gladden Wylde\"           \"Gregor Clegane\"         \r\n[21] \"Guyard Morrigen\"         \"Harlan Hunter\"          \r\n[23] \"Hizdahr zo Loraq\"        \"Hugh\"                   \r\n[25] \"Illyrio Mopatis\"         \"Ilyn Payne\"             \r\n[27] \"Jaqen H'ghar\"            \"Jeyne Westerling\"       \r\n[29] \"Kindly Man\"              \"Lollys Stokeworth\"      \r\n[31] \"Lommy Greenhands\"        \"Walder Frey\"            \r\n[33] \"Lothar Mallery\"          \"Lothor Brune\"           \r\n[35] \"Lucas Blackwood\"         \"Lymond Vikary\"          \r\n[37] \"Mace Tyrell\"             \"Meryn Trant\"            \r\n[39] \"Moqorro\"                 \"Mycah\"                  \r\n[41] \"Nan\"                     \"Nymeria\"                \r\n[43] \"Osha\"                    \"Osmund Kettleblack\"     \r\n[45] \"Pate\"                    \"Penny\"                  \r\n[47] \"Polliver\"                \"Raymun Darry\"           \r\n[49] \"Raymund Frey\"            \"Rickard Karstark\"       \r\n[51] \"Sandor Clegane\"          \"Satin\"                  \r\n[53] \"Stiv\"                    \"Styr\"                   \r\n[55] \"Tickler\"                 \"Vardis Egen\"            \r\n[57] \"Varly\"                   \"Oppo\"                   \r\n[59] \"Yurkhaz zo Yunzak\"      \r\n\r\n$`2`\r\n  [1] \"Addam Marbrand\"       \"Aemon Targaryen\"     \r\n  [3] \"Alester Florent\"      \"Alfyn\"               \r\n  [5] \"Amory Lorch\"          \"Areo Hotah\"          \r\n  [7] \"Arthur Dayne\"         \"Arya Stark\"          \r\n  [9] \"Asha Greyjoy\"         \"Balon Greyjoy\"       \r\n [11] \"Bowen Marsh\"          \"Bran Stark\"          \r\n [13] \"Brandon Stark\"        \"Catelyn Tully\"       \r\n [15] \"Chayle\"               \"Coldhands\"           \r\n [17] \"Craster\"              \"Dareon\"              \r\n [19] \"Daryn Hornwood\"       \"Davos Seaworth\"      \r\n [21] \"Doran Martell\"        \"Khal Drogo\"          \r\n [23] \"Dywen\"                \"Edric Storm\"         \r\n [25] \"Emmon Cuy\"            \"Eon Hunter\"          \r\n [27] \"Garse Goodbrook\"      \"Gilly\"               \r\n [29] \"Haldon\"               \"Harwin\"              \r\n [31] \"Helman Tallhart\"      \"Hodor\"               \r\n [33] \"Hoster Tully\"         \"Janos Slynt\"         \r\n [35] \"Jared Frey\"           \"Joffrey Baratheon\"   \r\n [37] \"Jojen Reed\"           \"Jon Arryn\"           \r\n [39] \"Jon Connington\"       \"Jon Snow\"            \r\n [41] \"Jory Cassel\"          \"Lark\"                \r\n [43] \"Loras Tyrell\"         \"Luton\"               \r\n [45] \"Luwin\"                \"Lyanna Stark\"        \r\n [47] \"Aemon\"                \"Cressen\"             \r\n [49] \"Mag Mar Tun Doh Weg\"  \"Mance Rayder\"        \r\n [51] \"Merrett Frey\"         \"Mordane\"             \r\n [53] \"Myrcella Baratheon\"   \"Olenna Redwyne\"      \r\n [55] \"Ollo Lophand\"         \"Orton Merryweather\"  \r\n [57] \"Osney Kettleblack\"    \"Paul\"                \r\n [59] \"Podrick Payne\"        \"Pypar\"               \r\n [61] \"Quentyn Martell\"      \"Qyburn\"              \r\n [63] \"Ralf Kenning\"         \"Ramsay Snow\"         \r\n [65] \"Randyll Tarly\"        \"Rattleshirt\"         \r\n [67] \"Rhaegar Frey\"         \"Rickon Stark\"        \r\n [69] \"Robar Royce\"          \"Rodrik Cassel\"       \r\n [71] \"Roose Bolton\"         \"Rorge\"               \r\n [73] \"Ryman Frey\"           \"Salladhor Saan\"      \r\n [75] \"Samwell Tarly\"        \"Sansa Stark\"         \r\n [77] \"Sawane Botley\"        \"Selyse Florent\"      \r\n [79] \"Senelle\"              \"Shireen Baratheon\"   \r\n [81] \"Softfoot\"             \"Symond Frey\"         \r\n [83] \"Theon Greyjoy\"        \"Thoros of Myr\"       \r\n [85] \"Timeon\"               \"Timett\"              \r\n [87] \"Tion Frey\"            \"Tytos Frey\"          \r\n [89] \"Tywin Lannister\"      \"Vargo Hoat\"          \r\n [91] \"Vayon Poole\"          \"Viserys Targaryen\"   \r\n [93] \"Walder Frey (Little)\" \"Waymar Royce\"        \r\n [95] \"Willem Lannister\"     \"Wyman Manderly\"      \r\n [97] \"Ygritte\"              \"Yohn Royce\"          \r\n [99] \"Yoren\"                \"Dagon Codd\"          \r\n[101] \"Adrack Humble\"        \"the Others\"          \r\n\r\n$`3`\r\n [1] \"Aegon I Targaryen\"              \r\n [2] \"Aron Santagar\"                  \r\n [3] \"Arys Oakheart\"                  \r\n [4] \"Balman Byrch\"                   \r\n [5] \"Balon Swann\"                    \r\n [6] \"Belwas\"                         \r\n [7] \"Ben Plumm\"                      \r\n [8] \"Boros Blount\"                   \r\n [9] \"Brienne of Tarth\"               \r\n[10] \"Daario Naharis\"                 \r\n[11] \"Elia Martell\"                   \r\n[12] \"Groleo\"                         \r\n[13] \"Guncer Sunglass\"                \r\n[14] \"Hubard Rambton\"                 \r\n[15] \"Irri\"                           \r\n[16] \"Jhiqui\"                         \r\n[17] \"Jhogo\"                          \r\n[18] \"Kevan Lannister\"                \r\n[19] \"Kraznys mo Nakloz\"              \r\n[20] \"Lancel Lannister\"               \r\n[21] \"Mero\"                           \r\n[22] \"Mirri Maz Duur\"                 \r\n[23] \"Missandei\"                      \r\n[24] \"Oznak zo Pahl\"                  \r\n[25] \"Paxter Redwyne\"                 \r\n[26] \"Petyr Baelish\"                  \r\n[27] \"Pycelle\"                        \r\n[28] \"Qotho\"                          \r\n[29] \"Quaithe\"                        \r\n[30] \"Quaro\"                          \r\n[31] \"Renly Baratheon\"                \r\n[32] \"Reznak mo Reznak\"               \r\n[33] \"Rhaegar Targaryen\"              \r\n[34] \"Rhaego\"                         \r\n[35] \"Rhaenys Targaryen\"              \r\n[36] \"Robert Arryn\"                   \r\n[37] \"Skahaz mo Kandaq\"               \r\n[38] \"Tommen Baratheon\"               \r\n[39] \"Tyrion Lannister\"               \r\n[40] \"Tysha\"                          \r\n[41] \"Willas Tyrell\"                  \r\n[42] \"First High Septon (the fat one)\"\r\n[43] \"Khrazz\"                         \r\n\r\n$`4`\r\n [1] \"Aeron Greyjoy\"        \"Antario Jast\"        \r\n [3] \"Arnolf Karstark\"      \"Aurane Waters\"       \r\n [5] \"Axell Florent\"        \"Biter\"               \r\n [7] \"Chett\"                \"Cleos Frey\"          \r\n [9] \"Cotter Pyke\"          \"Cragorn\"             \r\n[11] \"Dacey Mormont\"        \"Daenerys Targaryen\"  \r\n[13] \"Dalla\"                \"Dirk\"                \r\n[15] \"Donal Noye\"           \"Ebben\"               \r\n[17] \"Eddard Stark\"         \"Eddison Tollett\"     \r\n[19] \"Gared\"                \"Garth Greyfeather\"   \r\n[21] \"Grenn\"                \"Hake\"                \r\n[23] \"Hal\"                  \"Hosteen Frey\"        \r\n[25] \"Hot Pie\"              \"Hullen\"              \r\n[27] \"Jacelyn Bywater\"      \"Jack Bulwer\"         \r\n[29] \"Jafer Flowers\"        \"Jaremy Rykker\"       \r\n[31] \"Jeyne Poole\"          \"Jon Umber (Greatjon)\"\r\n[33] \"Kyra\"                 \"Mandon Moore\"        \r\n[35] \"Othor\"                \"Prendahl na Ghezn\"   \r\n[37] \"Pyg\"                  \"Qhorin Halfhand\"     \r\n[39] \"Reek\"                 \"Rickard Stark\"       \r\n[41] \"Robb Stark\"           \"Roland Crakehall\"    \r\n[43] \"Rupert Brax\"          \"Ryles\"               \r\n[45] \"Sallor the Bald\"      \"Shae\"                \r\n[47] \"Shagwell\"             \"Stafford Lannister\"  \r\n[49] \"Stannis Baratheon\"    \"Stevron Frey\"        \r\n[51] \"Tom of Sevenstreams\"  \"Tormund\"             \r\n[53] \"Utt\"                  \"Varamyr\"             \r\n[55] \"Varys\"                \"Weese\"               \r\n[57] \"Yellow Dick\"          \"Talbert Serry\"       \r\n[59] \"Alliser Thorne\"      \r\n\r\n$`5`\r\n [1] \"Aerys II Targaryen\" \"Alebelly\"           \"Arianne Martell\"   \r\n [4] \"Barristan Selmy\"    \"Benfred Tallhart\"   \"Brynden Tully\"     \r\n [7] \"Donella Manderly\"   \"Euron Greyjoy\"      \"Falyse Stokeworth\" \r\n[10] \"Gendry\"             \"Iggo\"               \"Jaime Lannister\"   \r\n[13] \"Jeor Mormont\"       \"Jorah Mormont\"      \"Lyman Darry\"       \r\n[16] \"Lysa Tully\"         \"Margaery Tyrell\"    \"Meera Reed\"        \r\n[19] \"Melisandre\"         \"Mikken\"             \"Oberyn Martell\"    \r\n[22] \"Rafford\"            \"Robert Baratheon\"   \"Robett Glover\"     \r\n[25] \"Shagga\"             \"Syrio Forel\"        \"Taena of Myr\"      \r\n[28] \"Thistle\"            \"Torrhen Karstark\"   \"Val\"               \r\n[31] \"Victarion Greyjoy\"  \"Weeper\"             \"Will\"              \r\n[34] \"Wylis Manderly\"     \"Kerwin\"            \r\n\r\n#blockmodel with community membership\r\nprint(blockmodel(network_statnet,got.wt$membership)$block.model, digits=2)\r\n\r\n\r\n        Block 1 Block 2 Block 3 Block 4 Block 5\r\nBlock 1    0.18    0.18    0.19    0.13    0.20\r\nBlock 2    0.18    0.27    0.20    0.22    0.26\r\nBlock 3    0.19    0.20    0.39    0.12    0.24\r\nBlock 4    0.13    0.22    0.12    0.19    0.19\r\nBlock 5    0.20    0.26    0.24    0.19    0.24\r\n\r\n#add community membership as a node attribute\r\nnetwork_nodes$got.wt<-got.wt$membership\r\n\r\n#summarize node statistics by community\r\nnodes.by.gp(network_nodes,\"got.wt\")\r\n\r\n\r\n     got.wt Appear   pov majorpov major got.fg   n\r\n[1,]      1     10 0.034    0.017 0.051    2.5  59\r\n[2,]      2     16 0.137    0.118 0.176    1.7 102\r\n[3,]      3     14 0.093    0.093 0.186    2.3  43\r\n[4,]      4     12 0.085    0.068 0.119    1.7  59\r\n[5,]      5     15 0.171    0.143 0.171    2.0  35\r\n\r\n#plot network with community coloring\r\nplot(got.wt,network_igraph, layout=layout_with_graphopt, max.sa.movement=10 )\r\n\r\n\r\n\r\n\r\nLeading Label Propagation Detection\r\n\r\n\r\n#Run clustering algorithm: llp\r\ngot.lab<-label.propagation.community(network_igraph)\r\n\r\n#to get an idea of who is in what group\r\nigraph::groups(got.lab)\r\n\r\n\r\n$`1`\r\n  [1] \"Addam Marbrand\"                 \r\n  [2] \"Aegon Frey (Jinglebell)\"        \r\n  [3] \"Aegon I Targaryen\"              \r\n  [4] \"Aegon Targaryen\"                \r\n  [5] \"Aemon Targaryen\"                \r\n  [6] \"Aeron Greyjoy\"                  \r\n  [7] \"Aerys II Targaryen\"             \r\n  [8] \"Alebelly\"                       \r\n  [9] \"Alester Florent\"                \r\n [10] \"Alfyn\"                          \r\n [11] \"Allar Deem\"                     \r\n [12] \"Amory Lorch\"                    \r\n [13] \"Antario Jast\"                   \r\n [14] \"Areo Hotah\"                     \r\n [15] \"Arianne Martell\"                \r\n [16] \"Arnolf Karstark\"                \r\n [17] \"Aron Santagar\"                  \r\n [18] \"Arthur Dayne\"                   \r\n [19] \"Arya Stark\"                     \r\n [20] \"Arys Oakheart\"                  \r\n [21] \"Asha Greyjoy\"                   \r\n [22] \"Aurane Waters\"                  \r\n [23] \"Axell Florent\"                  \r\n [24] \"Balman Byrch\"                   \r\n [25] \"Balon Greyjoy\"                  \r\n [26] \"Balon Swann\"                    \r\n [27] \"Barra\"                          \r\n [28] \"Barristan Selmy\"                \r\n [29] \"Belwas\"                         \r\n [30] \"Ben Plumm\"                      \r\n [31] \"Benfred Tallhart\"               \r\n [32] \"Benjen Stark\"                   \r\n [33] \"Beric Dondarrion\"               \r\n [34] \"Biter\"                          \r\n [35] \"Boros Blount\"                   \r\n [36] \"Bowen Marsh\"                    \r\n [37] \"Bran Stark\"                     \r\n [38] \"Brandon Stark\"                  \r\n [39] \"Brienne of Tarth\"               \r\n [40] \"Bronn\"                          \r\n [41] \"Brynden Tully\"                  \r\n [42] \"Catelyn Tully\"                  \r\n [43] \"Cersei Lannister\"               \r\n [44] \"Chayle\"                         \r\n [45] \"Chett\"                          \r\n [46] \"Chiswyck\"                       \r\n [47] \"Cleos Frey\"                     \r\n [48] \"Coldhands\"                      \r\n [49] \"Colemon\"                        \r\n [50] \"Cortnay Penrose\"                \r\n [51] \"Cotter Pyke\"                    \r\n [52] \"Cragorn\"                        \r\n [53] \"Craster\"                        \r\n [54] \"Daario Naharis\"                 \r\n [55] \"Dacey Mormont\"                  \r\n [56] \"Daenerys Targaryen\"             \r\n [57] \"Dalla\"                          \r\n [58] \"Dareon\"                         \r\n [59] \"Daryn Hornwood\"                 \r\n [60] \"Davos Seaworth\"                 \r\n [61] \"Dick Crabb\"                     \r\n [62] \"Dirk\"                           \r\n [63] \"Donal Noye\"                     \r\n [64] \"Donella Manderly\"               \r\n [65] \"Dontos Hollard\"                 \r\n [66] \"Doran Martell\"                  \r\n [67] \"Khal Drogo\"                     \r\n [68] \"Dywen\"                          \r\n [69] \"Ebben\"                          \r\n [70] \"Eddard Karstark\"                \r\n [71] \"Eddard Stark\"                   \r\n [72] \"Eddison Tollett\"                \r\n [73] \"Edmure Tully\"                   \r\n [74] \"Edric Storm\"                    \r\n [75] \"Elia Martell\"                   \r\n [76] \"Emmon Cuy\"                      \r\n [77] \"Emmon Frey\"                     \r\n [78] \"Eon Hunter\"                     \r\n [79] \"Euron Greyjoy\"                  \r\n [80] \"Falyse Stokeworth\"              \r\n [81] \"Gared\"                          \r\n [82] \"Garlan Tyrell\"                  \r\n [83] \"Garse Goodbrook\"                \r\n [84] \"Garth Greyfeather\"              \r\n [85] \"Gendry\"                         \r\n [86] \"Gerris Drinkwater\"              \r\n [87] \"Gilly\"                          \r\n [88] \"Gladden Wylde\"                  \r\n [89] \"Gregor Clegane\"                 \r\n [90] \"Grenn\"                          \r\n [91] \"Groleo\"                         \r\n [92] \"Guncer Sunglass\"                \r\n [93] \"Guyard Morrigen\"                \r\n [94] \"Hake\"                           \r\n [95] \"Hal\"                            \r\n [96] \"Haldon\"                         \r\n [97] \"Harlan Hunter\"                  \r\n [98] \"Harwin\"                         \r\n [99] \"Helman Tallhart\"                \r\n[100] \"Hizdahr zo Loraq\"               \r\n[101] \"Hodor\"                          \r\n[102] \"Hosteen Frey\"                   \r\n[103] \"Hoster Tully\"                   \r\n[104] \"Hot Pie\"                        \r\n[105] \"Hubard Rambton\"                 \r\n[106] \"Hugh\"                           \r\n[107] \"Hullen\"                         \r\n[108] \"Iggo\"                           \r\n[109] \"Illyrio Mopatis\"                \r\n[110] \"Ilyn Payne\"                     \r\n[111] \"Irri\"                           \r\n[112] \"Jacelyn Bywater\"                \r\n[113] \"Jack Bulwer\"                    \r\n[114] \"Jafer Flowers\"                  \r\n[115] \"Jaime Lannister\"                \r\n[116] \"Janos Slynt\"                    \r\n[117] \"Jaqen H'ghar\"                   \r\n[118] \"Jared Frey\"                     \r\n[119] \"Jaremy Rykker\"                  \r\n[120] \"Jeor Mormont\"                   \r\n[121] \"Jeyne Poole\"                    \r\n[122] \"Jeyne Westerling\"               \r\n[123] \"Jhiqui\"                         \r\n[124] \"Jhogo\"                          \r\n[125] \"Joffrey Baratheon\"              \r\n[126] \"Jojen Reed\"                     \r\n[127] \"Jon Arryn\"                      \r\n[128] \"Jon Connington\"                 \r\n[129] \"Jon Snow\"                       \r\n[130] \"Jon Umber (Greatjon)\"           \r\n[131] \"Jorah Mormont\"                  \r\n[132] \"Jory Cassel\"                    \r\n[133] \"Kevan Lannister\"                \r\n[134] \"Kindly Man\"                     \r\n[135] \"Kraznys mo Nakloz\"              \r\n[136] \"Kyra\"                           \r\n[137] \"Lancel Lannister\"               \r\n[138] \"Lark\"                           \r\n[139] \"Lollys Stokeworth\"              \r\n[140] \"Lommy Greenhands\"               \r\n[141] \"Loras Tyrell\"                   \r\n[142] \"Walder Frey\"                    \r\n[143] \"Lothar Mallery\"                 \r\n[144] \"Lothor Brune\"                   \r\n[145] \"Lucas Blackwood\"                \r\n[146] \"Luton\"                          \r\n[147] \"Luwin\"                          \r\n[148] \"Lyanna Stark\"                   \r\n[149] \"Lyman Darry\"                    \r\n[150] \"Lymond Vikary\"                  \r\n[151] \"Lysa Tully\"                     \r\n[152] \"Mace Tyrell\"                    \r\n[153] \"Aemon\"                          \r\n[154] \"Cressen\"                        \r\n[155] \"Mag Mar Tun Doh Weg\"            \r\n[156] \"Mance Rayder\"                   \r\n[157] \"Mandon Moore\"                   \r\n[158] \"Margaery Tyrell\"                \r\n[159] \"Meera Reed\"                     \r\n[160] \"Melisandre\"                     \r\n[161] \"Mero\"                           \r\n[162] \"Merrett Frey\"                   \r\n[163] \"Meryn Trant\"                    \r\n[164] \"Mikken\"                         \r\n[165] \"Mirri Maz Duur\"                 \r\n[166] \"Missandei\"                      \r\n[167] \"Moqorro\"                        \r\n[168] \"Mordane\"                        \r\n[169] \"Mycah\"                          \r\n[170] \"Myrcella Baratheon\"             \r\n[171] \"Nan\"                            \r\n[172] \"Nymeria\"                        \r\n[173] \"Oberyn Martell\"                 \r\n[174] \"Olenna Redwyne\"                 \r\n[175] \"Ollo Lophand\"                   \r\n[176] \"Orton Merryweather\"             \r\n[177] \"Osha\"                           \r\n[178] \"Osmund Kettleblack\"             \r\n[179] \"Osney Kettleblack\"              \r\n[180] \"Othor\"                          \r\n[181] \"Oznak zo Pahl\"                  \r\n[182] \"Pate\"                           \r\n[183] \"Paxter Redwyne\"                 \r\n[184] \"Paul\"                           \r\n[185] \"Penny\"                          \r\n[186] \"Petyr Baelish\"                  \r\n[187] \"Podrick Payne\"                  \r\n[188] \"Polliver\"                       \r\n[189] \"Prendahl na Ghezn\"              \r\n[190] \"Pycelle\"                        \r\n[191] \"Pyg\"                            \r\n[192] \"Pypar\"                          \r\n[193] \"Qhorin Halfhand\"                \r\n[194] \"Qotho\"                          \r\n[195] \"Quaithe\"                        \r\n[196] \"Quaro\"                          \r\n[197] \"Quentyn Martell\"                \r\n[198] \"Qyburn\"                         \r\n[199] \"Rafford\"                        \r\n[200] \"Ralf Kenning\"                   \r\n[201] \"Ramsay Snow\"                    \r\n[202] \"Randyll Tarly\"                  \r\n[203] \"Rattleshirt\"                    \r\n[204] \"Raymun Darry\"                   \r\n[205] \"Raymund Frey\"                   \r\n[206] \"Reek\"                           \r\n[207] \"Renly Baratheon\"                \r\n[208] \"Reznak mo Reznak\"               \r\n[209] \"Rhaegar Frey\"                   \r\n[210] \"Rhaegar Targaryen\"              \r\n[211] \"Rhaego\"                         \r\n[212] \"Rhaenys Targaryen\"              \r\n[213] \"Rickard Karstark\"               \r\n[214] \"Rickard Stark\"                  \r\n[215] \"Rickon Stark\"                   \r\n[216] \"Robar Royce\"                    \r\n[217] \"Robb Stark\"                     \r\n[218] \"Robert Arryn\"                   \r\n[219] \"Robert Baratheon\"               \r\n[220] \"Robett Glover\"                  \r\n[221] \"Rodrik Cassel\"                  \r\n[222] \"Roland Crakehall\"               \r\n[223] \"Roose Bolton\"                   \r\n[224] \"Rorge\"                          \r\n[225] \"Rupert Brax\"                    \r\n[226] \"Ryles\"                          \r\n[227] \"Ryman Frey\"                     \r\n[228] \"Salladhor Saan\"                 \r\n[229] \"Sallor the Bald\"                \r\n[230] \"Samwell Tarly\"                  \r\n[231] \"Sandor Clegane\"                 \r\n[232] \"Sansa Stark\"                    \r\n[233] \"Satin\"                          \r\n[234] \"Sawane Botley\"                  \r\n[235] \"Selyse Florent\"                 \r\n[236] \"Senelle\"                        \r\n[237] \"Shae\"                           \r\n[238] \"Shagga\"                         \r\n[239] \"Shagwell\"                       \r\n[240] \"Shireen Baratheon\"              \r\n[241] \"Skahaz mo Kandaq\"               \r\n[242] \"Softfoot\"                       \r\n[243] \"Stafford Lannister\"             \r\n[244] \"Stannis Baratheon\"              \r\n[245] \"Stevron Frey\"                   \r\n[246] \"Stiv\"                           \r\n[247] \"Styr\"                           \r\n[248] \"Symond Frey\"                    \r\n[249] \"Syrio Forel\"                    \r\n[250] \"Taena of Myr\"                   \r\n[251] \"Theon Greyjoy\"                  \r\n[252] \"Thistle\"                        \r\n[253] \"Thoros of Myr\"                  \r\n[254] \"Tickler\"                        \r\n[255] \"Timeon\"                         \r\n[256] \"Timett\"                         \r\n[257] \"Tion Frey\"                      \r\n[258] \"Tom of Sevenstreams\"            \r\n[259] \"Tommen Baratheon\"               \r\n[260] \"Tormund\"                        \r\n[261] \"Torrhen Karstark\"               \r\n[262] \"Tyrion Lannister\"               \r\n[263] \"Tysha\"                          \r\n[264] \"Tytos Frey\"                     \r\n[265] \"Tywin Lannister\"                \r\n[266] \"Utt\"                            \r\n[267] \"Val\"                            \r\n[268] \"Varamyr\"                        \r\n[269] \"Vardis Egen\"                    \r\n[270] \"Vargo Hoat\"                     \r\n[271] \"Varly\"                          \r\n[272] \"Varys\"                          \r\n[273] \"Vayon Poole\"                    \r\n[274] \"Victarion Greyjoy\"              \r\n[275] \"Viserys Targaryen\"              \r\n[276] \"Walder Frey (Little)\"           \r\n[277] \"Waymar Royce\"                   \r\n[278] \"Weeper\"                         \r\n[279] \"Weese\"                          \r\n[280] \"Will\"                           \r\n[281] \"Willas Tyrell\"                  \r\n[282] \"Willem Lannister\"               \r\n[283] \"Wylis Manderly\"                 \r\n[284] \"Wyman Manderly\"                 \r\n[285] \"Yellow Dick\"                    \r\n[286] \"Ygritte\"                        \r\n[287] \"Yohn Royce\"                     \r\n[288] \"Yoren\"                          \r\n[289] \"First High Septon (the fat one)\"\r\n[290] \"Talbert Serry\"                  \r\n[291] \"Dagon Codd\"                     \r\n[292] \"Adrack Humble\"                  \r\n[293] \"Oppo\"                           \r\n[294] \"Kerwin\"                         \r\n[295] \"Khrazz\"                         \r\n[296] \"Yurkhaz zo Yunzak\"              \r\n[297] \"the Others\"                     \r\n[298] \"Alliser Thorne\"                 \r\n\r\n#blockmodel with community membership- doesn't work bc it is one group\r\n#print(blockmodel(network_statnet, got.lab$membership)$block.model, digits=2)\r\n\r\n#add community membership as a node attribute\r\nnetwork_nodes$got.lab<-got.lab$membership\r\n\r\n#summarize node statistics by community\r\nnodes.by.gp(network_nodes,\"got.lab\")\r\n\r\n\r\n     got.lab Appear pov majorpov major got.fg got.wt   n\r\n[1,]       1     13 0.1    0.087  0.14      2    2.7 298\r\n\r\n#plot network with community coloring\r\nplot(got.lab,network_igraph, layout=layout_with_graphopt, max.sa.movement=10 )\r\n\r\n\r\n\r\n\r\nEdge Betweenness Detection\r\nLook, I tried (see code below if you want to figure out what went wrong) but this amost crashed my computer and it created over 100 groups, so I think its safe to say that this will not be a valid set of communities.\r\n\r\n\r\n#Run clustering algorithm: edge betweeness\r\ngot.edge<-edge.betweenness.community(network_igraph)\r\n\r\n#to get an idea of who is in what group\r\nigraph::groups(network_igraph)\r\n\r\n#blockmodel with community membership\r\nprint(blockmodel(network_statnet,got.edge$membership)$block.model, digits=2)\r\n\r\n#add community membership as a node attribute\r\nnetwork_nodes$got.edge<-got.edge$membership\r\n\r\n#summarize node statistics by community\r\nnodes.by.gp(network_nodes,\"got.edge\")\r\n\r\n#plot network with community coloringy\r\nplot(got.edge,network_igraph, layout=layout_with_graphopt, max.sa.movement=10 )\r\n\r\n\r\n\r\nEigenvector Detection\r\n\r\n\r\n#Run clustering algorithm: eigenvector\r\ngot.eigen<-leading.eigenvector.community(network_igraph)\r\n\r\n#to get an idea of who is in what group\r\nigraph::groups(got.eigen)\r\n\r\n\r\n$`1`\r\n  [1] \"Addam Marbrand\"                 \r\n  [2] \"Alester Florent\"                \r\n  [3] \"Allar Deem\"                     \r\n  [4] \"Amory Lorch\"                    \r\n  [5] \"Antario Jast\"                   \r\n  [6] \"Aron Santagar\"                  \r\n  [7] \"Arys Oakheart\"                  \r\n  [8] \"Aurane Waters\"                  \r\n  [9] \"Balman Byrch\"                   \r\n [10] \"Balon Swann\"                    \r\n [11] \"Barra\"                          \r\n [12] \"Beric Dondarrion\"               \r\n [13] \"Biter\"                          \r\n [14] \"Boros Blount\"                   \r\n [15] \"Brienne of Tarth\"               \r\n [16] \"Bronn\"                          \r\n [17] \"Brynden Tully\"                  \r\n [18] \"Catelyn Tully\"                  \r\n [19] \"Cersei Lannister\"               \r\n [20] \"Cleos Frey\"                     \r\n [21] \"Colemon\"                        \r\n [22] \"Cortnay Penrose\"                \r\n [23] \"Dick Crabb\"                     \r\n [24] \"Dontos Hollard\"                 \r\n [25] \"Edmure Tully\"                   \r\n [26] \"Edric Storm\"                    \r\n [27] \"Emmon Cuy\"                      \r\n [28] \"Emmon Frey\"                     \r\n [29] \"Eon Hunter\"                     \r\n [30] \"Falyse Stokeworth\"              \r\n [31] \"Garlan Tyrell\"                  \r\n [32] \"Gendry\"                         \r\n [33] \"Gladden Wylde\"                  \r\n [34] \"Gregor Clegane\"                 \r\n [35] \"Guyard Morrigen\"                \r\n [36] \"Harlan Hunter\"                  \r\n [37] \"Helman Tallhart\"                \r\n [38] \"Hoster Tully\"                   \r\n [39] \"Hugh\"                           \r\n [40] \"Ilyn Payne\"                     \r\n [41] \"Jacelyn Bywater\"                \r\n [42] \"Jaime Lannister\"                \r\n [43] \"Jeyne Westerling\"               \r\n [44] \"Joffrey Baratheon\"              \r\n [45] \"Jon Arryn\"                      \r\n [46] \"Kevan Lannister\"                \r\n [47] \"Lancel Lannister\"               \r\n [48] \"Lollys Stokeworth\"              \r\n [49] \"Loras Tyrell\"                   \r\n [50] \"Walder Frey\"                    \r\n [51] \"Lothar Mallery\"                 \r\n [52] \"Lothor Brune\"                   \r\n [53] \"Lucas Blackwood\"                \r\n [54] \"Lyman Darry\"                    \r\n [55] \"Lymond Vikary\"                  \r\n [56] \"Lysa Tully\"                     \r\n [57] \"Mace Tyrell\"                    \r\n [58] \"Mandon Moore\"                   \r\n [59] \"Margaery Tyrell\"                \r\n [60] \"Meryn Trant\"                    \r\n [61] \"Mordane\"                        \r\n [62] \"Mycah\"                          \r\n [63] \"Myrcella Baratheon\"             \r\n [64] \"Olenna Redwyne\"                 \r\n [65] \"Orton Merryweather\"             \r\n [66] \"Osmund Kettleblack\"             \r\n [67] \"Osney Kettleblack\"              \r\n [68] \"Paxter Redwyne\"                 \r\n [69] \"Petyr Baelish\"                  \r\n [70] \"Podrick Payne\"                  \r\n [71] \"Polliver\"                       \r\n [72] \"Pycelle\"                        \r\n [73] \"Pyg\"                            \r\n [74] \"Qyburn\"                         \r\n [75] \"Randyll Tarly\"                  \r\n [76] \"Raymun Darry\"                   \r\n [77] \"Renly Baratheon\"                \r\n [78] \"Rickard Karstark\"               \r\n [79] \"Robar Royce\"                    \r\n [80] \"Robert Arryn\"                   \r\n [81] \"Robert Baratheon\"               \r\n [82] \"Robett Glover\"                  \r\n [83] \"Roland Crakehall\"               \r\n [84] \"Rorge\"                          \r\n [85] \"Rupert Brax\"                    \r\n [86] \"Ryman Frey\"                     \r\n [87] \"Sandor Clegane\"                 \r\n [88] \"Sansa Stark\"                    \r\n [89] \"Senelle\"                        \r\n [90] \"Shae\"                           \r\n [91] \"Shagga\"                         \r\n [92] \"Shagwell\"                       \r\n [93] \"Stafford Lannister\"             \r\n [94] \"Taena of Myr\"                   \r\n [95] \"Thoros of Myr\"                  \r\n [96] \"Tickler\"                        \r\n [97] \"Timeon\"                         \r\n [98] \"Timett\"                         \r\n [99] \"Tom of Sevenstreams\"            \r\n[100] \"Tommen Baratheon\"               \r\n[101] \"Tyrion Lannister\"               \r\n[102] \"Tywin Lannister\"                \r\n[103] \"Vardis Egen\"                    \r\n[104] \"Vargo Hoat\"                     \r\n[105] \"Varly\"                          \r\n[106] \"Varys\"                          \r\n[107] \"Weese\"                          \r\n[108] \"Willas Tyrell\"                  \r\n[109] \"Wylis Manderly\"                 \r\n[110] \"Yohn Royce\"                     \r\n[111] \"First High Septon (the fat one)\"\r\n\r\n$`2`\r\n [1] \"Aegon Frey (Jinglebell)\" \"Aeron Greyjoy\"          \r\n [3] \"Alebelly\"                \"Arya Stark\"             \r\n [5] \"Asha Greyjoy\"            \"Balon Greyjoy\"          \r\n [7] \"Benfred Tallhart\"        \"Bran Stark\"             \r\n [9] \"Brandon Stark\"           \"Chayle\"                 \r\n[11] \"Chiswyck\"                \"Cragorn\"                \r\n[13] \"Dacey Mormont\"           \"Donella Manderly\"       \r\n[15] \"Eddard Stark\"            \"Garse Goodbrook\"        \r\n[17] \"Harwin\"                  \"Hodor\"                  \r\n[19] \"Hosteen Frey\"            \"Hot Pie\"                \r\n[21] \"Hullen\"                  \"Iggo\"                   \r\n[23] \"Jaqen H'ghar\"            \"Jared Frey\"             \r\n[25] \"Jeyne Poole\"             \"Jojen Reed\"             \r\n[27] \"Jon Umber (Greatjon)\"    \"Jory Cassel\"            \r\n[29] \"Kindly Man\"              \"Kyra\"                   \r\n[31] \"Lommy Greenhands\"        \"Luton\"                  \r\n[33] \"Luwin\"                   \"Meera Reed\"             \r\n[35] \"Merrett Frey\"            \"Mikken\"                 \r\n[37] \"Osha\"                    \"Rafford\"                \r\n[39] \"Ralf Kenning\"            \"Ramsay Snow\"            \r\n[41] \"Raymund Frey\"            \"Reek\"                   \r\n[43] \"Rhaegar Frey\"            \"Rickard Stark\"          \r\n[45] \"Rickon Stark\"            \"Robb Stark\"             \r\n[47] \"Rodrik Cassel\"           \"Roose Bolton\"           \r\n[49] \"Sawane Botley\"           \"Stevron Frey\"           \r\n[51] \"Stiv\"                    \"Symond Frey\"            \r\n[53] \"Syrio Forel\"             \"Theon Greyjoy\"          \r\n[55] \"Tion Frey\"               \"Tytos Frey\"             \r\n[57] \"Utt\"                     \"Vayon Poole\"            \r\n[59] \"Victarion Greyjoy\"       \"Walder Frey (Little)\"   \r\n[61] \"Willem Lannister\"        \"Wyman Manderly\"         \r\n[63] \"Yellow Dick\"             \"Yoren\"                  \r\n[65] \"Talbert Serry\"           \"Dagon Codd\"             \r\n[67] \"Adrack Humble\"          \r\n\r\n$`3`\r\n [1] \"Aegon I Targaryen\"  \"Aegon Targaryen\"    \"Aerys II Targaryen\"\r\n [4] \"Areo Hotah\"         \"Arianne Martell\"    \"Arthur Dayne\"      \r\n [7] \"Barristan Selmy\"    \"Belwas\"             \"Ben Plumm\"         \r\n[10] \"Daario Naharis\"     \"Daenerys Targaryen\" \"Doran Martell\"     \r\n[13] \"Khal Drogo\"         \"Elia Martell\"       \"Euron Greyjoy\"     \r\n[16] \"Gerris Drinkwater\"  \"Groleo\"             \"Haldon\"            \r\n[19] \"Hizdahr zo Loraq\"   \"Illyrio Mopatis\"    \"Irri\"              \r\n[22] \"Jhiqui\"             \"Jhogo\"              \"Jon Connington\"    \r\n[25] \"Jorah Mormont\"      \"Kraznys mo Nakloz\"  \"Lyanna Stark\"      \r\n[28] \"Cressen\"            \"Mirri Maz Duur\"     \"Missandei\"         \r\n[31] \"Moqorro\"            \"Oberyn Martell\"     \"Pate\"              \r\n[34] \"Penny\"              \"Prendahl na Ghezn\"  \"Qotho\"             \r\n[37] \"Quaithe\"            \"Quaro\"              \"Quentyn Martell\"   \r\n[40] \"Reznak mo Reznak\"   \"Rhaegar Targaryen\"  \"Rhaego\"            \r\n[43] \"Rhaenys Targaryen\"  \"Sallor the Bald\"    \"Skahaz mo Kandaq\"  \r\n[46] \"Tysha\"              \"Viserys Targaryen\"  \"Oppo\"              \r\n[49] \"Kerwin\"             \"Khrazz\"             \"Yurkhaz zo Yunzak\" \r\n\r\n$`4`\r\n [1] \"Aemon Targaryen\"     \"Alfyn\"               \"Arnolf Karstark\"    \r\n [4] \"Axell Florent\"       \"Benjen Stark\"        \"Bowen Marsh\"        \r\n [7] \"Chett\"               \"Coldhands\"           \"Cotter Pyke\"        \r\n[10] \"Craster\"             \"Dalla\"               \"Dareon\"             \r\n[13] \"Daryn Hornwood\"      \"Davos Seaworth\"      \"Dirk\"               \r\n[16] \"Donal Noye\"          \"Dywen\"               \"Ebben\"              \r\n[19] \"Eddard Karstark\"     \"Eddison Tollett\"     \"Gared\"              \r\n[22] \"Garth Greyfeather\"   \"Gilly\"               \"Grenn\"              \r\n[25] \"Guncer Sunglass\"     \"Hake\"                \"Hal\"                \r\n[28] \"Hubard Rambton\"      \"Jack Bulwer\"         \"Jafer Flowers\"      \r\n[31] \"Janos Slynt\"         \"Jaremy Rykker\"       \"Jeor Mormont\"       \r\n[34] \"Jon Snow\"            \"Lark\"                \"Aemon\"              \r\n[37] \"Mag Mar Tun Doh Weg\" \"Mance Rayder\"        \"Melisandre\"         \r\n[40] \"Nan\"                 \"Nymeria\"             \"Ollo Lophand\"       \r\n[43] \"Othor\"               \"Paul\"                \"Pypar\"              \r\n[46] \"Qhorin Halfhand\"     \"Rattleshirt\"         \"Ryles\"              \r\n[49] \"Salladhor Saan\"      \"Samwell Tarly\"       \"Satin\"              \r\n[52] \"Selyse Florent\"      \"Shireen Baratheon\"   \"Softfoot\"           \r\n[55] \"Stannis Baratheon\"   \"Styr\"                \"Thistle\"            \r\n[58] \"Tormund\"             \"Torrhen Karstark\"    \"Val\"                \r\n[61] \"Varamyr\"             \"Waymar Royce\"        \"Weeper\"             \r\n[64] \"Will\"                \"Ygritte\"             \"the Others\"         \r\n[67] \"Alliser Thorne\"     \r\n\r\n$`5`\r\n[1] \"Mero\"          \"Oznak zo Pahl\"\r\n\r\n#blockmodel with community membership\r\nprint(blockmodel(network_statnet,got.eigen$membership)$block.model, digits=2)\r\n\r\n\r\n        Block 1 Block 2 Block 3 Block 4 Block 5\r\nBlock 1   0.411   0.174   0.180   0.100   0.018\r\nBlock 2   0.174   0.319   0.074   0.160   0.000\r\nBlock 3   0.180   0.074   0.518   0.052   0.137\r\nBlock 4   0.100   0.160   0.052   0.465   0.015\r\nBlock 5   0.018   0.000   0.137   0.015   1.000\r\n\r\n#add community membership as a node attribute\r\nnetwork_nodes$got.eigen<-got.eigen$membership\r\n\r\n#summarize node statistics by community\r\nnodes.by.gp(network_nodes,\"got.eigen\")\r\n\r\n\r\n     got.eigen Appear   pov majorpov major got.fg got.wt got.lab   n\r\n[1,]         1     16 0.072    0.072  0.15    3.0    2.4       1 111\r\n[2,]         2     13 0.119    0.104  0.15    1.4    2.8       1  67\r\n[3,]         3     11 0.157    0.118  0.14    2.0    2.8       1  51\r\n[4,]         4     12 0.104    0.075  0.12    1.0    3.0       1  67\r\n[5,]         5      1 0.000    0.000  0.00    2.0    3.0       1   2\r\n\r\n#plot network with community coloring\r\nplot(got.eigen,network_igraph, layout=layout_with_graphopt, max.sa.movement=10 )\r\n\r\n\r\n\r\n\r\nSpinglass Community Detection\r\n\r\n\r\n#Run clustering algorithm: spinglass\r\ngot.spin<-spinglass.community(network_igraph)\r\n\r\n#to get an idea of who is in what group\r\nigraph::groups(got.spin)\r\n\r\n\r\n$`1`\r\n [1] \"Addam Marbrand\"                 \r\n [2] \"Aegon Targaryen\"                \r\n [3] \"Aerys II Targaryen\"             \r\n [4] \"Allar Deem\"                     \r\n [5] \"Antario Jast\"                   \r\n [6] \"Areo Hotah\"                     \r\n [7] \"Arianne Martell\"                \r\n [8] \"Aron Santagar\"                  \r\n [9] \"Arys Oakheart\"                  \r\n[10] \"Aurane Waters\"                  \r\n[11] \"Balman Byrch\"                   \r\n[12] \"Balon Swann\"                    \r\n[13] \"Barra\"                          \r\n[14] \"Boros Blount\"                   \r\n[15] \"Brienne of Tarth\"               \r\n[16] \"Bronn\"                          \r\n[17] \"Cersei Lannister\"               \r\n[18] \"Colemon\"                        \r\n[19] \"Cortnay Penrose\"                \r\n[20] \"Dick Crabb\"                     \r\n[21] \"Dontos Hollard\"                 \r\n[22] \"Doran Martell\"                  \r\n[23] \"Elia Martell\"                   \r\n[24] \"Emmon Cuy\"                      \r\n[25] \"Eon Hunter\"                     \r\n[26] \"Falyse Stokeworth\"              \r\n[27] \"Garlan Tyrell\"                  \r\n[28] \"Gregor Clegane\"                 \r\n[29] \"Guyard Morrigen\"                \r\n[30] \"Haldon\"                         \r\n[31] \"Harlan Hunter\"                  \r\n[32] \"Hugh\"                           \r\n[33] \"Ilyn Payne\"                     \r\n[34] \"Jacelyn Bywater\"                \r\n[35] \"Jaime Lannister\"                \r\n[36] \"Joffrey Baratheon\"              \r\n[37] \"Jon Arryn\"                      \r\n[38] \"Jon Connington\"                 \r\n[39] \"Kevan Lannister\"                \r\n[40] \"Lancel Lannister\"               \r\n[41] \"Lollys Stokeworth\"              \r\n[42] \"Loras Tyrell\"                   \r\n[43] \"Lothor Brune\"                   \r\n[44] \"Lyanna Stark\"                   \r\n[45] \"Lymond Vikary\"                  \r\n[46] \"Lysa Tully\"                     \r\n[47] \"Mace Tyrell\"                    \r\n[48] \"Mandon Moore\"                   \r\n[49] \"Margaery Tyrell\"                \r\n[50] \"Meryn Trant\"                    \r\n[51] \"Myrcella Baratheon\"             \r\n[52] \"Oberyn Martell\"                 \r\n[53] \"Olenna Redwyne\"                 \r\n[54] \"Orton Merryweather\"             \r\n[55] \"Osmund Kettleblack\"             \r\n[56] \"Osney Kettleblack\"              \r\n[57] \"Paxter Redwyne\"                 \r\n[58] \"Petyr Baelish\"                  \r\n[59] \"Podrick Payne\"                  \r\n[60] \"Pycelle\"                        \r\n[61] \"Pyg\"                            \r\n[62] \"Qyburn\"                         \r\n[63] \"Randyll Tarly\"                  \r\n[64] \"Renly Baratheon\"                \r\n[65] \"Rhaegar Targaryen\"              \r\n[66] \"Rhaenys Targaryen\"              \r\n[67] \"Robar Royce\"                    \r\n[68] \"Robert Arryn\"                   \r\n[69] \"Robert Baratheon\"               \r\n[70] \"Roland Crakehall\"               \r\n[71] \"Rupert Brax\"                    \r\n[72] \"Sandor Clegane\"                 \r\n[73] \"Sansa Stark\"                    \r\n[74] \"Senelle\"                        \r\n[75] \"Shae\"                           \r\n[76] \"Shagga\"                         \r\n[77] \"Shagwell\"                       \r\n[78] \"Stafford Lannister\"             \r\n[79] \"Taena of Myr\"                   \r\n[80] \"Timeon\"                         \r\n[81] \"Timett\"                         \r\n[82] \"Tommen Baratheon\"               \r\n[83] \"Tyrion Lannister\"               \r\n[84] \"Tysha\"                          \r\n[85] \"Tywin Lannister\"                \r\n[86] \"Vardis Egen\"                    \r\n[87] \"Varly\"                          \r\n[88] \"Varys\"                          \r\n[89] \"Willas Tyrell\"                  \r\n[90] \"Yohn Royce\"                     \r\n[91] \"First High Septon (the fat one)\"\r\n[92] \"Oppo\"                           \r\n\r\n$`2`\r\n  [1] \"Aegon Frey (Jinglebell)\" \"Aeron Greyjoy\"          \r\n  [3] \"Alebelly\"                \"Amory Lorch\"            \r\n  [5] \"Arthur Dayne\"            \"Arya Stark\"             \r\n  [7] \"Asha Greyjoy\"            \"Balon Greyjoy\"          \r\n  [9] \"Benfred Tallhart\"        \"Beric Dondarrion\"       \r\n [11] \"Biter\"                   \"Bran Stark\"             \r\n [13] \"Brandon Stark\"           \"Brynden Tully\"          \r\n [15] \"Catelyn Tully\"           \"Chayle\"                 \r\n [17] \"Chiswyck\"                \"Cleos Frey\"             \r\n [19] \"Cragorn\"                 \"Dacey Mormont\"          \r\n [21] \"Donella Manderly\"        \"Eddard Stark\"           \r\n [23] \"Edmure Tully\"            \"Emmon Frey\"             \r\n [25] \"Euron Greyjoy\"           \"Garse Goodbrook\"        \r\n [27] \"Gendry\"                  \"Gladden Wylde\"          \r\n [29] \"Harwin\"                  \"Helman Tallhart\"        \r\n [31] \"Hodor\"                   \"Hosteen Frey\"           \r\n [33] \"Hoster Tully\"            \"Hot Pie\"                \r\n [35] \"Hullen\"                  \"Iggo\"                   \r\n [37] \"Jaqen H'ghar\"            \"Jared Frey\"             \r\n [39] \"Jeyne Poole\"             \"Jeyne Westerling\"       \r\n [41] \"Jojen Reed\"              \"Jon Umber (Greatjon)\"   \r\n [43] \"Jory Cassel\"             \"Kindly Man\"             \r\n [45] \"Kyra\"                    \"Lommy Greenhands\"       \r\n [47] \"Walder Frey\"             \"Lothar Mallery\"         \r\n [49] \"Lucas Blackwood\"         \"Luton\"                  \r\n [51] \"Luwin\"                   \"Lyman Darry\"            \r\n [53] \"Meera Reed\"              \"Merrett Frey\"           \r\n [55] \"Mikken\"                  \"Mordane\"                \r\n [57] \"Mycah\"                   \"Osha\"                   \r\n [59] \"Polliver\"                \"Rafford\"                \r\n [61] \"Ralf Kenning\"            \"Ramsay Snow\"            \r\n [63] \"Raymun Darry\"            \"Raymund Frey\"           \r\n [65] \"Reek\"                    \"Rhaegar Frey\"           \r\n [67] \"Rickard Karstark\"        \"Rickard Stark\"          \r\n [69] \"Rickon Stark\"            \"Robb Stark\"             \r\n [71] \"Robett Glover\"           \"Rodrik Cassel\"          \r\n [73] \"Roose Bolton\"            \"Rorge\"                  \r\n [75] \"Ryman Frey\"              \"Sawane Botley\"          \r\n [77] \"Stevron Frey\"            \"Stiv\"                   \r\n [79] \"Symond Frey\"             \"Syrio Forel\"            \r\n [81] \"Theon Greyjoy\"           \"Thoros of Myr\"          \r\n [83] \"Tickler\"                 \"Tion Frey\"              \r\n [85] \"Tom of Sevenstreams\"     \"Tytos Frey\"             \r\n [87] \"Utt\"                     \"Vargo Hoat\"             \r\n [89] \"Vayon Poole\"             \"Victarion Greyjoy\"      \r\n [91] \"Walder Frey (Little)\"    \"Weese\"                  \r\n [93] \"Willem Lannister\"        \"Wylis Manderly\"         \r\n [95] \"Wyman Manderly\"          \"Yellow Dick\"            \r\n [97] \"Yoren\"                   \"Talbert Serry\"          \r\n [99] \"Dagon Codd\"              \"Adrack Humble\"          \r\n\r\n$`3`\r\n [1] \"Aegon I Targaryen\"  \"Barristan Selmy\"    \"Belwas\"            \r\n [4] \"Ben Plumm\"          \"Daario Naharis\"     \"Daenerys Targaryen\"\r\n [7] \"Khal Drogo\"         \"Gerris Drinkwater\"  \"Groleo\"            \r\n[10] \"Hizdahr zo Loraq\"   \"Illyrio Mopatis\"    \"Irri\"              \r\n[13] \"Jhiqui\"             \"Jhogo\"              \"Jorah Mormont\"     \r\n[16] \"Kraznys mo Nakloz\"  \"Mero\"               \"Mirri Maz Duur\"    \r\n[19] \"Missandei\"          \"Moqorro\"            \"Nymeria\"           \r\n[22] \"Oznak zo Pahl\"      \"Pate\"               \"Penny\"             \r\n[25] \"Prendahl na Ghezn\"  \"Qotho\"              \"Quaithe\"           \r\n[28] \"Quaro\"              \"Quentyn Martell\"    \"Reznak mo Reznak\"  \r\n[31] \"Rhaego\"             \"Sallor the Bald\"    \"Skahaz mo Kandaq\"  \r\n[34] \"Viserys Targaryen\"  \"Khrazz\"             \"Yurkhaz zo Yunzak\" \r\n\r\n$`4`\r\n[1] \"Kerwin\"\r\n\r\n$`5`\r\n [1] \"Aemon Targaryen\"     \"Alester Florent\"     \"Alfyn\"              \r\n [4] \"Arnolf Karstark\"     \"Axell Florent\"       \"Benjen Stark\"       \r\n [7] \"Bowen Marsh\"         \"Chett\"               \"Coldhands\"          \r\n[10] \"Cotter Pyke\"         \"Craster\"             \"Dalla\"              \r\n[13] \"Dareon\"              \"Daryn Hornwood\"      \"Davos Seaworth\"     \r\n[16] \"Dirk\"                \"Donal Noye\"          \"Dywen\"              \r\n[19] \"Ebben\"               \"Eddard Karstark\"     \"Eddison Tollett\"    \r\n[22] \"Edric Storm\"         \"Gared\"               \"Garth Greyfeather\"  \r\n[25] \"Gilly\"               \"Grenn\"               \"Guncer Sunglass\"    \r\n[28] \"Hake\"                \"Hal\"                 \"Hubard Rambton\"     \r\n[31] \"Jack Bulwer\"         \"Jafer Flowers\"       \"Janos Slynt\"        \r\n[34] \"Jaremy Rykker\"       \"Jeor Mormont\"        \"Jon Snow\"           \r\n[37] \"Lark\"                \"Aemon\"               \"Cressen\"            \r\n[40] \"Mag Mar Tun Doh Weg\" \"Mance Rayder\"        \"Melisandre\"         \r\n[43] \"Nan\"                 \"Ollo Lophand\"        \"Othor\"              \r\n[46] \"Paul\"                \"Pypar\"               \"Qhorin Halfhand\"    \r\n[49] \"Rattleshirt\"         \"Ryles\"               \"Salladhor Saan\"     \r\n[52] \"Samwell Tarly\"       \"Satin\"               \"Selyse Florent\"     \r\n[55] \"Shireen Baratheon\"   \"Softfoot\"            \"Stannis Baratheon\"  \r\n[58] \"Styr\"                \"Thistle\"             \"Tormund\"            \r\n[61] \"Torrhen Karstark\"    \"Val\"                 \"Varamyr\"            \r\n[64] \"Waymar Royce\"        \"Weeper\"              \"Will\"               \r\n[67] \"Ygritte\"             \"the Others\"          \"Alliser Thorne\"     \r\n\r\n#blockmodel with community membership\r\nprint(blockmodel(network_statnet,got.spin$membership)$block.model, digits=2)\r\n\r\n\r\n        Block 1 Block 2 Block 3 Block 4 Block 5\r\nBlock 1   0.496   0.197   0.168   0.011   0.116\r\nBlock 2   0.197   0.286   0.047   0.030   0.125\r\nBlock 3   0.168   0.047   0.576   0.056   0.035\r\nBlock 4   0.011   0.030   0.056     NaN   0.000\r\nBlock 5   0.116   0.125   0.035   0.000   0.445\r\n\r\n#add community membership as a node attribute\r\nnetwork_nodes$got.spin<-got.spin$membership\r\n\r\n#summarize node statistics by community\r\nnodes.by.gp(network_nodes,\"got.spin\")\r\n\r\n\r\n     got.spin Appear  pov majorpov major got.fg got.wt got.lab\r\n[1,]        1   17.8 0.11    0.109 0.217    2.8    2.5       1\r\n[2,]        2   11.9 0.09    0.080 0.110    1.9    2.7       1\r\n[3,]        3    9.9 0.11    0.083 0.083    2.0    2.7       1\r\n[4,]        4    1.0 0.00    0.000 0.000    2.0    5.0       1\r\n[5,]        5   11.7 0.12    0.072 0.116    1.1    3.0       1\r\n     got.eigen   n\r\n[1,]       1.3  92\r\n[2,]       1.7 100\r\n[3,]       3.1  36\r\n[4,]       3.0   1\r\n[5,]       3.9  69\r\n\r\n#plot network with community coloring\r\nplot(got.spin,network_igraph, layout=layout_with_graphopt, max.sa.movement=10 )\r\n\r\n\r\n\r\n\r\nCompare Modularity\r\n\r\n\r\nmods<-c(fastgreedy=modularity(got.fg), walktrap=modularity(got.wt), llp=modularity(got.lab), eigen=modularity(got.eigen), spinglass=modularity(got.spin))\r\n\r\nmods\r\n\r\n\r\nfastgreedy   walktrap        llp      eigen  spinglass \r\n0.25236488 0.02662821 0.00000000 0.26589769 0.14355753 \r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/httpsrpubscombean22z881579/distill-preview.png",
    "last_modified": "2022-03-27T15:50:41-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsnmilsteinumagithubioposts2022-03-21-blog-post-7/",
    "title": "Blog Post 7, Integrating ML",
    "description": "This post is an analysis of community structure and machine learning techniques on my medieval dataset.",
    "author": [
      {
        "name": "Noah Milstein",
        "url": {}
      }
    ],
    "date": "2022-03-27",
    "categories": [],
    "contents": "\n\n\n\n\n\n\nAn Introduction to\nthe Project and Dataset\nThe project that I am doing involves conflict in\nthe high middle ages. This was the period between 1000 and 1200\n\n\n\nPart 1:\nDescribe the Dataset You Are\nUsing:\nThe Dataset Being Used: The dataset that I am using\nis wikipedia list of wars throughout history, this article is the “List\nof wars: 1000–1499” which acts as a subset of the “2nd-millennium\nconflicts” I chose this dataset as an exemplar of popular history’s\ndepiction of the centralization of worldwide conflict. Wikipedia, being\nan accessible source generally created from relevant citations makes it\na good case study to see where historical writers and academics center\ntheir world are relevant conflicts.\nIdentify initial network\nformat:\nAnswer: The initial network format is as an edge\nlist, the first, in column contains the winners of each\nwar while the second, out column contains the losers of\neach. These sets of belligerents are directed\nNetwork\nStructure: Wars Startings in the 1000s\n\n Network attributes:\n  vertices = 111 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 153 \n    missing edges= 0 \n    non-missing edges= 153 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nNetwork\nStructure: Wars Startings in the 1100s\n\n Network attributes:\n  vertices = 97 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 238 \n    missing edges= 0 \n    non-missing edges= 238 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nNetwork Structure:\nWars Starting in the 1200s\n\n Network attributes:\n  vertices = 161 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 313 \n    missing edges= 0 \n    non-missing edges= 313 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nIdentify Nodes: Describe and identify the nodes\n(including how many nodes are in the dataset)\nAnswer: Nodes or vertices in these datasets\nrepresent belligerents in wars throughout history, the involved parties\nin each conflict can be a nation, province, individual, or group so long\nas they are listed as involved in the conflict. In the 1000s there are\n117, in the 1100s there are 78 and in the 1200s there are 161.\nWhat Constitutes a Tie: What constitutes a tie or\nedge (including how many ties, whether ties are directed/undirected and\nweighted/binary, and how to interpret the value of the tie if any)\nAnswer: A tie or edge in this dataset represents a\nwar, this war can be between two nations or groups within a nation.\nThese edges can represent a war that involved many more nations but are\nalways tied to each and every party involved on both sides. These edges\nare directed and the direction indicates which side “won” the conflict\n(if an edge has an arrow pointing to another the node that originated\nthat arrow won the war against them. There are 153 edges in the 1000s,\n225 edges in 1100s and 313 edges in the 1200s.\nEdge Attributes and Subset: Whether or not there are\nedge attributes that might be used to subset data or stack multiple\nnetworks (e.g., tie type, year, etc).\nAnswer: There are a number of attributes that could\nbe used to subset the data, year that the conflict began or the length\nof time it lasted are available. Aspects like each side’s religion and\nthe area where the conflict took place could be used to subset the data\nitself.\nPart 2:\nBrokerage and Betweeness\ncentrality\nWhat are betweeness and brokerage cenrrality\nCalculate brokerage and betweenneess centrality measures for one or more\nsubsets of your network data, and write up the results and your\ninterpretation of them.\nAnswer: I will be calculating these measures for\nwars in 1000-1099, 1100-1199, and 1200-1399.\n\n\n\nBrokerage scores in the\n1000s\n\n\n\n\n\n(wars_in_1000s.nodes.stat_2%>%\n  arrange(desc(broker.tot))%>%\n  slice(1:10))[,c(1,11:15)] %>%kable()\n\n\nname\nbroker.tot\nbroker.coord\nbroker.itin\nbroker.rep\nbroker.gate\nByzantine Empire\n22.7376579\nNaN\n3.1654785\nNaN\nNaN\nHoly Roman Empire\n9.2813605\nNaN\n2.2468427\nNaN\nNaN\nSultanate of Rum\n9.2813605\nNaN\n-0.5090648\nNaN\nNaN\nEngland\n6.9745666\nNaN\n5.0036896\n-0.0853606\n-0.0853606\nKingdom of Sicily\n5.0522384\n-0.0176111\n4.0866123\n-0.1201631\n-0.1201631\nSeljuk Empire\n1.9765133\n-0.0176111\n-0.5084146\n3.4677529\n-0.1201631\nKingdom of France\n1.9765133\nNaN\n-0.5090648\nNaN\nNaN\nKingdom of Georgia\n0.8231164\n-0.0176111\n-0.5084146\n-0.1201631\n-0.1201631\nPapal States\n0.4386507\n-0.0176111\n-0.5084146\n-0.1201631\n10.6435850\nGhaznavids\n0.0541851\n-0.1380791\n-0.4907567\n-0.2903366\n-0.2903366\n\nBrokerage scores in the\n1100s\n\n\n\n\n\n\n\n\n(wars_in_1100s.nodes.stat_2%>%\n  arrange(desc(broker.tot))%>%\n  slice(1:10))[,c(1,10:14)] %>%kable()\n\n\nname\nbroker.tot\nbroker.coord\nbroker.itin\nbroker.rep\nbroker.gate\nKingdom of Jerusalem\n17.1050061\nNaN\n2.8705599\n24.5610650\n-0.1357675\nFatimid Caliphate\n10.2415178\nNaN\n-0.6472506\nNaN\nNaN\nAyyubid Dynasty\n9.3615834\nNaN\n-0.6465587\n-0.1357675\n-0.1357675\nZengid Dynasty\n7.4257278\nNaN\n0.7591543\nNaN\nNaN\nByzantine Empire\n6.8977671\nNaN\n0.7602887\n-0.1357675\n-0.1357675\nEngland\n5.8418459\nNaN\n-0.6465587\n-0.1357675\n-0.1357675\nHoly Roman Empire\n3.0260558\nNaN\n-0.6465587\n-0.1357675\n-0.1357675\nKingdom of France\n1.6181608\nNaN\n-0.6465587\n-0.1357675\n-0.1357675\nKingdom of Sicily\n0.5622395\n-0.1467125\n-0.6293842\n-0.3476788\n-0.3476788\nPapal States\n0.0342789\n-0.1264908\n-0.6336748\n-0.3236913\n2.5014147\n\nBrokerage scores in the\n1200s\n\n\n\n\n\n\n\n\n\n\nname\nbroker.tot\nbroker.coord\nbroker.itin\nbroker.rep\nbroker.gate\nMongol Empire\n47.964825\nNaN\n-0.5966483\nNaN\nNaN\nKingdom of France\n28.663539\nNaN\n-0.5966483\nNaN\nNaN\nAyyubid Dynasty\n26.995527\nNaN\n2.3528915\nNaN\nNaN\nKingdom of England\n21.991489\nNaN\n8.9893561\nNaN\nNaN\nRepublic of Genoa\n11.983415\nNaN\n-0.5966483\nNaN\nNaN\nKnights Templar\n10.077115\nNaN\n1.6155066\nNaN\nNaN\nHoly Roman Empire\n4.834790\n-0.0170801\n-0.5961482\n10.865523\n10.865523\nPrincipality of Antioch\n4.834790\n-0.0170801\n2.3541101\n13.613565\n-0.126648\nKingdom of Cyprus\n4.596503\n58.5391124\n0.1414163\n13.613565\n10.865523\nArmenian Kingdom of Cilicia\n3.881640\n-0.0170801\n-0.5961482\n-0.126648\n-0.126648\n\n\nname\nbroker.gate\nPapal States\n10.6435850\nCounty of Aversa\n-0.0853606\nCounty of Sicily\n-0.0853606\nEngland\n-0.0853606\nChola Empire\n-0.0853606\nCounty of Apulia\n-0.1201631\nKingdom of Sicily\n-0.1201631\nKingdom of Georgia\n-0.1201631\nGreat Seljuq Empire\n-0.1201631\nSeljuk Empire\n-0.1201631\nname\nbroker.tot\nByzantine Empire\n22.7376579\nHoly Roman Empire\n9.2813605\nSultanate of Rum\n9.2813605\nEngland\n6.9745666\nKingdom of Sicily\n5.0522384\nSeljuk Empire\n1.9765133\nKingdom of France\n1.9765133\nKingdom of Georgia\n0.8231164\nPapal States\n0.4386507\nGhaznavids\n0.0541851\n\nOption 2.A\nFor a Specific Research Question: If you have a\nspecific research question, please feel free to use that to guide your\nanalysis. Otherwise, you may want to orient your analysis as follows in\norder to identify a compelling question or noteworthy pattern in the\ndata that can be interpreted.\nAnswer: Since I am interested in the relative power\nof nations by their relative position ad centrality in the worldwide\nconflict, network brokerage can be used to illustrate significant\npositions in global conflict. Below I wanted to look at 4 kinds of\nbrokerage, these are broker.gate or gatekeeper, coordinator, liason, and\nitinerant. I am interested to see if these specific coordination types\nare primarily done by specific nations.\n\n\n\n\n\n\n\n\n\nTotal Brokerage\nExplanation: Looking at total brokerage in this\ndataset gives a sense of which factions were responsible for highest\nconnection of unconnected actors through conflict. Given the crusades\nigniting conflict between Europe and the middle east it is sensible that\nthe Byzantine Empire in the center of both connects the most unconnected\nactors through conflict closely followed by the Sultanate of Rum, a\nmajor Muslim faction that fought against the crusades and third being\nthe Holy Roman Empire who participated in many conflicts including the\ncrusades. These are followed by England who centered the wars in the\nBritish isles and the Kingdom of Sicily who were also in a position of\nconflict.\n\nname\nbroker.tot\nByzantine Empire\n22.737658\nHoly Roman Empire\n9.281360\nSultanate of Rum\n9.281360\nEngland\n6.974567\nKingdom of Sicily\n5.052238\n\nCoordinator Brokerage\nExplanation: In this case no particular country is\nvery high above any other in terms of their coordinator brokerage,\nmeaning that within groups no particular nations appear to be brokering\nmore within the groups.\n\nname\nbroker.coord\nCounty of Apulia\n-0.0176111\nKingdom of Sicily\n-0.0176111\nKingdom of Georgia\n-0.0176111\nGreat Seljuq Empire\n-0.0176111\nPapal States\n-0.0176111\n\nItinerant Brokerage\nExplanation: Itinerant brokerage represents when a\nnon-group actor connects 2 actors in a group it is no in to each other,\nin this case England has the highest score. Looking at the network graph\nthey do appear to connect 2 actors in a group together.\n\nname\nbroker.itin\nEngland\n5.0036896\nKingdom of Sicily\n4.0866123\nByzantine Empire\n3.1654785\nHoly Roman Empire\n2.2468427\nPrincipality of Kiev\n0.4812412\n\nRepresentative Brokerage\nExplanation: Representative brokerage indicates that\nthe broker, or nation in question loses a war to another in their group,\nbut wins another against a faction outside of their group. This can be\nthough of as their directed connections to them. In this case the Seljuk\nEmpire and Kingdom of Aragon have instances in which they lose to\nfactions within their group before beating those outside of it.\n\nname\nbroker.rep\nSeljuk Empire\n3.4677529\nKingdom of Aragon\n0.9281821\nCounty of Aversa\n-0.0853606\nCounty of Sicily\n-0.0853606\nEngland\n-0.0853606\n\nGatekeeper Brokerage\nExplanation: The Papal states being ranked highest\nin gatekeeper brokerage is an interesting observation as no other nation\nin the dataset appears to be close to their level as most are negative\nin this category. In this cae being a gatekeeper means that they are in\nat conflict in a group with another while the nation in a different\ngroup of conflicts is only at war with them from the group. This is an\ninteresting observation given the Papal states role as a coordinator of\nthe war, but not a participant in the conflcit as directly as other\nbelligerents. (This being the crusade given the period)\n\nname\nbroker.gate\nPapal States\n10.6435850\nCounty of Aversa\n-0.0853606\nCounty of Sicily\n-0.0853606\nEngland\n-0.0853606\nChola Empire\n-0.0853606\n\nLiaison Brokerage\nExplanation: A liaison broker, in this case, is a\nfaction that loses a war to a group they do not belong to and wins a war\nagainst a different group than the first that they also do not belong\nto. The Byzantine Empire, Sultanate of Rum, and Holy Roman Empire are\nhighest in this category likely owing to their frequent states of\nconflict beyond the crusades against a variety of groups.\n\nname\nbroker.lia\nByzantine Empire\n28.140866\nSultanate of Rum\n12.477603\nHoly Roman Empire\n10.961803\nEngland\n6.548214\nKingdom of Sicily\n4.589419\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNetwork\n1000s Plot Grouping Determined with No Cluster Method\n\n\n\nNetwork\n1000s Plot Grouping Determined with the Average Cluster Method\n\n\n\nNetwork\n1000s Plot Grouping Determined with the Single Cluster Method\n\n\n\nNetwork\n1000s Plot Grouping Determined with the Ward.D Cluster Method\n\n\n\nNetwork 1000s Plot igraph\n\n\n\nNetwork Graphing 1100s\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNetwork\n1100s Plot Grouping Determined with No Cluster Method\n\n\n\nNetwork\n1100s Plot Grouping Determined with the Average Cluster Method\n\n\n\nNetwork\n1100s Plot Grouping Determined with the Single Cluster Method\n\n\n\nNetwork\n1100s Plot Grouping Determined with the Ward.D Cluster Method\n\n\n\nNetwork 1100s Plot igraph\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwars_in_1000s_edgelist <- as.matrix(wars_in_1000s)\n\nwars_in_1000s_edgelist_network_edgelist <- graph.edgelist(wars_in_1000s_edgelist, directed=TRUE)\n\nwars_in_1000s.ig<-graph_from_data_frame(wars_in_1000s)\n\nwars_in_1000s_network <- asNetwork(wars_in_1000s.ig)\n\n\n\n\n\naspects_of_1000s_states <- read_excel(\"~/Desktop/Spring 2022/Networks/aspects_of_1000s_states.xlsx\")\n\ntotal_1000s <- merge(aspects_of_1000s_states, wars_in_1000s.nodes.stat_2, by=\"name\")\n\n\n\n\n\ntotal_1000s_brokerag_reg<-total_1000s\n\ntotal_1000s_brokerag_reg$win_rate <- (total_1000s_brokerag_reg$outdegree/total_1000s_brokerag_reg$totdegree)\n\ntotal_1000s_brokerag_reg$loss_rate <- (total_1000s_brokerag_reg$indegree/total_1000s_brokerag_reg$totdegree)\n\ntotal_1000s_brokerag_reg_binom <- total_1000s_brokerag_reg %>% mutate(more_win_or_loss = case_when(\n  win_rate < 0.5 ~ 0,\n    win_rate >= 0.5 ~ 1))\n\nFirst_1000s_regression <- glm(more_win_or_loss~.-name-totdegree-indegree-outdegree-dc-eigen.dc-win_rate-loss_rate, total_1000s_brokerag_reg_binom, family=binomial)\n\nFirst_1000s_regression\n\n\n\nCall:  glm(formula = more_win_or_loss ~ . - name - totdegree - indegree - \n    outdegree - dc - eigen.dc - win_rate - loss_rate, family = binomial, \n    data = total_1000s_brokerag_reg_binom)\n\nCoefficients:\n (Intercept)      Catholic         Islam      Orthodox      Buddhist  \n  -2.090e+01     1.446e-01    -7.108e-02    -4.043e-01    -8.572e-02  \n       Pagan      Tengrism        Shinto         Hindu     Shamanism  \n   5.506e-01    -5.656e+01     1.820e+00    -2.142e+00    -1.506e+00  \n       eigen         close            rc      eigen.rc    broker.tot  \n  -1.877e+03     5.146e+03    -3.979e+00     1.574e+03     2.378e+02  \nbroker.coord   broker.itin    broker.rep   broker.gate    broker.lia  \n  -9.610e+01    -9.449e+01    -7.164e+01    -2.810e+01    -1.298e+02  \n\nDegrees of Freedom: 101 Total (i.e. Null);  82 Residual\n  (8 observations deleted due to missingness)\nNull Deviance:      140.8 \nResidual Deviance: 4.53e-09     AIC: 40\n\n\n\nset.seed(292)\n\ntotal_1000s_for_regression <- total_1000s[,-c(1, 20:25)]\n\ntotal_1000s_for_regression$win_rate <- (total_1000s_for_regression$outdegree/total_1000s_for_regression$totdegree)\n\ntotal_1000s_for_regression$loss_rate <- (total_1000s_for_regression$indegree/total_1000s_for_regression$totdegree)\n\ntotal_1000s_for_regression <- total_1000s_for_regression %>% mutate(more_win_or_loss = case_when(\n  win_rate < 0.5 ~ 0,\n    win_rate >= 0.5 ~ 1))\n\nFirst_1000s_regression <- glm(more_win_or_loss~.-loss_rate-win_rate-totdegree-indegree-outdegree-dc-eigen.dc, total_1000s_for_regression, family=binomial)\n\nFirst_1000s_regression\n\n\n\nCall:  glm(formula = more_win_or_loss ~ . - loss_rate - win_rate - totdegree - \n    indegree - outdegree - dc - eigen.dc, family = binomial, \n    data = total_1000s_for_regression)\n\nCoefficients:\n(Intercept)     Catholic        Islam     Orthodox     Buddhist  \n   -15.1948      13.9008      12.7531      14.6893      15.0858  \n      Pagan     Tengrism       Shinto        Hindu    Shamanism  \n     0.9610      11.6691      16.0623       9.1358      -0.1497  \n      eigen        close           rc     eigen.rc  \n   -82.1100     256.5294      -3.3322     -17.3152  \n\nDegrees of Freedom: 109 Total (i.e. Null);  96 Residual\nNull Deviance:      152.3 \nResidual Deviance: 58.4     AIC: 86.4\n\n\n\nset.seed(6738)\n\nin_training<- sample(1:nrow(total_1000s_for_regression),  nrow(total_1000s_for_regression) * 0.7 )\n\ntraining_1000s <- total_1000s_for_regression[in_training,]\n\ntest_1000s <- total_1000s_for_regression[-in_training,]\n\nlm_1000s_binom_subset_1 <- glm(more_win_or_loss~.-loss_rate-win_rate-totdegree-indegree-outdegree-dc-eigen.dc, total_1000s_for_regression, family=binomial, subset = in_training )\n\nlogsitic_1_1000s_prob <- predict(lm_1000s_binom_subset_1, test_1000s,\ntype = \"response\")\n\nlog_preds_1<-ifelse(logsitic_1_1000s_prob >= 0.5, 1, 0)\n\nprediction_1_logs <-mean(log_preds_1 == test_1000s$more_win_or_loss)\n\nprediction_1_logs %>% kable()\n\n\nx\n0.9090909\n\n\n\nlibrary(glmnet)\nlibrary(MASS)\n\n\n\n\n\nset.seed(246)\n\nx_ridge <- model.matrix(more_win_or_loss ~ .-loss_rate-win_rate-totdegree-indegree-outdegree-dc-eigen.dc, total_1000s_for_regression)[, -1] \n\ny_ridge <- total_1000s_for_regression$more_win_or_loss\n\ngrid <- 10^seq(10, -2, length = 100)\n\nridge.mod <- glmnet(x_ridge, y_ridge, alpha = 0, lambda = grid)\n\ndim(coef(ridge.mod))\n\n\n[1]  14 100\n\n\n\nset.seed(729)\ntrain_ridge <- sample(1:nrow(x_ridge), nrow(x_ridge)*0.8 ) \n\ntest_ridge <- (-train_ridge)\n\ny.test_ridge <- y_ridge[test_ridge]\n\n\n\n\n\nset.seed(9292)\n\nridge.mod <- glmnet(x_ridge[train_ridge, ], y_ridge[train_ridge], \n                    alpha = 0, lambda = grid, thresh = 1e-12)\n\nridge.pred <- predict(ridge.mod, s = 4, newx = x_ridge[test_ridge,])\n\nmean((ridge.pred - y.test_ridge)^2) %>% kable()\n\n\nx\n0.2416376\n\n\n\nset.seed(231)\nridge.pred <- predict(ridge.mod, s = 0, newx = x_ridge[test_ridge, ], \n                      exact = T, x = x_ridge[train_ridge, ], y = y_ridge[train_ridge])\n\npredict(ridge.mod, s = 0, exact = T, type = \"coefficients\", \n        x = x_ridge[train_ridge, ], y = y_ridge[train_ridge])[1:14, ]\n\n\n(Intercept)    Catholic       Islam    Orthodox    Buddhist \n 0.21024033  0.21827317 -0.01160454  0.21312966  0.35601806 \n      Pagan    Tengrism      Shinto       Hindu   Shamanism \n 0.08955257  0.14069809  0.38278477 -0.07034364 -0.01038790 \n      eigen       close          rc    eigen.rc \n-4.61480591 12.51011844 -0.29977861  4.64835194 \n\n\n\nset.seed(9292)\n\ncv.out <- cv.glmnet(x_ridge[train_ridge, ], y_ridge[train_ridge], alpha = 0) \n\nplot(cv.out)\n\n\n\n\n\n\nset.seed(9292)\n\nbestlam <- cv.out$lambda.min\n\nbestlam\n\n\n[1] 0.415338\n\n\n\nset.seed(9292)\n\nridge.pred <- predict(cv.out, s = bestlam, newx = x_ridge[test_ridge,])\n\nmean((ridge.pred - y.test_ridge)^2) %>% kable()\n\n\nx\n0.174632\n\n\n\nset.seed(2897)\n\nx_lasso <- model.matrix(more_win_or_loss ~ .-loss_rate-win_rate-totdegree-indegree-outdegree-dc-eigen.dc, total_1000s_for_regression)[, -1] \n\ny_lasso <- total_1000s_for_regression$more_win_or_loss\n\ngrid <- 10^seq(10, -2, length = 100)\n\nlasso.mod <- glmnet(x_lasso, y_lasso, alpha = 0, lambda = grid)\n\ndim(coef(lasso.mod))\n\n\n[1]  14 100\n\n\n\nset.seed(729)\n\ntrain_lasso <- sample(1:nrow(x_ridge), nrow(x_ridge)*0.8 ) \n\ntest_lasso <- (-train_lasso)\n\ny.test_lasso <- y_lasso[test_lasso]\n\n\n\n\n\nset.seed(9292)\n\nlasso.mod <- glmnet(x_lasso[train_lasso, ], y_lasso[train_lasso], \n                    alpha = 1, lambda = grid)\n\nplot(lasso.mod)\n\n\n\n\n\n\nset.seed(1029)\n\ncv.out_2 <- cv.glmnet(x_lasso[train_lasso, ], y_lasso[train_lasso], alpha = 1) \n\nplot(cv.out_2)\n\n\n\n\n\n\nset.seed(1920)\n\nbestlam_2 <- cv.out_2$lambda.min\n\nlasso.pred <- predict(cv.out_2, s = bestlam_2, newx = x_ridge[test_ridge,])\n\nmean((lasso.pred - y.test_ridge)^2) %>% kable()\n\n\nx\n0.1749583\n\n\n\nset.seed(2739)\n\nout <- glmnet(x_lasso[train_lasso, ], y_lasso[train_lasso], \n              alpha = 1, lambda = grid)\n\nlasso.coef <- predict(out, type = \"coefficients\", s = bestlam_2)[1:14, ]\n\nlasso.coef\n\n\n(Intercept)    Catholic       Islam    Orthodox    Buddhist \n 0.42561685  0.05577020 -0.09275344  0.00000000  0.00000000 \n      Pagan    Tengrism      Shinto       Hindu   Shamanism \n 0.00000000  0.00000000  0.00000000  0.00000000  0.00000000 \n      eigen       close          rc    eigen.rc \n 0.00000000  3.22570629 -0.21240622  0.00000000 \n\n\n\naspects_of_1100s_states <- read_excel(\"~/Desktop/Spring 2022/Networks/aspects_of_1100s_states.xlsx\")\n\ntotal_1100s <- merge(aspects_of_1100s_states, wars_in_1100s.nodes.stat_2, by=\"name\")\n\n\n\n\n\naspects_of_1200s_states <- read_excel(\"~/Desktop/Spring 2022/Networks/aspects_of_1200s_states.xlsx\")\n\ntotal_1200s <- merge(aspects_of_1200s_states, wars_in_1200s.nodes.stat_2, by=\"name\")\n\n\n\nCommunity Grouping\nLabel Propagation 1000s:\nThe first community cluster below is done using label propagation.\nThis results in 39 groups\n\n\nset.seed(23)\ncomm.lab<-label.propagation.community(wars_in_1000s.ig)\n#Inspect clustering object\n# igraph::groups(comm.lab)\n\n\n\n\n\n\nWalktrap 1000s:\nWalktrap classification as seen below results in 19 distinct\ncommunities.\n\n\nset.seed(238)\n#Run clustering algorithm: fast_greedy\nwars_in_1000s.wt<-walktrap.community(wars_in_1000s.ig)\n\n#igraph::groups(wars_in_1000s.wt)\n\n\n\nAdding more steps resulted in 19 groups for both 10 and 20 steps.\n\n\n#Run & inspect clustering algorithm: 10 steps\n#igraph::groups(walktrap.community(wars_in_1000s.ig, steps=10)) \n#Run & inspect clustering algorithm: 20 steps\n#igraph::groups(walktrap.community(wars_in_1000s.ig ,steps=20))\n#Run & inspect clustering algorithm\n\n\n\n\n\n\nMachine\nLearning, Regression and Principle Components:\n\n\ntotal_1000s_for_PCA <- total_1000s_brokerag_reg_binom[-c(20:27)]\n\napply(total_1000s_for_PCA[-1], 2, mean)\n\n\n        Catholic            Islam         Orthodox         Buddhist \n     0.454545455      0.181818182      0.154545455      0.063636364 \n           Pagan         Tengrism           Shinto            Hindu \n     0.036363636      0.018181818      0.054545455      0.045454545 \n       Shamanism        totdegree         indegree        outdegree \n     0.009090909      2.754545455      1.336363636      1.418181818 \n           eigen            close               rc         eigen.rc \n     0.028058711      0.023546832      0.287358773      0.003637773 \n              dc         eigen.dc more_win_or_loss \n     0.712641227      0.024420939      0.481818182 \n\n\n\napply(total_1000s_for_PCA[-1], 2, var)\n\n\n        Catholic            Islam         Orthodox         Buddhist \n    0.2502085071     0.1501251043     0.1318598832     0.0601334445 \n           Pagan         Tengrism           Shinto            Hindu \n    0.0353628023     0.0180150125     0.0520433695     0.0437864887 \n       Shamanism        totdegree         indegree        outdegree \n    0.0090909091     8.9208507089     2.6656380317     6.3189324437 \n           eigen            close               rc         eigen.rc \n    0.0076304265     0.0019575460     0.1260782284     0.0004728954 \n              dc         eigen.dc more_win_or_loss \n    0.1260782284     0.0056490031     0.2519599666 \n\n\n\npr.out <- prcomp(total_1000s_for_PCA[-1], scale = TRUE)\n\n\n\n\n\nnames(pr.out)\n\n\n[1] \"sdev\"     \"rotation\" \"center\"   \"scale\"    \"x\"       \n\n\n\npr.out$center\n\n\n        Catholic            Islam         Orthodox         Buddhist \n     0.454545455      0.181818182      0.154545455      0.063636364 \n           Pagan         Tengrism           Shinto            Hindu \n     0.036363636      0.018181818      0.054545455      0.045454545 \n       Shamanism        totdegree         indegree        outdegree \n     0.009090909      2.754545455      1.336363636      1.418181818 \n           eigen            close               rc         eigen.rc \n     0.028058711      0.023546832      0.287358773      0.003637773 \n              dc         eigen.dc more_win_or_loss \n     0.712641227      0.024420939      0.481818182 \n\n\n\npr.out$scale\n\n\n        Catholic            Islam         Orthodox         Buddhist \n      0.50020846       0.38745981       0.36312516       0.24522122 \n           Pagan         Tengrism           Shinto            Hindu \n      0.18805000       0.13422002       0.22813016       0.20925221 \n       Shamanism        totdegree         indegree        outdegree \n      0.09534626       2.98677932       1.63267818       2.51374868 \n           eigen            close               rc         eigen.rc \n      0.08735231       0.04424416       0.35507496       0.02174616 \n              dc         eigen.dc more_win_or_loss \n      0.35507496       0.07515985       0.50195614 \n\n\n\n\n\n\nbiplot(pr.out, scale = 0)\n\n\n\n\n\n\npr.out$rotation = -pr.out$rotation \n\npr.out$x = -pr.out$x\n\nbiplot(pr.out, scale = 0)\n\n\n\n\n\n\npr.out$sdev\n\n\n [1] 2.217501e+00 1.681548e+00 1.239242e+00 1.211199e+00 1.065982e+00\n [6] 1.037692e+00 1.029507e+00 1.011117e+00 1.005425e+00 9.514802e-01\n[11] 8.848499e-01 7.782431e-01 6.162540e-01 4.426224e-01 2.541422e-01\n[16] 1.091189e-01 7.597269e-16 6.258811e-16 2.174635e-16\n\n\n\npr.var <- pr.out$sdev^2\n\npr.var\n\n\n [1] 4.917311e+00 2.827605e+00 1.535720e+00 1.467004e+00 1.136318e+00\n [6] 1.076804e+00 1.059884e+00 1.022359e+00 1.010879e+00 9.053146e-01\n[11] 7.829594e-01 6.056623e-01 3.797690e-01 1.959146e-01 6.458828e-02\n[16] 1.190694e-02 5.771849e-31 3.917271e-31 4.729037e-32\n\n\n\npve <- pr.var / sum(pr.var)\n\npve\n\n\n [1] 2.588059e-01 1.488213e-01 8.082739e-02 7.721075e-02 5.980622e-02\n [6] 5.667390e-02 5.578337e-02 5.380835e-02 5.320417e-02 4.764814e-02\n[11] 4.120839e-02 3.187696e-02 1.998784e-02 1.031129e-02 3.399383e-03\n[16] 6.266808e-04 3.037815e-32 2.061722e-32 2.488967e-33\n\n\n\npar(mfrow = c(1, 2))\nplot(pve, xlab = \"Principal Component\",\nylab = \"Proportion of Variance Explained\", ylim = c(0, 1),\ntype = \"b\")\n\nplot(cumsum(pve), xlab = \"Principal Component\",\nylab = \"Cumulative Proportion of Variance Explained\", ylim = c(0, 1), type = \"b\")\n\n\n\n\n\n\nnames(total_1200s)\n\n\n [1] \"name\"         \"Catholic\"     \"Islam\"        \"Orthodox\"    \n [5] \"Buddhist\"     \"Pagan\"        \"Tengrism\"     \"Shinto\"      \n [9] \"Hindu\"        \"Shamanism\"    \"totdegree\"    \"indegree\"    \n[13] \"outdegree\"    \"eigen\"        \"rc\"           \"eigen.rc\"    \n[17] \"dc\"           \"eigen.dc\"     \"broker.tot\"   \"broker.coord\"\n[21] \"broker.itin\"  \"broker.rep\"   \"broker.gate\"  \"broker.lia\"  \n\n\n\ntotal_1200s_brokerag_reg<-total_1200s\n\n\n\n\n\ntotal_1200s_brokerag_reg$win_rate <- (total_1200s_brokerag_reg$outdegree/total_1200s_brokerag_reg$totdegree)\n\n\n\n\n\ntotal_1200s_brokerag_reg$loss_rate <- (total_1200s_brokerag_reg$indegree/total_1200s_brokerag_reg$totdegree)\n\n\n\n\n\ntotal_1200s_brokerag_reg_binom <- total_1200s_brokerag_reg %>% mutate(more_win_or_loss = case_when(\n  win_rate < 0.5 ~ 0,\n    win_rate >= 0.5 ~ 1))\n\n\n\n\n\ntotal_1200s_for_PCA <- total_1200s_brokerag_reg_binom[-c(20:27)]\n\n\napply(total_1200s_for_PCA[-1], 2, mean)\n\n\n   Catholic       Islam    Orthodox    Buddhist       Pagan \n0.714285714 0.068322981 0.086956522 0.086956522 0.012422360 \n   Tengrism      Shinto       Hindu   Shamanism   totdegree \n0.024844720 0.000000000 0.006211180 0.000000000 3.900621118 \n   indegree   outdegree       eigen          rc    eigen.rc \n1.956521739 1.944099379 0.025409148 0.158212220 0.002179127 \n         dc    eigen.dc  broker.tot \n0.841787780 0.023230021 0.333968821 \n\n\n\napply(total_1200s_for_PCA[-1], 2, var)\n\n\n    Catholic        Islam     Orthodox     Buddhist        Pagan \n2.053571e-01 6.405280e-02 7.989130e-02 7.989130e-02 1.234472e-02 \n    Tengrism       Shinto        Hindu    Shamanism    totdegree \n2.437888e-02 0.000000e+00 6.211180e-03 0.000000e+00 2.655256e+01 \n    indegree    outdegree        eigen           rc     eigen.rc \n6.204348e+00 1.587811e+01 5.600340e-03 7.101398e-02 7.273423e-05 \n          dc     eigen.dc   broker.tot \n7.101398e-02 4.549154e-03 2.983411e+01 \n\n\n\n# I cannot scale variables with \n\ntotal_1200s_for_PCA<-total_1200s_for_PCA[-c(8,10)]\n\n\n\n\n\npr.out_2 <- prcomp(total_1200s_for_PCA[-1], scale = TRUE)\n\n\n\n\n\nnames(pr.out_2)\n\n\n[1] \"sdev\"     \"rotation\" \"center\"   \"scale\"    \"x\"       \n\n\n\npr.out_2$center\n\n\n   Catholic       Islam    Orthodox    Buddhist       Pagan \n0.714285714 0.068322981 0.086956522 0.086956522 0.012422360 \n   Tengrism       Hindu   totdegree    indegree   outdegree \n0.024844720 0.006211180 3.900621118 1.956521739 1.944099379 \n      eigen          rc    eigen.rc          dc    eigen.dc \n0.025409148 0.158212220 0.002179127 0.841787780 0.023230021 \n broker.tot \n0.333968821 \n\n\n\npr.out_2$scale\n\n\n   Catholic       Islam    Orthodox    Buddhist       Pagan \n0.453163484 0.253086537 0.282650499 0.282650499 0.111106798 \n   Tengrism       Hindu   totdegree    indegree   outdegree \n0.156137382 0.078811041 5.152917825 2.490852831 3.984734068 \n      eigen          rc    eigen.rc          dc    eigen.dc \n0.074835420 0.266484487 0.008528436 0.266484487 0.067447414 \n broker.tot \n5.462061318 \n\n\n\n\n\n\nbiplot(pr.out_2, scale = 0)\n\n\n\n\n\n\npr.out_2$rotation = -pr.out_2$rotation \n\npr.out_2$x = -pr.out_2$x\n\nbiplot(pr.out_2, scale = 0)\n\n\n\n\n\n\npr.out$sdev\n\n\n [1] 2.217501e+00 1.681548e+00 1.239242e+00 1.211199e+00 1.065982e+00\n [6] 1.037692e+00 1.029507e+00 1.011117e+00 1.005425e+00 9.514802e-01\n[11] 8.848499e-01 7.782431e-01 6.162540e-01 4.426224e-01 2.541422e-01\n[16] 1.091189e-01 7.597269e-16 6.258811e-16 2.174635e-16\n\n\n\npr.var_2 <- pr.out_2$sdev^2\n\npr.var_2\n\n\n [1] 4.904685e+00 2.342837e+00 1.673460e+00 1.249477e+00 1.132262e+00\n [6] 1.097150e+00 1.011239e+00 9.459795e-01 8.660928e-01 5.136566e-01\n[11] 1.660835e-01 9.707769e-02 1.227998e-30 9.288233e-31 4.378653e-31\n[16] 1.136377e-31\n\n\n\npve_2 <- pr.var_2 / sum(pr.var_2)\n\npve_2\n\n\n [1] 3.065428e-01 1.464273e-01 1.045912e-01 7.809228e-02 7.076635e-02\n [6] 6.857190e-02 6.320245e-02 5.912372e-02 5.413080e-02 3.210354e-02\n[11] 1.038022e-02 6.067356e-03 7.674985e-32 5.805145e-32 2.736658e-32\n[16] 7.102355e-33\n\n\n\npar(mfrow = c(1, 2))\nplot(pve_2, xlab = \"Principal Component\",\nylab = \"Proportion of Variance Explained\", ylim = c(0, 1),\ntype = \"b\")\n\nplot(cumsum(pve_2), xlab = \"Principal Component\",\nylab = \"Cumulative Proportion of Variance Explained\", ylim = c(0, 1), type = \"b\")\n\n\n\n\n(information regarding the meaning of each type of brokerage was\nacquired from https://edis.ifas.ufl.edu/publication/WC197)\n\n\n\n",
    "preview": "posts/httpsnmilsteinumagithubioposts2022-03-21-blog-post-7/images/silly_cat.png",
    "last_modified": "2022-03-27T15:51:30-04:00",
    "input_file": {},
    "preview_width": 1022,
    "preview_height": 1064
  },
  {
    "path": "posts/httpsnmilsteinumagithubioposts2022-03-07-into-the-20th-century-conflict-data/",
    "title": "Into the 20th Century (Conflict Data) Homework 6",
    "description": "In this post I begin my analysis of the 20th century conflicts dataset.",
    "author": [
      {
        "name": "Noah Milstein",
        "url": {}
      }
    ],
    "date": "2022-03-12",
    "categories": [],
    "contents": "\n\n\n\nLoading and Summarizing Data\nLoading: Similarly to the datasets I used for the\nprior assignments, this one will involve the use of a conflict dataset.\nGiven the relative success of the analysis techniques on dyadic conflict\nin the 9th, 10th, and 11th centuries I decided to try it on a much more\nrecent period, that being the height of the cold war beginning in 1945\nand officially ending with the dissolution of the Soviet Union in 1992,\nhowever the dataset in question ends in 1989.\n\n\n\n\n\n\n\n\n\nInterpretation and Inital\nAnalysis\nInitial Interpretation: After briefly cleaning the\ndataset to remove excess spaces resulting in nations, or factions being\ncounted twice, I then converted my data in 4 different kinds of network\nobjects, being a matrix, edgelist graph, igraph, and network. A ggplot\nobject of the initial network can be seen below.\n\n\n\nContinued Visualization\nVisuals Though not necessarily practical for\nunderstanding the nature of the network the two visualization below are\nused to exhibit the increased complexity of this dataset relative to\nprior ones, as in previous models of conflict there were under 200 nodes\n(or factions) being visualized, as will be illustrated in subsequent\nanalysis there were about 600 nations, rebel groups, factions, and\nwarring parties considered direct belligerents in this dataset. It is\nalso important to note that this network does not include direct\nmilitary support that did did not constitute direct\ninvolvement, this will later be included as a grouping dummy variable,\nbut in its current form military support that is not directly\nintervention will not be considered.\n\n\nset.seed(2)\n\nggraph(Wars_in_latter_half_of_20th_network, 'dendrogram', circular = TRUE) + \n    geom_edge_elbow() + \n    coord_fixed() +\n    geom_edge_link0(edge_alpha = 0.001)+\n    geom_node_text(aes(label = name), size=1, repel=FALSE)\n\n\n\n\n\n\nggraph(Wars_in_latter_half_of_20th_network, layout = \"treemap\") + \n  geom_node_tile(aes(fill = depth))+    \n  geom_node_text(aes(label = name), size=1, repel=FALSE)\n\n\n\n\ninterpret the data, identifying at least two results of interest.\nQuestions you may want to consider include (but are not limited to) the\nfollowing. Calculate structural equivalence models for your network\ndata, and use clustering and blockmodeling to identify nodes in similar\npositions. Can you find any patterns in the data, and do the blocks\n“make sense.” What types of behavior would we expect to see (or do we\nsee) on the basis of equivalence and block assignment? Do different\nclustering methods and/or the use of weights make a difference? How much\ninsight can you get from plotting the block role assignments. You may\nalso want to see if nodes that are equivalent (and/or belong to same\nblock) are similar on measures of centrality introduced in earlier\nweeks.\nInital Analysis and\nInterpretation\nNetwork Summary: As can be seen by the network print\nbelow the conflict dataset comprises 599 nodes, factions, or\nbelligerents that are direct combatants in each\nconflict, these are directed with an in-degree being a lost war, and an\nout-degree being a won war. There are loops as many factions fight each\nother multiple times and amongst different sets of allies losing some\nwars and winning others.\n\n Network attributes:\n  vertices = 599 \n  directed = TRUE \n  hyper = FALSE \n  loops = TRUE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 1090 \n    missing edges= 0 \n    non-missing edges= 1090 \n\n Vertex attribute names: \n    vertex.names \n\n Edge attribute names not shown \n\n\n\n\n\n\ntemp<-data.frame(brokerage(Wars_in_latter_half_of_20th_network, cl = Wars_in_latter_half_of_20th_network.nodes.stat$totdegree)$z.nli)\n\nWars_in_latter_half_of_20th_network.nodes.stat_2 <- Wars_in_latter_half_of_20th_network.nodes.stat %>%\n  mutate(broker.tot = temp$t,\n         broker.coord = temp$w_I,\n         broker.itin = temp$w_O,\n         broker.rep = temp$b_IO,\n         broker.gate = temp$b_OI,\n         broker.lia = temp$b_O)\n\n\n\nBrokerage and Network\nAttributes\nBrokerage Scores: In this case brokerage scores are\ncalculated using the function brokerage() and appended to the data frame\nwith the these measures\nTotal Degree\n\n\n(Wars_in_latter_half_of_20th_network.nodes.stat_2%>%\n  arrange(desc(totdegree))%>%\n  slice(1:10))[,c(1,2)] %>%kable()\n\n\nname\ntotdegree\nUnited States\n63\nIsrael\n47\nChina\n47\nSoviet Union\n39\nFrance\n38\nPhilippines\n35\nIndia\n34\nUnited Kingdom\n31\nNorth Korea\n30\nThailand\n27\n\nIn-Degree\n\n\n(Wars_in_latter_half_of_20th_network.nodes.stat_2%>%\n  arrange(desc(indegree))%>%\n  slice(1:10))[,c(1,3)] %>%kable()\n\n\nname\nindegree\nSoviet Union\n25\nUnited States\n23\nNorth Korea\n21\nChina\n20\nSyria\n17\nCuba\n16\nSouth Vietnam\n15\nSLA\n13\nIsreal\n13\nLebanese Front\n13\n\nOut-Degree\n\n\n(Wars_in_latter_half_of_20th_network.nodes.stat_2%>%\n  arrange(desc(outdegree))%>%\n  slice(1:10))[,c(1,4)] %>%kable()\n\n\nname\noutdegree\nIsrael\n47\nUnited States\n40\nIndia\n32\nFrance\n31\nChina\n27\nPhilippines\n27\nItaly\n26\nUnited Kingdom\n20\nIran\n19\nNorth Vietnam\n19\n\n\n\n(Wars_in_latter_half_of_20th_network.nodes.stat_2%>%\n  arrange(desc(broker.coord))%>%\n  slice(0:5))[,c(1,12)] %>%kable()\n\n\nname\nbroker.coord\nKhmer Issarak\n-0.0042969\nSouth Africa\n-0.0042969\nKhmer Rouge\n-0.0042969\nPLO\n-0.0042969\nKhmer Republic\n-0.0042969\n\n\n\n(Wars_in_latter_half_of_20th_network.nodes.stat_2%>%\n  arrange(desc(broker.itin))%>%\n  slice(0:5))[,c(1,13)] %>%kable()\n\n\nname\nbroker.itin\nUnited States\n30.978006\nEthiopia\n20.451964\nChina\n13.215216\nFrance\n11.241500\nUnited Kingdom\n7.294199\n\n\nname\nbroker.rep\nPKK\n6.358704\nSouth Yemen\n3.288637\nIran\n-0.044345\nIsrael\n-0.044345\nAustralia\n-0.044345\n\n\nname\nbroker.gate\nMorocco\n9.0531209\nPUK\n4.1844336\nArab Socialist Ba’ath Party\n0.7091118\nSenegal\n0.7091118\nPapua New Guinea\n0.5196169\n\n\nname\nbroker.lia\nUnited States\n286.23524\nChina\n167.99725\nSoviet Union\n110.36960\nPhilippines\n69.88732\nUnited Kingdom\n67.23274\n\n\n\n\n\n\n\n\n\n\nExamining Centrality\n\n\nsna::dyad.census(Wars_in_latter_half_of_20th_network)\n\n\n     Mut Asym   Null\n[1,] 115  859 178127\n\nsna::triad.census(Wars_in_latter_half_of_20th_network)\n\n\n          003    012   102 021D 021U 021C 111D 111U 030T 030C 201\n[1,] 35068530 545959 17760 3817 1904 1822  526  639   46    0  83\n     120D 120U 120C 210 300\n[1,]    0    3   10   0   0\n\n\n\n(Wars_in_latter_half_of_20th_network.nodes.stat_2%>%\n  arrange(desc(eigen))%>%\n  slice(0:5))[,c(1,5)] %>%kable()\n\n\nname\neigen\nChina\n0.3435636\nNorth Vietnam\n0.2973257\nPathet Lao\n0.2836275\nKhmer Rouge\n0.2223014\nKhmer Issarak\n0.2153606\n\n\n\n(Wars_in_latter_half_of_20th_network.nodes.stat_2%>%\n  arrange(desc(close))%>%\n  slice(0:5))[,c(1,6)] %>%kable()\n\n\nname\nclose\nIsrael\n0.1664994\nUnited States\n0.1536232\nChina\n0.1497492\nFrance\n0.1449833\nPathet Lao\n0.1380435\n\n\n\n(Wars_in_latter_half_of_20th_network.nodes.stat_2%>%\n  arrange(desc(eigen.rc))%>%\n  slice(0:5))[,c(1,8)] %>%kable()\n\n\nname\neigen.rc\nEthiopia\n0.0801873\nFrance\n0.0627097\nSouth Africa\n0.0451530\nUnited Kingdom\n0.0303952\nUnited States\n0.0294664\n\n\n\n(Wars_in_latter_half_of_20th_network.nodes.stat_2%>%\n  arrange(desc(eigen.dc))%>%\n  slice(0:5))[,c(1,10)] %>%kable()\n\n\nname\neigen.dc\nChina\n0.3166654\nNorth Vietnam\n0.2973257\nPathet Lao\n0.2836275\nKhmer Rouge\n0.2223014\nKhmer Issarak\n0.2153606\n\n\n\nWars_in_latter_half_of_20th_network.nodes.stat_2%>%\n  select(-name) %>% \n  gather() %>% \n  ggplot(aes(value)) +\n    geom_histogram() +\n    facet_wrap(~key, scales = \"free\")\n\n\n\n\n\n\nwars_correlation_latter_half<-Wars_in_latter_half_of_20th_network.nodes.stat_2 %>% \n  select(totdegree,indegree,outdegree,eigen,eigen.rc,eigen.dc)%>%\n  correlate() \nfashion(wars_correlation_latter_half)\n\n\n       term totdegree indegree outdegree eigen eigen.rc eigen.dc\n1 totdegree                .71       .87   .64      .55      .60\n2  indegree       .71                .28   .34      .45      .30\n3 outdegree       .87      .28             .64      .45      .62\n4     eigen       .64      .34       .64            .53      .99\n5  eigen.rc       .55      .45       .45   .53               .42\n6  eigen.dc       .60      .30       .62   .99      .42         \n\n\n\nrplot(wars_correlation_latter_half)\n\n\n\n\n\n\nlibrary(threejs)\nlibrary(htmlwidgets)\nlibrary(igraph)\n\n\n\n\n\n#net.js <- Wars_in_latter_half_of_20th.ig\n#graph_attr(net.js, \"layout\") <- NULL \n\n\n\n\n\n#gjs <- graphjs(net.js, main=\"Cold War Interactive Network\", bg=\"gray10\", #vertex.size=0.5, showLabels=T, vertex.label = V(net.js)$name, stroke=F, curvature=0.1, #attraction=0.9, repulsion=0.7, opacity=0.9)\n#print(gjs)\n#saveWidget(gjs, file=\"Media-Network-gjs.html\")\n#browseURL(\"Media-Network-gjs.html\")\n\n\n\n\n\n\n",
    "preview": "posts/httpsnmilsteinumagithubioposts2022-03-07-into-the-20th-century-conflict-data/into-the-20th-century-conflict-data_files/figure-html5/unnamed-chunk-5-1.png",
    "last_modified": "2022-03-12T20:07:27-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsrpubscombean22z875971/",
    "title": "Assignment6",
    "description": "assignment for political and social network analysis",
    "author": [
      {
        "name": "Zoe Bean",
        "url": {}
      }
    ],
    "date": "2022-03-12",
    "categories": [],
    "contents": "\r\n\r\n\r\nlibrary(tidyverse)\r\nlibrary(GGally)\r\n\r\nsource(\"./Import Scripts/Game of Thrones Interactions.R\")\r\n\r\n\r\n\r\nThe Network\r\nThis is an edgelist dataset. It has 298 vertices and 9131 edges, it is not directed or bipartite, and it is weighted. The vertices are the people, with attributes regarding the time and location of their appearances, as well as the point of view the story is in for these appearances.\r\nThe dataset is the Game of Thrones Interactions dataset, with characters as nodes, and instances of characters being mentioned in the same vicinity are the edges.\r\nHere is the network plots that I have managed to create with this data so far:\r\n\r\n\r\nV(network_igraph)$size<-5\r\nplot(network_igraph, layout_with_lgl(network_igraph), vertex.label=NA)\r\n\r\n\r\n\r\n#a subset of the data with a lot of weight on the edges- meaning more interactions between the characters\r\n#weight chosen by rerunning until the cluster dendrogram was somewhat readable \r\nsub_stat<-get.inducedSubgraph(network_statnet,eid=which(network_statnet%e%'weight'>=18))\r\nplot(sub_stat)\r\n\r\n\r\n\r\n\r\nStructural Equivalence\r\n\r\n\r\ngot_net_se<-equiv.clust(sub_stat, equiv.fun=\"sedist\", method=\"hamming\",mode=\"graph\")\r\nplot(got_net_se, labels=got_net_se$glabels)\r\n\r\n\r\n\r\n\r\nFor this network, I found that clustering remains the same regardless of equivalence method, so I only need the default method.\r\nClustering\r\n\r\n\r\nplot(got_net_se, labels=got_net_se$glabels)\r\nrect.hclust(got_net_se$cluster,h=20)\r\n\r\n\r\n\r\n\r\nThis dendrogram does seem to be split up in a way that makes sense. The first partition is Jon Snow + the Others, which makes sense because the Others are almost solely Jon’s plotline. Bran Stark in on his own, and has a unique storyline. The third partition does seem to be more of an ‘and everyone else’ category so it is hard to say much about it other than to be a little surprised that Daenerys Targaryen is in this category. Next, we have Cersei Lannister, also on her own, also uniquely powerful throughout the story. My memory of the plot is not good enough for me to come up with the reason why Robb Stark, Stannis Baratheon, Eddard Stark, and Robert Baratheon are ‘related’ by this measure, but I am unsurprised by it. This next cluster has people I would consider to be powerful BECAUSE they serve more powerful people, whilst managing to appease them even as the people in those more powerful positions change rapidly due to the political upheaval that occurs constantly throughout the novels.\r\nBlockmodeling\r\n\r\n\r\nplot.block<-function(x=blk_mod, main=NULL, cex.lab=1){\r\n  plot.sociomatrix(x$blocked.data, labels=list(x$plabels,x$plabels),\r\n                   main=main, drawlines = FALSE, cex.lab=cex.lab)\r\n  for (j in 2:length(x$plabels)) if (x$block.membership[j] !=\r\n                                     x$block.membership[j-1]) \r\n    abline(v = j - 0.5, h = j - 0.5, lty = 3, xpd=FALSE)\r\n}\r\n\r\nblk_mod<-blockmodel(sub_stat,got_net_se,k=5)\r\nblk_mod$block.model\r\n\r\n\r\n           Block 1    Block 2   Block 3   Block 4    Block 5\r\nBlock 1 0.01846154 0.02564103 0.2307692 0.1153846 0.23076923\r\nBlock 2 0.02564103 0.50000000 1.0000000 0.7291667 0.04166667\r\nBlock 3 0.23076923 1.00000000       NaN 1.0000000 0.00000000\r\nBlock 4 0.11538462 0.72916667 1.0000000 1.0000000 1.00000000\r\nBlock 5 0.23076923 0.04166667 0.0000000 1.0000000 1.00000000\r\n\r\nplot.block(blk_mod,main=\"Game of Thrones Interactions, 5 Partitions\", cex.lab=.3)\r\n\r\n\r\n\r\n\r\nSince this is an undirected graph, every relationship is mirrored, and there are no self-loops so there is not much that can be said about the relationships themselves that are shown here. As for the blocks, there are a few block that are almost completely full, but even the most empty[Block 2-1 aka Block 1-2] have a few relationships within them.\r\nRoles\r\n\r\n\r\nsub_stat%v%\"role\"<-blk_mod$block.membership[match(sub_stat%v%\"vertex.names\", blk_mod$glabels)]\r\nGGally::ggnet2(sub_stat,\r\n               node.color=\"role\", \r\n               node.size=sna::degree(sub_stat, gmode=\"graph\"),\r\n               node.label = \"vertex.names\",\r\n               node.alpha = .5,\r\n               label.size = 2.5)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/httpsrpubscombean22z875971/distill-preview.png",
    "last_modified": "2022-03-12T20:07:06-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsrpubscomburnworthj876640/",
    "title": "How Elite is the Supreme Court?",
    "description": "\"After struggling most weeks trying to work with my dataset, I realized from our classes that I was looking at my dataset the wrong way. So, I decided to flip the format. I am now looking at just how elite the Supreme Court has been over its history. I do this by grouping Justices to the school they attended. It was such a relief to be able to run the different network commands and actually get graphs or data. I will save working on formating the graphs for the future when my brain recovers.\n\nThe new version of my dataset has 104 vertices. It is a directed network. It is not bipartite and there are a total of 76 edges.\"",
    "author": [
      {
        "name": "Justin Burnworth",
        "url": {}
      }
    ],
    "date": "2022-03-12",
    "categories": [],
    "contents": "\n\n\n\n\n\n\n\n\n\n\n Network attributes:\n  vertices = 104 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 76 \n    missing edges= 0 \n    non-missing edges= 76 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\n\n               Length Class  Mode     \ncluster          7    hclust list     \nmetric           1    -none- character\nequiv.fun        1    -none- character\ncluster.method   1    -none- character\nglabels        104    -none- character\nplabels        104    -none- character\n\n\n\n\n\n\nNetwork Blockmodel:\n\nBlock membership:\n\n                   Albany            Apprenticeship \n                        1                         2 \n                 Berkeley           Bowdoin College \n                        1                         1 \n          Centre Colllege                Cincinnati \n                        1                         1 \n                 Colorado                  Columbia \n                        1                         3 \n Cumberland School of Law          Emory University \n                        1                         1 \n                  Harvard                    Howard \n                        4                         1 \n                  Indiana               Kansas City \n                        1                         1 \n                 Michigan       New York Law School \n                        1                         1 \n             Northwestern                Notre Dame \n                        1                         1 \n                     Penn                    School \n                        1                         1 \n  St. Paul College of Law                  Stanford \n                        1                         1 \n                    Texas   Transylvania University \n                        1                         1 \n                   Tulane                  Virginia \n                        1                         1 \n       Washington and Lee                      Yale \n                        1                         5 \n             David Brewer         Robert H. Jackson \n                        1                         1 \n         Rufus W. Peckham           James F. Byrnes \n                        1                         1 \n    Samuel Freeman Miller          Stanley Matthews \n                        1                         1 \n              John Clarke              Mahon Pitney \n                        1                         1 \n            Stephen Field         George Shiras Jr. \n                        1                         1 \n            Wiliam R. Day             Pierce Butler \n                        1                         1 \n           Joseph Bradley               Earl Warren \n                        1                         1 \n          Melville Fuller            Fred M. Vinson \n                        1                         1 \n      William Howard Taft       Willis Van Devanter \n                        1                         1 \n           Wiley Rutledge      Charles Evans Hughes \n                        1                         1 \n         Harland F. Stone         Samuel Blatchford \n                        1                         1 \n      Benjamin N. Cardozo        William O. Douglas \n                        1                         1 \n             Stanley Reed       Ruth Bader Ginsburg \n                        1                         1 \n           Joseph McKenna    Howell Edmunds Jackson \n                        1                         1 \n            Horace Lurton              Lucius Lamar \n                        1                         1 \n             John Roberts           Anthony Kennedy \n                        1                         1 \n              Horace Gray Oliver Wendell Holmes Jr. \n                        1                         1 \n        Felix Frankfurter            Harry Blackmun \n                        1                         1 \n           Stephen Breyer       William Brennan Jr. \n                        1                         1 \n             David Souter             William Moody \n                        1                         1 \n           Louis Brandeis               Elena Kagan \n                        1                         1 \n           Edward Sanford             Harold Burton \n                        1                         1 \n           Antonin Scalia              Neil Gorsuch \n                        1                         1 \n        Thurgood Marhsall            Sherman Minton \n                        1                         1 \n        Charles Whittaker         George Sutherland \n                        1                         1 \n             Frank Murphy   John Marshall Harlan II \n                        1                         1 \n          Arthur Goldberg         John Paul Stevens \n                        1                         1 \n        Amy Coney Barrett              Owen Roberts \n                        1                         1 \n                  Justice          Warren E. Burger \n                        1                         1 \n        William Rehnquist       Sandra Day O'Connor \n                        1                         1 \n                Tom Clark      John Marshall Harlan \n                        1                         1 \n     Edward Douglas White          James McReynolds \n                        1                         1 \n      Lewis F. Powell Jr.              Joseph Lamar \n                        1                         1 \n           Morrison White           Brett Kavanaugh \n                        1                         1 \n               Abe Fortas     William Burnham Woods \n                        1                         1 \n          Sonia Sotomayor      Henry Billings Brown \n                        1                         1 \n              Byron White            Potter Stewart \n                        1                         1 \n             Samuel Alito           Clarence Thomas \n                        1                         1 \n\nReduced form blockmodel:\n\n     Albany Apprenticeship Berkeley Bowdoin College Centre Colllege Cincinnati Colorado Columbia Cumberland School of Law Emory University Harvard Howard Indiana Kansas City Michigan New York Law School Northwestern Notre Dame Penn School St. Paul College of Law Stanford Texas Transylvania University Tulane Virginia Washington and Lee Yale David Brewer Robert H. Jackson Rufus W. Peckham James F. Byrnes Samuel Freeman Miller Stanley Matthews John Clarke Mahon Pitney Stephen Field George Shiras Jr. Wiliam R. Day Pierce Butler Joseph Bradley Earl Warren Melville Fuller Fred M. Vinson William Howard Taft Willis Van Devanter Wiley Rutledge Charles Evans Hughes Harland F. Stone Samuel Blatchford Benjamin N. Cardozo William O. Douglas Stanley Reed Ruth Bader Ginsburg Joseph McKenna Howell Edmunds Jackson Horace Lurton Lucius Lamar John Roberts Anthony Kennedy Horace Gray Oliver Wendell Holmes Jr. Felix Frankfurter Harry Blackmun Stephen Breyer William Brennan Jr. David Souter William Moody Louis Brandeis Elena Kagan Edward Sanford Harold Burton Antonin Scalia Neil Gorsuch Thurgood Marhsall Sherman Minton Charles Whittaker George Sutherland Frank Murphy John Marshall Harlan II Arthur Goldberg John Paul Stevens Amy Coney Barrett Owen Roberts Justice Warren E. Burger William Rehnquist Sandra Day O'Connor Tom Clark John Marshall Harlan Edward Douglas White James McReynolds Lewis F. Powell Jr. Joseph Lamar Morrison White Brett Kavanaugh Abe Fortas William Burnham Woods Sonia Sotomayor Henry Billings Brown Byron White Potter Stewart Samuel Alito Clarence Thomas \n            Block 1 Block 2 Block 3 Block 4 Block 5\nBlock 1 0.003131313       0       0       0       0\nBlock 2 0.110000000     NaN       0       0       0\nBlock 3 0.080000000       0     NaN       0       0\nBlock 4 0.160000000       0       0     NaN       0\nBlock 5 0.100000000       0       0       0     NaN\n\n\n\n\n\n\n\n\n",
    "preview": "posts/httpsrpubscomburnworthj876640/distill-preview.png",
    "last_modified": "2022-03-12T20:07:37-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsyli210813githubiosocialnetworkhomework6/",
    "title": "Social Network Analysis Homework 6",
    "description": "Roles & blockmodels.",
    "author": [
      {
        "name": "Yifan Li",
        "url": {}
      }
    ],
    "date": "2022-03-12",
    "categories": [],
    "contents": "\nDistill is a publication format for scientific and technical writing, native to the web.\nLearn more about using Distill for R Markdown at https://rstudio.github.io/distill.\n\n\n\n\n\n\n\n Network attributes:\n  vertices = 18 \n  directed = FALSE \n  hyper = FALSE \n  loops = TRUE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 61 \n    missing edges= 0 \n    non-missing edges= 61 \n\n Vertex attribute names: \n    color region vertex.names \n\n Edge attribute names: \n    weight \n[1] 0.3267974\n[1] 0.3787375\n[1] 1\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.00    1.00    2.00    3.59    4.00   17.00 \n\nSince blockmodel works better with small network, I use the Game of Throne marriage network (instead of the huge world trade network) for homework this week.\nThis network is a undirected network showing the marriage between important families in Westeros. (I think if we distinguish which family the bride and groom belong to in each marriage, we can also create a directed network. I may try it later.) Each node represents a family (or a set of less important families of one region), while each tie indicates there are one or more marriage between the two families. The weights represents how many marriages have occurred between the family. There is only one component in this network, indicating all the important Westeros ruling families are connected by marriage.\n\n\n\n\n\n\n\n\n\nExcept for using single clustering method, the three other methods give a clear hierarchical structures which capture differences in network position between the families. All the four method identify Targaryen as an unique role to some extent, which is bery reasonable due to its status in the book.\n\n\n\nFor me, it’s a little confusing what these red rectangles mean. The partition is crossing the branches. The role values assigned by blockmodels are also different from the division in those plots. So I will focus more on the blocks partitioned by the blockmodels, and use the cluster dendrograms just as visual reference.\n\n\n\n\n           Block 1    Block 2   Block 3   Block 4\nBlock 1 0.40000000 0.04166667 0.6666667 0.8333333\nBlock 2 0.04166667 0.17857143 0.5000000 0.6250000\nBlock 3 0.66666667 0.50000000 0.3333333 0.6666667\nBlock 4 0.83333333 0.62500000 0.6666667       NaN\n\n          Block 1   Block 2   Block 3   Block 4\nBlock 1 0.1153846 0.3846154 0.6153846 0.6923077\nBlock 2 0.3846154 1.0000000 0.5000000 1.0000000\nBlock 3 0.6153846 0.5000000 0.0000000 0.5000000\nBlock 4 0.6923077 1.0000000 0.5000000       NaN\n\n          Block 1   Block 2   Block 3   Block 4\nBlock 1 0.1904762 0.5333333 0.6666667 0.7333333\nBlock 2 0.5333333       NaN 0.0000000 1.0000000\nBlock 3 0.6666667 0.0000000       NaN 0.0000000\nBlock 4 0.7333333 1.0000000 0.0000000       NaN\n\n           Block 1   Block 2    Block 3   Block 4\nBlock 1 1.00000000 0.0000000 0.03333333 0.6666667\nBlock 2 0.00000000 1.0000000 0.50000000 0.6666667\nBlock 3 0.03333333 0.5000000 0.11111111 0.6333333\nBlock 4 0.66666667 0.6666667 0.63333333 0.3333333\n\n\nAgain, the single clustering method makes the least sense. 3 families get one block for each, and the others are all in the same block.\nAmong the other three, the Ward D method give the most 0s and 1s (or near 0 or 1). It seems to best capture differences in network position between the families. Let’s explore it further.\n\n\n\n\n           Block 1   Block 2    Block 3   Block 4\nBlock 1 1.00000000 0.0000000 0.03333333 0.6666667\nBlock 2 0.00000000 1.0000000 0.50000000 0.6666667\nBlock 3 0.03333333 0.5000000 0.11111111 0.6333333\nBlock 4 0.66666667 0.6666667 0.63333333 0.3333333\n\n\n\n          name role_wrd\n1        Arryn        1\n2        Tully        1\n3         Vale        1\n4    Baratheon        2\n5        Reach        2\n6    Lannister        3\n7      Martell        3\n8   Stormlands        3\n9       Tyrell        3\n10  Crownlands        3\n11       Essos        3\n12  Riverlands        3\n13 Westerlands        3\n14       North        3\n15       Dorne        3\n16       Stark        4\n17        Frey        4\n18   Targaryen        4\n\nBlock 1(Arryn, Tully, and Vale) and Block 2 (Baratheon and Reach) show a faction pattern. They are fully connected to each other within factions by marriage ties while have no marriage with the other faction. It’s understandable since the Arryn family rule the Vale, so they have close relation to nobles of the Vale. The Tully family rule the riverlands, which is next the Vale. And this part of Westoros has few connections to Baratheons and nobles in Reach. (Not quite sure why the Baratheon and the Reach are viewed as the same role and a faction. Maybe I’m not familiar enough with the book.)\nBlock 3 consists of most other families. They are loosely connected to each other. The block 1 or faction of Vale and Riverlands has very limited connections with block 3, indicating that they are not deeply involved in other affairs in Westeros. The Baratheon block have some relation with them, which might provide the support for the throne. Sadly, this connection is not enough. Perhaps this is one of the causes of the War of the Five Kings.\nBlock 4 (Targaryen, Stark and Frey) is loosely self connected, but have a relative high connection to all the other 3 blocks. It is quite interesting since these there families (especially the Targaryen and the Stark) are the central families to the story of the book. The three families have extensive and similar political resources in Westeros. They marry each other and compete with each other at the same time. The most important marriages in the story take place between these three families. Meanwhile, House Stark’s war to help Baratheon against Targaryen, and Frey’s betrayal of Stark, are two of the most significant turning points in Westeros history. The role analysis shows us they fight each other because they occupy similar roles.\nInterestingly, one of the other major family for the book, the Lannister has no unique roles in all four methods. This fact might help explain why the Lannisters try to grasp the power and make many political enemies on the one hand, and struggling so much in the process on the other hand.\n\n\n\nThe plot show the pattern more clearly. The Stark, Frey and Targaryen sit in the center of the network and compete with each other. Baratheon and Reach sit near the center. Other families are surrounding around the core five, while Tully, Vale and Arryn are located at the periphery. (Dorne is also quite periphery, which is align with the book.)\n\n     role_wrd degree degree.wt bonpow betweenness close constraint\n[1,]        1    4.3        16  -1.08         1.8  0.53       0.45\n[2,]        2    8.0        28  -1.10        13.3  0.65       0.35\n[3,]        3    4.0        18  -0.74         1.1  0.54       0.63\n[4,]        4   10.3        51  -0.90        24.5  0.71       0.27\n     eigen eigen.rc eigen.dc role_cmpl role_avg role_sing  n\n[1,]  0.17    0.018     0.15       1.0      1.0         1  3\n[2,]  0.28    0.044     0.24       2.5      2.0         1  2\n[3,]  0.18    0.046     0.13       1.7      1.0         1 10\n[4,]  0.35    0.142     0.21       3.3      3.3         3  3\n     role_cmpl degree degree.wt bonpow betweenness close constraint\n[1,]         1   1.17      12.1   0.40        0.76 0.043      0.056\n[2,]         2   1.85      11.5   0.53        3.66 0.062      0.193\n[3,]         3   0.58       8.1   0.89        2.21 0.000      0.084\n[4,]         4     NA        NA     NA          NA    NA         NA\n      eigen eigen.rc eigen.dc role_avg role_sing role_wrd  n\n[1,] 0.0636    0.035    0.041     0.00         0     1.10  0\n[2,] 0.0663    0.030    0.059     0.35         0     0.35  0\n[3,] 0.0066    0.051    0.047     0.58         1     1.15  0\n[4,]     NA       NA       NA       NA        NA       NA NA\n\nBy summarising the centrality scores by roles, we can identify their characteristics to some extent. The block 1 is in the periphery, and have the lowerst weighted degree, closeness and eigenvector centrality score, and have relatively low degree, Bonacich power and betweenness.\nBlock 2, the Baratheon and Reach, has the second high degree, weighted degree, betweenness, closeness and eigenvector centrality score (just next to block 4), and have the second low constraint, indicating their central position (not central enough though). Their reflected centrality is quite low compared with the derived centrality, indicating that they may actually only have limited direct resources and instead rely on indirect relationships (probably especially on Stark). This further explain the failure of the rule of Baratheon. Robert had to rule by compromise.They have the lowest Bonacich power.(DOn’t know how to interpret a negative value.)\nBlock 3, the collection of “normal” noble families, have low scores for almost every parameters and high constraint as expected.\nBlock 4, the collection of the most important families, have highest centrality scores and lowest constraint as expected. Moreoever, compared with other blocks, they have quite high reflected - derived centrality ratio, indicating they have the most direct political resources. Combined with the low constrain, we can easily identify them as structural holes. This is the origin of their power.\n\n\n\n",
    "preview": "posts/httpsyli210813githubiosocialnetworkhomework6/distill-preview.png",
    "last_modified": "2022-03-12T20:07:32-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsnmilsteinumagithubioposts2022-02-21-week-5-interpretaive-assignment/",
    "title": "Week 5 Interpretaive Assignment",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Noah Milstein",
        "url": {}
      }
    ],
    "date": "2022-03-03",
    "categories": [],
    "contents": "\n\n\n\n\n\n\nBackground and Research\nQuestion:\nWikipedia is self-described as a “free content, multilingual online\nencyclopedia written and maintained by a community of volunteers through\na model of open collaboration,” information on the website i shared and\nmaintained “using a wiki-based editing system. [and] Individual\ncontributors,” being the 5th most visited website in the world it is\nalso the largest and most-read reference work in history.” (“https://en.wikipedia.org/wiki/Wikipedia”) Because of\nWikipedia’s position, as an arbiter of information and reference for a\nnumber of subjects, it is essential to understand the nature of the\nrequired citations and how they inform the websites portrayal of history\nand information. (Chase 2021)\nConflict is a defining feature of history, the results of war and the\ngroups involved are essential to understanding dynamics of power\nglobally. A war can represent the transfer of material, territorial, and\nstrategic power between groups. As a result the networks of wars between\nnations can give some notion of power centrality among warring\nnations.\nSince wikipedia has become a widely accepted (if often critiqued)\nsource of information, its citations and the information resulting from\nthem can give us a sense of how where the center of global conflict, and\nthus the most central nations, according to popular and accessible\nacademic literature.\nhttps://www.visualcapitalist.com/the-50-most-visited-websites-in-the-world/\nChase, Matt. “Wikipedia is 20, and its reputation has never been\nhigher”. The Economist. January 9, 2021. Retrieved February 25,\n2021.\n\n\n\nPart 1:\nDescribe the Dataset You Are\nUsing:\nThe Dataset Being Used: The dataset that I am using\nis wikipedia list of wars throughout history, this article is the “List\nof wars: 1000–1499” which acts as a subset of the “2nd-millennium\nconflicts” I chose this dataset as an exemplar of popular history’s\ndepiction of the centralization of worldwide conflict. Wikipedia, being\nan accessible source generally created from relevant citations makes it\na good case study to see where historical writers and academics center\ntheir world are relevant conflicts.\nIdentify initial network\nformat:\nAnswer: The initial network format is as an edge\nlist, the first, in column contains the winners of each\nwar while the second, out column contains the losers of\neach. These sets of belligerents are directed\nNetwork\nStructure: Wars Startings in the 1000s\n\n Network attributes:\n  vertices = 117 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 153 \n    missing edges= 0 \n    non-missing edges= 153 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nNetwork\nStructure: Wars Startings in the 1100s\n\n Network attributes:\n  vertices = 78 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 225 \n    missing edges= 0 \n    non-missing edges= 225 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nNetwork\nStructure: Wars Startings in the 1200s\n\n Network attributes:\n  vertices = 161 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 313 \n    missing edges= 0 \n    non-missing edges= 313 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nIdentify Nodes: Describe and identify the nodes\n(including how many nodes are in the dataset)\nAnswer: Nodes or vertices in these datasets\nrepresent belligerents in wars throughout history, the involved parties\nin each conflict can be a nation, province, individual, or group so long\nas they are listed as involved in the conflict. In the 1000s there are\n117, in the 1100s there are 78 and in the 1200s there are 161.\nWhat Constitutes a Tie: What constitutes a tie or\nedge (including how many ties, whether ties are directed/undirected and\nweighted/binary, and how to interpret the value of the tie if any)\nAnswer: A tie or edge in this dataset represents a\nwar, this war can be between two nations or groups within a nation.\nThese edges can represent a war that involved many more nations but are\nalways tied to each and every party involved on both sides. These edges\nare directed and the direction indicates which side “won” the conflict\n(if an edge has an arrow pointing to another the node that originated\nthat arrow won the war against them. There are 153 edges in the 1000s,\n225 edges in 1100s and 313 edges in the 1200s.\nEdge Attributes and Subset: Whether or not there are\nedge attributes that might be used to subset data or stack multiple\nnetworks (e.g., tie type, year, etc).\nAnswer: There are a number of attributes that could\nbe used to subset the data, year that the conflict began or the length\nof time it lasted are available. Aspects like each side’s religion and\nthe area where the conflict took place could be used to subset the data\nitself.\nPart 2:\nBrokerage and Betweeness\ncentrality\nWhat are betweeness and brokerage cenrrality\nCalculate brokerage and betweenneess centrality measures for one or more\nsubsets of your network data, and write up the results and your\ninterpretation of them.\nAnswer: I will be calculating these measures for\nwars in 1000-1099, 1100-1199, and 1200-1399.\n\n\n\nBrokerage scores in the\n1000s\n\n\n\n\n\n(wars_in_1000s.nodes.stat_2%>%\n  arrange(desc(broker.tot))%>%\n  slice(1:10))[,c(1,11:15)] %>%kable()\n\n\nname\nbroker.tot\nbroker.coord\nbroker.itin\nbroker.rep\nbroker.gate\nByzantine Empire\n25.2728731\nNaN\n3.9930250\nNaN\nNaN\nSultanate of Rum\n10.4364880\nNaN\n-0.5014965\nNaN\nNaN\nHoly Roman Empire\n10.0243662\nNaN\n4.8919293\nNaN\nNaN\nEngland\n7.5516353\nNaN\n6.6906430\n-0.0800286\n-0.0800286\nKingdom of Sicily\n5.4910263\nNaN\n3.9930250\nNaN\nNaN\nKingdom of France\n2.1940518\nNaN\n-0.5014965\nNaN\nNaN\nSeljuk Empire\n1.7819300\n-0.0271615\n-0.5004595\n6.3140099\n-0.1374029\nKingdom of Georgia\n0.5455645\n-0.0158536\n-0.5009747\n-0.1126843\n-0.1126843\nPapal States\n0.5455645\n-0.0158536\n-0.5009747\n-0.1126843\n11.6872209\nNormandy\n0.1334427\n-0.1256118\n0.4229345\n-0.2730778\n-0.2730778\n\nBrokerage scores in the\n1100s\n\n\n\n\n\n\n\n\n(wars_in_1100s.nodes.stat_2%>%\n  arrange(desc(broker.tot))%>%\n  slice(1:10))[,c(1,10:14)] %>%kable()\n\n\nname\nbroker.tot\nbroker.coord\nbroker.itin\nbroker.rep\nbroker.gate\nKingdom of Jerusalem\n13.5778650\nNaN\n2.9379204\n17.9204822\n-0.1688321\nFatimid Caliphate\n8.0093472\nNaN\n-0.6987889\nNaN\nNaN\nAyyubid Dynasty\n7.2954347\nNaN\n-0.6973228\n-0.1688321\n-0.1688321\nZengid Dynasty\n5.7248271\nNaN\n0.7542726\nNaN\nNaN\nByzantine Empire\n5.2964795\nNaN\n0.7567745\n-0.1688321\n-0.1688321\nEngland\n4.4397845\nNaN\n-0.6973228\n-0.1688321\n-0.1688321\nHoly Roman Empire\n2.1552644\nNaN\n-0.6973228\n-0.1688321\n-0.1688321\nKingdom of France\n1.0130043\nNaN\n-0.6973228\n-0.1688321\n-0.1688321\nKingdom of Sicily\n0.1563093\n-0.2053296\n-0.6628278\n-0.4286929\n-0.4286929\nPapal States\n-0.2720383\n-0.1781918\n-0.6712334\n-0.3997174\n1.6840665\n\nBrokerage scores in the\n1200s\n\n\n\n\n\n\n\n\n\n\nname\nbroker.tot\nbroker.coord\nbroker.itin\nbroker.rep\nbroker.gate\nMongol Empire\n47.964825\nNaN\n-0.5953457\nNaN\nNaN\nKingdom of France\n28.663539\nNaN\n-0.5953457\nNaN\nNaN\nAyyubid Dynasty\n26.995527\nNaN\n1.6524957\nNaN\nNaN\nKingdom of England\n21.991489\nNaN\n8.3960200\nNaN\nNaN\nRepublic of Genoa\n11.983415\nNaN\n-0.5953457\nNaN\nNaN\nKnights Templar\n10.077115\nNaN\n1.6524957\nNaN\nNaN\nHoly Roman Empire\n4.834790\n-0.0170801\n-0.5948396\n10.86552\n10.8655226\nPrincipality of Antioch\n4.834790\n-0.0170801\n2.4030361\n13.61357\n-0.1266480\nKingdom of Cyprus\n4.596503\n58.5391124\n0.1546293\n13.61357\n10.8655226\nCounty of Tripoli\n3.643353\nNaN\n0.9035078\n19.28056\n-0.0898366\n\n\nname\nbroker.gate\nPapal States\n11.6872209\nCounty of Sicily\n-0.0800286\nEngland\n-0.0800286\nCounty of Aversa\n-0.1126843\nKingdom of Georgia\n-0.1126843\nGreat Seljuq Empire\n-0.1126843\nChola Empire\n-0.1126843\nTaifa of Lérida\n-0.1126843\nCounty of Apulia\n-0.1374029\nSeljuk Empire\n-0.1374029\nname\nbroker.tot\nByzantine Empire\n25.2728731\nSultanate of Rum\n10.4364880\nHoly Roman Empire\n10.0243662\nEngland\n7.5516353\nKingdom of Sicily\n5.4910263\nKingdom of France\n2.1940518\nSeljuk Empire\n1.7819300\nKingdom of Georgia\n0.5455645\nPapal States\n0.5455645\nNormandy\n0.1334427\n\nOption 2.A\nFor a Specific Research Question: If you have a\nspecific research question, please feel free to use that to guide your\nanalysis. Otherwise, you may want to orient your analysis as follows in\norder to identify a compelling question or noteworthy pattern in the\ndata that can be interpreted.\nAnswer: Since I am interested in the relative power\nof nations by their relative position ad centrality in the worldwide\nconflict, network brokerage can be used to illustrate significant\npositions in global conflict. Below I wanted to look at 4 kinds of\nbrokerage, these are broker.gate or gatekeeper, coordinator, liason, and\nitinerant. I am interested to see if these specific coordination types\nare primarily done by specific nations.\n\n\n\nTotal Brokerage\nExplanation: Looking at total brokerage in this\ndataset gives a sense of which factions were responsible for highest\nconnection of unconnected actors through conflict. Given the crusades\nigniting conflict between Europe and the middle east it is sensible that\nthe Byzantine Empire in the center of both connects the most unconnected\nactors through conflict closely followed by the Sultanate of Rum, a\nmajor Muslim faction that fought against the crusades and third being\nthe Holy Roman Empire who participated in many conflicts including the\ncrusades. These are followed by England who centered the wars in the\nBritish isles and the Kingdom of Sicily who were also in a position of\nconflict.\n\nname\nbroker.tot\nByzantine Empire\n25.272873\nSultanate of Rum\n10.436488\nHoly Roman Empire\n10.024366\nEngland\n7.551635\nKingdom of Sicily\n5.491026\n\nCoordinator Brokerage\nExplanation: In this case no particular country is\nvery high above any other in terms of their coordinator brokerage,\nmeaning that within groups no particular nations appear to be brokering\nmore within the groups.\n\nname\nbroker.coord\nCounty of Aversa\n-0.0158536\nKingdom of Georgia\n-0.0158536\nGreat Seljuq Empire\n-0.0158536\nPapal States\n-0.0158536\nChola Empire\n-0.0158536\n\nItinerant Brokerage\nExplanation: Itinerant brokerage represents when a\nnon-group actor connects 2 actors in a group it is no in to each other,\nin this case England has the highest score. Looking at the network graph\nthey do appear to connect 2 actors in a group together.\n\nname\nbroker.itin\nEngland\n6.6906430\nHoly Roman Empire\n4.8919293\nKingdom of Sicily\n3.9930250\nByzantine Empire\n3.9930250\nPrincipality of Kiev\n0.4413428\n\nRepresentative Brokerage\nExplanation: Representative brokerage indicates that\nthe broker, or nation in question loses a war to another in their group,\nbut wins another against a faction outside of their group. This can be\nthough of as their directed connections to them. In this case the Seljuk\nEmpire and Kingdom of Aragon have instances in which they lose to\nfactions within their group before beating those outside of it.\n\nname\nbroker.rep\nSeljuk Empire\n6.3140099\nKingdom of Aragon\n1.1415607\nCounty of Sicily\n-0.0800286\nEngland\n-0.0800286\nCounty of Aversa\n-0.1126843\n\nGatekeeper Brokerage\nExplanation: The Papal states being ranked highest\nin gatekeeper brokerage is an interesting observation as no other nation\nin the dataset appears to be close to their level as most are negative\nin this category. In this cae being a gatekeeper means that they are in\nat conflict in a group with another while the nation in a different\ngroup of conflicts is only at war with them from the group. This is an\ninteresting observation given the Papal states role as a coordinator of\nthe war, but not a participant in the conflcit as directly as other\nbelligerents. (This being the crusade given the period)\n\nname\nbroker.gate\nPapal States\n11.6872209\nCounty of Sicily\n-0.0800286\nEngland\n-0.0800286\nCounty of Aversa\n-0.1126843\nKingdom of Georgia\n-0.1126843\n\nLiaison Brokerage\nExplanation: A liaison broker, in this case, is a\nfaction that loses a war to a group they do not belong to and wins a war\nagainst a different group than the first that they also do not belong\nto. The Byzantine Empire, Sultanate of Rum, and Holy Roman Empire are\nhighest in this category likely owing to their frequent states of\nconflict beyond the crusades against a variety of groups.\n\nname\nbroker.lia\nByzantine Empire\n31.767840\nSultanate of Rum\n14.454659\nHoly Roman Empire\n10.545231\nEngland\n6.202342\nKingdom of Sicily\n4.960334\n\nwars_in_1000s_edgelist <- as.matrix(wars_in_1000s)\nwars_in_1000s_edgelist_network_edgelist <-\ngraph.edgelist(wars_in_1000s_edgelist, directed=TRUE)\nwars_in_1000s.ig<-graph_from_data_frame(wars_in_1000s)\nwars_in_1000s_network <- asNetwork(wars_in_1000s.ig)\n\n\npls_work<-as.network(wars_in_1000s_edgelist, matrix.type = \"edgelist\", directed = FALSE,  hyper = FALSE, loops = FALSE, multiple = FALSE, bipartite = FALSE, vertex.attrnames=wars_in_1000s_network%v%\"vertex.names\")\n\nflomarr.se<-equiv.clust(pls_work, equiv.fun=\"sedist\", method=\"hamming\",mode=\"graph\")\nplot(flomarr.se, labels=flomarr.se$glabels,  cex=0.3)\nrect.hclust(flomarr.se$cluster,h=5)\n\n\n\n?plot()\n\n\nHelp on topic 'plot' was found in the following packages:\n\n  Package               Library\n  base                  /Library/Frameworks/R.framework/Resources/library\n  graphics              /Library/Frameworks/R.framework/Versions/4.1/Resources/library\n\n\nUsing the first match ...\n\n\n\n#blockmodel and select partitions\nblk_mod<-blockmodel(pls_work,flomarr.se,k=5)\n#assign block membership to vertex attribute\nV(wars_in_1000s.ig)$role<-blk_mod$block.membership[match(V(wars_in_1000s.ig)$name,blk_mod$plabels)]\nwars_in_1000s_network%v%\"role\"<-blk_mod$block.membership[match(wars_in_1000s_network%v%\"vertex.names\", blk_mod$glabels)]\n\n\n\n\n\n?blockmodel()\nset.seed(2)\n#blockmodel and select partitions\nblk_mod<-blockmodel(pls_work, flomarr.se, k=5)\n#assign block membership to vertex attribute\npls_work%v%\"role\"<-blk_mod$block.membership[match(pls_work%v%\"vertex.names\", blk_mod$glabels)]\n#plot network using \"role\" to color nodes: statnet\nGGally::ggnet2(pls_work,\n               node.color=\"role\", \n               node.size=degree(pls_work, gmode=\"graph\"),\n               node.label = \"vertex.names\",\n               label.size= 1,\n               node.alpha = .5)\n\n\n\n?ggnet2()\n\n\n\n\n\nplot.block<-function(x=blk_mod, main=NULL, cex.lab=1){\n  plot.sociomatrix(x$blocked.data, labels=list(x$plabels,x$plabels),\n                   main=main, drawlines = FALSE, cex.lab=cex.lab)\n  for (j in 2:length(x$plabels)) if (x$block.membership[j] !=\n                                     x$block.membership[j-1]) \n    abline(v = j - 0.5, h = j - 0.5, lty = 3, xpd=FALSE)\n}\n\n\n\n\n\nplot.block(blk_mod, cex.lab=.35)\n\n\n\n\n(information regarding the meaning of each type of brokerage was\nacquired from https://edis.ifas.ufl.edu/publication/WC197)\n\n\n\n",
    "preview": "posts/httpsnmilsteinumagithubioposts2022-02-21-week-5-interpretaive-assignment/week-5-interpretaive-assignment_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2022-03-03T12:51:04-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsrpubscomburnworthj873118/",
    "title": "Betweeness Centrality",
    "description": "\"My dataset includes every Supreme Court Justice and the school that their clerks attended. There are 187 vertices which contstitute the Justices and the different universiteis. There are 2487 edges and an edge means there is a connection between a Justice and a school because they have hired a clerk that graduated with their law degree from the university.  \nI tried to calculate brokerage, but it says that my data is not proper and I get an error message. I am not sure if that it user error(most likely) or if I am just mixing the steps up.\nI was able to calcuate betweeness centrality, but I could not get dplyr to let me slice or arrange the data so I could tell which nodes were the highest. I will work further to make progress on working with the data.\"",
    "author": [
      {
        "name": "Justin Burnworth",
        "url": {}
      }
    ],
    "date": "2022-03-03",
    "categories": [],
    "contents": "\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-03-03T12:51:23-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httpssvirguezgithubioichrnetworksposts2022-02-23-brokerage-and-betweenness-in-the-amici-network/",
    "title": "Betweenness in the Amici Network",
    "description": "Brokerage, betweenness, and other centrality measures",
    "author": [
      {
        "name": "Santiago Virgüez",
        "url": {}
      }
    ],
    "date": "2022-03-03",
    "categories": [],
    "contents": "\nAmnesty Internation, an influential actorRecap affiliation and one-mode network\nLet’s organize the data one more time. I’m gonna work again with the one-matrix (actorxactor). As you might remember, this one-mode matrix is a projection of the affiliation network (actorxcase), which means that the actors (the nodes) are tied by virtue of their participation in the same cases.\n\n\n#Affiliation network data\nlibrary(igraph)\nlibrary(tidyr)\ndata <- read.csv(\"Cleaned_Data.csv\")\n##New column count\ndata$count <- 1\n\n##Gather the data at case level\nlev_data <- pivot_wider(data,id_cols = CaseID, names_from = `Name`, \n                        values_from = count, values_fn = list(count = length), \n                        values_fill = list(count = 0))\n\n##transpose lev_data to have amici grouped by case\nlibrary(data.table)\nT_lev_data <- transpose(lev_data,)\nrownames(T_lev_data) <- colnames(lev_data)\ncolnames(T_lev_data) <- lev_data$CaseID\nT_lev_data <- T_lev_data[-c(1),]\n\n##create affiliation network graph using 'igraph'\nAff_network <- graph.incidence(T_lev_data)\n\n############\n\n#One-Mode matrix (actor x actor)\n\n##extracting the one-mode projection\nAff_network.pr <- bipartite.projection(Aff_network)\n\n##Actor x actor adjacency matrix\n\namici_net <- Aff_network.pr$proj1\n\namici_ad <- graph.adjacency(get.adjacency(amici_net, sparse = FALSE,attr = \"weight\"))\n\n\n\nCentrality measures by node (amici)\nLet’s obtain the centrality measures by node in order to compare them with the betweenness scores:\n\n\nlibrary(dplyr)\n#dataframe for the nodes + degree\namici.nodes<-data.frame(name=V(amici_ad)$name, degree=igraph::degree(amici_ad))\namici.nodes <- subset(amici.nodes, select = -name)\n\n#eigenvector centrality\ntemp<-centr_eigen(amici_ad,directed=F)\namici.nodes$eigen<-temp$vector\n\n#bonacich power centrality\namici.nodes$bonpow <- power_centrality(amici_ad, exponent = 0.9)\n\n#top 5 eigenvector centrality\namici.nodes%>%\n  arrange(desc(eigen))%>%\n  slice(1:5)\n\n\n                               degree     eigen     bonpow\nYale University                   192 1.0000000 -0.6392321\nDEJUSTICIA                        218 0.9886959 -0.6535497\nCenter for Reproductive Rights    116 0.9051396 -0.5626440\nUNAM                              134 0.8920983 -0.5961262\nLoyola Law School                 114 0.8841434 -0.4763785\n\nFirst, the eigenvector centrality is showing what actors are linked to other well connected actors. In terms of this network, the eigenvector centrality allow us to see what amici actors focus their participation on ‘popular’ cases, cases that atract interventions from well connected amici. We cannot say if their ‘strategic’ behavior is driven by the other participants (du to their popularity) or the impact of the substantive matter discussed in these cases.\nOn the other hand, the bonacich power centrality shows the actors that participated on the cases were no other people participated (therefore the actors with greater power of influence). All of these actrs has the same bonachich power score probably because they all filed a brief only once, for a case which wasn’t of interest for other actors:\n\n\n#top 5 bonacich power centrality\namici.nodes%>%\n  arrange(desc(bonpow))%>%\n  slice(1:5)\n\n\n                                                    degree eigen\nInternational Legal Advisors Esq.                        2     0\nFoundation for the Development of International Law      2     0\nThe International Commission of Jurists                  2     0\nCatalina Martinez Coral                                  2     0\nFundacion Vida Solidaria                                 2     0\n                                                      bonpow\nInternational Legal Advisors Esq.                   3.927038\nFoundation for the Development of International Law 3.927038\nThe International Commission of Jurists             3.927038\nCatalina Martinez Coral                             3.927038\nFundacion Vida Solidaria                            3.927038\n\nBetwenness centrality and network constraint\nIn order to find the most influential actors in the amici network, it is is necessary to calculate both de closeness and betweenness centrality measures. The closeness centrality calculates the shortest paths between all nodes, then assigns each node a score based on its sum of shortest paths, this can help find good ‘broadcasters’. Meanwhile, betweenness centrality measures the number of times a node lies on the shortest path between other nodes, which can help us to find the actors who influence the flow around a system.\nWe might expect that international organizations and well-funded actors have a greater participation in the Inter-American system, with an influential role among local and less endowed actors.\n\n\n#Closeness centrality\namici.nodes$close <- igraph::closeness(amici_ad)\n\namici.nodes%>%\n  arrange(desc(close))%>%\n  slice(1:5)\n\n\n                               degree     eigen     bonpow\nWomen's Link Worldwide             66 0.0933683 -0.6017687\nYale University                   192 1.0000000 -0.6392321\nUNAM                              134 0.8920983 -0.5961262\nCenter for Reproductive Rights    116 0.9051396 -0.5626440\nInterights                        110 0.8835159 -1.4061725\n                                      close\nWomen's Link Worldwide         2.049516e-05\nYale University                2.049138e-05\nUNAM                           2.048509e-05\nCenter for Reproductive Rights 2.047251e-05\nInterights                     2.047167e-05\n\n#Betweenness centrality\namici.nodes$between<-igraph::betweenness(amici_ad, directed=FALSE)\n\namici.nodes%>%\n  arrange(desc(between))%>%\n  slice(1:5)\n\n\n                       degree       eigen     bonpow        close\nWomen's Link Worldwide     66 0.093368302 -0.6017687 2.049516e-05\nCEJIL                     138 0.003024349 -0.6255743 2.045617e-05\nYale University           192 1.000000000 -0.6392321 2.049138e-05\nAmnesty International      96 0.002862279 -0.7003592 2.044739e-05\nUNAM                      134 0.892098273 -0.5961262 2.048509e-05\n                         between\nWomen's Link Worldwide 14257.860\nCEJIL                   9557.596\nYale University         8762.995\nAmnesty International   8186.167\nUNAM                    7470.614\n\nAs expected, international actors such as Amnesty International, Women’s Link Worldwide, and Interights are among the most influential actors. Likewise, although local, Yale University and the National Autonomous University of Mexico (UNAM) are a good example of well-funded organization with enough capacity to influence the Inter-American system. Furthermore, CEJIL (Center for Justice and International Law) is precisely an organization aimed to contribute to the “full enjoyment of human rights in the Americas through the effective use of Inter-American System tools and other international human rights law protection mechanisms”.\nAs we can see, these centrality measures provide a better understanding of the most influential actors in the IAcHR network. Because this is a ‘undirected’ network, we cannot provide any measures of brockerage.\n\n\n\n",
    "preview": {},
    "last_modified": "2022-03-03T12:51:19-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httpswalidmedanigithubionetworks-blogposts2022-03-02-assignment5/",
    "title": "Assignment_5",
    "description": "Structural Holes\nauthor:\n- name: Walid Medani\n  url: https://walidmedani.github.io/networks-blog/",
    "author": [],
    "date": "2022-03-03",
    "categories": [],
    "contents": "\n\n\n\nGame of Thrones Like/Dislike\n\n\n\nNetwork Size\n\n[1] 11\n[1] 46\n\nAttributes\n\n[1] FALSE\n[1] TRUE\n[1] FALSE\n[1] \"name\"\n [1] \"Name\"                  \"Lysa.Arryn\"           \n [3] \"Petyr.Baelish\"         \"Joffrey.Baratheon\"    \n [5] \"Margaery.Tyrell\"       \"Renly.Baratheon\"      \n [7] \"Robert.Baratheon\"      \"Stannis.Baratheon\"    \n [9] \"Brienne.of.Tarth\"      \"Bronn\"                \n[11] \"Gregor.Clegane\"        \"Sandor.Clegane\"       \n[13] \"Xaro.Xhoan.Daxos\"      \"Gendry\"               \n[15] \"Balon.Greyjoy\"         \"Theon.Greyjoy\"        \n[17] \"Jaqen.H.ghar\"          \"Hodor\"                \n[19] \"Khal.Drogo\"            \"Cersei.Lannister\"     \n[21] \"Jaime.Lannister\"       \"Lancel.Lannister\"     \n[23] \"Tyrion.Lannister\"      \"Tywin.Lannister\"      \n[25] \"Maester.Luwin\"         \"Melisandre\"           \n[27] \"Jeor.Mormont\"          \"Jorah.Mormont\"        \n[29] \"Osha\"                  \"Podrick.Payne\"        \n[31] \"Pyat.Pree\"             \"Grand.Maester.Pycelle\"\n[33] \"Ros\"                   \"Davos.Seaworth\"       \n[35] \"Shae\"                  \"Jon.Snow\"             \n[37] \"Arya.Stark\"            \"Bran.Stark\"           \n[39] \"Catelyn.Stark\"         \"Robb.Stark\"           \n[41] \"Sansa.Stark\"           \"Daenerys.Targaryen\"   \n[43] \"Viserys.Targaryen\"     \"Samwell.Tarly\"        \n[45] \"Loras.Tyrell\"          \"Varys\"                \n[47] \"Eddard.Stark\"         \n\nCentrality Measures\nBetweenness Centrality\n\n        Arryn       Baelish     Lannister        Tyrell     Baratheon \n            0             0             0             0             0 \n        Stark                     Greyjoy Night's Watch     Targaryen \n            1             5             0             0             0 \n        Tully \n            0 \n\nEdge Betweeness plot\n\n\n\nBetweeness Centralization\n\n[1] 0.05444444\n\nCloseness Centralization\n\n[1] 0.03548935\n\nNetwork Constraint\n\n    Arryn   Baelish Lannister    Tyrell Baratheon     Stark \n1.0000000 1.0000000 0.9917431 1.0436180 0.9977808 0.8002717 \n\nGould-Fernandez Brokerage\n\n                     w_I        w_O       b_IO       b_OI       b_O\nArryn                NaN -0.9759951 -0.6715120 -0.6715120 -1.561299\nBaelish              NaN -0.9759951 -0.6715120 -0.6715120 -1.561299\nLannister            NaN -0.9759951 -0.6715120 -0.6715120 -1.561299\nTyrell        -0.4759641 -0.8243941 -0.8953493 -0.8953493 -1.458012\nBaratheon            NaN -1.0836066        NaN        NaN -1.672677\nStark                NaN -0.9759951 -0.6715120 -0.6715120 -1.313798\n                     NaN -1.0836066        NaN        NaN  1.910340\nGreyjoy       -0.4759641 -0.8243941 -0.8953493 -0.8953493 -1.458012\nNight's Watch        NaN -0.9759951 -0.6715120 -0.6715120 -1.561299\nTargaryen            NaN -0.9759951 -0.6715120 -0.6715120 -1.561299\nTully         -0.4759641 -0.8243941 -0.8953493 -0.8953493 -1.458012\n                      t\nArryn         -1.701438\nBaelish       -1.701438\nLannister     -1.701438\nTyrell        -1.701438\nBaratheon     -1.701438\nStark         -1.515633\n               1.457237\nGreyjoy       -1.701438\nNight's Watch -1.701438\nTargaryen     -1.701438\nTully         -1.701438\n\n\n\n\n",
    "preview": "posts/httpswalidmedanigithubionetworks-blogposts2022-03-02-assignment5/assignment5_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2022-03-03T12:51:30-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsyli210813githubiosocialnetworkanalysishw5/",
    "title": "Homework 5",
    "description": "Week 5 Assignment: Brokerage and Power.",
    "author": [
      {
        "name": "Yifan Li",
        "url": {}
      }
    ],
    "date": "2022-03-03",
    "categories": [],
    "contents": "\n\n\n#Load the libraries\n  library(dplyr)\n  library(igraph)\n  library(tidyr)\n  library(corrr)\n  library(ggplot2)\n\n\n\n\n\n#Read the network into the environment. This will import it as an edgelist\n  ##data_orig <- read.csv(\"C:/Users/Yifan Desktop/OneDrive/Social Network Analysis/COW_Trade_4.0/Dyadic_COW_4.0.csv\", header=T,stringsAsFactors=FALSE)\ndata_orig <- read.csv(\"C:/Users/LYF-YOGA14s/OneDrive/Social Network Analysis/COW_Trade_4.0/Dyadic_COW_4.0.csv\", header=T,stringsAsFactors=FALSE)\n  ##flow 1 is Imports of Country A from Country B, in US millions of current dollars\n  ##flow 2 is imports of country B from country A\n\n  ##trade.nodes <- read.csv(\"C:/Users/Yifan Desktop/OneDrive/Social Network Analysis/COW_Trade_4.0/National_COW_4.0.csv\", header = T, stringsAsFactors = F)\ntrade.nodes <- read.csv(\"C:/Users/LYF-YOGA14s/OneDrive/Social Network Analysis/COW_Trade_4.0/National_COW_4.0.csv\", header = T, stringsAsFactors = F)\n\n  trade2014 <- subset(data_orig, data_orig$year == 2014)\n  \n#Create weight column that holds the total trade on each edge. \n  temp <- trade2014 %>%\n    mutate(from = importer1,\n           to = importer2,\n           weight = flow1) %>%\n    select(from, to, weight, year)\n  temp2 <- trade2014 %>%\n    mutate(from = importer2,\n           to = importer1,\n           weight = flow2) %>%\n    select(from, to, weight, year)\n\n  temp_edgelist <- full_join(temp,temp2)\n  network_edgelist <- subset(temp_edgelist, temp_edgelist$weight > 0)\n  \n  #Create igraph objects from the edgelists\n  trade2014.ig <- graph.edgelist(as.matrix(network_edgelist[,c(\"from\",\"to\")]), directed = T)\n  \n  #Specify the weights values\n  E(trade2014.ig)$weight <- network_edgelist$weight \n\n  #Add in long and short versions of country names for reports\n    V(trade2014.ig)$long_name <- trade.nodes$statename[match(V(trade2014.ig)$name, trade.nodes$statename)]\n    V(trade2014.ig)$short_name <- trade.nodes$stateabb[match(V(trade2014.ig)$name, trade.nodes$statename)]\n    V(trade2014.ig)$ccode <- trade.nodes$ccode[match(V(trade2014.ig)$name, trade.nodes$statename)]\n    V(trade2014.ig)$continent <- trade.nodes$continent[match(V(trade2014.ig)$name, trade.nodes$statename)]\n\n  ##rm(data_orig)\n    trade2014.nodes <- data.frame(name = V(trade2014.ig)$long_name,\n                                  short_name = V(trade2014.ig)$short_name,\n                                  ccode = V(trade2014.ig)$ccode)\n    trade2014.nodes$continent <- V(trade2014.ig)$continent\n\n\n\n\n\n#Find network features: \nis_bipartite(trade2014.ig)\n\n\n[1] FALSE\n\nis_directed(trade2014.ig)\n\n\n[1] TRUE\n\nis_weighted(trade2014.ig)\n\n\n[1] TRUE\n\nThe original dataset is the trade dataset version 4 from the Correlates of War Project. In this subject I only use trade data of year 2014. The format is edgelist. The nodes are countries, and the ties are the trading relations between countries in 2014. The network is directed and weighted.\nLet’s look at some basic descriptive facts.\n\n\n#Original network size\nvcount(trade2014.ig)\n\n\n[1] 186\n\necount(trade2014.ig)\n\n\n[1] 22451\n\necount(trade2014.ig) * 2 / vcount(trade2014.ig)\n\n\n[1] 241.4086\n\necount(trade2014.ig) / (vcount(trade2014.ig) * (vcount(trade2014.ig - 1)))\n\n\n[1] 0.6524557\n\n\n\n#summarize numeric network attribute\nsummary(E(trade2014.ig)$weight)\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n     0.0      0.2      4.9    813.1     78.5 472525.2 \n\nThe network in 2014 has 186 nodes, i.e. 186 countries involed in the trading network. There are 22451 egdes. Each country has 241 connected edges on average. On average, one country import 813 million dollars of good from another country each year. 65% of potential ties exit.\nLet’s classify all dyads and traids in the network:\n\n\n#Classify all dyads in the network:\nigraph::dyad.census(trade2014.ig)\n\n\n$mut\n[1] 9933\n\n$asym\n[1] 2585\n\n$null\n[1] 4687\n\n#Classify all triads in the network:\nigraph::triad_census(trade2014.ig)\n\n\n [1]  75574  62420  92513  11021   9514  11233  60137  45246   5530\n[10]    788 188669  14094   9006  15882 147383 306230\n\n75574 / sum(igraph::triad_census(trade2014.ig))\n\n\n[1] 0.07161783\n\n(75574+62420+92513+11021+9514+11233+60137+45246) / sum(igraph::triad_census(trade2014.ig))\n\n\n[1] 0.3484117\n\nigraph::components(trade2014.ig)$no\n\n\n[1] 1\n\nThere are 9933 mutual bilateral trade relations, 2585 unilateral trade relations, and 4687 pairs of coutries have no trading in 2014.\n7% of the triads are empty, and 65% of them are triangle. The network is quite dense.\nLet’s look at the distribution of nodes centrality.\n\n\ntrade2014.nodes$closeness <- centr_clo(trade2014.ig)$res\n\ntrade2014.nodes$betweenness <- centr_betw(trade2014.ig, directed = TRUE)$res\n\ntrade2014.nodes$eigen <- centr_eigen(trade2014.ig, directed=TRUE, scale=FALSE)$vector\n\ntrade2014.nodes$bonpow <- power_centrality(trade2014.ig)\n\n\nmat2014<-as.matrix(as_adjacency_matrix(trade2014.ig, attr=\"weight\"))\n\n#square the adjacency matrix\nmat2014sq<-t(mat2014) %*% mat2014\n\n#Calculate the proportion of reflected centrality.\ntrade2014.nodes$rc<-diag(mat2014sq)/rowSums(mat2014sq)\n#replace missing values with 0\ntrade2014.nodes$rc<-ifelse(is.nan(trade2014.nodes$rc),0,trade2014.nodes$rc)\n\n#Calculate received eigenvalue centrality\ntrade2014.nodes$eigen.rc<-trade2014.nodes$eigen*trade2014.nodes$rc\n\n#Calculate the proportion of derived centrality.\n  trade2014.nodes$dc<-1-diag(mat2014sq)/rowSums(mat2014sq)\n#replace missing values with 0\n  trade2014.nodes$dc<-ifelse(is.nan(trade2014.nodes$dc),1,trade2014.nodes$dc)\n#Calculate received eigenvalue centrality\ntrade2014.nodes$eigen.dc<-trade2014.nodes$eigen*trade2014.nodes$dc\n\n\n\nFollowing last week’s analysis, I continued to add brokerage.\nTo calculate brokerage scores with the trade dataset, I try to create a statnet network (whose import script is not provided.) I’m not sure what I did wrong. The betweenness is much different from what I expect (and very different from results igraph). Then I check the degree. The statnet gives a totally different outcome from igraph too. The two packages shouldn’t give different results for such a simple parameter.\nI also failed to calculate brokerage scores. I only got the total scores while all roles scores are NA.\nMy codes show below. What did I do wrongly?\n\n\n##I need the statnet package and network data to calculate brokerage.\nlibrary(statnet)\ntrade2014.stat <- network(as.matrix(network_edgelist[1:2], matrix.type = 'edgelist'))\n\nprint(trade2014.stat)\n\n\n Network attributes:\n  vertices = 186 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 22451 \n    missing edges= 0 \n    non-missing edges= 22451 \n\n Vertex attribute names: \n    vertex.names \n\n Edge attribute names not shown \n\ntrade2014.stat%e%\"weight\"      <- network_edgelist$weight\ntrade2014.stat%e%\"year\"      <- network_edgelist$year\n\ntrade2014.stat%v%\"long_name\" <- trade.nodes$statename[match(trade2014.stat%v%\"vertex.names\", trade.nodes$statename)]\ntrade2014.stat%v%\"short_name\" <- trade.nodes$stateabb[match(trade2014.stat%v%\"vertex.names\", trade.nodes$statename)]\ntrade2014.stat%v%\"ccode\" <- trade.nodes$ccode[match(trade2014.stat%v%\"vertex.names\", trade.nodes$statename)]\ntrade2014.stat%v%\"continent\" <- trade.nodes$continent[match(trade2014.stat%v%\"vertex.names\", trade.nodes$statename)]\n\nnetwork::list.vertex.attributes(trade2014.stat)\n\n\n[1] \"ccode\"        \"continent\"    \"long_name\"    \"na\"          \n[5] \"short_name\"   \"vertex.names\"\n\n\n\ntrade2014.nodes$between_stat <- sna::betweenness(trade2014.stat)\ntrade2014.nodes$degree <- igraph::degree(trade2014.ig)\ntrade2014.nodes$degree_stat <- sna::degree(trade2014.stat)\n\n\n\n\n\nbrokerage_stat <- data.frame(brokerage(trade2014.stat, cl = trade2014.nodes$continent)$z.nli)\ntrade2014.nodes<-trade2014.nodes %>%\n  mutate(broker.tot = brokerage_stat$t,\n         broker.coord = brokerage_stat$w_I,\n         broker.itin = brokerage_stat$w_O,\n         broker.rep = brokerage_stat$b_IO,\n         broker.gate = brokerage_stat$b_OI,\n         broker.lia = brokerage_stat$b_O)\n\n\n\n\n\n\n",
    "preview": {},
    "last_modified": "2022-03-03T12:51:33-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httprpubscomkbecenron/",
    "title": "Week 2 Assignment",
    "description": "Analyzing the Enron Emails dataset from the network package",
    "author": [
      {
        "name": "Kristina Becvar",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\r\n“Enron Emails.R” is a file in the course repository that consists of a network of emails between enron employees from the igraphdata package. According to the import script, this is a large, un-weighted, directed network with employees as nodes and emails as edges.\r\nThe import script also indicates that there are no node attributes. I found that there was, in fact, node attributes to be found in the igraph dataset in the form of what seems to be titles as ‘Notes’ and email addresses in ‘email’ without the domain name, but that was not relevant for this assignment.\r\nAdditionally, the import script indicated that but topic and time information is stored as edge attributes. This is correct, and another thing that I learned through working on this assignment about the dataset is that there is a topical dataset directory in the LDC details data frame that serves as a codebook for the topic codes assembled in the edgelist, for future reference.\r\nThe import script has created three objects that represent the network: network_edgelist (a data frame of an edge list and edge attributes), network_igraph (an igraph object), and network_statnet (a network object compatible with statnet packages like sna & ergm).\r\nWith that contextual introduction, I’ll go back to the start, and execute the import script. I also look at the R Documentation to view the detailed information on this data set via: enron {igraphdata}\r\nI load the libraries for statnet, igraph, and igraphdata\r\nNext, I read the data into the environment. This imports the data as an adjacency matrix\r\n\r\n\r\ndata(\"enron\", package = \"igraphdata\")\r\nnetwork_igraph <- enron\r\nrm(enron)\r\n\r\n\r\n\r\nThen, I create the edgelist\r\n\r\n\r\nnetwork_edgelist <- as.data.frame(as_edgelist(network_igraph))\r\n\r\n\r\n\r\nand add edge attributes to the edge list\r\n\r\n\r\nnetwork_edgelist <-cbind(network_edgelist, Time      = E(network_igraph)$Time, \r\n                                               Reciptype = E(network_igraph)$Reciptype, \r\n                                               Topic     = E(network_igraph)$Topic, \r\n                                               LDC_topic = E(network_igraph)$LDC_topic)\r\n\r\n\r\n\r\nThis collects details about the attribute “LDC Details” into a data frame\r\n\r\n\r\nLDC_details <- data.frame(LDC_topic_name = network_igraph$LDC_names, LDC_topic_desc = network_igraph$LDC_desc, LDC_topic = 1:32)\r\n\r\n\r\n\r\nThe data frame can then be added as details to the edge list\r\n\r\n\r\nnetwork_edgelist <- merge(network_edgelist, LDC_details, by = 'LDC_topic', all.x = TRUE)\r\n\r\n\r\n\r\nand then re-ordered within the edge list\r\n\r\n\r\nnetwork_edgelist <- network_edgelist[c(2:5,1,6,7)]\r\n\r\n\r\n\r\nNow I can create a statnet network object from our edge list\r\n\r\n\r\nnetwork_statnet <- network(as.matrix(network_edgelist[1:2]), matrix.type = \"edgelist\", directed = TRUE)\r\n\r\n\r\n\r\nand add attributes to the statnet network object\r\n\r\n\r\nnetwork_statnet%e%'Time' <- as.character(network_edgelist$Time)\r\nnetwork_statnet%e%'Reciptype' <- as.character(network_edgelist$Reciptype)\r\nnetwork_statnet%e%'Topic' <- as.character(network_edgelist$Topic)\r\nnetwork_statnet%e%'LDC_topic' <- as.character(network_edgelist$LDC_topic)\r\nnetwork_statnet%e%'LDC_topic_name' <- as.character(network_edgelist$LDC_topic_name)\r\nnetwork_statnet%e%'LDC_topic_desc' <- as.character(network_edgelist$LDC_topic_desc)\r\n\r\n\r\n\r\nFinally, I can clean up and remove any unnecessary objects if I no longer need the details as a reference, as in this assignment.\r\n\r\n\r\nrm(LDC_details)\r\n\r\n\r\n\r\nNow, I’ll take a first look at the network\r\n\r\n\r\nplot(network_statnet)\r\n\r\n\r\n\r\n\r\nThat’s interesting, but doesn’t tell me much about the network yet except that I may expect to see 2 isolates.\r\nUsing tools to inspect the network data and confirm the objects created through the import script are present\r\n\r\n\r\nls()\r\n\r\n\r\n[1] \"network_edgelist\" \"network_igraph\"   \"network_statnet\" \r\n\r\nI’ll inspect vertices and edges using commands in both igraph and statnet\r\n\r\n\r\nvcount(network_igraph)\r\n\r\n\r\n[1] 184\r\n\r\necount(network_igraph)\r\n\r\n\r\n[1] 125409\r\n\r\nprint(network_statnet) \r\n\r\n\r\n Network attributes:\r\n  vertices = 184 \r\n  directed = TRUE \r\n  hyper = FALSE \r\n  loops = FALSE \r\n  multiple = FALSE \r\n  bipartite = FALSE \r\n  total edges= 3010 \r\n    missing edges= 0 \r\n    non-missing edges= 3010 \r\n\r\n Vertex attribute names: \r\n    vertex.names \r\n\r\n Edge attribute names not shown \r\n\r\nThere is quite a difference between the number of edges in the igraph network (123,409) and the statnet network (3010), which leads me to believe there is something a bit off with the way the data was processed between the two network programs.\r\nLooking at more comparisons in the two network files, I can look at the network features.\r\n\r\n\r\nis_bipartite(network_igraph)\r\n\r\n\r\n[1] FALSE\r\n\r\nis_directed(network_igraph)\r\n\r\n\r\n[1] TRUE\r\n\r\nis_weighted(network_igraph)\r\n\r\n\r\n[1] FALSE\r\n\r\nvertex_attr_names(network_igraph)\r\n\r\n\r\n[1] \"Email\" \"Name\"  \"Note\" \r\n\r\nedge_attr_names(network_igraph)\r\n\r\n\r\n[1] \"Time\"      \"Reciptype\" \"Topic\"     \"LDC_topic\"\r\n\r\nLooking at the same features of the statnet network with the appropriate commands\r\n\r\n\r\nprint(network_statnet)\r\n\r\n\r\n Network attributes:\r\n  vertices = 184 \r\n  directed = TRUE \r\n  hyper = FALSE \r\n  loops = FALSE \r\n  multiple = FALSE \r\n  bipartite = FALSE \r\n  total edges= 3010 \r\n    missing edges= 0 \r\n    non-missing edges= 3010 \r\n\r\n Vertex attribute names: \r\n    vertex.names \r\n\r\n Edge attribute names not shown \r\n\r\nnetwork::list.vertex.attributes(network_statnet)\r\n\r\n\r\n[1] \"na\"           \"vertex.names\"\r\n\r\nnetwork::list.edge.attributes(network_statnet)\r\n\r\n\r\n[1] \"LDC_topic\"      \"LDC_topic_desc\" \"LDC_topic_name\"\r\n[4] \"na\"             \"Reciptype\"      \"Time\"          \r\n[7] \"Topic\"         \r\n\r\nUsing more tools to inspect the network data:\r\n\r\n\r\n#List network attributes: igraph\r\n\r\nigraph::vertex_attr_names(network_igraph)\r\n\r\n\r\n[1] \"Email\" \"Name\"  \"Note\" \r\n\r\nigraph::edge_attr_names(network_igraph)\r\n\r\n\r\n[1] \"Time\"      \"Reciptype\" \"Topic\"     \"LDC_topic\"\r\n\r\n#List network attributes: statnet\r\n\r\nnetwork::list.vertex.attributes(network_statnet)\r\n\r\n\r\n[1] \"na\"           \"vertex.names\"\r\n\r\nnetwork::list.edge.attributes(network_statnet)\r\n\r\n\r\n[1] \"LDC_topic\"      \"LDC_topic_desc\" \"LDC_topic_name\"\r\n[4] \"na\"             \"Reciptype\"      \"Time\"          \r\n[7] \"Topic\"         \r\n\r\nI want to look at specific attribute data. First using igraph\r\n\r\n\r\nhead(V(network_igraph)$Email)\r\n\r\n\r\n[1] \"albert.meyers\" \"a..martin\"     \"andrea.ring\"   \"andrew.lewis\" \r\n[5] \"andy.zipper\"   \"a..shankman\"  \r\n\r\nhead(V(network_igraph)$Name)\r\n\r\n\r\n[1] \"Albert Meyers\"    \"Thomas Martin\"    \"Andrea Ring\"     \r\n[4] \"Andrew Lewis\"     \"Andy Zipper\"      \"Jeffrey Shankman\"\r\n\r\nhead(V(network_igraph)$Note)\r\n\r\n\r\n[1] \"Employee, Specialist\"         \"Vice President\"              \r\n[3] \"NA\"                           \"Director\"                    \r\n[5] \"Vice President, Enron Online\" \"President, Enron Global Mkts\"\r\n\r\nhead(E(network_igraph)$Time)\r\n\r\n\r\n[1] \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\"\r\n[4] \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\"\r\n\r\nhead(E(network_igraph)$Reciptype)\r\n\r\n\r\n[1] \"to\"  \"to\"  \"cc\"  \"cc\"  \"bcc\" \"bcc\"\r\n\r\nhead(E(network_igraph)$Topic)\r\n\r\n\r\n[1] 1 1 3 3 3 3\r\n\r\nhead(E(network_igraph)$LDC_topic)\r\n\r\n\r\n[1]  0 -1 -1 -1 -1 -1\r\n\r\nNext, using statnet\r\n\r\n\r\nhead(network_statnet %v% \"na\")\r\n\r\n\r\n[1] FALSE FALSE FALSE FALSE FALSE FALSE\r\n\r\nnetwork_statnet %v% \"vertex.names\"\r\n\r\n\r\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\r\n [17]  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32\r\n [33]  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48\r\n [49]  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64\r\n [65]  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80\r\n [81]  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96\r\n [97]  97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112\r\n[113] 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128\r\n[129] 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144\r\n[145] 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160\r\n[161] 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176\r\n[177] 177 178 179 180 181 182 183 184\r\n\r\nhead(network_statnet %e% \"LDC_topic\")\r\n\r\n\r\n[1] \"-1\" \"-1\" \"-1\" \"-1\" \"-1\" \"-1\"\r\n\r\nhead(network_statnet %e% \"LDC_topic_desc\")\r\n\r\n\r\n[1] NA NA NA NA NA NA\r\n\r\nhead(network_statnet %e% \"LDC_topic_name\")\r\n\r\n\r\n[1] NA NA NA NA NA NA\r\n\r\nhead(network_statnet %e% \"na\")\r\n\r\n\r\n[1] FALSE FALSE FALSE FALSE FALSE FALSE\r\n\r\nhead(network_statnet %e% \"Reciptype\")\r\n\r\n\r\n[1] \"to\"  \"cc\"  \"cc\"  \"bcc\" \"bcc\" \"to\" \r\n\r\nhead(network_statnet %e% \"Time\")\r\n\r\n\r\n[1] \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\"\r\n[4] \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\"\r\n\r\nhead(network_statnet %e% \"Topic\")\r\n\r\n\r\n[1] \"1\" \"3\" \"3\" \"3\" \"3\" \"3\"\r\n\r\nClearly, there are differences in how the vertices are represented in igraph v. statnet. For example, the anonymized names are node attributes in igraph, but in statnet they are represented by numbers.\r\nNext, I want to look at the dyad census in igraph\r\n\r\n\r\nigraph::dyad.census(network_igraph)\r\n\r\n\r\n$mut\r\n[1] 30600\r\n\r\n$asym\r\n[1] 64208\r\n\r\n$null\r\n[1] -77972\r\n\r\nand in statnet\r\n\r\n\r\nsna::dyad.census(network_statnet)\r\n\r\n\r\n     Mut Asym  Null\r\n[1,] 913 1184 14739\r\n\r\nThe dyad census clearly gives vastly different responses between the two programs, but I am not sure how or why they are represented so differently yet.\r\nNext I’ll look at the triad census in igraph\r\n\r\n\r\nigraph::triad.census(network_igraph)\r\n\r\n\r\n [1] 700234  19530 249694   8409   2695   5176   7060  13227   1180\r\n[10]     59   6781   1023   1137    786   2782   1611\r\n\r\nand in statnet\r\n\r\n\r\nsna::triad.census(network_statnet)\r\n\r\n\r\n        003    012    102 021D 021U 021C 111D  111U 030T 030C  201\r\n[1,] 700234 150250 118974 8409 2695 5176 7060 13227 1180   59 6781\r\n     120D 120U 120C  210  300\r\n[1,] 1023 1137  786 2782 1611\r\n\r\nIf I use the igraph data, the enron network has 184 vertices, so if I want to see if the triad census is working correctly, I want to compare the data:\r\n\r\n\r\n#possible triads in network\r\n184*183*182/6\r\n\r\n\r\n[1] 1021384\r\n\r\nsum(igraph::triad.census(network_igraph))\r\n\r\n\r\n[1] 1021384\r\n\r\nSimilarly, if I use the statnet data, the enron network has 184 vertices, so if I want to see if the triad census is working correctly, I want to compare the data:\r\n\r\n\r\n#possible triads in network\r\n184*183*182/6\r\n\r\n\r\n[1] 1021384\r\n\r\nsum(sna::triad.census(network_statnet))\r\n\r\n\r\n[1] 1021384\r\n\r\nNow I’m getting somewhere! I don’t yet know exactly how the triad census informs my interpretations fully, but I know it is accurately being represented in this area of network analysis.\r\nLooking next at the global transitivity in statnet:\r\n\r\n\r\ngtrans(network_statnet)\r\n\r\n\r\n[1] 0.3580924\r\n\r\nLooking next at the network transitivity in igraph:\r\n\r\n\r\ntransitivity(network_igraph)\r\n\r\n\r\n[1] 0.3725138\r\n\r\nThey are not the same, but not completely out of the realm of reasonable differences given the different algorithms each program uses.\r\nLooking next at the ego transitivity for the employee names that appeared in the header of the igraph node information, but I cannot get the command to run which would give me the local transitivity for specific nodes, for some reason I will need to take more time to explore.\r\n#transitivity(network_igraph, type=“local”, vids=V(network_igraph)[c(“Albert Meyers”, “Thomas Martin:, Andrea Ring”, “Andrew Lewis”, “Andy Zipper”, “Jeffrey Shankman”)])\r\nHowevwer, I can look at global v. average local transitivity\r\n\r\n\r\ntransitivity(network_igraph, type=\"global\")\r\n\r\n\r\n[1] 0.3725138\r\n\r\ntransitivity(network_igraph, type=\"average\")\r\n\r\n\r\n[1] 0.5055302\r\n\r\nThis transitivity tells me that the average network transitivity is significantly higher than the global transitivity, indicating, from my still naive network knowledge, that the overall network is generally more loose, and that there is a more connected sub-network.\r\nLooking at the geodesic distance:\r\n\r\n\r\naverage.path.length(network_igraph,directed=T)\r\n\r\n\r\n[1] 2.390464\r\n\r\nThis tells me that on average, the path length is just over 2.\r\nGetting to look at the components of the network in igraph:\r\n\r\n\r\nnames(igraph::components(network_igraph))\r\n\r\n\r\n[1] \"membership\" \"csize\"      \"no\"        \r\n\r\nigraph::components(network_igraph)$no \r\n\r\n\r\n[1] 3\r\n\r\nigraph::components(network_igraph)$csize\r\n\r\n\r\n[1] 182   1   1\r\n\r\nIt shows that there are 3 components in the network, and 182 of the 182 nodes make up the giant component with 2 isolates.\r\nFinally, I get my answer on isolates.\r\n\r\n\r\nisolates(network_statnet)\r\n\r\n\r\n[1]  72 118\r\n\r\nSince I know that the nodes are Enron employees and they are assigned numbers in the statnet network, running the isolate command tells me that employee #72 and #118 are indeed the 2 isolates viewed in the initial graphic representation of the network.\r\n\r\n\r\n\r\n",
    "preview": "posts/httprpubscomkbecenron/distill-preview.png",
    "last_modified": "2022-02-17T13:44:46-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsnmilsteinumagithubioposts2022-01-31-the-sharpe-ratio/",
    "title": "Initial Network Analysis Florentine Family",
    "description": "Homework 2: Brief Analysis of the Florentine Family Set",
    "author": [
      {
        "name": "Noah Milstein",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\n\n\n\n\n\n\nChosen Network:\nThe Network I chose was the Florentine family dataset network from the network package. This dataset represents marriages between influential families in Florence. Each node represents a family with arrows indicating which family married into which other family.\nNetwork Size:\nNetwork size for the Florentine Family network dataset is described briefly by the code below:\n\n\nset.seed(2)\n# I access the florentine families dataset through the package \"network\"\n\ndata(flo, package=\"network\")\n\n# In order to make the dataset usable I make it into a matrix using as.matrix()\n\nmatrix_florentine <- as.matrix(flo) \n\n# Next I used the graph.adjacency command to make the florentine dataset into\n# An Adjacency Matrix \n\nflorentine<- graph.adjacency(flo, mode=\"directed\", weighted=NULL)\n\nplot(florentine, vertex.color=\"skyblue1\", vertex.label.color=\"navy\", \n     vertex.label.dist=1, vertex.size=7,  edge.arrow.size=0.5, margin=0000)\n\n\n\n\n\n\nvcount(florentine)\n\n\n[1] 16\n\necount(florentine)\n\n\n[1] 40\n\n\n\nstatted_florentine<-as.network(matrix_florentine)\nprint(statted_florentine)\n\n\n Network attributes:\n  vertices = 16 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 40 \n    missing edges= 0 \n    non-missing edges= 40 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nThe number of vertices in the dataset is 16, in this case these nodes each represent a florentine family. Te number of edges is 40. In this instance ties or edges, represent marriages between these influential families. The is the same in both the statnet and igraph outputs.\nNetwork Features\nNext the features of the dataset are described using the 3 commands in the code chunk below.\n\n\nis_bipartite(florentine)\n\n\n[1] FALSE\n\nis_directed(florentine)\n\n\n[1] TRUE\n\nis_weighted(florentine)\n\n\n[1] FALSE\n\nThese results suggests that the florentine family dataset is not bipartite, which would indicate that they do not fall into to sets. In addition the dataset’s ties are directed do they flow in directions as a result of which family is marrying to which, and the ties are unweighted because marriage cannot vary in numerican significance, it is simply a category that is either true or false between families.\n\n\nvertex_attr_names(florentine)\n\n\n[1] \"name\"\n\nedge_attr_names(florentine)\n\n\ncharacter(0)\n\n\n\nnetwork::list.vertex.attributes(statted_florentine)\n\n\n[1] \"na\"           \"vertex.names\"\n\nnetwork::list.edge.attributes(statted_florentine)\n\n\n[1] \"na\"\n\nThe vector attribute names are the names of the florentine families.\nThe edge attributes do not have name.\nDyad and Triad Census\nDyads\n\n\nigraph::dyad.census(florentine)\n\n\n$mut\n[1] 20\n\n$asym\n[1] 0\n\n$null\n[1] 100\n\n\n\nsna::dyad.census(statted_florentine)\n\n\n     Mut Asym Null\n[1,]  20    0  100\n\nThe dyad census indicates that amongest that among the dyad ties, being between 2 families, 20 are mutual and none are asymptotic. In addition 100 of the dyad are null, or not connected.\nTriads\n\n\nigraph::triad_census(florentine)\n\n\n [1] 324   0 195   0   0   0   0   0   0   0  38   0   0   0   0   3\n\n?triad_census(florentine)\n\n\n\n\n\nsna::triad.census(statted_florentine, mode=\"graph\")\n\n\n       0   1  2 3\n[1,] 324 195 38 3\n\n\n\nsum(sna::triad.census(statted_florentine, mode=\"graph\"))\n\n\n[1] 560\n\nFor dyads there are 16 possibilities. Here our results are as follows:\n324, 003 (A,B,C, the empty graph.)\n195, 102 (A<->B, C, the graph with a mutual connection between two vertices.)\nboth of which are vacuously transitive\n38, 030C (A<-B<-C, A->C.)\n3, 300 (A<->B<->C, A<->C, the complete graph.)\nwhich are both transitive\nBoth statnet and igraph confirm this, however igraph specifies the exact instances of each type of connection.\nNetwork Transitivity\n\n\ntransitivity(florentine, type=\"global\")\n\n\n[1] 0.1914894\n\nThe global transitivity of the graph is 0.1914894 which is the ratio of triangles to connected triangles.\n\n\ntransitivity(florentine, type=\"average\")\n\n\n[1] 0.2181818\n\nThe average transitivity is the average transitivity of local triad clusters. Here it is 0.2181818. This is the ratio of local triangles to all connected triangles.\n\n\ngtrans(statted_florentine)\n\n\n[1] 0.1914894\n\nStatnet code confirms this transitivity assessment.\n\n\nV(florentine)[c(\"Peruzzi\",\"Lamberteschi\", \"Ginori\")]\n\n\n+ 3/16 vertices, named, from e7ac6d4:\n[1] Peruzzi      Lamberteschi Ginori      \n\nNetwork Distances\nFirst we see that the average path length between 2 nodes in our dataset is 2.485714\n\n\naverage.path.length(florentine,directed=F)\n\n\n[1] 2.485714\n\nI then test the distances between 3 families, those being the Peruzzi, Lamberteschi, and Ginori\n\n\ndistances(florentine,\"Peruzzi\", \"Lamberteschi\")\n\n\n        Lamberteschi\nPeruzzi            3\n\nThe distance between the nodes of Peruzzi and Lamberteschi is 3\n\n\ndistances(florentine,\"Peruzzi\", \"Ginori\")\n\n\n        Ginori\nPeruzzi      4\n\nThe distance between the nodes of Peruzzi and Ginori is 4\n\n\ndistances(florentine,\"Lamberteschi\",\"Ginori\")\n\n\n             Ginori\nLamberteschi      3\n\nThe distance between the nodes of Lamberteschi and Ginori is 3.\n\n\nisolates(statted_florentine)\n\n\n[1] 12\n\nThe names of all families in our dataset is as follows:\n\n\nas.vector(statted_florentine%v%'vertex.names')\n\n\n [1] \"Acciaiuoli\"   \"Albizzi\"      \"Barbadori\"    \"Bischeri\"    \n [5] \"Castellani\"   \"Ginori\"       \"Guadagni\"     \"Lamberteschi\"\n [9] \"Medici\"       \"Pazzi\"        \"Peruzzi\"      \"Pucci\"       \n[13] \"Ridolfi\"      \"Salviati\"     \"Strozzi\"      \"Tornabuoni\"  \n\nThe names of the isolated influential families is as follows below:\n\n\nas.vector(statted_florentine%v%'vertex.names')[c(isolates(statted_florentine))]\n\n\n[1] \"Pucci\"\n\n\n\n\n",
    "preview": "posts/httpsnmilsteinumagithubioposts2022-01-31-the-sharpe-ratio/Homework_2_Noah_Milstein_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2022-02-17T13:44:37-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsnmilsteinumagithubioposts2022-02-07-florentine-families-week-3-assignment/",
    "title": "Florentine Families Week 3 Assignment",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Noah Milstein",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\n\n\n\n\n\nset.seed(1)\ncanvas_flow(colors = colorPalette(\"vrolik3\"), lines = 3000, lwd = 0.5,\n            iterations = 1000, stepmax = 0.1, angles = 'svm')\n\n\n\n# see ?canvas_flow for more input parameters of this function\n\n\n\nData Description:\n\n\ndata(flo, package=\"network\")\n\n\nstatted_florentine<-as.network(flo)\n\nprint(statted_florentine)\n\n\n Network attributes:\n  vertices = 16 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 40 \n    missing edges= 0 \n    non-missing edges= 40 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\n\n\nplot(statted_florentine)\n\n\n\n\nNodes and Edges:\nAs can be seen from the graph and summary statistics above the florentine family dataset is made up of 40 edges and 16 vertices. Each vertex or node is a family in florence. Each edge, or tie represents a marriage between the two.\nAs a result the ties are not weighted, so they are binary. However, though the dataset labels the ties are directed, they are actually all mutual so in essence, the dataset does not measure marriaage “into” a family but simply uses a mutual directed tie for every set of families with a marriage between them.\n\n\nsna::dyad.census(statted_florentine)\n\n\n     Mut Asym Null\n[1,]  20    0  100\n\nAs can be seen from the code above the dyads within the dataset are either mutual or null, meaning that between any two nodes there are no asymmetric dyads despite the fact that the network is labeled as being directed.\n\n\nsna::triad.census(statted_florentine)\n\n\n     003 012 102 021D 021U 021C 111D 111U 030T 030C 201 120D 120U\n[1,] 324   0 195    0    0    0    0    0    0    0  38    0    0\n     120C 210 300\n[1,]    0   0   3\n\nAs can be seen from the triad census above the types of triads in the dataset are 324 of the 003-type, 102 of the 102-type, 38 of the 201-type and 3 of the 300-type. The 324 of 003-type and 195 of the 102-type indicate that 519 of the 560 triads are vacuously transitive, the remaining 38 of the 201-type are intransitive and only the 3 300-types are transitive\nTransitivity\nAs can be seen in the code below indicates the the transitivity of the network as a whole is 0.1914894, which follows from the results above. This would indicate a relatively low rate of transitivity and thus low inter-connectedness of the nodes and potientally lower density overall.\n\n\ngtrans(statted_florentine)\n\n\n[1] 0.1914894\n\nIsolates\nThough the code below indicates that there are 12 isolates in the network, the data from our plot suggests that this is likely untrue and due to the discrepancy between the un-directed true nature of the network and its label as directed as a network object.\n\n\nisolates(statted_florentine)\n\n\n[1] 12\n\nDensity\nAs indicated by the code chunk below network density here is 0.1666667 indicating that only 16.67% of possible ties in the network are made.\n\n\nnetwork.density(statted_florentine)\n\n\n[1] 0.1666667\n\nDegree and Interesting Results\nEach of the 16 node’s degrees are acquired from the code bellow in integer form, from the digits alone it is difficult to distinguish any sort of overall pattern in the data.\n\n\nsna::degree(statted_florentine)\n\n\n [1]  2  6  4  6  6  2  8  2 12  2  6  0  6  4  8  6\n\nBelow I create a data frame with the overall degree of each family.\n\n\nflorentine.nodes<-data.frame(name=statted_florentine%v%\"vertex.names\",\n                             degree=sna::degree(statted_florentine))\nflorentine.nodes\n\n\n           name degree\n1    Acciaiuoli      2\n2       Albizzi      6\n3     Barbadori      4\n4      Bischeri      6\n5    Castellani      6\n6        Ginori      2\n7      Guadagni      8\n8  Lamberteschi      2\n9        Medici     12\n10        Pazzi      2\n11      Peruzzi      6\n12        Pucci      0\n13      Ridolfi      6\n14     Salviati      4\n15      Strozzi      8\n16   Tornabuoni      6\n\nBelow I then calculate each individual nodes indegree and out-degree.\nNotewory Results\nUpon running the above code I realized that despite the network being labeled “directed” all of its ties were actually mutual and thus the in-degree and out-degree would be identical since marriage is considered mutual. Though this follows from the fact that are generally considered mutual it is interesting to observe that marriages are not considered “into” another family but are represented as a mutual, but directed ties between nodes in every case.\n\n\nsna::degree(statted_florentine, cmode=\"indegree\")\n\n\n [1] 1 3 2 3 3 1 4 1 6 1 3 0 3 2 4 3\n\nsna::degree(statted_florentine, cmode=\"outdegree\")\n\n\n [1] 1 3 2 3 3 1 4 1 6 1 3 0 3 2 4 3\n\nAs can be seen from the code above each node has identical in-degrees and out-degrees\n\n\nflorentine.nodes <- data.frame(name=statted_florentine%v%\"vertex.names\",\n    totdegree=sna::degree(statted_florentine),\n    indegree=sna::degree(statted_florentine, cmode=\"indegree\"),\n    outdegree=sna::degree(statted_florentine, cmode=\"outdegree\"))\n\nflorentine.nodes\n\n\n           name totdegree indegree outdegree\n1    Acciaiuoli         2        1         1\n2       Albizzi         6        3         3\n3     Barbadori         4        2         2\n4      Bischeri         6        3         3\n5    Castellani         6        3         3\n6        Ginori         2        1         1\n7      Guadagni         8        4         4\n8  Lamberteschi         2        1         1\n9        Medici        12        6         6\n10        Pazzi         2        1         1\n11      Peruzzi         6        3         3\n12        Pucci         0        0         0\n13      Ridolfi         6        3         3\n14     Salviati         4        2         2\n15      Strozzi         8        4         4\n16   Tornabuoni         6        3         3\n\nThe notion is confirmed by the degree summaries in the code below and the table above. In both cases all indicators are identical for both in-degree and out-degree and sum to the values seen in the total-degree column.\n\n\nsummary(florentine.nodes)\n\n\n     name             totdegree     indegree     outdegree  \n Length:16          Min.   : 0   Min.   :0.0   Min.   :0.0  \n Class :character   1st Qu.: 2   1st Qu.:1.0   1st Qu.:1.0  \n Mode  :character   Median : 6   Median :3.0   Median :3.0  \n                    Mean   : 5   Mean   :2.5   Mean   :2.5  \n                    3rd Qu.: 6   3rd Qu.:3.0   3rd Qu.:3.0  \n                    Max.   :12   Max.   :6.0   Max.   :6.0  \n\nHistograms of the distribution of the degrees also illustrate that the only difference between in-degree, out-degree, and total degree is that total degree has values twice as large for marriages but the same relative frequency.\n\n\nhist(florentine.nodes$totdegree, main=\"Florentine Marriages: Total Degrees\", xlab=\"Marriages\")\n\n\n\n\n\n\nhist(florentine.nodes$indegree, main=\"Florentine Marriages: In-Degrees\", xlab=\"Marriages\")\n\n\n\n\n\n\nhist(florentine.nodes$outdegree, main=\"Florentine Marriages: Out-Degrees\", xlab=\"Marriages\")\n\n\n\n\nThese results do make degree analysis ineffectual on the dataset, but offer some potential questions. Specifically it would be useful to look at dynamics of marriages “into” other families as this would have been important at the time. Though marriage is considered symmetric in this dataset it was often used in asymmetric ways during the medieval and renaissance times as a means of diplomacy and establishing goodwill between nobility and as a result the ties between the families are not necessarily symmetric in all cases. It would be interesting to see married into what families in terms of sex and birth status hierarchy i.e. first, second, third born, etc.\n\n\nflo_sorted_by_total_degree<-florentine.nodes[order(-florentine.nodes$totdegree),]\n\nflo_sorted_by_total_degree\n\n\n           name totdegree indegree outdegree\n9        Medici        12        6         6\n7      Guadagni         8        4         4\n15      Strozzi         8        4         4\n2       Albizzi         6        3         3\n4      Bischeri         6        3         3\n5    Castellani         6        3         3\n11      Peruzzi         6        3         3\n13      Ridolfi         6        3         3\n16   Tornabuoni         6        3         3\n3     Barbadori         4        2         2\n14     Salviati         4        2         2\n1    Acciaiuoli         2        1         1\n6        Ginori         2        1         1\n8  Lamberteschi         2        1         1\n10        Pazzi         2        1         1\n12        Pucci         0        0         0\n\nThe results above indicate that the medici family are the most “central” node in the network having the most marriages and thus the most in-degrees and out-degrees. The mean of these two degrees is 2.5 in the dataset thus they have more than double the average marriages, however 4 other families have just 2, while the pucci’s have no ties.\nThis also poses the question as to whether or not there are more families that could be included and what the criteria was for allowance in the florentine family data. In this case 4-6 marriages is the most common with 6 nodes having 4-6 marriages.\nThe least central are the Pucci family who are included in the dataset but have no edges or connections to others families by marriage. The Acciaiuoli, Ginori, Lamberteschi, and Pazzi all have 2 total ties, one in and one out representing a single marriage.\n\n\ncentralization(statted_florentine, degree, cmode=\"indegree\")\n\n\n[1] 0.2488889\n\nThe measure of centralization above represents how concentrated edges between nodes are concentrated among actors. He centralization is slightly less than 25% which would indicate that concentration is relatively low this follows from the low transitivity of the network as a whole, there very few actual connections as compared to the possible connections. As a result of these findings it appears as if the network is not extremely centralized with most families having 2-3 marriages with the largest only being 6. The network also has a low level of transitivity as most nodes are not connected to one another.\nHowever it is important to note that we do not know aspects certain aspects of the families that are relevant to understanding the extent of the network’s true connectivity, this could be heirs with ties to both families marriages and the number of marriages between families that happened out of the possible number afforded to each family by their number of heirs. Having family tree measurements would allow for more meaningful analysis that could make the network truly directed by seeing who married into what family and what they represented to their families in terms of succession including their effects in creating prior generations that continued these connections.\n\n\n\n",
    "preview": "posts/httpsnmilsteinumagithubioposts2022-02-07-florentine-families-week-3-assignment/florentine-families-week-3-assignment_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2022-02-17T13:45:19-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsnmilsteinumagithubioposts2022-02-10-workwithmedievalnetworks/",
    "title": "Work with Medieval Networks",
    "description": "A Brief Analysis of Networks of Medieval Conflict.",
    "author": [
      {
        "name": "Noah Milstein",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\n\n\n\n\n\n\nBriefly Describe the Dataset You Are Using:\nQuestion: Identify initial network format\n\n\n\nNetwork Structure: Wars Startings in the 1000s\n\n Network attributes:\n  vertices = 117 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 153 \n    missing edges= 0 \n    non-missing edges= 153 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nNetwork Structure: Wars Startings in the 1100s\n\n Network attributes:\n  vertices = 78 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 225 \n    missing edges= 0 \n    non-missing edges= 225 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nNetwork Structure: Wars Startings in the 1200s\n\n Network attributes:\n  vertices = 161 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 313 \n    missing edges= 0 \n    non-missing edges= 313 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nQuestion: Describe and identify the nodes (including how many nodes are in the dataset)\nAnswer: Nodes or vertices in these datasets represent belligerents in wars throughout history, the involved parties in each conflict can be a nation, province, individual, or group so long as they are listed as involved in the conflict.\nQuestion: What constitutes a tie or edge (including how many ties, whether ties are directed/undirected and weighted/binary, and how to interpret the value of the tie if any)\nAnswer: A tie or edge in this dataset represents a war, this war can be between two nations or groups within a nation. These edges can represent a war that involved many more nations but are always tied to each and every party involved on both sides. These edges are directed and the direction indicates which side “won” the conflict.\nQuestion: Whether or not there are edge attributes that might be used to subset data or stack multiple networks (e.g., tie type, year, etc).\nAnswer: There are a number of attributes that could be used to subset the data, years that the conflict began or the length of time it lasted are available. Aspects like each side’s religion and the area where the conflict took place.\nCloseness Betweeness and Eigenvector Centrality\nQuestion: Calculate closeness, betweenness and eigenvector centrality measures for your network data, and bonachic-power if possible. Compare these measures to basic degree centrality measures. Try to interpret the results. Are there any interesting patterns in the distribution of measures or correlations between them that provide insight into the measures?\nCentralization: Wars Startings in the 1000s\n\nname\ntotdegree\nindegree\noutdegree\neigen\nCounty of Apulia\n7\n0\n7\n0.000000\nCounty of Aversa\n5\n0\n5\n0.000000\nKingdom of Sicily\n8\n3\n5\n0.000000\nGhaznavids\n2\n0\n2\n0.000000\nKingdom of Poland\n1\n0\n1\n0.182744\nKingdom of Hungary\n3\n0\n3\n0.000000\n\n\n\n\n\n\ncentralization(wars_in_1000s_network, degree, cmode=\"outdegree\") %>% kable()\n\n\nx\n0.1016647\n\ncentralization(wars_in_1000s_network, degree, cmode=\"indegree\") %>% kable()\n\n\nx\n0.0494946\n\ncentralization(wars_in_1000s_network, degree) %>% kable()\n\n\nx\n0.0674663\n\nAs can be seen above I have coded measures of indegree, outdegree, and total centralization in the wars in the 1000s dataset.\nCentralization: Wars Startings in the 1100s\n\nname\ntotdegree\nindegree\noutdegree\neigen\nSultanate of Rum\n23\n0\n23\n0.2893116\nDanishmends\n13\n0\n13\n0.0690251\nSeljuk Emirate of Aleppo\n13\n0\n13\n0.0690251\nKingdom of Jerusalem\n23\n11\n12\n0.5378974\nFatimids of Egypt\n1\n0\n1\n0.0973860\nKingdom of Norway\n4\n0\n4\n0.0398827\n\n\n\n\n\n\ncentralization(wars_in_1100s_network, degree, cmode=\"outdegree\") %>% kable()\n\n\nx\n0.2646315\n\ncentralization(wars_in_1100s_network, degree, cmode=\"indegree\") %>% kable()\n\n\nx\n0.1593861\n\ncentralization(wars_in_1100s_network, degree) %>% kable()\n\n\nx\n0.1148325\n\nI do the same above and calculate measures of indegree, outdegree, and total centralization in the wars in the 1100s dataset.\nCentralization: Wars Startings in the 1200s\n\nname\ntotdegree\nindegree\noutdegree\neigen\nForces of Bohemond IV of Antioch\n3\n0\n3\n0.0000000\nKnights Templar\n22\n3\n19\n0.4663665\nAyyubid Emirate of Aleppo\n3\n0\n3\n0.0000000\nKingdom of Jerusalem\n3\n0\n3\n0.0000000\nSultanate of Rum\n3\n0\n3\n0.0000000\nHoly Roman Empire\n11\n6\n5\n0.1770181\n\n\n\n\n\n\ncentralization(wars_in_1200s_network, degree, cmode=\"outdegree\") %>% kable()\n\n\nx\n0.2016016\n\ncentralization(wars_in_1200s_network, degree, cmode=\"indegree\") %>% kable()\n\n\nx\n0.0758203\n\ncentralization(wars_in_1200s_network, degree) %>% kable()\n\n\nx\n0.1174332\n\nFinally I calculate measures of indegree, outdegree, and total centralization in the wars in the 1200s dataset.\nEigenvector Centralization\nQuestion: You may also want to identify whether the same node(s) are more/less central using the different measures, and see if you can find any patterns in the results based on which nodes are high/low on each measures. Discuss (with any related evidence) whether or not the node(s) behavior is in line with or violates expectations based on the degree centrality measure, comparing across those measures using a data frame similar to that constructed in the syntax. Be sure to share your assignment with group members for comments.\n\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nByzantine Empire\n18\n5\n13\n0.478430\n0.3571429\n0.1708679\n0.6428571\n0.3075621\nHoly Roman Empire\n15\n2\n13\n0.295686\n1.0000000\n0.2956860\n0.0000000\n0.0000000\nMirdasid Emirate of Aleppo\n1\n0\n1\n0.295686\n0.0000000\n0.0000000\n1.0000000\n0.2956860\nKingdom of Georgia\n5\n1\n4\n0.295686\n0.0769231\n0.0227451\n0.9230769\n0.2729409\nDuklja\n1\n0\n1\n0.295686\n0.0000000\n0.0000000\n1.0000000\n0.2956860\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nKingdom of Jerusalem\n23\n11\n12\n0.5378974\n0.2980769\n0.1603348\n0.7019231\n0.3775626\nAyyubid Dynasty\n18\n10\n8\n0.5188525\n0.3200000\n0.1660328\n0.6800000\n0.3528197\nSultanate of Rum\n23\n0\n23\n0.2893116\n0.0000000\n0.0000000\n1.0000000\n0.2893116\nHoly Roman Empire\n12\n8\n4\n0.2303733\n0.0892857\n0.0205690\n0.9107143\n0.2098042\nAlmoravid Dynasty\n10\n0\n10\n0.2202864\n0.0000000\n0.0000000\n1.0000000\n0.2202864\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nKnights Templar\n22\n3\n19\n0.4663665\n0.1428571\n0.0666238\n0.8571429\n0.3997427\nAyyubid Dynasty\n23\n9\n14\n0.4263748\n0.1046512\n0.0446206\n0.8953488\n0.3817542\nBahris\n7\n0\n7\n0.2911519\n0.0000000\n0.0000000\n1.0000000\n0.2911519\nRepublic of Genoa\n18\n5\n13\n0.2880895\n0.1428571\n0.0411556\n0.8571429\n0.2469339\nMongol Empire\n41\n7\n34\n0.2228895\n0.1206897\n0.0269005\n0.8793103\n0.1959891\n\nAnswer: Looking at the outputs above we see that regular eigenvector centrality, which accounts for the centrality of nodes attached to our node of interest. Here we see the top 5 highest observations in each dataset, in the 1000s the Byzantine Empire has the highest war, which is logical historically as they represented a bridge between major fighting factions in the Crusades between the Muslim Middle East and European west. The Kingdom of Jerusalem in the 1100s would also be connected, through its wars to other important powers being contested territory between Muslim empires like the Ayyubid Dynasty and crusading states like the Holy Roman Empire.\n\n\narrange(wars_in_1000s.nodes.stat, desc(eigen.rc\n))%>%\n  slice(1:5) %>% kable()\n\n\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nHoly Roman Empire\n15\n2\n13\n0.295686\n1.0000000\n0.2956860\n0.0000000\n0.0000000\nByzantine Empire\n18\n5\n13\n0.478430\n0.3571429\n0.1708679\n0.6428571\n0.3075621\nSultanate of Rum\n11\n7\n4\n0.295686\n0.1186441\n0.0350814\n0.8813559\n0.2606046\nKingdom of Georgia\n5\n1\n4\n0.295686\n0.0769231\n0.0227451\n0.9230769\n0.2729409\nKingdom of France\n10\n3\n7\n0.182744\n0.1034483\n0.0189046\n0.8965517\n0.1638394\n\narrange(wars_in_1100s.nodes.stat, desc(eigen.rc\n))%>%\n  slice(1:5) %>% kable()\n\n\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nAyyubid Dynasty\n18\n10\n8\n0.5188525\n0.3200000\n0.1660328\n0.6800000\n0.3528197\nKingdom of Jerusalem\n23\n11\n12\n0.5378974\n0.2980769\n0.1603348\n0.7019231\n0.3775626\nFatimid Caliphate\n17\n7\n10\n0.2202864\n0.2884615\n0.0635442\n0.7115385\n0.1567423\nZengid Dynasty\n16\n6\n10\n0.2202864\n0.1714286\n0.0377634\n0.8285714\n0.1825230\nRepublic of Venice\n6\n1\n5\n0.0797655\n0.3333333\n0.0265885\n0.6666667\n0.0531770\n\narrange(wars_in_1200s.nodes.stat, desc(eigen.rc\n))%>%\n  slice(1:5) %>% kable()\n\n\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nKnights Templar\n22\n3\n19\n0.4663665\n0.1428571\n0.0666238\n0.8571429\n0.3997427\nAyyubid Dynasty\n23\n9\n14\n0.4263748\n0.1046512\n0.0446206\n0.8953488\n0.3817542\nRepublic of Genoa\n18\n5\n13\n0.2880895\n0.1428571\n0.0411556\n0.8571429\n0.2469339\nKingdom of Cyprus\n11\n4\n7\n0.2025283\n0.1428571\n0.0289326\n0.8571429\n0.1735957\nMongol Empire\n41\n7\n34\n0.2228895\n0.1206897\n0.0269005\n0.8793103\n0.1959891\n\nAnswer: Reflected centrality represents the centrality one nation receives from another another that is attributable to the first nations contribution to the other nations score. Looking at reflected centrality through wars we see relatively similar trends. In the 1000s the Holy Roman Empire and Byzantine Empire play a distinct role in the crusades so in this case we see how central a nation is in conflict dependent on how much centrality they contribute to a nation they have a conflict with. Being focal points in the center of Europe in the case of the HRE and the focal point of Christian, Muslim conflict in the case of the Byzantine empire. For both fighting minor nations gives the two a great deal of centrality to other, potentially less central groups that they fight. The Ayyubids and Kingdom of Jerusalem that each occupy a central position in conflict. Into the 1200s the Knights Templar and Ayyubids occupy this position.\n\n\narrange(wars_in_1000s.nodes.stat, desc(eigen.dc\n\n))%>%\n  slice(1:5) %>% kable()\n\n\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nByzantine Empire\n18\n5\n13\n0.478430\n0.3571429\n0.1708679\n0.6428571\n0.3075621\nMirdasid Emirate of Aleppo\n1\n0\n1\n0.295686\n0.0000000\n0.0000000\n1.0000000\n0.2956860\nDuklja\n1\n0\n1\n0.295686\n0.0000000\n0.0000000\n1.0000000\n0.2956860\nGreat Seljuq Empire\n4\n0\n4\n0.295686\n0.0000000\n0.0000000\n1.0000000\n0.2956860\nKingdom of Georgia\n5\n1\n4\n0.295686\n0.0769231\n0.0227451\n0.9230769\n0.2729409\n\narrange(wars_in_1100s.nodes.stat, desc(eigen.dc\n\n))%>%\n  slice(1:5) %>% kable()\n\n\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nKingdom of Jerusalem\n23\n11\n12\n0.5378974\n0.2980769\n0.1603348\n0.7019231\n0.3775626\nAyyubid Dynasty\n18\n10\n8\n0.5188525\n0.3200000\n0.1660328\n0.6800000\n0.3528197\nSultanate of Rum\n23\n0\n23\n0.2893116\n0.0000000\n0.0000000\n1.0000000\n0.2893116\nAlmoravid Dynasty\n10\n0\n10\n0.2202864\n0.0000000\n0.0000000\n1.0000000\n0.2202864\nAbbasid Caliphate\n10\n0\n10\n0.2202864\n0.0000000\n0.0000000\n1.0000000\n0.2202864\n\narrange(wars_in_1200s.nodes.stat, desc(eigen.dc\n\n))%>%\n  slice(1:5) %>% kable()\n\n\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nKnights Templar\n22\n3\n19\n0.4663665\n0.1428571\n0.0666238\n0.8571429\n0.3997427\nAyyubid Dynasty\n23\n9\n14\n0.4263748\n0.1046512\n0.0446206\n0.8953488\n0.3817542\nBahris\n7\n0\n7\n0.2911519\n0.0000000\n0.0000000\n1.0000000\n0.2911519\nRepublic of Genoa\n18\n5\n13\n0.2880895\n0.1428571\n0.0411556\n0.8571429\n0.2469339\nAnti-Imperial faction\n7\n0\n7\n0.2025283\n0.0000000\n0.0000000\n1.0000000\n0.2025283\n\nAnswer: Finally Derived Centrality measures the centrality a nation receives from fighting another nation that is not a reflection of the first nation’s contribution of centrality to the others. Here the Byzantine Empire remains one of the largest, potentially suggesting their status as a cosmopolitan being high in both derived and reflected centrality. However, nations like the Mirdasid Emirate of Aleppo have little to no reflected centrality by high derived centrality suggesting that they are are a pure bridge.\n\n\nwars_in_1000s.nodes<-data.frame(name=V(wars_in_1000s.ig)$name,\n    totdegree=igraph::degree(wars_in_1000s.ig, loops=FALSE),\n    indegree=igraph::degree(wars_in_1000s.ig, mode=\"in\", loops=FALSE),\n    outdegree=igraph::degree(wars_in_1000s.ig, mode=\"out\", loops=FALSE))\n\nwars_in_1100s.nodes<-data.frame(name=V(wars_in_1100s.ig)$name,\n    totdegree=igraph::degree(wars_in_1100s.ig, loops=FALSE),\n    indegree=igraph::degree(wars_in_1100s.ig, mode=\"in\", loops=FALSE),\n    outdegree=igraph::degree(wars_in_1100s.ig, mode=\"out\", loops=FALSE))\n\nwars_in_1200s.nodes<-data.frame(name=V(wars_in_1200s.ig)$name,\n    totdegree=igraph::degree(wars_in_1200s.ig, loops=FALSE),\n    indegree=igraph::degree(wars_in_1200s.ig, mode=\"in\", loops=FALSE),\n    outdegree=igraph::degree(wars_in_1200s.ig, mode=\"out\", loops=FALSE))\n\neigen_cent_wars_in_1000s<-centr_eigen(wars_in_1000s.ig,directed=T)\n\neigen_cent_wars_in_1100s<-centr_eigen(wars_in_1100s.ig,directed=T)\n\neigen_cent_wars_in_1200s<-centr_eigen(wars_in_1200s.ig,directed=T)\n\n\n\nSome Attempts at Visualization\nGraph 1:\nExplanation: Below I have graphed the network for the 1000s dataset using base plot and an edgelist\n\n\nplot(wars_in_1000s_edgelist_network_edgelist, vertex.size=2,  edge.arrow.size=.2, vertex.color=\"gold\", vertex.size=20, vertex.frame.color=\"gray\", vertex.label.color=\"black\", vertex.label.cex=0.25, vertex.label.dist=2, edge.curved=0.2)\n\n\n\n\nGraph 2:\nExplanation: Next I used the igraph network object and graphed it using the automatic, proportional clustering.\n\n\n\nGraph 3:\nExplanation: Finally I used the ggplot network and graphed it using a generic network object. This order follows for the visualization of the 1100s datasets and 1200s.\n\n\n\nGraph 4:\n\n\nplot(wars_in_1100s_edgelist_network_edgelist, vertex.size=2,  edge.arrow.size=.2, vertex.color=\"gold\", vertex.size=20, vertex.frame.color=\"gray\", vertex.label.color=\"black\", vertex.label.cex=0.25, vertex.label.dist=2, edge.curved=0.2)\n\n\n\n\nGraph 5:\n\n\n\nGraph 6:\n\n\n\nGraph 7:\n\n\nplot(wars_in_1200s_edgelist_network_edgelist, vertex.size=2,  edge.arrow.size=.2, vertex.color=\"gold\", vertex.size=20, vertex.frame.color=\"gray\", vertex.label.color=\"black\", vertex.label.cex=0.25, vertex.label.dist=2, edge.curved=0.2)\n\n\n\n\nGraph 8:\n\n\n\nGraph 9:\n\n\n\n\n$mut\n[1] 3\n\n$asym\n[1] 147\n\n$null\n[1] 6636\n\n\n [1] 243974  14792    744    288    149    129     11     28     13\n[10]      0      1      0      0      1      0      0\n\n\n[1] 0.06481481\n[1] 0.0774983\n[1] 0.093224\n\n\n[1] 0.01117686\n[1] 0.03698225\n[1] 0.01207515\n\n\n     name               degree      \n Length:117         Min.   : 1.000  \n Class :character   1st Qu.: 1.000  \n Mode  :character   Median : 1.000  \n                    Mean   : 2.615  \n                    3rd Qu.: 3.000  \n                    Max.   :18.000  \n\n\n                name degree\n15  Byzantine Empire     18\n25 Holy Roman Empire     15\n28  Sultanate of Rum     11\n47 Kingdom of France     10\n29  County of Sicily      9\n34           England      9\n\n\n     name               degree      \n Length:117         Min.   : 1.000  \n Class :character   1st Qu.: 1.000  \n Mode  :character   Median : 1.000  \n                    Mean   : 2.615  \n                    3rd Qu.: 3.000  \n                    Max.   :18.000  \n\n\n\n\n",
    "preview": "posts/httpsnmilsteinumagithubioposts2022-02-10-workwithmedievalnetworks/workwithmedievalnetworks_files/figure-html5/unnamed-chunk-20-1.png",
    "last_modified": "2022-02-17T13:45:57-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsrpubscomak64823865458/",
    "title": "The Human Disease Taana Baana",
    "description": "Gene to Gene Network Analysis (bird's eye view)",
    "author": [
      {
        "name": "Abhinav Kumar",
        "url": "https://www.linkedin.com/in/abhinavkumar2603/"
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\r\nData Description\r\nThis is a gene disease dataset set. This has been published by Carlos Castillo, a computer scientist based out o Barcelona Spain.The dataset has been used to teach network analysis to students at the university. The dataset was a result of the research conducted by Goh, K. I., Cusick, M. E., Valle, D., Childs, B., Vidal, M., & Barabási, A. L. (2007). “The human disease network”. Proceedings of the National Academy of Sciences, 104(21), 8685-8690. (https://doi.org/10.1073/pnas.0701361104). The effort here is to understand that many diseases may have common genetic origin. Hence, we want to find out which are those genes that may be connected by common among disorders. Therefore, here we will look Gene to Gene network. Below are the features of the data set:\r\nDisorder ID\r\nDisorder Name\r\nComma-separated list of Genes\r\nThe OMIM ID (Online Mendelian Inheritance in Man) of this disorder\r\nThe location in the Chromosome\r\nA disorder Class indicating the physiological system that is affected\r\nWe will only use the below two features:\r\nDisorder Name\r\nComma-separated list of Genes\r\nUsing these two features a bi-partite adjacency matrix will be created which then will be converted to one to one mode (Gene to Gene) by matrix operation. The disorder name would be pivoted in the data set to get the bi-partite matrix in place.\r\n\r\n\r\nlibrary(readr)\r\n\r\nurlfile = (\"https://raw.githubusercontent.com/chatox/networks-science-course/master/practicum/data/disease-genes.csv\")\r\n\r\ngeny = read_csv(url(urlfile))\r\nhead(geny)\r\n\r\n\r\n# A tibble: 6 x 6\r\n     ID Name                   Genes       `OMIM ID` Chromosome Class \r\n  <dbl> <chr>                  <chr>           <dbl> <chr>      <chr> \r\n1     1 17,20-lyase deficienc~ CYP17A1, C~    609300 10q24.3    Endoc~\r\n2     1 17-alpha-hydroxylase/~ CYP17A1, C~    609300 10q24.3    Endoc~\r\n3     3 2-methyl-3-hydroxybut~ HADH2, ERAB    300256 Xp11.2     Metab~\r\n4     4 2-methylbutyrylglycin~ ACADSB         600301 10q25-q26  Metab~\r\n5     5 3-beta-hydroxysteroid~ HSD3B2         201810 1p13.1     Metab~\r\n6     6 3-hydroxyacyl-CoA deh~ HADHSC, SC~    601609 4q22-q26   Metab~\r\n\r\nCleaning the Genes column in dataset\r\n\r\n\r\nlibrary(stringr)\r\n\r\n# Genes is character column and we need to split each row into list of genes\r\n# strsplit() will split the character to list of characters\r\n\r\n\r\ngeny$Genes <- strsplit(geny$Genes, split = \", \")\r\n\r\n\r\nhead(geny)\r\n\r\n\r\n# A tibble: 6 x 6\r\n     ID Name                       Genes   `OMIM ID` Chromosome Class \r\n  <dbl> <chr>                      <list>      <dbl> <chr>      <chr> \r\n1     1 17,20-lyase deficiency, i~ <chr [~    609300 10q24.3    Endoc~\r\n2     1 17-alpha-hydroxylase/17,2~ <chr [~    609300 10q24.3    Endoc~\r\n3     3 2-methyl-3-hydroxybutyryl~ <chr [~    300256 Xp11.2     Metab~\r\n4     4 2-methylbutyrylglycinuria  <chr [~    600301 10q25-q26  Metab~\r\n5     5 3-beta-hydroxysteroid deh~ <chr [~    201810 1p13.1     Metab~\r\n6     6 3-hydroxyacyl-CoA dehydro~ <chr [~    601609 4q22-q26   Metab~\r\n\r\n\r\n\r\n# creating a new dataframe\r\n\r\ngeny_new <- geny[, c(2,3)]\r\ncolnames(geny_new)[1] <- \"Disorder\"\r\n\r\nhead(geny_new)\r\n\r\n\r\n# A tibble: 6 x 2\r\n  Disorder                                                 Genes    \r\n  <chr>                                                    <list>   \r\n1 17,20-lyase deficiency, isolated                         <chr [3]>\r\n2 17-alpha-hydroxylase/17,20-lyase deficiency              <chr [3]>\r\n3 2-methyl-3-hydroxybutyryl-CoA dehydrogenase deficiency   <chr [2]>\r\n4 2-methylbutyrylglycinuria                                <chr [1]>\r\n5 3-beta-hydroxysteroid dehydrogenase, type II, deficiency <chr [1]>\r\n6 3-hydroxyacyl-CoA dehydrogenase deficiency               <chr [2]>\r\n\r\n\r\n\r\n# replicating rows for Genes having more than 1 gene per disease\r\nlibrary(tidyverse)\r\ngeny_new <- unnest(geny_new)\r\nhead(geny_new)\r\n\r\n\r\n# A tibble: 6 x 2\r\n  Disorder                                    Genes  \r\n  <chr>                                       <chr>  \r\n1 17,20-lyase deficiency, isolated            CYP17A1\r\n2 17,20-lyase deficiency, isolated            CYP17  \r\n3 17,20-lyase deficiency, isolated            P450C17\r\n4 17-alpha-hydroxylase/17,20-lyase deficiency CYP17A1\r\n5 17-alpha-hydroxylase/17,20-lyase deficiency CYP17  \r\n6 17-alpha-hydroxylase/17,20-lyase deficiency P450C17\r\n\r\n\r\n\r\ngeny_new[\"count\"] <- 1\r\nadmat <- geny_new %>%\r\n  pivot_wider(id_cols = Genes, names_from = Disorder, values_from = count, values_fn = list(count = ~1))\r\n\r\n# take out first column, make it column name:\r\nadmat2 <- as.matrix(admat[,-1])\r\nrownames(admat2) <- admat$Genes\r\n\r\n# now admat2 is the bipartite adjacency matrix\r\n\r\n# it can stay NA, too\r\nadmat2[is.na(admat2)] <- 0\r\n\r\n\r\n# this is now weighted, each cell will show how many disorders the genes share.\r\nadj_mat <- admat2 %*% t(admat2)\r\n\r\n\r\n\r\n\r\n\r\nlibrary(statnet)\r\n\r\n\r\nnetwork.stat<-network(adj_mat, directed=F, matrix.type=\"adjacency\", ignore.eval=FALSE, names.eval=\"weight\") \r\n\r\nprint(network.stat)\r\n\r\n\r\n Network attributes:\r\n  vertices = 3823 \r\n  directed = FALSE \r\n  hyper = FALSE \r\n  loops = FALSE \r\n  multiple = FALSE \r\n  bipartite = FALSE \r\n  total edges= 6643 \r\n    missing edges= 0 \r\n    non-missing edges= 6643 \r\n\r\n Vertex attribute names: \r\n    vertex.names \r\n\r\n Edge attribute names not shown \r\n\r\nThe gene to gene network has below details:\r\nNumber of Vertices = 3823\r\nNumber of Edges = 6643\r\nIt is an “undirected network”\r\nIt is a “single mode network”\r\nThe edges of the network are “weighted”\r\nExtracting vertex attribute values from statnet object\r\n\r\n\r\n# Extracting vertex attribute values from statnet object\r\n\r\nhead(network.stat %v% \"vertex.names\")\r\n\r\n\r\n[1] \"CYP17A1\" \"CYP17\"   \"P450C17\" \"HADH2\"   \"ERAB\"    \"ACADSB\" \r\n\r\nExtracting edge attribute values from statnet object\r\n\r\n\r\nhead(network.stat %e% \"weight\")\r\n\r\n\r\n[1] 2 2 2 1 1 1\r\n\r\nSummarizing numeric network attribute\r\n\r\n\r\nsummary(network.stat %e% \"weight\")\r\n\r\n\r\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \r\n  1.000   1.000   1.000   1.642   2.000  11.000 \r\n\r\nClassify all dyads in the network using statnet object\r\n\r\n\r\nsna::dyad.census(network.stat)\r\n\r\n\r\n      Mut Asym    Null\r\n[1,] 6643    0 7299110\r\n\r\nThere are 6643 mutual relationships of gene to gene in the , which share common disorders\r\nThere are no asymmetric gene to gene relationships\r\nThere are 7299110 Null dyads\r\n#Classify all triads in the networkusing statnet object\r\n\r\n\r\nsna::triad.census(network.stat, mode = \"graph\") \r\n\r\n\r\n              0        1    2     3\r\n[1,] 9279748342 25323442 7400 14887\r\n\r\nGlobal Transitivity\r\n\r\n\r\ngtrans(network.stat)\r\n\r\n\r\n[1] 0.857859\r\n\r\nIdentifying the Isolates in the network\r\n\r\n\r\nisolates(network.stat)\r\n\r\n\r\n  [1]    6    7   14   17   18   22   32   33   39   89  105  106  109\r\n [14]  119  131  145  156  197  202  203  204  205  225  226  227  273\r\n [27]  285  288  289  290  303  304  325  326  333  345  346  361  372\r\n [40]  381  382  383  389  390  391  395  415  424  479  488  504  519\r\n [53]  531  534  535  536  537  553  554  572  585  586  592  607  608\r\n [66]  609  610  621  629  636  644  647  656  661  668  674  679  683\r\n [79]  750  757  763  764  772  773  774  775  776  778  783  784  785\r\n [92]  786  808  809  813  825  866  874  881  915  928  940  975  978\r\n[105]  979  982  995 1029 1036 1043 1044 1061 1077 1090 1091 1092 1117\r\n[118] 1144 1167 1197 1211 1244 1254 1255 1278 1296 1328 1343 1344 1366\r\n[131] 1375 1379 1390 1391 1398 1399 1450 1453 1480 1492 1519 1527 1535\r\n[144] 1552 1556 1583 1586 1587 1593 1598 1599 1602 1610 1639 1655 1658\r\n[157] 1669 1682 1687 1698 1702 1708 1711 1725 1752 1771 1788 1792 1793\r\n[170] 1794 1795 1796 1799 1812 1815 1816 1822 1823 1824 1825 1830 1851\r\n[183] 1888 1889 1890 1895 1896 1910 1911 1912 1913 1914 1919 1920 1921\r\n[196] 1927 1939 1950 1974 1989 1994 1995 1996 2004 2012 2013 2018 2019\r\n[209] 2024 2025 2026 2027 2028 2029 2036 2037 2045 2056 2057 2058 2059\r\n[222] 2062 2086 2087 2104 2105 2108 2109 2112 2125 2128 2133 2173 2174\r\n[235] 2183 2184 2185 2187 2188 2217 2224 2227 2230 2231 2254 2262 2273\r\n[248] 2279 2291 2294 2314 2315 2332 2333 2354 2364 2370 2371 2386 2402\r\n[261] 2406 2427 2437 2446 2450 2456 2469 2472 2473 2478 2481 2515 2521\r\n[274] 2529 2542 2565 2566 2580 2581 2582 2603 2612 2615 2628 2636 2637\r\n[287] 2650 2651 2673 2702 2706 2707 2731 2751 2781 2782 2783 2784 2789\r\n[300] 2790 2791 2796 2809 2814 2823 2824 2844 2851 2863 2878 2928 2935\r\n[313] 2939 2948 2966 2971 2974 2987 2990 3041 3050 3059 3070 3071 3072\r\n[326] 3086 3087 3099 3105 3119 3122 3161 3211 3212 3237 3244 3248 3249\r\n[339] 3250 3251 3258 3264 3276 3279 3287 3291 3292 3310 3319 3327 3340\r\n[352] 3349 3357 3358 3363 3364 3384 3395 3407 3417 3418 3430 3431 3434\r\n[365] 3435 3446 3447 3467 3470 3471 3472 3473 3482 3486 3494 3496 3507\r\n[378] 3525 3528 3529 3532 3542 3551 3566 3585 3600 3608 3612 3616 3617\r\n[391] 3622 3639 3651 3652 3656 3657 3660 3668 3669 3674 3675 3689 3690\r\n[404] 3714 3715 3726 3738 3748 3749 3750 3751 3752 3753 3756 3773 3788\r\n[417] 3801 3802 3805 3822 3823\r\n\r\nIdentifying the name of the Genes that are isoltes\r\n\r\n\r\n#subset vertex.names attribute to get names of isolates\r\nx <- as.vector(network.stat%v%'vertex.names')[c(isolates(network.stat))]\r\n\r\nx\r\n\r\n\r\n  [1] \"ACADSB\"   \"HSD3B2\"   \"AUH\"      \"CUL7\"     \"TPMT\"    \r\n  [6] \"HLA-B\"    \"CAT\"      \"MDM2\"     \"COL2A1\"   \"EGFR\"    \r\n [11] \"ADA\"      \"ADSL\"     \"MEN1\"     \"POR\"      \"TBS19\"   \r\n [16] \"GCNT2\"    \"FGA\"      \"TYR\"      \"ALDH2\"    \"GABRA2\"  \r\n [21] \"ALDOA\"    \"CYP11B2\"  \"ACTN3\"    \"ACAT1\"    \"AMACR\"   \r\n [26] \"ENAM\"     \"AMPD3\"    \"APOA1\"    \"GSN\"      \"LYZ\"     \r\n [31] \"ALB\"      \"MC1R\"     \"NRAMP2\"   \"SPTB\"     \"COL3A1\"  \r\n [36] \"XPNPEP2\"  \"HP\"       \"AT3\"      \"FGF10\"    \"APOA2\"   \r\n [41] \"APOC3\"    \"APOH\"     \"VPS33B\"   \"ARG1\"     \"ASL\"     \r\n [46] \"DDC\"      \"AGA\"      \"ALOX5\"    \"TF\"       \"GATA4\"   \r\n [51] \"GLO1\"     \"DRD4\"     \"BBS1\"     \"BBS7\"     \"BBS2\"    \r\n [56] \"BBS4\"     \"BBS5\"     \"RFX5\"     \"RFXAP\"    \"BSND\"    \r\n [61] \"FTL\"      \"SLC19A3\"  \"MYF6\"     \"GP1BA\"    \"GP1BB\"   \r\n [66] \"GP9\"      \"HLA-DPB1\" \"BTD\"      \"HRAS\"     \"TBXA2R\"  \r\n [71] \"ABO\"      \"DAF\"      \"AQP3\"     \"KEL\"      \"LW\"      \r\n [76] \"BSG\"      \"RHCE\"     \"XG\"       \"PHB\"      \"PLOD2\"   \r\n [81] \"MAOA\"     \"MYC\"      \"C1QA\"     \"C1QB\"     \"C1QG\"    \r\n [86] \"C1S\"      \"C2\"       \"C3\"       \"C6\"       \"C7\"      \r\n [91] \"C8B\"      \"C9\"       \"ASPA\"     \"FGFR4\"    \"CPS1\"    \r\n [96] \"SCO2\"     \"TNNC1\"    \"COX15\"    \"MYH8\"     \"CRYBB1\"  \r\n[101] \"CD8A\"     \"CP\"       \"CLN2\"     \"CLN5\"     \"CLN6\"    \r\n[106] \"CETP\"     \"DNM2\"     \"KIAA1985\" \"CHD7\"     \"NSDHL\"   \r\n[111] \"CHIT\"     \"LIPA\"     \"EXT1\"     \"CYBA\"     \"NCF1\"    \r\n[116] \"NCF2\"     \"ASS\"      \"COH1\"     \"ODC1\"     \"BUB1\"    \r\n[121] \"NDUFS6\"   \"ALG6\"     \"ALG12\"    \"ALG8\"     \"PLG\"     \r\n[126] \"CPO\"      \"IGBP1\"    \"CPT1A\"    \"CPT2\"     \"HLA-DQB1\"\r\n[131] \"INSL3\"    \"ELN\"      \"CTH\"      \"CTNS\"     \"D2HGD\"   \r\n[136] \"HSD17B4\"  \"DFNA5\"    \"MYO1A\"    \"ESPN\"     \"KIAA1199\"\r\n[141] \"DRPLA\"    \"WT1\"      \"AQP2\"     \"INSR\"     \"GCK\"     \r\n[146] \"PTF1A\"    \"AKT2\"     \"IPF1\"     \"VEGF\"     \"LIG1\"    \r\n[151] \"TOP1\"     \"DBH\"      \"FAAH\"     \"F2\"       \"COL7A1\"  \r\n[156] \"EDARADD\"  \"PKP1\"     \"COL1A2\"   \"SPTA1\"    \"COX10\"   \r\n[161] \"TLR4\"     \"ENO3\"     \"EPX\"      \"ITGA6\"    \"ME2\"     \r\n[166] \"SYN1\"     \"OPCML\"    \"HBA1\"     \"HBB\"      \"HBA2\"    \r\n[171] \"EPOR\"     \"LOR\"      \"RNF6\"     \"EXT2\"     \"NPC1L1\"  \r\n[176] \"GLA\"      \"MCFD2\"    \"F7\"       \"F10\"      \"F11\"     \r\n[181] \"F13B\"     \"FANCF\"    \"LCAT\"     \"FMO3\"     \"KNG\"     \r\n[186] \"FSHB\"     \"TDGF1\"    \"FBP1\"     \"ALDOB\"    \"KHK\"     \r\n[191] \"FUCA1\"    \"FUT6\"     \"GALK1\"    \"GALE\"     \"GALT\"    \r\n[196] \"GAMT\"     \"GBA\"      \"CYP7B1\"   \"DMBT1\"    \"MC2R\"    \r\n[201] \"GCS1\"     \"FTCD\"     \"GCDH\"     \"GK\"       \"GNMT\"    \r\n[206] \"PHKG2\"    \"G6PT1\"    \"GAA\"      \"GBE1\"     \"GYS2\"    \r\n[211] \"PYGL\"     \"PFKM\"     \"GLB1\"     \"GM2A\"     \"KIAA1279\"\r\n[216] \"DHH\"      \"CTLA4\"    \"MLPH\"     \"GHRHR\"    \"STAT5B\"  \r\n[221] \"IGF1\"     \"OAT\"      \"ELA2\"     \"HMOX1\"    \"AK1\"     \r\n[226] \"BPGM\"     \"GPI\"      \"HK1\"      \"TPI1\"     \"F5\"      \r\n[231] \"LIPC\"     \"MET\"      \"HMGCL\"    \"HMGCS2\"   \"TBX5\"    \r\n[236] \"CBS\"      \"MTHFR\"    \"HBG1\"     \"HBG2\"     \"EPHX2\"   \r\n[241] \"GLRB\"     \"GLUD1\"    \"APOC2\"    \"AASS\"     \"INS\"     \r\n[246] \"KCNMB1\"   \"ADD1\"     \"TSHR\"     \"PAX9\"     \"LHB\"     \r\n[251] \"PTH\"      \"GCMB\"     \"PAX8\"     \"TSHB\"     \"ICHYN\"   \r\n[256] \"IGHG2\"    \"CD3E\"     \"CD3G\"     \"MYH2\"     \"ITPA\"    \r\n[261] \"GABRB3\"   \"IVD\"      \"AHI1\"     \"NAGA\"     \"IGKC\"    \r\n[266] \"DSG1\"     \"GALC\"     \"LDHB\"     \"PDX1\"     \"GHR\"     \r\n[271] \"ALAD\"     \"SURF1\"    \"COL4A6\"   \"TAL2\"     \"ARNT\"    \r\n[276] \"AF1Q\"     \"NUMA1\"    \"BCL2\"     \"TCRA\"     \"ABL1\"    \r\n[281] \"LIG4\"     \"STAR\"     \"ECM1\"     \"AKAP10\"   \"LPA\"     \r\n[286] \"CILP\"     \"RAP1GDS1\" \"BCL8\"     \"VMD2\"     \"MASP2\"   \r\n[291] \"PYGM\"     \"XK\"       \"NF2\"      \"OPHN1\"    \"ARSA\"    \r\n[296] \"COL10A1\"  \"CYB5\"     \"DIA1\"     \"MMAA\"     \"MMAB\"    \r\n[301] \"RFXANK\"   \"MCPH1\"    \"SIX6\"     \"EDNRA\"    \"TK2\"     \r\n[306] \"SUCLA2\"   \"MYMY3\"    \"GNPTAG\"   \"HYAL1\"    \"PHKA1\"   \r\n[311] \"IL12RB1\"  \"MDS1\"     \"CBFB\"     \"AMPD1\"    \"ECGF1\"   \r\n[316] \"ITGA7\"    \"CLCN1\"    \"NAGS\"     \"NHS\"      \"HSN2\"    \r\n[321] \"RAC2\"     \"GNAT1\"    \"NP\"       \"POMC\"     \"MC4R\"    \r\n[326] \"UCP3\"     \"MC3R\"     \"OA1\"      \"SAG\"      \"PAX2\"    \r\n[331] \"OTC\"      \"RIL\"      \"NDUFV2\"   \"PIGA\"     \"PEX12\"   \r\n[336] \"PTS\"      \"PHGDH\"    \"PRPS1\"    \"PHKB\"     \"PSP\"     \r\n[341] \"GLI2\"     \"LHX3\"     \"PKD1\"     \"PKDTS\"    \"COL4A1\"  \r\n[346] \"UROS\"     \"UROD\"     \"PEPD\"     \"MSR1\"     \"PROS1\"   \r\n[351] \"SRD5A2\"   \"PSORS6\"   \"CTSK\"     \"NOS1\"     \"PC\"      \r\n[356] \"PDHB\"     \"OGG1\"     \"CA2\"      \"OPRM1\"    \"LRAT\"    \r\n[361] \"IMPDH1\"   \"RP2\"      \"CERKL\"    \"RP9\"      \"USH2A\"   \r\n[366] \"MERTK\"    \"RBP4\"     \"RHD\"      \"CYP2R1\"   \"VDR\"     \r\n[371] \"ESCO2\"    \"WNT4\"     \"HEXB\"     \"NAGLU\"    \"EMX2\"    \r\n[376] \"TRAR4\"    \"SOST\"     \"SPR\"      \"USP26\"    \"IL7R\"    \r\n[381] \"LHX4\"     \"NODAL\"    \"TBX4\"     \"SPG3A\"    \"EPB42\"   \r\n[386] \"PPP2R2B\"  \"SCA25\"    \"PLEKHG4\"  \"SCA8\"     \"TDP1\"    \r\n[391] \"MESP2\"    \"HMGCR\"    \"SSADH\"    \"SI\"       \"SUOX\"    \r\n[396] \"SOD3\"     \"FBLN1\"    \"WHN\"      \"DAD1\"     \"HBD\"     \r\n[401] \"LCRB\"     \"HRG\"      \"PROC\"     \"TRHR\"     \"TBG\"     \r\n[406] \"TALDO1\"   \"TRPS1\"    \"HADHB\"    \"SPG20\"    \"FAH\"     \r\n[411] \"TAT\"      \"HPD\"      \"TBX3\"     \"APRT\"     \"GGCX\"    \r\n[416] \"TKT\"      \"XDH\"      \"XPA\"      \"DDB2\"     \"PEX16\"   \r\n[421] \"PEX3\"    \r\n\r\nPlotting the Gene to Gene network\r\n\r\n\r\nplot(network.stat)\r\n\r\n\r\n\r\noptions(warn=0)\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/httpsrpubscomak64823865458/distill-preview.png",
    "last_modified": "2022-02-17T13:45:34-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsrpubscombunnificent862631/",
    "title": "Social Network Analysis: Week 2: Basic Network Structure",
    "description": "use `igraph` and `statnet` tools to describe aspects of network structure introduced in the Week 2 Lecture: Dyads and Dyad Census, Triads and Triad Census, Network Transitivity and Clustering, Path Length & Geodesic",
    "author": [
      {
        "name": "Audra Jamai White",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\r\nSocial Network Analysis\r\nWeek 2 Assignment: Network Structure\r\nIdentify an existing data set.\r\nThis can be one provided in the course directory, in an R package or library, located online, or some other source. \r\nBriefly describe the network dataset.\r\nIdentify and describe content of nodes and links, and identify format of data set (i.e., matrix or edgelist, directed or not, weighted or not), and whether attribute data are present. Be sure to provide information about network size (e.g., information obtained from network description using week 1 network basics tutorial commands.)\r\nExplore the dataset using commands from week 2 tutorial.\r\nComment on the highlighted aspects of network structure such as geodesic and path distances, triads or transitivity, connectedness and.or component structure, etc. Be sure to both provide the relevant statistics calculated in R, as well as your own interpretation of these statistics.\r\n1. Identify an existing data set.\r\nData set: Florentine Families\r\nDescription: This is an adjacency matrix for a small, directed network of the marriages held by the Florentine family and others in Rome.\r\nPackage: network\r\nAccess:\r\nImport Script:\r\n>source(\"./Import Scripts/Florentine Families.R\")\r\nOrignial Format from Package:\r\n>install.packages(\"network\")\r\n>data(\"flo\", package = \"network\")\r\n\r\n\r\n\r\n  # install.packages(\"network\")\r\n  \r\n    data(\"flo\", package = \"network\")\r\n\r\n\r\n\r\n2. Briefly describe the network dataset.\r\nBe sure to provide information about network size (e.g., information obtained from network description using week 1 network basics tutorial commands.)\r\nIdentify and describe content of nodes and links,\r\neach of the 16 Florentine Family Names represent a Node in the network.\r\n\r\n [1] \"Acciaiuoli\"   \"Albizzi\"      \"Barbadori\"    \"Bischeri\"    \r\n [5] \"Castellani\"   \"Ginori\"       \"Guadagni\"     \"Lamberteschi\"\r\n [9] \"Medici\"       \"Pazzi\"        \"Peruzzi\"      \"Pucci\"       \r\n[13] \"Ridolfi\"      \"Salviati\"     \"Strozzi\"      \"Tornabuoni\"  \r\n\r\nIdentify format of data set (i.e., matrix or edgelist, directed or not, weighted or not), and\r\nFlo Format: Size: 16 x 16 square dimmentions indicate a adjacency matrix format\r\nNetwork attributes: vertices = 16 directed = TRUE hyper = FALSE loops = FALSE multiple = FALSE bipartite = FALSE total edges= 40 missing edges= 0 non-missing edges= 40\r\nVertex attribute names: vertex.names\r\nNo edge attributes\r\n\r\n\r\n  dim(flo)\r\n\r\n\r\n[1] 16 16\r\n\r\n\r\n\r\n  network(flo)\r\n\r\n\r\n Network attributes:\r\n  vertices = 16 \r\n  directed = TRUE \r\n  hyper = FALSE \r\n  loops = FALSE \r\n  multiple = FALSE \r\n  bipartite = FALSE \r\n  total edges= 40 \r\n    missing edges= 0 \r\n    non-missing edges= 40 \r\n\r\n Vertex attribute names: \r\n    vertex.names \r\n\r\nNo edge attributes\r\n\r\nIdentify whether attribute data are present.\r\n\r\n\r\n  summary(flo,\r\n          print.adj = TRUE\r\n          )\r\n\r\n\r\n   Acciaiuoli        Albizzi         Barbadori        Bischeri     \r\n Min.   :0.0000   Min.   :0.0000   Min.   :0.000   Min.   :0.0000  \r\n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.000   1st Qu.:0.0000  \r\n Median :0.0000   Median :0.0000   Median :0.000   Median :0.0000  \r\n Mean   :0.0625   Mean   :0.1875   Mean   :0.125   Mean   :0.1875  \r\n 3rd Qu.:0.0000   3rd Qu.:0.0000   3rd Qu.:0.000   3rd Qu.:0.0000  \r\n Max.   :1.0000   Max.   :1.0000   Max.   :1.000   Max.   :1.0000  \r\n   Castellani         Ginori          Guadagni     Lamberteschi   \r\n Min.   :0.0000   Min.   :0.0000   Min.   :0.00   Min.   :0.0000  \r\n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.00   1st Qu.:0.0000  \r\n Median :0.0000   Median :0.0000   Median :0.00   Median :0.0000  \r\n Mean   :0.1875   Mean   :0.0625   Mean   :0.25   Mean   :0.0625  \r\n 3rd Qu.:0.0000   3rd Qu.:0.0000   3rd Qu.:0.25   3rd Qu.:0.0000  \r\n Max.   :1.0000   Max.   :1.0000   Max.   :1.00   Max.   :1.0000  \r\n     Medici          Pazzi           Peruzzi           Pucci  \r\n Min.   :0.000   Min.   :0.0000   Min.   :0.0000   Min.   :0  \r\n 1st Qu.:0.000   1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0  \r\n Median :0.000   Median :0.0000   Median :0.0000   Median :0  \r\n Mean   :0.375   Mean   :0.0625   Mean   :0.1875   Mean   :0  \r\n 3rd Qu.:1.000   3rd Qu.:0.0000   3rd Qu.:0.0000   3rd Qu.:0  \r\n Max.   :1.000   Max.   :1.0000   Max.   :1.0000   Max.   :0  \r\n    Ridolfi          Salviati        Strozzi       Tornabuoni    \r\n Min.   :0.0000   Min.   :0.000   Min.   :0.00   Min.   :0.0000  \r\n 1st Qu.:0.0000   1st Qu.:0.000   1st Qu.:0.00   1st Qu.:0.0000  \r\n Median :0.0000   Median :0.000   Median :0.00   Median :0.0000  \r\n Mean   :0.1875   Mean   :0.125   Mean   :0.25   Mean   :0.1875  \r\n 3rd Qu.:0.0000   3rd Qu.:0.000   3rd Qu.:0.25   3rd Qu.:0.0000  \r\n Max.   :1.0000   Max.   :1.000   Max.   :1.00   Max.   :1.0000  \r\n\r\nCreate & Describe: Directed Adjacency Matrix\r\nFlorentine Families Directed Adjacency Matrix Network Objects: iGraph flo.ig Statnet flo.stat\r\niGraph and Statnet both use {r graph4} for Directed Adjacency Matrix Objects\r\n\r\n\r\n    flo.stat<-\r\n        network(\r\n        flo,\r\n        directed=F,\r\n        matrix.type=\"adjacency\"\r\n        )\r\n\r\n#     provides a description of several critical network features\r\n    print(flo.stat)\r\n\r\n\r\n Network attributes:\r\n  vertices = 16 \r\n  directed = FALSE \r\n  hyper = FALSE \r\n  loops = FALSE \r\n  multiple = FALSE \r\n  bipartite = FALSE \r\n  total edges= 20 \r\n    missing edges= 0 \r\n    non-missing edges= 20 \r\n\r\n Vertex attribute names: \r\n    vertex.names \r\n\r\nNo edge attributes\r\n\r\n\r\n\r\n    flo.ig<-\r\n      graph.adjacency(\r\n      flo,\r\n      mode=\"undirected\"\r\n      ) \r\n    print(flo.ig)\r\n\r\n\r\nIGRAPH 60a423d UN-- 16 20 -- \r\n+ attr: name (v/c)\r\n+ edges from 60a423d (vertex names):\r\n [1] Acciaiuoli--Medici       Albizzi   --Ginori      \r\n [3] Albizzi   --Guadagni     Albizzi   --Medici      \r\n [5] Barbadori --Castellani   Barbadori --Medici      \r\n [7] Bischeri  --Guadagni     Bischeri  --Peruzzi     \r\n [9] Bischeri  --Strozzi      Castellani--Peruzzi     \r\n[11] Castellani--Strozzi      Guadagni  --Lamberteschi\r\n[13] Guadagni  --Tornabuoni   Medici    --Ridolfi     \r\n[15] Medici    --Salviati     Medici    --Tornabuoni  \r\n+ ... omitted several edges\r\n\r\n\r\n\r\n#     Count Vertices\r\n    vcount(flo.ig)\r\n\r\n\r\n[1] 16\r\n\r\n#     Count Edges\r\n    ecount(flo.ig)\r\n\r\n\r\n[1] 20\r\n\r\n# Is this a Bipartite or single mode network?\r\n    is_bipartite(flo.ig)\r\n\r\n\r\n[1] FALSE\r\n\r\n#  Are edges directed or undirected?\r\n    is_directed(flo.ig)\r\n\r\n\r\n[1] FALSE\r\n\r\n#Are edges weighted or unweighted?\r\n    is_weighted(flo.ig)        \r\n\r\n\r\n[1] FALSE\r\n\r\nVertex and Edge Attributes\r\n\r\n\r\n#     access vertex attributes\r\n  head(flo.stat %v% \"vertex.names\")\r\n\r\n\r\n[1] \"Acciaiuoli\" \"Albizzi\"    \"Barbadori\"  \"Bischeri\"   \"Castellani\"\r\n[6] \"Ginori\"    \r\n\r\n#      list the names of vertex attributes\r\n  network::list.vertex.attributes(flo.stat)\r\n\r\n\r\n[1] \"na\"           \"vertex.names\"\r\n\r\n#     access edge attribute\r\n  head(flo.stat%e% \"weight\")\r\n\r\n\r\nNULL\r\n\r\n#  Generate a list the names of edge attributes\r\n  network::list.edge.attributes(flo.stat)\r\n\r\n\r\n[1] \"na\"\r\n\r\n#   summarize numeric network attribute\r\n  summary(flo.stat  %v% \"name\")\r\n\r\n\r\n   Mode    NA's \r\nlogical      16 \r\n\r\n\r\n\r\n#     access vertex attribute \r\n  V(flo.ig)$name\r\n\r\n\r\n [1] \"Acciaiuoli\"   \"Albizzi\"      \"Barbadori\"    \"Bischeri\"    \r\n [5] \"Castellani\"   \"Ginori\"       \"Guadagni\"     \"Lamberteschi\"\r\n [9] \"Medici\"       \"Pazzi\"        \"Peruzzi\"      \"Pucci\"       \r\n[13] \"Ridolfi\"      \"Salviati\"     \"Strozzi\"      \"Tornabuoni\"  \r\n\r\n#     Generate a list the names of vertex attributes\r\n  igraph::vertex_attr_names(flo.ig)\r\n\r\n\r\n[1] \"name\"\r\n\r\n#     access edge attribute\r\n  E(flo.ig)$weight\r\n\r\n\r\nNULL\r\n\r\n#   Generate a list the names of edge attributes  \r\n  igraph::edge_attr_names(flo.ig)\r\n\r\n\r\ncharacter(0)\r\n\r\n#   summarize numeric network attribute\r\n  summary(E(flo.ig)$weight)  \r\n\r\n\r\nLength  Class   Mode \r\n     0   NULL   NULL \r\n\r\n3. Explore the dataset using commands from week 2 tutorial.\r\ngeodesic and path distances,\r\nPath Length and Geodesic\r\n\r\n\r\n#     Calculate distances between two nodes\r\n    distances(flo.ig,\"Bischeri\",\"Ridolfi\")\r\n\r\n\r\n         Ridolfi\r\nBischeri       2\r\n\r\n#     Calculate distance between two nodes using unweighted edges\r\n    distances(flo.ig,\"Bischeri\", \"Castellani\",weights=NA)\r\n\r\n\r\n         Castellani\r\nBischeri          2\r\n\r\nWe can also find all of the shortest paths between two famalies in this network. These list the starting node and the ending node with all nodes inbetween for each path. The option weights=NA means that any available edge weights are ignored.\r\n\r\n\r\n#     isolating the distances between specific node\r\n    all_shortest_paths(flo.ig,\"Strozzi\",\"Tornabuoni\", weights=NA)$res\r\n\r\n\r\n[[1]]\r\n+ 3/16 vertices, named, from 60a423d:\r\n[1] Strozzi    Ridolfi    Tornabuoni\r\n\r\n## Note: manually tell igraph to ignore edge weights.\r\n\r\n\r\n\r\nThe concept of shortest path to describe the overall network structure can be more useful\r\n\r\n\r\n#     find average shortest path for network\r\n    average.path.length(flo.ig,directed=F)    \r\n\r\n\r\n[1] 2.485714\r\n\r\ntriads or transitivity,\r\nDyad Census\r\nClassifies all dyads in the network as: - Reciprocal (mutual), or mut - Asymmetric (non-mutual), or asym, and - Absent, or null\r\n\r\n\r\n    sna::dyad.census(flo.stat)\r\n\r\n\r\n     Mut Asym Null\r\n[1,]  20    0  100\r\n\r\n\r\n\r\n  igraph::dyad.census(flo.ig)\r\n\r\n\r\n$mut\r\n[1] 20\r\n\r\n$asym\r\n[1] 0\r\n\r\n$null\r\n[1] 100\r\n\r\nTriad Census\r\nClassifies all triads in the network. The triad census provides a fundamental descriptive insight into the types of triads found in a particular dataset.\r\n\r\n\r\n#     Classify all Triad in the network: Directed Network\r\n  sna::triad.census(flo.stat, mode= )\r\n\r\n\r\n     003 012 102 021D 021U 021C 111D 111U 030T 030C 201 120D 120U\r\n[1,] 324   0 195    0    0    0    0    0    0    0  38    0    0\r\n     120C 210 300\r\n[1,]    0   0   3\r\n\r\n#     Classify all Triad in the network: Undirected Network\r\n   sna::triad.census(flo.stat, mode=\"graph\")\r\n\r\n\r\n       0   1  2 3\r\n[1,] 324 195 38 3\r\n\r\n#     total number of all four triad types returned by triad census\r\n   sum(sna::triad.census(flo.stat, mode=\"graph\"))\r\n\r\n\r\n[1] 560\r\n\r\n\r\n\r\n#Classify all Triad in the network\r\n     igraph::triad_census(flo.ig)\r\n\r\n\r\n [1] 324   0 195   0   0   0   0   0   0   0  38   0   0   0   0   3\r\n\r\nTransitivity or Global Clustering\r\n\r\n\r\n#     network transitivity:\r\n    transitivity(flo.ig)\r\n\r\n\r\n[1] 0.1914894\r\n\r\n#     weighted network transitivity:\r\n#   igraph::transivity(flo.ig)\r\n\r\n\r\n\r\n\r\n\r\n#     Directed Networks transitivity:\r\n  gtrans(flo.stat)\r\n\r\n\r\n[1] 0.1914894\r\n\r\n#   methods for weighted networks, rank and correlation, along with the relevant references.\r\n#  sna::gtrans()\r\n\r\n\r\n\r\nLocal Transivity or Clustering\r\nLocal transitivity (local clustering coefficient), is a technical description of the density of an ego network.\r\n\r\n\r\n#     Retrive a list of the vertices we are interested\r\n    V(flo.ig)[c(\"Bischeri\" ,\r\n                \"Castellani\", \r\n                \"Medici\",\r\n                \"Ridolfi\")]\r\n\r\n\r\n+ 4/16 vertices, named, from 60a423d:\r\n[1] Bischeri   Castellani Medici     Ridolfi   \r\n\r\n#     check ego network transitivity\r\ntransitivity(flo.ig,\r\n             type=\"local\", \r\n             vids=V(flo.ig)\r\n             [c(\"Bischeri\",\r\n                \"Castellani\", \r\n                \"Medici\",\r\n                \"Ridolfi\")]) \r\n\r\n\r\n[1] 0.33333333 0.33333333 0.06666667 0.33333333\r\n\r\n#     get global clustering cofficient\r\n  transitivity(flo.ig, type=\"global\")\r\n\r\n\r\n[1] 0.1914894\r\n\r\n#     get average local clustering coefficient\r\n  transitivity(flo.ig, type=\"average\")\r\n\r\n\r\n[1] 0.2181818\r\n\r\nconnectedness and.or component structure, etc.\r\n\r\nDistill is a publication format for scientific and technical writing, native to the web.\r\nLearn more about using Distill for R Markdown at https://rstudio.github.io/distill.\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-02-17T13:45:02-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httpsrpubscomburnworthj864158/",
    "title": "Degree and Centrality",
    "description": "'My dataset includes every Supreme Court Justice and the school that their clerks attended. There are 187 vertices which contstitute the Justices and the different universiteis. There are 2487 edges and an edge means there is a connection between a Justice and a school because they have hired a clerk that graduated with their law degree from the university.The network density of the dataset is .149 not including loops. When looking at node degreee, you will see that Harvard has the highest count of relationships with 681, Yale is second wiht 464, and Chicago is third with 172.The median node degree is 3 and The mean is 27.33. While the max is 681. The centralziation score for both in and out degrees is 3.65. The nodes with the most outdegree are Harvard, Yale, Chicago, Standford, and Columbia. The nodes with the least outdegree are Penn, Northeastern, Virginia, Temple, Washington & Lee.'",
    "author": [
      {
        "name": "Justin Burnworth",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-02-17T13:45:08-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httpsrpubscomburnworthj867161/",
    "title": "Week 4",
    "description": "My dataset includes every Supreme Court Justice and the school that their clerks attended. There are 187 vertices which contstitute the Justices and the different universiteis. There are 2487 edges and an edge means there is a connection between a Justice and a school because they have hired a clerk that graduated with their law degree from the university.\n\nThe centralization score for the dataset is .952. The more modern Justices have a higher betweenness score and I believe that is attributed to the fact that the total number of clerks have significantly grown starting back in the 1950s. The schools with the highest scores are Harvard, Georgetown, GW all schools where there have been many clerks hired from. While the schools with a few or only one clerk hired from have much lower scores. \n\nWhen it comes to eigenvector centarlity, shows some intersting reults. A modern justice such as Justice Gorsuch has among the highest while Justice Scalia is more middle of the pack. Howver, an older justice, Justice William Howard Taft has just as high of a score as Justice Gorsuch. I am not really sure what these results man. Justice Gorsuch's high score might be explained because he both clerked for a Justice and is a Justice himself.\n\n  The school with the highest bonachi-power is Minnesota with -3.63 whil the lowest is Notre Dame. The Justice with the highest score is interestingly the newest Justice, Amy Coney-Barrett.",
    "author": [
      {
        "name": "Justin Burnworth",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\nD\n\n\n\n",
    "preview": {},
    "last_modified": "2022-02-17T13:46:16-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httpsrpubscomchester860583/",
    "title": "Testing",
    "description": "A new article created using the Distill format.",
    "author": [
      {
        "name": "Cynthia Hester",
        "url": "https://example.com/norajones"
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-02-17T13:43:51-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httpsrpubscomecaetanoesil865861/",
    "title": "Short Assignment 2",
    "description": "Describing Network Data",
    "author": [
      {
        "name": "Eunice C. Silva",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\nI am working with a dataset accessed from the network package -\nFlorentine Families. This dataset is already in a format suitable for\nnetwork analysis (an adjancecy matrix) and ready to work with. The\nmatrix shows the marriage links of different families in Florence. A 1\nindicates the presence of a marriage link, while a 0 indicates the\nabsence of a marriage link.\n\n\nlibrary(network)\nlibrary(igraph)\nlibrary(statnet)\ndata(\"flo\")\nnetwork_adjacencey<- flo\nnetwork_adjacencey \n\n\n             Acciaiuoli Albizzi Barbadori Bischeri Castellani Ginori\nAcciaiuoli            0       0         0        0          0      0\nAlbizzi               0       0         0        0          0      1\nBarbadori             0       0         0        0          1      0\nBischeri              0       0         0        0          0      0\nCastellani            0       0         1        0          0      0\nGinori                0       1         0        0          0      0\nGuadagni              0       1         0        1          0      0\nLamberteschi          0       0         0        0          0      0\nMedici                1       1         1        0          0      0\nPazzi                 0       0         0        0          0      0\nPeruzzi               0       0         0        1          1      0\nPucci                 0       0         0        0          0      0\nRidolfi               0       0         0        0          0      0\nSalviati              0       0         0        0          0      0\nStrozzi               0       0         0        1          1      0\nTornabuoni            0       0         0        0          0      0\n             Guadagni Lamberteschi Medici Pazzi Peruzzi Pucci Ridolfi\nAcciaiuoli          0            0      1     0       0     0       0\nAlbizzi             1            0      1     0       0     0       0\nBarbadori           0            0      1     0       0     0       0\nBischeri            1            0      0     0       1     0       0\nCastellani          0            0      0     0       1     0       0\nGinori              0            0      0     0       0     0       0\nGuadagni            0            1      0     0       0     0       0\nLamberteschi        1            0      0     0       0     0       0\nMedici              0            0      0     0       0     0       1\nPazzi               0            0      0     0       0     0       0\nPeruzzi             0            0      0     0       0     0       0\nPucci               0            0      0     0       0     0       0\nRidolfi             0            0      1     0       0     0       0\nSalviati            0            0      1     1       0     0       0\nStrozzi             0            0      0     0       1     0       1\nTornabuoni          1            0      1     0       0     0       1\n             Salviati Strozzi Tornabuoni\nAcciaiuoli          0       0          0\nAlbizzi             0       0          0\nBarbadori           0       0          0\nBischeri            0       1          0\nCastellani          0       1          0\nGinori              0       0          0\nGuadagni            0       0          1\nLamberteschi        0       0          0\nMedici              1       0          1\nPazzi               1       0          0\nPeruzzi             0       1          0\nPucci               0       0          0\nRidolfi             0       1          1\nSalviati            0       0          0\nStrozzi             0       0          0\nTornabuoni          0       0          0\n\nFollowing the script, I’ve created both a statnet and igraph network\nobject from the dataset (adjancecy matrix).\n\n\nnetwork_statnet <- network(network_adjacencey, direct = FALSE)\n\n\n\n\n\nnetwork_igraph <- graph_from_adjacency_matrix(network_adjacencey, mode = \"upper\", weighted = NULL)\n\n\n\nList of the objects available:\n\n\nls()\n\n\n[1] \"flo\"                \"network_adjacencey\" \"network_igraph\"    \n[4] \"network_statnet\"   \n\nWe already know that the Florentine Families dataset is in the format\nof a matrix. In terms of network size, the network has 16 vertices or\nnodes (16 families) connected by 20 edges (representing ties of\nmarriage, in this case).\n\n\nprint(network_statnet)\n\n\n Network attributes:\n  vertices = 16 \n  directed = FALSE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 20 \n    missing edges= 0 \n    non-missing edges= 20 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nWhen it comes to network features, we learn from running the codes\nbelow that the network is unweighted/binary (with 0 and 1 inidicating\nthe absence and presence of a marriage tie, respectively), undirected\n(meaning that the relationship between nodes is inherently symmetric, as\nmarriage relationships are), and single/not bipartite.\n\n\nis_weighted(network_igraph)\n\n\n[1] FALSE\n\n\n\nis_directed(network_igraph)\n\n\n[1] FALSE\n\n\n\nis_bipartite(network_igraph)\n\n\n[1] FALSE\n\nNetwork attributes:\n\n\nnetwork::list.vertex.attributes(network_statnet)\n\n\n[1] \"na\"           \"vertex.names\"\n\n\n\nnetwork::list.edge.attributes(network_statnet)\n\n\n[1] \"na\"\n\nNetwork structure comments\n\n\nsna::dyad.census(network_statnet)\n\n\n     Mut Asym Null\n[1,]  20    0  100\n\nSince the ties are undirected, the dyad census command confirms the\nexpected - that there are no assymetric edges. In ohter words, that all\nedges are reciprocal/mutual.\n\n\nsna::triad.census(network_statnet, mode = \"graph\")\n\n\n       0   1  2 3\n[1,] 324 195 38 3\n\n\n\nsum(sna::triad.census(network_statnet, mode = \"graph\"))\n\n\n[1] 560\n\nThe statnet command allowed me to indicate that the netwrok is\nundirected with the option mode=“graph”. There are 4 undirected triads,\nfor a total number of 560.\nHow transitive are the relationships? What proportion of the\nconnected triads are complete?\nLocal clustering (below)\n\n\ntransitivity(network_igraph, type = \"average\")\n\n\n[1] 0.2181818\n\nGlobal clustering (below)\n\n\ntransitivity(network_igraph, type = \"global\")\n\n\n[1] 0.1914894\n\nLocal clustering is higher than global clustering, but overall low\nproportion of connected triads that are complete, I think. But I am\nhaving difficulties understanding/explaining what this means in this\nmarriage dataset.\n\n\ngtrans(network_statnet)\n\n\n[1] 0.1914894\n\nAverage path length in whole network:\n\n\naverage.path.length(network_igraph, directed = F)\n\n\n[1] 2.485714\n\n\n\nnames(igraph::components(network_igraph))\n\n\n[1] \"membership\" \"csize\"      \"no\"        \n\n\n\nigraph::components(network_igraph)$no\n\n\n[1] 2\n\nThe network has 2 components…\n\n\nigraph::components(network_igraph)$csize\n\n\n[1] 15  1\n\n… 1 of the components is larger, with 15 members and the other has\none single member.\n\n\nisolates(network_statnet)\n\n\n[1] 12\n\nThere are 12 isolates in the network - 12 nodes that have no link to\nthe rest of the network.\n\n\nas.vector(network_statnet%v%'vertex.names')[c(isolates(network_statnet))]\n\n\n[1] \"Pucci\"\n\nWhen we retrieve the names of the isolates, they all refer to the\nPucci family, which is not linked by marriage to any of the other\nFlorentine families.\nDistill is a publication format for scientific and technical writing,\nnative to the web.\nLearn more about using Distill for R Markdown at https://rstudio.github.io/distill.\n\n\n\n",
    "preview": {},
    "last_modified": "2022-02-17T13:45:38-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httpsrpubscomlbateshaus862879/",
    "title": "Week 2 Assignment",
    "description": "An exploration of the Sampson's Monks dataset.",
    "author": [
      {
        "name": "Lissie  Bates-Haus, Ph.D.",
        "url": "https://github.com/lbateshaus"
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\nIn this assignment, I will be exploring the Sampson’s Monks dataset.\nFirst, I utilized the provided Import Script shared in the Google Classroom to import the data and create the relevant data formats to interact with igraph and statnet.\n\n\n#This script imports the sampson monk dataset from the ergm package.\n\n#Let's load the libraries you need (install them first if you need to)\n  if(\"statnet\" %in% rownames(installed.packages()) == FALSE) {install.packages(\"statnet\")}\n  if(\"igraph\"   %in% rownames(installed.packages()) == FALSE) {install.packages(\"igraph\")}\n  if(\"intergraph\"   %in% rownames(installed.packages()) == FALSE) {install.packages(\"intergraph\")}\n  \n  \n  library(statnet)\n  library(igraph)\n  library(intergraph)\n  \n#Lets read the data into the enviroment. This will import it as a \n  data(\"sampson\", package = \"ergm\")\n  network_statnet <- samplike\n  rm(samplike)\n\n#Let's create an edgelist version\n  network_edgelist <- as.data.frame(as.edgelist(network_statnet))\n  network_edgelist$nominaations <- network_statnet%e%'nominations'\n  \n#Let's create a dataframe of node attributes\n  network_nodes <- data.frame(cloisterville = network_statnet%v%'cloisterville',\n                              group         = network_statnet%v%'group',\n                              names         = network_statnet%v%'vertex.names'\n  )\n\n  \n#Finaly, lets make an igraph version\n  network_igraph <- asIgraph(network_statnet)\n\n\n\nInformation about the network data can be accessed by the command: “?sampson”\nFirst, using igraph:\n\n\ndim(network_edgelist)\n\n\n[1] 88  3\n\nThe dim() command tells us that we have a dataframe (called network_edgelist) which has 88 observations (rows) of 3 variables, which tells us that this (as the name indicates from the Import Script) an edgelist and not an adjacency matrix (which would be a square dataframe).\n\n\nis_bipartite(network_igraph)\n\n\n[1] FALSE\n\nis_directed(network_igraph)\n\n\n[1] TRUE\n\nis_weighted(network_igraph)\n\n\n[1] FALSE\n\nFrom these commands, we learn that this dataset is not bipartite, it is directed, and it is not weighted.\n\n\nvertex_attr_names(network_igraph)\n\n\n[1] \"cloisterville\" \"group\"         \"na\"            \"vertex.names\" \n\nFrom here we learn that our nodes have the following attributes (meaning, additional information available about each node): Cloisterville, Group, NA and vertex.names.\nNote: we have also created a Nodes dataframe, which has three columns: cloisterville, group and names. It’s not clear to me what the NA attribute is.\n\n\nedge_attr_names(network_igraph)\n\n\n[1] \"na\"          \"nominations\"\n\nOur edge attributes include na and nominations. In this case, the nominations value is the “the number of times (out of 3) that monk A nominated monk B.”\nWe can also utilize the statnet package to learn about our network:\n\n\nsummary(network_statnet)\n\n\nNetwork attributes:\n  vertices = 18\n  directed = TRUE\n  hyper = FALSE\n  loops = FALSE\n  multiple = FALSE\n total edges = 88 \n   missing edges = 0 \n   non-missing edges = 88 \n density = 0.2875817 \n\nVertex attributes:\n\n cloisterville:\n   logical valued attribute\n   attribute summary:\n   Mode   FALSE    TRUE \nlogical      12       6 \n\n group:\n   character valued attribute\n   attribute summary:\n   Loyal Outcasts    Turks \n       7        4        7 \n  vertex.names:\n   character valued attribute\n   18 valid vertex names\n\nEdge attributes:\n\n nominations:\n   numeric valued attribute\n   attribute summary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   1.000   2.000   1.909   3.000   3.000 \n\nNetwork edgelist matrix:\n      [,1] [,2]\n [1,]    5    1\n [2,]    7    1\n [3,]    1    2\n [4,]    3    2\n [5,]   12    2\n [6,]   15    2\n [7,]    1    3\n [8,]    5    4\n [9,]    1    5\n[10,]    4    5\n[11,]    6    5\n[12,]   13    7\n[13,]    9    8\n[14,]   10    8\n[15,]   11    8\n[16,]    8    9\n[17,]   10    9\n[18,]    8   10\n[19,]   14   12\n[20,]   10   13\n[21,]   18   13\n[22,]    2   15\n[23,]   16   15\n[24,]    9   16\n[25,]   18   17\n[26,]   17   18\n[27,]    2    1\n[28,]    3    1\n[29,]    6    1\n[30,]    8    1\n[31,]   12    1\n[32,]   14    1\n[33,]   15    1\n[34,]   16    1\n[35,]   18    1\n[36,]    7    2\n[37,]    8    2\n[38,]   14    2\n[39,]   16    2\n[40,]   17    2\n[41,]   18    2\n[42,]   17    3\n[43,]   18    3\n[44,]    6    4\n[45,]    8    4\n[46,]   10    4\n[47,]   11    4\n[48,]    9    5\n[49,]   10    5\n[50,]   11    5\n[51,]   13    5\n[52,]   15    5\n[53,]    4    6\n[54,]    8    6\n[55,]    2    7\n[56,]   12    7\n[57,]   15    7\n[58,]   16    7\n[59,]   18    7\n[60,]    1    8\n[61,]    7    8\n[62,]    5    9\n[63,]    6    9\n[64,]    4   10\n[65,]    4   11\n[66,]    5   11\n[67,]   14   11\n[68,]    1   12\n[69,]    2   12\n[70,]    7   12\n[71,]    9   12\n[72,]   15   12\n[73,]   16   12\n[74,]    3   13\n[75,]    5   13\n[76,]   17   13\n[77,]    1   14\n[78,]    2   14\n[79,]   10   14\n[80,]   11   14\n[81,]   12   14\n[82,]   15   14\n[83,]   14   15\n[84,]    7   16\n[85,]   11   16\n[86,]    3   17\n[87,]    3   18\n[88,]   13   18\n\nFrom here, we’ll run some assessments based on our Week 2 tutorial.\nFirst, we’ll run a dyad census:\n\n\nigraph::dyad.census(network_igraph)\n\n\n$mut\n[1] 28\n\n$asym\n[1] 32\n\n$null\n[1] 93\n\nThere are 153 possible combinations of dyads in a group of 18 people. What this tells us that of those 153 combinations, only 28 are mutual (where A chooses B and B chooses A). Another 32 are assymmetic, meaning only one pair of the dyad chooses another, and 93, or more than 60% are null.\nNext, we’ll look at a triad census (note: there are 816 possible triads in this network). We’ll confirm this:\n\n\nsum(sna::triad.census(network_statnet, mode=\"graph\"))\n\n\n[1] 816\n\n\n\n#Classify all triads in the network: statnet\n#note: omit the 'mode' option for a directed network\nsna::triad.census(network_statnet)\n\n\n     003 012 102 021D 021U 021C 111D 111U 030T 030C 201 120D 120U\n[1,] 167 205 190   12   24   24   68   34    5    0  35   15    6\n     120C 210 300\n[1,]    5  18   8\n\n\n\n#get network transitivity: igraph\ntransitivity(network_igraph)\n\n\n[1] 0.4646739\n\nthis measure states that about 46.5% of the triads in our network are connected. However, this is a directed network.\n\n\ngtrans(network_statnet)\n\n\n[1] 0.4074074\n\nWe can look at global vs local transitivity as well.\n\n\ntransitivity(network_igraph, type=\"global\")\n\n\n[1] 0.4646739\n\ntransitivity(network_igraph, type=\"average\")\n\n\n[1] 0.4925926\n\n\n\n\n",
    "preview": {},
    "last_modified": "2022-02-17T13:44:53-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httpsrpubscomlbateshaus867200/",
    "title": "Week 4 Data Exploration",
    "description": "An exploration of centrality and centralization in the Florentine Families dataset",
    "author": [
      {
        "name": "Lissie Bates-Haus",
        "url": "https://github.com/lbateshaus"
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\nFirst: copy over the import script provided:\n\n#################################################################################################\n\"Florentine Families.R\" has imported a network of weddings among powerful Florentine families. \n\nThis is a small, unweighted, undirected network stored as an adjacency matrix with no additional node or edge attributes. For more information use \"?flo\".\n\nThe import script has created three objects that represent the network:\n     -network_adjacency     (an adjacency matrix containing edges and node names)\n     -network_igraph        (an igraph object)\n     -network_statnet       (a network object compatable with statnet packages like sna & ergm)\n\nEach object name starts, quite generically, with \"network_\" and ends with the type of object it is. Note that the names are generic so that they are  compatable with other scripts you will use in this course. Feel free to rename the objects for your purposes. \n################################################################################################\n\nA brief description of the network:\n\n Network attributes:\n  vertices = 16 \n  directed = FALSE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 20 \n    missing edges= 0 \n    non-missing edges= 20 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n[1] FALSE\n\n\n[1] \"name\"\ncharacter(0)\n\nNodes are the names of 16 prominent families in Florentine during the earily 1400s. Ties are marriage connections between two families. This is an unweighted (binary), undirected graph.\nFirst, we’ll take a brief look at the structure of this network.\n\n[1] \"membership\" \"csize\"      \"no\"        \n[1] 2\n[1] 15  1\n     Mut Asym Null\n[1,]  20    0  100\n     003 012 102 021D 021U 021C 111D 111U 030T 030C 201 120D 120U\n[1,] 324   0 195    0    0    0    0    0    0    0  38    0    0\n     120C 210 300\n[1,]    0   0   3\n[1] 0.1914894\n\nFrom here, we see there are two components in this graph: one consisting of fifteen of the elements, and one consisting of one (one isolate). This is an undirected graph so there are no asymmetrical dyads. Our global transitivity statistic is approximately 0.191.\n\n\n\nThis plot is a visual representation of our two-component network, with 15 nodes conneted and 1 isolate (the Pucci family).\nNow we’ll run some measures of centrality.\n\n           name degree indegree outdegree      eigen   Bonacich\n1    Acciaiuoli      2        1         1 0.13215429 -0.3796632\n2       Albizzi      6        3         3 0.24395611 -2.0881476\n3     Barbadori      4        2         2 0.21170525 -1.5186528\n4      Bischeri      6        3         3 0.28280009  0.0000000\n5    Castellani      6        3         3 0.25902617 -1.3288212\n6        Ginori      2        1         1 0.07492271 -1.8983160\n7      Guadagni      8        4         4 0.28911560 -0.1898316\n8  Lamberteschi      2        1         1 0.08879189  0.0000000\n9        Medici     12        6         6 0.43030809 -0.5694948\n10        Pazzi      2        1         1 0.04481344  0.0000000\n11      Peruzzi      6        3         3 0.27573037 -0.5694948\n12        Pucci      0        0         0 0.00000000  0.0000000\n13      Ridolfi      6        3         3 0.34155264  1.3288212\n14     Salviati      4        2         2 0.14591720 -0.1898316\n15      Strozzi      8        4         4 0.35598045  0.1898316\n16   Tornabuoni      6        3         3 0.32584230  1.1389896\n          rc   eigen.rc        dc   eigen.dc\n1  0.1666667 0.02202572 0.8333333 0.11012858\n2  0.2727273 0.06653348 0.7272727 0.17742262\n3  0.2222222 0.04704561 0.7777778 0.16465964\n4  0.2727273 0.07712730 0.7272727 0.20567279\n5  0.3333333 0.08634206 0.6666667 0.17268411\n6  0.3333333 0.02497424 0.6666667 0.04994847\n7  0.4000000 0.11564624 0.6000000 0.17346936\n8  0.2500000 0.02219797 0.7500000 0.06659392\n9  0.4285714 0.18441775 0.5714286 0.24589034\n10 0.5000000 0.02240672 0.5000000 0.02240672\n11 0.3000000 0.08271911 0.7000000 0.19301126\n12 0.0000000 0.00000000 1.0000000 0.00000000\n13 0.2307692 0.07881984 0.7692308 0.26273280\n14 0.2857143 0.04169063 0.7142857 0.10422657\n15 0.3333333 0.11866015 0.6666667 0.23732030\n16 0.2307692 0.07519438 0.7692308 0.25064792\n\nThe question is, now that we’ve calculated all of these scores, what do we do with them?\nIf we simply sort by degree:\n\n           name degree indegree outdegree      eigen   Bonacich\n1        Medici     12        6         6 0.43030809 -0.5694948\n2      Guadagni      8        4         4 0.28911560 -0.1898316\n3       Strozzi      8        4         4 0.35598045  0.1898316\n4       Albizzi      6        3         3 0.24395611 -2.0881476\n5      Bischeri      6        3         3 0.28280009  0.0000000\n6    Castellani      6        3         3 0.25902617 -1.3288212\n7       Peruzzi      6        3         3 0.27573037 -0.5694948\n8       Ridolfi      6        3         3 0.34155264  1.3288212\n9    Tornabuoni      6        3         3 0.32584230  1.1389896\n10    Barbadori      4        2         2 0.21170525 -1.5186528\n11     Salviati      4        2         2 0.14591720 -0.1898316\n12   Acciaiuoli      2        1         1 0.13215429 -0.3796632\n13       Ginori      2        1         1 0.07492271 -1.8983160\n14 Lamberteschi      2        1         1 0.08879189  0.0000000\n15        Pazzi      2        1         1 0.04481344  0.0000000\n16        Pucci      0        0         0 0.00000000  0.0000000\n          rc   eigen.rc        dc   eigen.dc\n1  0.4285714 0.18441775 0.5714286 0.24589034\n2  0.4000000 0.11564624 0.6000000 0.17346936\n3  0.3333333 0.11866015 0.6666667 0.23732030\n4  0.2727273 0.06653348 0.7272727 0.17742262\n5  0.2727273 0.07712730 0.7272727 0.20567279\n6  0.3333333 0.08634206 0.6666667 0.17268411\n7  0.3000000 0.08271911 0.7000000 0.19301126\n8  0.2307692 0.07881984 0.7692308 0.26273280\n9  0.2307692 0.07519438 0.7692308 0.25064792\n10 0.2222222 0.04704561 0.7777778 0.16465964\n11 0.2857143 0.04169063 0.7142857 0.10422657\n12 0.1666667 0.02202572 0.8333333 0.11012858\n13 0.3333333 0.02497424 0.6666667 0.04994847\n14 0.2500000 0.02219797 0.7500000 0.06659392\n15 0.5000000 0.02240672 0.5000000 0.02240672\n16 0.0000000 0.00000000 1.0000000 0.00000000\n\nWe find, unsurprisingly, that the Medici family has the highest overall degree measure (12) as well as both the highest in- and out-degree measures, which suggest to me that the Medici family is the most highly connected of the Florentine Families. They also have the highest eigenvalue measure, which suggests again that they are most centrally connected and that they are connected to the most centrally connected other families.\nOf note is the Bonacich measure:\n\n           name degree indegree outdegree      eigen   Bonacich\n1       Ridolfi      6        3         3 0.34155264  1.3288212\n2    Tornabuoni      6        3         3 0.32584230  1.1389896\n3       Strozzi      8        4         4 0.35598045  0.1898316\n4      Bischeri      6        3         3 0.28280009  0.0000000\n5  Lamberteschi      2        1         1 0.08879189  0.0000000\n6         Pazzi      2        1         1 0.04481344  0.0000000\n7         Pucci      0        0         0 0.00000000  0.0000000\n8      Guadagni      8        4         4 0.28911560 -0.1898316\n9      Salviati      4        2         2 0.14591720 -0.1898316\n10   Acciaiuoli      2        1         1 0.13215429 -0.3796632\n11       Medici     12        6         6 0.43030809 -0.5694948\n12      Peruzzi      6        3         3 0.27573037 -0.5694948\n13   Castellani      6        3         3 0.25902617 -1.3288212\n14    Barbadori      4        2         2 0.21170525 -1.5186528\n15       Ginori      2        1         1 0.07492271 -1.8983160\n16      Albizzi      6        3         3 0.24395611 -2.0881476\n          rc   eigen.rc        dc   eigen.dc\n1  0.2307692 0.07881984 0.7692308 0.26273280\n2  0.2307692 0.07519438 0.7692308 0.25064792\n3  0.3333333 0.11866015 0.6666667 0.23732030\n4  0.2727273 0.07712730 0.7272727 0.20567279\n5  0.2500000 0.02219797 0.7500000 0.06659392\n6  0.5000000 0.02240672 0.5000000 0.02240672\n7  0.0000000 0.00000000 1.0000000 0.00000000\n8  0.4000000 0.11564624 0.6000000 0.17346936\n9  0.2857143 0.04169063 0.7142857 0.10422657\n10 0.1666667 0.02202572 0.8333333 0.11012858\n11 0.4285714 0.18441775 0.5714286 0.24589034\n12 0.3000000 0.08271911 0.7000000 0.19301126\n13 0.3333333 0.08634206 0.6666667 0.17268411\n14 0.2222222 0.04704561 0.7777778 0.16465964\n15 0.3333333 0.02497424 0.6666667 0.04994847\n16 0.2727273 0.06653348 0.7272727 0.17742262\n\nThis seems to be capturing something different about network position than the eigen score, and on this measure, the Medici family is at number 11. Per the igraph documentation:\n“…positive values imply that vertices become more powerful as their alters become more powerful (as occurs in cooperative relations), while negative values imply that vertices become more powerful only as their alters become weaker (as occurs in competitive or antagonistic relations).”\nOnly three families have positive Bonacich scores (I am not sure how to interpret a Bonacich score of 0?).\nThe last measure I’ll look at is the reflected and derived centrality scores. Note: a higher score of eigen reflected centrality indicates the node may occupy a hub position.\n\n           name degree indegree outdegree      eigen   Bonacich\n1        Medici     12        6         6 0.43030809 -0.5694948\n2       Strozzi      8        4         4 0.35598045  0.1898316\n3      Guadagni      8        4         4 0.28911560 -0.1898316\n4    Castellani      6        3         3 0.25902617 -1.3288212\n5       Peruzzi      6        3         3 0.27573037 -0.5694948\n6       Ridolfi      6        3         3 0.34155264  1.3288212\n7      Bischeri      6        3         3 0.28280009  0.0000000\n8    Tornabuoni      6        3         3 0.32584230  1.1389896\n9       Albizzi      6        3         3 0.24395611 -2.0881476\n10    Barbadori      4        2         2 0.21170525 -1.5186528\n11     Salviati      4        2         2 0.14591720 -0.1898316\n12       Ginori      2        1         1 0.07492271 -1.8983160\n13        Pazzi      2        1         1 0.04481344  0.0000000\n14 Lamberteschi      2        1         1 0.08879189  0.0000000\n15   Acciaiuoli      2        1         1 0.13215429 -0.3796632\n16        Pucci      0        0         0 0.00000000  0.0000000\n          rc   eigen.rc        dc   eigen.dc\n1  0.4285714 0.18441775 0.5714286 0.24589034\n2  0.3333333 0.11866015 0.6666667 0.23732030\n3  0.4000000 0.11564624 0.6000000 0.17346936\n4  0.3333333 0.08634206 0.6666667 0.17268411\n5  0.3000000 0.08271911 0.7000000 0.19301126\n6  0.2307692 0.07881984 0.7692308 0.26273280\n7  0.2727273 0.07712730 0.7272727 0.20567279\n8  0.2307692 0.07519438 0.7692308 0.25064792\n9  0.2727273 0.06653348 0.7272727 0.17742262\n10 0.2222222 0.04704561 0.7777778 0.16465964\n11 0.2857143 0.04169063 0.7142857 0.10422657\n12 0.3333333 0.02497424 0.6666667 0.04994847\n13 0.5000000 0.02240672 0.5000000 0.02240672\n14 0.2500000 0.02219797 0.7500000 0.06659392\n15 0.1666667 0.02202572 0.8333333 0.11012858\n16 0.0000000 0.00000000 1.0000000 0.00000000\n\nBy this metric, the Medici family is a hub, as well as the Strozzi and Guadagni families. If we look at our plot again, this makes sense.\n\n\n\nRecall that nodes with higher eigen derived centrality scores may occupy a bridge position.\n\n           name degree indegree outdegree      eigen   Bonacich\n1       Ridolfi      6        3         3 0.34155264  1.3288212\n2    Tornabuoni      6        3         3 0.32584230  1.1389896\n3        Medici     12        6         6 0.43030809 -0.5694948\n4       Strozzi      8        4         4 0.35598045  0.1898316\n5      Bischeri      6        3         3 0.28280009  0.0000000\n6       Peruzzi      6        3         3 0.27573037 -0.5694948\n7       Albizzi      6        3         3 0.24395611 -2.0881476\n8      Guadagni      8        4         4 0.28911560 -0.1898316\n9    Castellani      6        3         3 0.25902617 -1.3288212\n10    Barbadori      4        2         2 0.21170525 -1.5186528\n11   Acciaiuoli      2        1         1 0.13215429 -0.3796632\n12     Salviati      4        2         2 0.14591720 -0.1898316\n13 Lamberteschi      2        1         1 0.08879189  0.0000000\n14       Ginori      2        1         1 0.07492271 -1.8983160\n15        Pazzi      2        1         1 0.04481344  0.0000000\n16        Pucci      0        0         0 0.00000000  0.0000000\n          rc   eigen.rc        dc   eigen.dc\n1  0.2307692 0.07881984 0.7692308 0.26273280\n2  0.2307692 0.07519438 0.7692308 0.25064792\n3  0.4285714 0.18441775 0.5714286 0.24589034\n4  0.3333333 0.11866015 0.6666667 0.23732030\n5  0.2727273 0.07712730 0.7272727 0.20567279\n6  0.3000000 0.08271911 0.7000000 0.19301126\n7  0.2727273 0.06653348 0.7272727 0.17742262\n8  0.4000000 0.11564624 0.6000000 0.17346936\n9  0.3333333 0.08634206 0.6666667 0.17268411\n10 0.2222222 0.04704561 0.7777778 0.16465964\n11 0.1666667 0.02202572 0.8333333 0.11012858\n12 0.2857143 0.04169063 0.7142857 0.10422657\n13 0.2500000 0.02219797 0.7500000 0.06659392\n14 0.3333333 0.02497424 0.6666667 0.04994847\n15 0.5000000 0.02240672 0.5000000 0.02240672\n16 0.0000000 0.00000000 1.0000000 0.00000000\n\nBy this measure, the Ridolfi and Tornabuoni occupy bridge positions. Of note is that the Medici family is also high on this list, which perhaps speaks to the centrality of that family, regardless of measure.\n\n\n\n",
    "preview": "posts/httpsrpubscomlbateshaus867200/distill-preview.png",
    "last_modified": "2022-02-17T13:46:24-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsrpubscompjsulliv34864273/",
    "title": "Networks Hw 2",
    "description": "A closer look at Enrons Emails",
    "author": [
      {
        "name": "Peter Sullivan",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\r\nLooking at Nodes and Edges:\r\n\r\n\r\nls()\r\n\r\n\r\n[1] \"network_edgelist\" \"network_igraph\"   \"network_statnet\" \r\n\r\nvcount(network_igraph)\r\n\r\n\r\n[1] 184\r\n\r\necount(network_igraph)\r\n\r\n\r\n[1] 125409\r\n\r\nprint(network_statnet)\r\n\r\n\r\n Network attributes:\r\n  vertices = 184 \r\n  directed = TRUE \r\n  hyper = FALSE \r\n  loops = FALSE \r\n  multiple = FALSE \r\n  bipartite = FALSE \r\n  total edges= 3010 \r\n    missing edges= 0 \r\n    non-missing edges= 3010 \r\n\r\n Vertex attribute names: \r\n    vertex.names \r\n\r\n Edge attribute names not shown \r\n\r\n#print(network_igraph)\r\n\r\n\r\n\r\nIt looks like the igraph and statnet variables are showing different edges. The network igraph is showing 184 nodes and 125409 edges. The network statnet is showing 184 nodes, and 3010 edges.\r\n\r\nWeighted, Directed, Single Mode Network?\r\n\r\n\r\nis_bipartite(network_igraph)\r\n\r\n\r\n[1] FALSE\r\n\r\nis_directed(network_igraph)\r\n\r\n\r\n[1] TRUE\r\n\r\nis_weighted(network_igraph)\r\n\r\n\r\n[1] FALSE\r\n\r\nUsing the Network Igraph set, we have a single mode network, which is directed, and is not weighted.\r\n\r\nLooking at Vertex and Edge Attributes:\r\n\r\n\r\nvertex_attr_names(network_igraph)\r\n\r\n\r\n[1] \"Email\" \"Name\"  \"Note\" \r\n\r\nnetwork::list.vertex.attributes(network_statnet)\r\n\r\n\r\n[1] \"na\"           \"vertex.names\"\r\n\r\nedge_attr_names(network_igraph)\r\n\r\n\r\n[1] \"Time\"      \"Reciptype\" \"Topic\"     \"LDC_topic\"\r\n\r\nnetwork::list.edge.attributes(network_statnet)\r\n\r\n\r\n[1] \"LDC_topic\"      \"LDC_topic_desc\" \"LDC_topic_name\"\r\n[4] \"na\"             \"Reciptype\"      \"Time\"          \r\n[7] \"Topic\"         \r\n\r\nIgraph Attribute Names: Email, Name, Note\r\nIgraph edge names: Time, Reciptype, Topic, LDC_topic\r\nStatnet attribute names: na, vertex.names\r\nstatnet edge names: LDC_topic, LDC_topic_desc, LDC_topic_name, na, Reciptype, Time, Topic\r\n\r\nAccessing Attribute DATA:\r\n\r\n\r\nV(network_igraph)$Name %>% head()\r\n\r\n\r\n[1] \"Albert Meyers\"    \"Thomas Martin\"    \"Andrea Ring\"     \r\n[4] \"Andrew Lewis\"     \"Andy Zipper\"      \"Jeffrey Shankman\"\r\n\r\nV(network_igraph)$Email %>% head()\r\n\r\n\r\n[1] \"albert.meyers\" \"a..martin\"     \"andrea.ring\"   \"andrew.lewis\" \r\n[5] \"andy.zipper\"   \"a..shankman\"  \r\n\r\nV(network_igraph)$Note %>% head()\r\n\r\n\r\n[1] \"Employee, Specialist\"         \"Vice President\"              \r\n[3] \"NA\"                           \"Director\"                    \r\n[5] \"Vice President, Enron Online\" \"President, Enron Global Mkts\"\r\n\r\n(network_igraph)$Carrier %>% head()\r\n\r\n\r\nNULL\r\n\r\nhead(network_statnet %v% \"vertex.names\")\r\n\r\n\r\n[1] 1 2 3 4 5 6\r\n\r\nhead(network_statnet %e% \"Time\")\r\n\r\n\r\n[1] \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\"\r\n[4] \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\"\r\n\r\nhead(network_statnet %e% \"LDC_topic\")\r\n\r\n\r\n[1] \"-1\" \"-1\" \"-1\" \"-1\" \"-1\" \"-1\"\r\n\r\n\r\nSummarizing Attribute DATA\r\n\r\n\r\nsummary(E(network_igraph)$Time)\r\n\r\n\r\n   Length     Class      Mode \r\n   125409 character character \r\n\r\nsummary(network_statnet %e% \"Distance\")\r\n\r\n\r\nLength  Class   Mode \r\n     0   NULL   NULL \r\n\r\n #### Dyad Census\r\n\r\n\r\nigraph::dyad.census(network_igraph)\r\n\r\n\r\n$mut\r\n[1] 30600\r\n\r\n$asym\r\n[1] 64208\r\n\r\n$null\r\n[1] -77972\r\n\r\nsna::dyad.census(network_statnet)\r\n\r\n\r\n     Mut Asym  Null\r\n[1,] 913 1184 14739\r\n\r\nThe dyad census for null using igraph is coming up -77,972. This seems wrong.\r\n\r\nTriad Census\r\n\r\n\r\nigraph::triad.census(network_igraph)\r\n\r\n\r\n [1] 700234  19530 249694   8409   2695   5176   7060  13227   1180\r\n[10]     59   6781   1023   1137    786   2782   1611\r\n\r\nsna::triad.census(network_statnet)\r\n\r\n\r\n        003    012    102 021D 021U 021C 111D  111U 030T 030C  201\r\n[1,] 700234 150250 118974 8409 2695 5176 7060 13227 1180   59 6781\r\n     120D 120U 120C  210  300\r\n[1,] 1023 1137  786 2782 1611\r\n\r\n\r\nTransitivity\r\n\r\n\r\ntransitivity(network_igraph)\r\n\r\n\r\n[1] 0.3725138\r\n\r\ngtrans(network_statnet)\r\n\r\n\r\n[1] 0.3580924\r\n\r\ntransitivity(network_igraph, type = \"global\")\r\n\r\n\r\n[1] 0.3725138\r\n\r\ntransitivity(network_igraph, type = \"average\")\r\n\r\n\r\n[1] 0.5055302\r\n\r\ntransitivity(network_igraph, type = \"local\") %>% head()\r\n\r\n\r\n[1] 0.0023288309 0.0013788877 0.0008393993 0.0031740105 0.0007847921\r\n[6] 0.0017129438\r\n\r\nThe transitivity for igraph and statnet data sets were pretty close.\r\nThe global transitivity is .3725 while the average transitivity is higher at .5. This means that actors with fewer connections will have higher transitivity. This could be due to overweighted groups or this could be similar to different departments that know a lot of people in their department, but do not know others in the other departments.\r\n\r\nLocal Transitivity\r\n\r\n\r\nNames <- V(network_igraph)$Name\r\nNames %>% head()\r\n\r\n\r\n[1] \"Albert Meyers\"    \"Thomas Martin\"    \"Andrea Ring\"     \r\n[4] \"Andrew Lewis\"     \"Andy Zipper\"      \"Jeffrey Shankman\"\r\n\r\nLocal_transivity <- transitivity(network_igraph, type = \"local\")\r\n\r\ntransitivity_tibble <- tibble(Names = Names, Local_transivity = Local_transivity)\r\n\r\ntransitivity_tibble %>% arrange(desc(Local_transivity))\r\n\r\n\r\n# A tibble: 184 x 2\r\n   Names            Local_transivity\r\n   <chr>                       <dbl>\r\n 1 Thomas Martin             0.0571 \r\n 2 Joe Quenet                0.0179 \r\n 3 Mark Haedicke             0.0159 \r\n 4 Kim Ward                  0.0157 \r\n 5 Peter Keavey              0.0146 \r\n 6 Monika Causholli          0.0134 \r\n 7 David Delainey            0.00917\r\n 8 Susan Pereira             0.00909\r\n 9 Larry Campbell            0.00810\r\n10 NA                        0.00641\r\n# ... with 174 more rows\r\n\r\ngtrans(network_statnet)\r\n\r\n\r\n[1] 0.3580924\r\n\r\nFor some reason I am unable to pull local transitivity by type using the method used in HW 1 (vids = V()). I’m not sure if these local transivitys are correct. I ordered it by descending so the largest transivity would be thomas Martin at .05.\r\n\r\nDistances in the Network\r\n\r\n\r\n#distances(network_igraph, \"Thomas Martin\",\"Andrea Ring\")\r\n\r\n\r\n\r\naverage.path.length(network_igraph)\r\n\r\n\r\n[1] 2.390464\r\n\r\naverage.path.length(network_igraph, directed = F)\r\n\r\n\r\n[1] 2.085787\r\n\r\nI took these vertex names, so I’m a bit confused why these are not showing up correctly.\r\n\r\nIdentifying Isolates\r\n\r\n\r\nigraph::components(network_igraph)\r\n\r\n\r\n$membership\r\n  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n [33] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n [65] 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n [97] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 1 1 1\r\n[129] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n[161] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n\r\n$csize\r\n[1] 182   1   1\r\n\r\n$no\r\n[1] 3\r\n\r\n#Isolates\r\nisolates(network_statnet)\r\n\r\n\r\n[1]  72 118\r\n\r\nas.vector(network_statnet %v% \"vertex.names\")[c(isolates(network_statnet))]\r\n\r\n\r\n[1]  72 118\r\n\r\nFor some reason it seems that Network statnet vertex.names is only showing numbers, not actually the names. I wonder if the statnet was set up incorrectly.\r\nThere are two isolates. \r\nDensity\r\n\r\n\r\ngraph.density(network_igraph)\r\n\r\n\r\n[1] 3.72443\r\n\r\nnetwork.density(network_statnet)\r\n\r\n\r\n[1] 0.08939178\r\n\r\ngraph.density(network_igraph, loops = TRUE)\r\n\r\n\r\n[1] 3.704188\r\n\r\ngden(network_statnet, diag = FALSE)\r\n\r\n\r\n[1] 0.08939178\r\n\r\nThe Igraph density is over 1, and the network density is around 9%. Very different densities.\r\n\r\nVertex Degrees\r\n\r\n\r\nigraph::degree(network_igraph) %>% head()\r\n\r\n\r\n[1] 114 428 391 104 957 381\r\n\r\nsna::degree(network_statnet) %>% head()\r\n\r\n\r\n[1] 10 32 21  9 59 30\r\n\r\nThere is a significant difference between degrees from the igraph dataset compared to the statnet data.\r\n\r\n\r\n\r\nnetwork_degree <- data.frame(Name = V(network_igraph)$Name,\r\n                             degree = igraph::degree(network_igraph, loops =FALSE))\r\nnetwork_degree %>% arrange(desc(degree)) %>% slice(1:10)\r\n\r\n\r\n              Name degree\r\n1    Jeff Dasovich  13967\r\n2    James Steffes   9404\r\n3       Tana Jones   9307\r\n4  Richard Shapiro   8994\r\n5               NA   6591\r\n6      Steven Kean   6384\r\n7    John Lavorato   6177\r\n8  Michael Grigsby   5860\r\n9      Mark Taylor   5693\r\n10  Louise Kitchen   5362\r\n\r\nJeff Dasovich has the highest number of degrees around 13K. He must be very high up in the company.\r\n\r\nDegree in Directed Networks\r\n\r\n\r\nsna::degree(network_statnet, cmode = \"indegree\")%>% head()\r\n\r\n\r\n[1]  4 21 10  6 30 17\r\n\r\nsna::degree(network_statnet, cmode = \"outdegree\") %>% head()\r\n\r\n\r\n[1]  6 11 11  3 29 13\r\n\r\nigraph::degree(network_igraph, mode =\"in\", loops = FALSE) %>% head()\r\n\r\n\r\n[1]  78 334 224  88 614 210\r\n\r\nigraph::degree(network_igraph, mode =\"out\", loops = FALSE)%>%head()\r\n\r\n\r\n[1]  36  92 167  16 325 169\r\n\r\nDegree_network <- data.frame(Name = V(network_igraph)$Name,\r\n           total_degrees = igraph::degree(network_igraph, loops = FALSE),\r\n           in_degree = igraph::degree(network_igraph, mode =\"in\", loops = FALSE),\r\n           out_degree = igraph::degree(network_igraph, mode =\"out\", loops = FALSE) ) %>% arrange(desc(total_degrees))\r\n\r\nDegree_network %>% slice(1:10)\r\n\r\n\r\n              Name total_degrees in_degree out_degree\r\n1    Jeff Dasovich         13967      2612      11355\r\n2    James Steffes          9404      4988       4416\r\n3       Tana Jones          9307      2268       7039\r\n4  Richard Shapiro          8994      6893       2101\r\n5               NA          6591      2698       3893\r\n6      Steven Kean          6384      2676       3708\r\n7    John Lavorato          6177      3352       2825\r\n8  Michael Grigsby          5860      1097       4763\r\n9      Mark Taylor          5693      3694       1999\r\n10  Louise Kitchen          5362      2087       3275\r\n\r\nAs expected from someone high up in the company. They would mostly have out degree connections, with a select few in degree connections.\r\n\r\nSummary Statistics\r\n\r\n\r\nsummary(Degree_network)\r\n\r\n\r\n     Name           total_degrees       in_degree     \r\n Length:184         Min.   :    0.0   Min.   :   0.0  \r\n Class :character   1st Qu.:  212.8   1st Qu.: 150.5  \r\n Mode  :character   Median :  512.5   Median : 314.0  \r\n                    Mean   : 1184.0   Mean   : 592.0  \r\n                    3rd Qu.: 1401.2   3rd Qu.: 655.2  \r\n                    Max.   :13967.0   Max.   :6893.0  \r\n   out_degree      \r\n Min.   :    0.00  \r\n 1st Qu.:   30.75  \r\n Median :  159.00  \r\n Mean   :  591.99  \r\n 3rd Qu.:  600.50  \r\n Max.   :11355.00  \r\n\r\n\r\nDegree Distribution\r\n\r\n\r\nhist(Degree_network$total_degrees, main = \"Enron Degree Distribution\", xlab = \"Degree\")\r\n\r\n\r\n\r\nhist(Degree_network$out_degree, main =\"Enron Out-Degree Distribution\", xlab = \"Degree\")\r\n\r\n\r\n\r\nhist(Degree_network$in_degree, main = \"Enron In-Degree Distribution\", xlab = \"Degree\")\r\n\r\n\r\n\r\n\r\nMost people in the company have limited number of degrees of connections, while their are a select few with many connections.\r\nNetwork Degree Centralization\r\n\r\n\r\n#centralization(network_statnet, degree, cmode= \"indegree\")\r\n#centralization(network_statnet, degree, cmode = \"outdegree\")\r\n\r\n\r\ncentr_degree(network_igraph, loops = FALSE, mode = \"in\")$centralization\r\n\r\n\r\n[1] 34.61991\r\n\r\ncentr_degree(network_igraph, loops = FALSE, mode = \"out\")$centralization\r\n\r\n\r\n[1] 59.13566\r\n\r\nThere is a higher centralization for out-degree nodes compared to in-degree nodes.\r\n\r\n\r\n\r\n",
    "preview": "posts/httpsrpubscompjsulliv34864273/distill-preview.png",
    "last_modified": "2022-02-17T13:45:29-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsrpubscomyli210813861702/",
    "title": "Short Assignment 2",
    "description": "A new article created using the Distill format.",
    "author": [
      {
        "name": "Yifan Li",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\r\nLoad a built-in dataset from igraph.\r\n\r\n\r\n#Load the data.\r\nlibrary(igraphdata)\r\ndata(\"enron\",package=\"igraphdata\")\r\nls()\r\n\r\n\r\n[1] \"enron\"\r\n\r\nThis is an Enron email dataset has been made public by the U.S. Department of Justice. Let’s look at some of its basic descriptive statistics.\r\n\r\n\r\nlibrary(igraph)\r\n#Basic descriptive facts.\r\n#Network size\r\nvcount(enron)\r\n\r\n\r\n[1] 184\r\n\r\necount(enron)\r\n\r\n\r\n[1] 125409\r\n\r\n(ecount(enron) / vcount(enron))\r\n\r\n\r\n[1] 681.5707\r\n\r\n(ecount(enron) / (vcount(enron) * (vcount(enron) - 1)))\r\n\r\n\r\n[1] 3.72443\r\n\r\n#Find network features: \r\nis_bipartite(enron)\r\n\r\n\r\n[1] FALSE\r\n\r\nis_directed(enron)\r\n\r\n\r\n[1] TRUE\r\n\r\nis_weighted(enron)\r\n\r\n\r\n[1] FALSE\r\n\r\n#display vertex attributes\r\nvertex_attr_names(enron)\r\n\r\n\r\n[1] \"Email\" \"Name\"  \"Note\" \r\n\r\n#display edge attributes\r\nedge_attr_names(enron)\r\n\r\n\r\n[1] \"Time\"      \"Reciptype\" \"Topic\"     \"LDC_topic\"\r\n\r\n#summarize numeric network attribute\r\nhead(V(enron)$Email)\r\n\r\n\r\n[1] \"albert.meyers\" \"a..martin\"     \"andrea.ring\"   \"andrew.lewis\" \r\n[5] \"andy.zipper\"   \"a..shankman\"  \r\n\r\nhead(V(enron)$Name)\r\n\r\n\r\n[1] \"Albert Meyers\"    \"Thomas Martin\"    \"Andrea Ring\"     \r\n[4] \"Andrew Lewis\"     \"Andy Zipper\"      \"Jeffrey Shankman\"\r\n\r\nhead(V(enron)$Note)\r\n\r\n\r\n[1] \"Employee, Specialist\"         \"Vice President\"              \r\n[3] \"NA\"                           \"Director\"                    \r\n[5] \"Vice President, Enron Online\" \"President, Enron Global Mkts\"\r\n\r\nhead(E(enron)$Time)\r\n\r\n\r\n[1] \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\"\r\n[4] \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\"\r\n\r\nhead(E(enron)$Reciptype)\r\n\r\n\r\n[1] \"to\"  \"to\"  \"cc\"  \"cc\"  \"bcc\" \"bcc\"\r\n\r\nhead(E(enron)$Topic)\r\n\r\n\r\n[1] 1 1 3 3 3 3\r\n\r\nhead(E(enron)$LDC_topic)\r\n\r\n\r\n[1]  0 -1 -1 -1 -1 -1\r\n\r\nsummary(E(enron)$Topic)\r\n\r\n\r\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \r\n  0.000   1.000   1.000   1.711   3.000   3.000 \r\n\r\nsummary(E(enron)$LDC_Topic)\r\n\r\n\r\nLength  Class   Mode \r\n     0   NULL   NULL \r\n\r\nThis network has 184 nodes and 125409 edges. It is a non-bipartite, directed and unweighted network. Each node is a employee of Enron. The edge represents the email communication from one person to the other one. (Noticing it’s directed. So it is “from…to…” rather than “between”.) Each employee sent 681.57 messages on average, and averagely sent 3.72 messages to each potential receiver (collegue).\r\nEvery node has three attributes, which are Email, Name and Note. “Email” is the email address (omitting the domain name) of the person. “Name” is just the real name. “Note” is mainly about position and department.\r\nEach edge has four attributes, which are Time, Reciptype, Topic, and LDC-topic. “Time” is a string telling the when the email was sent. To make further analysis, we need to transfer the string to some kind of numeric data (which we haven’t learnt.) The “Reciptype” is how the recipient receive the email, ‘to’,‘cc’ or ‘bcc’.\r\n(Not sure about what Topic nad LDC_topic is about. Maybe categories assigned by the publisher describing types of topics.)\r\n\r\n\r\n#Classify all dyads in the network:\r\nigraph::dyad.census(enron)\r\n\r\n\r\n$mut\r\n[1] 30600\r\n\r\n$asym\r\n[1] 64208\r\n\r\n$null\r\n[1] -77972\r\n\r\nThere are 30600 mutual dyads, and 64208 asymmetric dyads. (Didn’t understand what negative 77972 means.)\r\n\r\n\r\n#Classify all triads in the network:\r\nigraph::triad_census(enron)\r\n\r\n\r\n [1] 700234  19530 249694   8409   2695   5176   7060  13227   1180\r\n[10]     59   6781   1023   1137    786   2782   1611\r\n\r\nsum(igraph::triad_census(enron))\r\n\r\n\r\n[1] 1021384\r\n\r\n(700234 / 1021384)\r\n\r\n\r\n[1] 0.6855737\r\n\r\n((19530 + 249694) / 1021384)\r\n\r\n\r\n[1] 0.2635874\r\n\r\n#get global clustering coefficient(i.e. network transitivity):\r\ntransitivity(enron, type=\"global\")\r\n\r\n\r\n[1] 0.3725138\r\n\r\n##get average local clustering coefficient:\r\ntransitivity(enron, type=\"average\")\r\n\r\n\r\n[1] 0.5055302\r\n\r\n#find average shortest path for network\r\naverage.path.length(enron,directed=F)\r\n\r\n\r\n[1] 2.085787\r\n\r\nAbove shows the census of 16 kinds of triads. Almost 69% triads are empty, and 26% are one egded. This implies a relatively loosely connected network. To learn more about the connectivity, let’s look at the transitivity. The global clustering coefficient is 0.3723, which means 37% of connected Triplets are closed, which is relatively loose. The average local clustering coefficient is 0.5055. It means on average, if two nodes are connected to a same node (two person respectively have email communication to one person), they have about 51% chance to connect to each other (communicate via email with each other.)\r\nThe local clustering coefficient is much larger than the global one, implying the network is clustering around, or concentrate to, some focus node. In other word, alters of employees who have few email communication are less likely to connect to each other than alters of employees with many other connections.(Not sure whether I understand it right. The Tuesday lecure recording link is wrong so I couldn’t watch it.)\r\nThe average geodesic distance is 2. It means onaverage, one need only one other person to have email connection to a random person in the network.\r\n\r\n\r\n#Number of components\r\nigraph::components(enron)$no \r\n\r\n\r\n[1] 3\r\n\r\n#Size of each component\r\nigraph::components(enron)$csize\r\n\r\n\r\n[1] 182   1   1\r\n\r\nThere are only 3 components in the network. 182 of the nodes are in the major componets, while there are two isolates.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-02-17T13:44:43-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httpssvirguezgithubioichrnetworksposts2022-02-02-describing-the-network-data/",
    "title": "Describing the Network Data",
    "description": "From raw data to network data",
    "author": [
      {
        "name": "Santiago Virgüez",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\nAs mentioned in the previous post, I’m working with a new database on the IAcHR rulings compiled by the PluriCourts project of the University of Oslo (Stiansen, Naurin, and Bøyum 2020). This dataset of amici actors has 425 observations of 2 variables (“Name of Amicus” and “Case ID”), indicating in which cases an amici actor participated in:\nA view of the dataset on amiciFrom raw data to an adjacency matrix\nIn order to work with this dataset, I need to put the data into a format that is suitable for network analysis. So, after cleaning the data, I create an adjacency matrix (nxn) where I can see how many times interveners have filed an amicus brief in the same case than each other. I asigned “0” to the diagonal of the matrix to ignore the ties from a node to itself.\n\n\ndata <- read.csv(\"CleanedData.csv\")\n\n#New column count\ndata$count <- 1\n\nlibrary(tidyr)\n\n#Gather the data at case level\nlev_data <- pivot_wider(data,id_cols = CaseID, names_from = `Name.of.Amicus`, values_from = count, values_fn = list(count = length), values_fill = list(count = 0))\n\n#Create the adjacency matrix\nmat <- as.matrix(lev_data[-1])\nad_matrix <- t(mat) %*% mat\ndiag(ad_matrix) <- 0\n\n\n\nAdjacency matrixDescribing the network dataset\nBefore describing the network dataset, I need first to create a network object from the dataset loaded (the adjacency network):\n\n\nlibrary(igraph)\namici_network <- graph.adjacency(ad_matrix, mode = \"undirected\", weighted = TRUE)\n\nis_directed(amici_network)\n\n\n[1] FALSE\n\nis_weighted(amici_network)\n\n\n[1] TRUE\n\nis_bipartite(amici_network)\n\n\n[1] FALSE\n\nNow, I can identify and describe content of nodes and links, and identify format of data set, Of course, from the previous steps we know that this a matrix, symmetric, and weighted. This means that each time there is a connection between two amici, each of them is filing a briefe before the court (symetrical), but these ties among amici are valued according to how many time they have intervened in the same cases.\nWe can also identify the network attributes:\n\n\n#size\nvcount(amici_network)\n\n\n[1] 403\n\necount(amici_network)\n\n\n[1] 3615\n\n#attributes names and content\nvertex_attr_names(amici_network)\n\n\n[1] \"name\"\n\nedge_attr_names(amici_network)\n\n\n[1] \"weight\"\n\nhead(V(amici_network)$name)\n\n\n[1] \"Fernando Linares Beltranena\"                                                     \n[2] \"Amnesty International\"                                                           \n[3] \"Association of the Bar of the City of New York\"                                  \n[4] \"Lawyers Committee for Human Rights\"                                              \n[5] \" The Central American Associaion of Families of Detained and Disappeared Persons\"\n[6] \"Minnesota Lawyers International Human Rights Committee\"                          \n\nhead(E(amici_network)$weight)\n\n\n[1] 2 2 1 3 1 1\n\nIt is also possible to describe the network structure:\n\n\n#Dyad census: because the ties are undirected we will expect that there is no assymetrical edges\nigraph::dyad.census(amici_network)\n\n\n$mut\n[1] 3615\n\n$asym\n[1] 0\n\n$null\n[1] 77388\n\n#Triad census\nigraph::triad_census(amici_network)\n\n\n [1] 9455588       0 1331612       0       0       0       0       0\n [9]       0       0    2600       0       0       0       0   37601\n\nIn terms of transitivity or global clustering, it is possible to see how the proption of connected triads in the network of amici that are complete is hight, meaning that almost all connected triads are transitive. Likewise, the local clustering coefficient (emphasis on low degree nodes) confirms the high transitivity of the network:\n\n\n#global clustering\ntransitivity(amici_network)\n\n\n[1] 0.9774703\n\n#local clustering coefficient\ntransitivity(amici_network, type=\"average\")\n\n\n[1] 0.9920321\n\n\n\n\n",
    "preview": {},
    "last_modified": "2022-02-17T13:44:26-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httpssvirguezgithubioichrnetworksposts2022-02-16-status-and-centrality-measures-in-the-iachr-network/",
    "title": "Status and Centrality Measures in the IAcHR Network",
    "description": "A look at the status measures of the network",
    "author": [
      {
        "name": "Santiago Virgüez",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\nRecap Affiliation network\nLet’s organize the affiliation matrix (actor by case) first:\n\n\n#Affiliation network data\nlibrary(igraph)\nlibrary(tidyr)\ndata <- read.csv(\"CleanedData.csv\")\n##New column count\ndata$count <- 1\n\n##Gather the data at case level\nlev_data <- pivot_wider(data,id_cols = CaseID, names_from = `Name.of.Amicus`, \n                        values_from = count, values_fn = list(count = length), \n                        values_fill = list(count = 0))\n\n##transpose lev_data to have amici grouped by case\nlibrary(data.table)\nT_lev_data <- transpose(lev_data,)\nrownames(T_lev_data) <- colnames(lev_data)\ncolnames(T_lev_data) <- lev_data$CaseID\nT_lev_data <- T_lev_data[-c(1),]\n\n##create affiliation network graph using 'igraph'\nAff_network <- graph.incidence(T_lev_data)\n\n\n\nPloting the affiliation network\nWe haven’t provided a visualization of the affiliation network yet. Let’s plot it.\n\n\nplot(Aff_network, vertex.label=NA)\n\n\n\n\nRemember that in this affiliation network, so there are two types of nodes: one type for the amici actors and another type for the legal cases (case 16, case 18 …) to which the actors belong. Ties then connect the actors to those cases. So, as bipartite network it is better to plot the edges between the 2 types of nodes (the orange/circular nodes represent the amici actors, while the squared/blue nodes represent the cases):\n\n\nV(Aff_network)$color <- c(\"orange\", \"steel blue\")[V(Aff_network)$type+1]\nV(Aff_network)$shape <- c(\"circle\", \"square\")[V(Aff_network)$type+1]\n\nplot(Aff_network, vertex.label=NA, vertex.size=7, layout=layout.bipartite) \n\n\n\n\nDegree centrality by node{.tabset}g\nIn the last post, I presented centrality measures for the one matrix (actor x actor), which was aimed to show the ties between actors by virtue of their participation in the same cases. Nevertheless, we saw that actors such as the Colombian NGO ‘Dejusticia’ had a higher degree of centrality due to the fact that they participated in (only) one case where a greater number of other amici actors participated. These actors were not central in the amici network, they just happen to be part of a really famous case.\nSo, to have a better understanding of the centrality of the actors it is necessary to work with the affiliation network.\n\n\n#data frame for the nodes in the affiliation network\naff.nodes<-data.frame(name=V(Aff_network)$name, degree=igraph::degree(Aff_network))\n\n#data frame for the actors nodes\naff.nodes_amici <- aff.nodes[-c(404:482),]\n#data frame for the cases nodes\naff.nodes_cases <- aff.nodes[-c(1:403),]\n\n\n\nNow we can see the distribution of the centrality measures for each types of nodes. As you can see, both distributions are skewed towards zero, indicating the low degree centrality of the actors/cases.\n\n\n#distribution for actors\nhist(aff.nodes_amici$degree, main = \"Degree Distribution Actors to Cases\", xlab = \"# Cases in which an actor participated\")\n\n\n\n#distribution for cases\nhist(aff.nodes_cases$degree, main = \"Degree Distribution Cases to Actors\", xlab = \"# Actors that participated in the case\")\n\n\n\n\nWe can also see the actors and cases with the highest degree of centrality in the affiliation network:\n\n\nlibrary(dplyr)\n#top 3 actors\narrange(aff.nodes_amici, desc(degree))%>%slice(1:3)\n\n\n                                                                                                         name\nAmnesty International                                                                   Amnesty International\nMinnesota Lawyers International Human Rights Committee Minnesota Lawyers International Human Rights Committee\nThe International Human Rights Law Group                             The International Human Rights Law Group\n                                                       degree\nAmnesty International                                       9\nMinnesota Lawyers International Human Rights Committee      3\nThe International Human Rights Law Group                    3\n\n#top 3 cases\narrange(aff.nodes_cases, desc(degree))%>%slice(1:3)\n\n\n    name degree\n152  152     46\n203  203     41\n167  167     32\n\nAs expected, international organizations have a higher degree centrality, that is participation in a higher number of cases, due to the fact that they have political interests across different countries, while local NGOs focus on legal cases from their base country. In terms of the cases, it is possible to see that the ones that attracted a greater number of amicus briefs were:\nArtavia Murillo et al. (“In vitro fertilization”) v. Costa Rica. This case concerns human rights violations resulting from the State’s general prohibition of the practice of in vitro fertilization.\nAtala Riffo and Daughters v. Chile. This case concerns the discriminatory treatment and arbitrary interference in the private and family life of a lesbian mother, Ms. Karen Atala Riffo.\nNogueira de Carvalho et al. V. Brazil. Murder of Gilson Nogueira de Carvalho, a lawyer and human rights defender and the State failure to undertake an effective investigation into his death and failed to punish the responsible parties.\nEigenvector and Bonacich power centrality{.tabset}g\nWe can also compare different measures of centrality, including the eigen vector and Bonacich power. To do so, we need to add the data to the data frame of each type of node\n\n\n#eigen vector centrality\ntemp<-centr_eigen(Aff_network,directed=F)\naff.nodes$eigen<-temp$vector\n\n#bonacich power centrality\naff.nodes$bonpow <- power_centrality(Aff_network, exponent = 0.9)\n\naff.nodes_amici <- aff.nodes[-c(404:482),]\naff.nodes_cases <- aff.nodes[-c(1:403),]\n\n\n\nThen we can plot the distribution of the three measures of centrality. As you can see, there are not many central actors/cases in this network\n\n\n#plot distribution centrality measures\nlibrary(ggplot2)\naff.nodes_amici%>%\n  select(-name) %>% \n  gather() %>% \n  ggplot(aes(value)) +\n  geom_histogram() +\n  facet_wrap(~key, scales = \"free\")\n\n\n\n\nBecause the ties we are looking at are the connections between actors and cases, the eigenvector simply shows what actors are linked to the most central or ‘popular’ cases. On the other hand, the bonacich power centrality shows the actors that participated on the cases were no other people participated (therefore the actors with greater power of influence).\n\n\n#top 3 actors with highest eigenvector centrality\narrange(aff.nodes_amici, desc(eigen))%>%\n  slice(1:3)\n\n\n                                                                                                                                                                                                                                                                                       name\nCentro de Estudios of Derecho, Justicia y Sociedad (DEJUSTICIA)                                                                                                                                                             Centro de Estudios of Derecho, Justicia y Sociedad (DEJUSTICIA)\nViviana Bohórquez Monsalve, Beatriz Galli, Alma Beltra?n y Puga, A?lvaro Her-rero, Gastón Chillier, Lourdes Bascary and Agustina Ramón Michel Viviana Bohórquez Monsalve, Beatriz Galli, Alma Beltra?n y Puga, A?lvaro Her-rero, Gastón Chillier, Lourdes Bascary and Agustina Ramón Michel\nAlexandra Loría Beeche                                                                                                                                                                                                                                               Alexandra Loría Beeche\n                                                                                                                                              degree\nCentro de Estudios of Derecho, Justicia y Sociedad (DEJUSTICIA)                                                                                    2\nViviana Bohórquez Monsalve, Beatriz Galli, Alma Beltra?n y Puga, A?lvaro Her-rero, Gastón Chillier, Lourdes Bascary and Agustina Ramón Michel      1\nAlexandra Loría Beeche                                                                                                                             1\n                                                                                                                                                  eigen\nCentro de Estudios of Derecho, Justicia y Sociedad (DEJUSTICIA)                                                                               0.1577985\nViviana Bohórquez Monsalve, Beatriz Galli, Alma Beltra?n y Puga, A?lvaro Her-rero, Gastón Chillier, Lourdes Bascary and Agustina Ramón Michel 0.1473282\nAlexandra Loría Beeche                                                                                                                        0.1473282\n                                                                                                                                                  bonpow\nCentro de Estudios of Derecho, Justicia y Sociedad (DEJUSTICIA)                                                                               -0.6041584\nViviana Bohórquez Monsalve, Beatriz Galli, Alma Beltra?n y Puga, A?lvaro Her-rero, Gastón Chillier, Lourdes Bascary and Agustina Ramón Michel -0.3000833\nAlexandra Loría Beeche                                                                                                                        -0.3000833\n\n#top 3 actors with highest bonacich power centrality\narrange(aff.nodes_amici, desc(bonpow))%>%\n  slice(1:3)\n\n\n                                                                                                                                                           name\nFernando Linares Beltranena                                                                                                         Fernando Linares Beltranena\nOscar Augusto Díaz Urquizú, former Director of the Treasury Police of Guatemala Oscar Augusto Díaz Urquizú, former Director of the Treasury Police of Guatemala\nThe International Commission of Jurists                                                                                 The International Commission of Jurists\n                                                                                degree\nFernando Linares Beltranena                                                          1\nOscar Augusto Díaz Urquizú, former Director of the Treasury Police of Guatemala      1\nThe International Commission of Jurists                                              1\n                                                                                eigen\nFernando Linares Beltranena                                                         0\nOscar Augusto Díaz Urquizú, former Director of the Treasury Police of Guatemala     0\nThe International Commission of Jurists                                             0\n                                                                                  bonpow\nFernando Linares Beltranena                                                     2.624369\nOscar Augusto Díaz Urquizú, former Director of the Treasury Police of Guatemala 2.624369\nThe International Commission of Jurists                                         2.624369\n\nFinally, we can correlate the different measures of centrality. As you can see all of the measures have negative correlation with each other.\n\n\nlibrary(corrr)\nlibrary(seriation)\n\ncent.corr<-aff.nodes_amici %>% \n  select(degree,eigen,bonpow)%>%\n  correlate() %>%\n  rearrange()\n\ncent.corr\n\n\n# A tibble: 3 × 4\n  term    degree   eigen  bonpow\n  <chr>    <dbl>   <dbl>   <dbl>\n1 degree NA      -0.0194 -0.0515\n2 eigen  -0.0194 NA      -0.0402\n3 bonpow -0.0515 -0.0402 NA     \n\n\n\n\n",
    "preview": "posts/httpssvirguezgithubioichrnetworksposts2022-02-16-status-and-centrality-measures-in-the-iachr-network/status-and-centrality-measures-in-the-iachr-network_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2022-02-17T13:46:05-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpswalidmedanigithubionetworks-blogposts2022-02-02-assignment2/",
    "title": "Assignment_2",
    "description": "Network of militarized interstate disputes from 1870 to 2014. (https://correlatesofwar.org/data-sets/MIDs)",
    "author": [
      {
        "name": "Walid Medani",
        "url": "https://walidmedani.github.io/networks-blog/"
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\nNetwork Graph\n\n\n\nNetwork Size\n\n[1] 156\n[1] 1374\n\nAttributes\n\n[1] FALSE\n[1] FALSE\n[1] TRUE\n[1] \"name\"\n[1] \"weight\"\n\nNetwork isn’t bipartite nor directed however it is weighted.\nDyad & Triad Census\n\n$mut\n[1] 1374\n\n$asym\n[1] 0\n\n$null\n[1] 10716\n [1] 449446      0 144438      0      0      0      0      0      0\n[10]      0  13050      0      0      0      0  13686\n[1] 620620\n# A tibble: 1 x 3\n    Mut  Asym  Null\n  <dbl> <dbl> <dbl>\n1  1374     0 10716\n# A tibble: 1 x 5\n  Triad0 Triad1 Triad2 Triad3 Triadsum\n   <dbl>  <dbl>  <dbl>  <dbl>    <dbl>\n1 449446 144438  13050  13686   620620\n\nTransivity\n\n[1] 0.7588157\n[1] 0.6456076\n\nGlobal transivity shows a proportion of .76 of completely connected triads within the network and the density of the ego network is .65.\nGeodesic & Component structure\n\n[1] 3.038289\n[1] 4\n[1] 150   2   2   2\n\nThere are 4 components with the first comprising of 150 members and the next 3 components having only 2 members each.\nNetwork density\n\n[1] 0.1136476\n\n\n\n\n",
    "preview": "posts/httpswalidmedanigithubionetworks-blogposts2022-02-02-assignment2/assignment2_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2022-02-17T13:44:17-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpswalidmedanigithubionetworks-blogposts2022-02-07-assignment3/",
    "title": "Assignment_3",
    "description": "Degree and Centrality. (https://correlatesofwar.org/data-sets/MIDs)",
    "author": [
      {
        "name": "Walid Medani",
        "url": "https://walidmedani.github.io/networks-blog/"
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\nNetwork Graph\n\n\n\nDescription\nThere are 156 nodes within the militarized interstate dispute dataset. Edges are undirected and are defined as instances of when one state threatened, displayed, or used force directed towards the government, official representatives, official forces, property, or territory of another state.\nNetwork Density & Centralization\n\n[1] 0.1136476\n$res\n  [1] 74 56 64 60 47 63 53 51 58 55 43 59 46 62 17 22 20 63 23 36  2\n [22] 37  4 39 15  5  2  3  5  8  2 17  4  4  3  1  3  3  2  1  1  7\n [43] 41  7 13  8  5  8  8 33  5 12  3 36 23 39  2 19  6 18  6 18  7\n [64]  8  5  1  2 12  8  2  8 21  2  1  8 10  4  4  1  3  5 45 45 34\n [85] 47 54  2  7  1  1  3  2  7 45 46 45 45  1  1  1  2  1  1  1 36\n[106]  1  1  2 26  9  1  1  1  1  4  5  5 19 19 53 53 42  2  2  3  1\n[127]  7 37 37 44 38 37 44 44 37 44  3  1  3  1  1  1  1  1  3  1  1\n[148]  1  1  2  1  2  2 33 33  1\n\n$centralization\n[1] 0.3637717\n\n$theoretical_max\n[1] 24180\n\nDegrees\n\n    name degree\nUSA  USA     74\nUKG  UKG     64\nFRN  FRN     63\nRUS  RUS     63\nTUR  TUR     62\nNTH  NTH     60\n     name               degree     \n Length:156         Min.   : 1.00  \n Class :character   1st Qu.: 2.00  \n Mode  :character   Median : 7.00  \n                    Mean   :17.62  \n                    3rd Qu.:36.25  \n                    Max.   :74.00  \n\n\nResults\nUSA, UK, France, Russia, and Turkey are some of the most central nodes within the dataset. Whereas Tunisia, Kosovo, Jamaica, Sri Lanka, and Nepal are the lowest central nodes. The network density is low (.11) with not many actual connections despite the portion of potential connections. With a centralization score of .36, ties of the network aren’t too concentrated on a group of actors.\n\n\n\n",
    "preview": "posts/httpswalidmedanigithubionetworks-blogposts2022-02-07-assignment3/assignment3_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2022-02-17T13:45:00-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpswalidmedanigithubionetworks-blogposts2022-02-16-assignment4/",
    "title": "Assignment_4",
    "description": "Status and Eigenvector (https://correlatesofwar.org/data-sets/MIDs)",
    "author": [
      {
        "name": "Walid Medani",
        "url": "https://walidmedani.github.io/networks-blog/"
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\nNetwork Graph\n\n\n\nDescription\nThere are 156 nodes within the militarized interstate dispute dataset. Edges are undirected and are defined as instances of when one state threatened, displayed, or used force directed towards the government, official representatives, official forces, property, or territory of another state.\nNetwork Density & Degree Centralization\n\n[1] 0.1136476\n$res\n  [1] 74 56 64 60 47 63 53 51 58 55 43 59 46 62 17 22 20 63 23 36  2\n [22] 37  4 39 15  5  2  3  5  8  2 17  4  4  3  1  3  3  2  1  1  7\n [43] 41  7 13  8  5  8  8 33  5 12  3 36 23 39  2 19  6 18  6 18  7\n [64]  8  5  1  2 12  8  2  8 21  2  1  8 10  4  4  1  3  5 45 45 34\n [85] 47 54  2  7  1  1  3  2  7 45 46 45 45  1  1  1  2  1  1  1 36\n[106]  1  1  2 26  9  1  1  1  1  4  5  5 19 19 53 53 42  2  2  3  1\n[127]  7 37 37 44 38 37 44 44 37 44  3  1  3  1  1  1  1  1  3  1  1\n[148]  1  1  2  1  2  2 33 33  1\n\n$centralization\n[1] 0.3637717\n\n$theoretical_max\n[1] 24180\n\n\n    name degree\nUSA  USA     74\nUKG  UKG     64\nFRN  FRN     63\nRUS  RUS     63\nTUR  TUR     62\nNTH  NTH     60\n     name               degree     \n Length:156         Min.   : 1.00  \n Class :character   1st Qu.: 2.00  \n Mode  :character   Median : 7.00  \n                    Mean   :17.62  \n                    3rd Qu.:36.25  \n                    Max.   :74.00  \n\n\nCentrality Measures\nCloseness Centraility\n\n         USA          CAN          UKG          NTH          BEL \n6.082355e-05 6.068329e-05 5.990894e-05 6.071645e-05 5.998081e-05 \n         FRN \n6.110975e-05 \n\nBetweenness Centrality\n\n      USA       CAN       UKG       NTH       BEL       FRN \n1543.1492  199.5687  295.0000  124.3906  345.1667 3030.5423 \n\n\nEigen Centrality\n\n[1] 1.0000000 0.9302363 0.9867230 0.9781763 0.8832846 0.9820892\n[1] 0.7215986\n\n\n\n\n\n\n\n",
    "preview": "posts/httpswalidmedanigithubionetworks-blogposts2022-02-16-assignment4/assignment4_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2022-02-17T13:46:14-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsyli210813githubiosocialnetworkanalysishw3/",
    "title": "Homework 3",
    "description": "Week 3 Assignment: Degree and Centrality.",
    "author": [
      {
        "name": "Yifan Li",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\n\n\n\n\n\n\n\n[1] FALSE\n[1] TRUE\n[1] TRUE\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1870    1971    1990    1982    2003    2014 \n\nThe original dataset is the trade dataset version 4 from the Correlates of War Project. The original format is an edgelist. The nodes are countries, and the ties are the trading relations between countries from 1870 to 2014. The network is directed and weighted.\nThe original dataset is too dense. To identify the structure of the network more clearly, I create a subset which only keep ties with import larger than (or equal to) 100 million.\nLet’s look at some basic descriptive facts.\n\n[1] 207\n[1] 1773656\n[1] 17136.77\n[1] 41.59411\n[1] 189\n[1] 117168\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n     -9      -9       0     143       2  472525 \n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n   100.0    178.4    373.7   2139.9   1133.2 472525.2 \n\nThe original dataset has 207 nodes, i.e. 207 countries involed in the trading network. There are 1773656 egdes. It’s really a huge amount since each edge counts as the trading number for one year. On average, one country import 142 million dollars of good from another country each year.\nIn the subset, we only have 189 nodes, meaning there are 18 countries never have import or export larger than 100 million from 1870 to 2014. The number of egdes decrease to 117168, which is only about 6.6% of the whole dataset. It implies a skewed distribution among international trade. The much looser network give us more chance to identify characteristic of international trading network.\n(I will keep comparing the subset with the original one.)\nLet’s classify all dyads and traids in the network:\n\n$mut\n[1] 886828\n\n$asym\n[1] 0\n\n$null\n[1] -865507\n$mut\n[1] 45072\n\n$asym\n[1] 27024\n\n$null\n[1] -54330\n [1]    1884       0   73511       0       0       0       0       0\n [9]       0       0   73236       0       0       0       0 1308304\n [1] 576073  42173 270669   3983   9872  10708  48167  26529   1316\n[10]    228  54882   5108   2127   3675  23094  28810\n[1] 0.5201966\n[1] 0.2824978\n[1] 0.8923257\n\nIn the original network, we cannot find a single asymmetry dyad. It makes it look like a undirected network in some way, which constrain the finding we can get.\nIn the subset, we identify 45072 mutual dyads and 27024 asymmetry dyads, showing signs of trade imbalance. The triad census also show a large proportion (52%) of empty triads. 28% of them only have one egde. 89% of the triads are not triangle.\nTo get more sense of the pattern of the clustering, let’s calculate the coefficients.\n\n[1] 0.9816825\n[1] 0.5560647\n[1] 0.9825593\n[1] 0.8148533\n[1] 1.051686\n[1] 1.781887\n[1] 1\n[1] 1\n[1] 207\n[1] 189\n\nFor the original network, the global and average local clustering coefficient are both near 0.98, almost telling us nothing about the characteristics of the network. In the subset, the global coefficient is 0.57 and the average local one is 0.81. The local one is much larger. It shows the nodes are more clustering in local level. In other words, those trade partners of a country who has less trading relations tends to trade more to each other.\nThe average shortest path for the original network is 1.05, meaning almost every two country have direct trading relationship. How closely the global market is connected! Meanwhile, in the subset the average shortest path is 1.78. One country needs to take 0.78 more step to get another on average under the threshold. Still very close, isn’t it?\nIn both dataset, we can only identify one huge component. Global market!\n\n[1] 41.39317\n[1] 3.280087\n\nIn the original network, the density is 41.39, which is really dense. Not surprisingly, with the threshold we only get a density of 3.28, a much looser picture.\n\n     name               degree         indegree       outdegree    \n Length:207         Min.   :  142   Min.   :   71   Min.   :   71  \n Class :character   1st Qu.:12284   1st Qu.: 6142   1st Qu.: 6142  \n Mode  :character   Median :17716   Median : 8858   Median : 8858  \n                    Mean   :17137   Mean   : 8568   Mean   : 8568  \n                    3rd Qu.:23300   3rd Qu.:11650   3rd Qu.:11650  \n                    Max.   :27168   Max.   :13584   Max.   :13584  \n     name               degree         indegree        outdegree     \n Length:189         Min.   :    1   Min.   :   0.0   Min.   :   0.0  \n Class :character   1st Qu.:  129   1st Qu.:  40.0   1st Qu.:  72.0  \n Mode  :character   Median :  463   Median : 210.0   Median : 276.0  \n                    Mean   : 1240   Mean   : 619.9   Mean   : 619.9  \n                    3rd Qu.: 1708   3rd Qu.: 850.0   3rd Qu.: 855.0  \n                    Max.   :10305   Max.   :5366.0   Max.   :4939.0  \n\nOn average, each country has 17137 edges, or trade from 1870 to 2014. With the threshold, they only got 1240 on average. To learn more about it, let’s graph some histograms.\n\n\n\n\n\n\nThe original network has a distribution closer to normal distribution, while in with the threshold is highly right skewed. It’s another evidence of imbalance of economy and exchange among countries.\n\n[1] 24.46583\n[1] 24.46583\n[1] 25.3793\n[1] 23.09594\n\nSurprisingly, we found the original network and the subset have almost the same centralization. The world market goes around some giants no matter you look at the trivial exchange or huge trade.\n\n                      name degree indegree outdegree\n1 United States of America  27168    13584     13584\n2                   Mexico  27168    13584     13584\n3                Guatemala  27168    13584     13584\n4                 Colombia  27168    13584     13584\n5                Venezuela  27168    13584     13584\n                      name degree indegree outdegree\n1 United States of America  27168    13584     13584\n2                   Mexico  27168    13584     13584\n3                Guatemala  27168    13584     13584\n4                 Colombia  27168    13584     13584\n5                Venezuela  27168    13584     13584\n                      name degree indegree outdegree\n1 United States of America  27168    13584     13584\n2                   Mexico  27168    13584     13584\n3                Guatemala  27168    13584     13584\n4                 Colombia  27168    13584     13584\n5                Venezuela  27168    13584     13584\n                      name degree indegree outdegree\n1 United States of America  10305     5366      4939\n2           United Kingdom   8516     4254      4262\n3                   France   7651     3995      3656\n4                    Japan   6982     3881      3101\n5                    Italy   6829     3438      3391\n                      name degree indegree outdegree\n1 United States of America  10305     5366      4939\n2           United Kingdom   8516     4254      4262\n3                   France   7651     3995      3656\n4                    Italy   6829     3438      3391\n5                    Japan   6982     3881      3101\n                      name degree indegree outdegree\n1 United States of America  10305     5366      4939\n2           United Kingdom   8516     4254      4262\n3                   France   7651     3995      3656\n4                    Japan   6982     3881      3101\n5                    Italy   6829     3438      3391\n\nIn the original network, the US, Mexico, Guatemala, Colombia, and Venezuela have the highest degree, or most trading relations, which is quite against our common sense. Probably it is because the publisher managed to got more data in North and South America in early age. We could constrain our data to recent decades next time.\nIn the subset, we got the US, the UK, France, Japan and Italy on the top 5, which is not surprising. If we constrain our data to recent decades, maybe we can expect China to show up.\n\n\n\n",
    "preview": "posts/httpsyli210813githubiosocialnetworkanalysishw3/distill-preview.png",
    "last_modified": "2022-02-17T13:45:31-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsyli210813githubiosocialnetworkanalysishw4/",
    "title": "Homework 4",
    "description": "Week 4 Assignment: Network Status.",
    "author": [
      {
        "name": "Yifan Li",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\n\n\n\n\n\n\n\n[1] FALSE\n[1] TRUE\n[1] TRUE\n\nThe original dataset is the trade dataset version 4 from the Correlates of War Project. In this subject I only use trade data of year 2014. The format is edgelist. The nodes are countries, and the ties are the trading relations between countries in 2014. The network is directed and weighted.\nLet’s look at some basic descriptive facts.\n\n[1] 186\n[1] 22451\n[1] 241.4086\n[1] 0.6524557\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n     0.0      0.2      4.9    813.1     78.5 472525.2 \n\nThe network in 2014 has 186 nodes, i.e. 186 countries involed in the trading network. There are 22451 egdes. Each country has 241 connected edges on average. On average, one country import 813 million dollars of good from another country each year. 65% of potential ties exit.\nLet’s classify all dyads and traids in the network:\n\n$mut\n[1] 9933\n\n$asym\n[1] 2585\n\n$null\n[1] 4687\n [1]  75574  62420  92513  11021   9514  11233  60137  45246   5530\n[10]    788 188669  14094   9006  15882 147383 306230\n[1] 0.07161783\n[1] 0.3484117\n[1] 1\n\nThere are 9933 mutual bilateral trade relations, 2585 unilateral trade relations, and 4687 pairs of coutries have no trading in 2014.\n7% of the triads are empty, and 65% of them are triangle. The network is quite dense.\nLet’s look at the distribution of nodes centrality.\n\n\n\nThe betweenness centrality and reflected centrality are right-skewed as expected. Limited coutries locate at the central bridging positions. But the bonachic-power and closeness show nearly normal distribution, and the eigenvector centrality and deprived centrality are highly left-skewed, which might show a decentralized network. The deprived centrality contribute to largest part of eigenvector centrality. Every country kind of plays as bridge in the network.\n\n\n\n\n                      name short_name ccode closeness betweenness\n1                    China        CHN   710 0.9946237    316.8033\n2 United States of America        USA     2 0.9788360    306.0056\n3              South Korea        ROK   732 0.9840426    304.6967\n4                Australia        AUL   900 0.9788360    294.1315\n5                    India        IND   750 0.9893048    224.8866\n       eigen     bonpow         rc    eigen.rc        dc   eigen.dc\n1 0.09697295 -1.2742959 0.18197333 0.017646489 0.8180267 0.07932646\n2 0.09703836 -1.0694386 0.19337928 0.018765208 0.8066207 0.07827315\n3 0.09650158 -1.1175464 0.07623579 0.007356874 0.9237642 0.08914470\n4 0.09535200 -0.8813261 0.04057029 0.003868458 0.9594297 0.09148354\n5 0.09695131 -1.1636487 0.02262084 0.002193121 0.9773792 0.09475819\n                    name short_name ccode closeness betweenness\n1 Bosnia and Herzegovina        BOS   346 0.6271186    2.042703\n2           Saudi Arabia        SAU   670 0.8726415   83.004276\n3               Zimbabwe        ZIM   552 0.6902985   26.360045\n4     Dominican Republic        DOM    42 0.8258929   56.408439\n5               Malaysia        MAL   820 0.9487179  199.363801\n       eigen    bonpow           rc     eigen.rc        dc   eigen.dc\n1 0.05841333 0.6260723 0.0014683688 8.577231e-05 0.9985316 0.05832756\n2 0.08701319 0.5455796 0.0317620070 2.763714e-03 0.9682380 0.08424948\n3 0.07643869 0.5220134 0.0004566747 3.490762e-05 0.9995433 0.07640378\n4 0.07625539 0.4349504 0.0020462397 1.560368e-04 0.9979538 0.07609935\n5 0.09645108 0.4242820 0.0301872862 2.911596e-03 0.9698127 0.09353948\n            name short_name ccode closeness betweenness      eigen\n1          China        CHN   710 0.9946237    316.8033 0.09697295\n2 United Kingdom        UKG   200 0.9893048    224.4011 0.09698944\n3         France        FRN   220 0.9893048    217.5927 0.09701673\n4          India        IND   750 0.9893048    224.8866 0.09695131\n5    Netherlands        NTH   210 0.9840426    213.0323 0.09701673\n     bonpow         rc    eigen.rc        dc   eigen.dc\n1 -1.274296 0.18197333 0.017646489 0.8180267 0.07932646\n2 -1.000833 0.03264763 0.003166476 0.9673524 0.09382296\n3 -1.371359 0.04966972 0.004818793 0.9503303 0.09219793\n4 -1.163649 0.02262084 0.002193121 0.9773792 0.09475819\n5 -1.315812 0.10053860 0.009753925 0.8994614 0.08726280\n                      name short_name ccode closeness betweenness\n1 United States of America        USA     2 0.9788360    306.0056\n2              Netherlands        NTH   210 0.9840426    213.0323\n3                   France        FRN   220 0.9893048    217.5927\n4                  Denmark        DEN   390 0.9536082    186.4211\n5                    Spain        SPN   230 0.9536082    187.3443\n       eigen     bonpow          rc     eigen.rc        dc   eigen.dc\n1 0.09703836 -1.0694386 0.193379284 0.0187652082 0.8066207 0.07827315\n2 0.09701673 -1.3158118 0.100538595 0.0097539253 0.8994614 0.08726280\n3 0.09701673 -1.3713593 0.049669717 0.0048187933 0.9503303 0.09219793\n4 0.09701673 -0.7065288 0.009933439 0.0009637097 0.9900666 0.09605302\n5 0.09701673 -0.5716878 0.031197741 0.0030267026 0.9688023 0.09399002\n          name short_name ccode closeness betweenness      eigen\n1      Finland        FIN   375 0.8809524    141.8394 0.09667270\n2      Denmark        DEN   390 0.9536082    186.4211 0.09701673\n3       Turkey        TUR   640 0.9840426    208.8803 0.09679966\n4       Sweden        SWD   380 0.9788360    205.9708 0.09677237\n5 South Africa        SAF   560 0.9736842    200.3019 0.09685164\n      bonpow          rc     eigen.rc        dc   eigen.dc\n1  0.1099607 0.006087120 0.0005884583 0.9939129 0.09608424\n2 -0.7065288 0.009933439 0.0009637097 0.9900666 0.09605302\n3 -1.6759857 0.011984440 0.0011600897 0.9880156 0.09563957\n4 -1.1753454 0.013861294 0.0013413903 0.9861387 0.09543098\n5 -1.2631864 0.017108054 0.0016569431 0.9828919 0.09519470\n                      name short_name ccode closeness betweenness\n1 United States of America        USA     2 0.9788360    306.0056\n2                    China        CHN   710 0.9946237    316.8033\n3                   Canada        CAN    20 0.9788360    192.3823\n4              Netherlands        NTH   210 0.9840426    213.0323\n5                  Germany        GMY   255 0.9840426    219.4348\n       eigen     bonpow        rc    eigen.rc        dc   eigen.dc\n1 0.09703836 -1.0694386 0.1933793 0.018765208 0.8066207 0.07827315\n2 0.09697295 -1.2742959 0.1819733 0.017646489 0.8180267 0.07932646\n3 0.09672468 -1.3044404 0.1339702 0.012958227 0.8660298 0.08376646\n4 0.09701673 -1.3158118 0.1005386 0.009753925 0.8994614 0.08726280\n5 0.09689933 -0.6890218 0.1000104 0.009690938 0.8999896 0.08720839\n\nAmong these countries, China has the highest betweenness and closeness centrality. Bosnia and Herzegovina has the highest bonachic-power. The US gets the highest deprived centrality and eigenvector centrality. The Finland has the highest reflected centrality. On the top 5 lits of betweenness, closeness, deprived and eigenvector centrality, all we see are familiar trading powerhouses. But the list of bonachic-power has many unexpected country on the list. I don’t really understand what bonachic-power presents so don’t know how to interpret this outcome.\n\n         term closeness eigen betweenness eigen.dc eigen.rc bonpow\n1   closeness             .91         .91      .89      .51   -.02\n2       eigen       .91               .79      .99      .41    .01\n3 betweenness       .91   .79                  .74      .66   -.04\n4    eigen.dc       .89   .99         .74               .31    .02\n5    eigen.rc       .51   .41         .66      .31            -.07\n6      bonpow      -.02   .01        -.04      .02     -.07       \n\n\nCloseness, betweeness, eigenvector centrality are highly corralled. They are interchangeable measures of centrality. The reflected centrality is less correlated with those parameters, but it’s a small part compared with the deprived one. Bonachic-power is almost independent with other parameters.\n\n\n\n",
    "preview": "posts/httpsyli210813githubiosocialnetworkanalysishw4/distill-preview.png",
    "last_modified": "2022-02-17T13:46:26-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to DACSS 601",
    "description": "Welcome to DACSS 601: Foundations of Data Science. We hope you enjoy \nreading what we have to say!",
    "author": [
      {
        "name": "Meredith Rolfe",
        "url": "http://umass.edu/sbs/dacss"
      }
    ],
    "date": "2021-03-25",
    "categories": [
      "welcome"
    ],
    "contents": "\n\n\n\n",
    "preview": {},
    "last_modified": "2022-02-17T13:37:57-05:00",
    "input_file": {}
  }
]
