[
  {
    "path": "posts/httpsnmilsteinumagithubioposts2022-02-21-week-5-interpretaive-assignment/",
    "title": "Week 5 Interpretaive Assignment",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Noah Milstein",
        "url": {}
      }
    ],
    "date": "2022-03-03",
    "categories": [],
    "contents": "\n\n\n\n\n\n\nBackground and Research\nQuestion:\nWikipedia is self-described as a “free content, multilingual online\nencyclopedia written and maintained by a community of volunteers through\na model of open collaboration,” information on the website i shared and\nmaintained “using a wiki-based editing system. [and] Individual\ncontributors,” being the 5th most visited website in the world it is\nalso the largest and most-read reference work in history.” (“https://en.wikipedia.org/wiki/Wikipedia”) Because of\nWikipedia’s position, as an arbiter of information and reference for a\nnumber of subjects, it is essential to understand the nature of the\nrequired citations and how they inform the websites portrayal of history\nand information. (Chase 2021)\nConflict is a defining feature of history, the results of war and the\ngroups involved are essential to understanding dynamics of power\nglobally. A war can represent the transfer of material, territorial, and\nstrategic power between groups. As a result the networks of wars between\nnations can give some notion of power centrality among warring\nnations.\nSince wikipedia has become a widely accepted (if often critiqued)\nsource of information, its citations and the information resulting from\nthem can give us a sense of how where the center of global conflict, and\nthus the most central nations, according to popular and accessible\nacademic literature.\nhttps://www.visualcapitalist.com/the-50-most-visited-websites-in-the-world/\nChase, Matt. “Wikipedia is 20, and its reputation has never been\nhigher”. The Economist. January 9, 2021. Retrieved February 25,\n2021.\n\n\n\nPart 1:\nDescribe the Dataset You Are\nUsing:\nThe Dataset Being Used: The dataset that I am using\nis wikipedia list of wars throughout history, this article is the “List\nof wars: 1000–1499” which acts as a subset of the “2nd-millennium\nconflicts” I chose this dataset as an exemplar of popular history’s\ndepiction of the centralization of worldwide conflict. Wikipedia, being\nan accessible source generally created from relevant citations makes it\na good case study to see where historical writers and academics center\ntheir world are relevant conflicts.\nIdentify initial network\nformat:\nAnswer: The initial network format is as an edge\nlist, the first, in column contains the winners of each\nwar while the second, out column contains the losers of\neach. These sets of belligerents are directed\nNetwork\nStructure: Wars Startings in the 1000s\n\n Network attributes:\n  vertices = 117 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 153 \n    missing edges= 0 \n    non-missing edges= 153 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nNetwork\nStructure: Wars Startings in the 1100s\n\n Network attributes:\n  vertices = 78 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 225 \n    missing edges= 0 \n    non-missing edges= 225 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nNetwork\nStructure: Wars Startings in the 1200s\n\n Network attributes:\n  vertices = 161 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 313 \n    missing edges= 0 \n    non-missing edges= 313 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nIdentify Nodes: Describe and identify the nodes\n(including how many nodes are in the dataset)\nAnswer: Nodes or vertices in these datasets\nrepresent belligerents in wars throughout history, the involved parties\nin each conflict can be a nation, province, individual, or group so long\nas they are listed as involved in the conflict. In the 1000s there are\n117, in the 1100s there are 78 and in the 1200s there are 161.\nWhat Constitutes a Tie: What constitutes a tie or\nedge (including how many ties, whether ties are directed/undirected and\nweighted/binary, and how to interpret the value of the tie if any)\nAnswer: A tie or edge in this dataset represents a\nwar, this war can be between two nations or groups within a nation.\nThese edges can represent a war that involved many more nations but are\nalways tied to each and every party involved on both sides. These edges\nare directed and the direction indicates which side “won” the conflict\n(if an edge has an arrow pointing to another the node that originated\nthat arrow won the war against them. There are 153 edges in the 1000s,\n225 edges in 1100s and 313 edges in the 1200s.\nEdge Attributes and Subset: Whether or not there are\nedge attributes that might be used to subset data or stack multiple\nnetworks (e.g., tie type, year, etc).\nAnswer: There are a number of attributes that could\nbe used to subset the data, year that the conflict began or the length\nof time it lasted are available. Aspects like each side’s religion and\nthe area where the conflict took place could be used to subset the data\nitself.\nPart 2:\nBrokerage and Betweeness\ncentrality\nWhat are betweeness and brokerage cenrrality\nCalculate brokerage and betweenneess centrality measures for one or more\nsubsets of your network data, and write up the results and your\ninterpretation of them.\nAnswer: I will be calculating these measures for\nwars in 1000-1099, 1100-1199, and 1200-1399.\n\n\n\nBrokerage scores in the\n1000s\n\n\n\n\n\n(wars_in_1000s.nodes.stat_2%>%\n  arrange(desc(broker.tot))%>%\n  slice(1:10))[,c(1,11:15)] %>%kable()\n\n\nname\nbroker.tot\nbroker.coord\nbroker.itin\nbroker.rep\nbroker.gate\nByzantine Empire\n25.2728731\nNaN\n3.9930250\nNaN\nNaN\nSultanate of Rum\n10.4364880\nNaN\n-0.5014965\nNaN\nNaN\nHoly Roman Empire\n10.0243662\nNaN\n4.8919293\nNaN\nNaN\nEngland\n7.5516353\nNaN\n6.6906430\n-0.0800286\n-0.0800286\nKingdom of Sicily\n5.4910263\nNaN\n3.9930250\nNaN\nNaN\nKingdom of France\n2.1940518\nNaN\n-0.5014965\nNaN\nNaN\nSeljuk Empire\n1.7819300\n-0.0271615\n-0.5004595\n6.3140099\n-0.1374029\nKingdom of Georgia\n0.5455645\n-0.0158536\n-0.5009747\n-0.1126843\n-0.1126843\nPapal States\n0.5455645\n-0.0158536\n-0.5009747\n-0.1126843\n11.6872209\nNormandy\n0.1334427\n-0.1256118\n0.4229345\n-0.2730778\n-0.2730778\n\nBrokerage scores in the\n1100s\n\n\n\n\n\n\n\n\n(wars_in_1100s.nodes.stat_2%>%\n  arrange(desc(broker.tot))%>%\n  slice(1:10))[,c(1,10:14)] %>%kable()\n\n\nname\nbroker.tot\nbroker.coord\nbroker.itin\nbroker.rep\nbroker.gate\nKingdom of Jerusalem\n13.5778650\nNaN\n2.9379204\n17.9204822\n-0.1688321\nFatimid Caliphate\n8.0093472\nNaN\n-0.6987889\nNaN\nNaN\nAyyubid Dynasty\n7.2954347\nNaN\n-0.6973228\n-0.1688321\n-0.1688321\nZengid Dynasty\n5.7248271\nNaN\n0.7542726\nNaN\nNaN\nByzantine Empire\n5.2964795\nNaN\n0.7567745\n-0.1688321\n-0.1688321\nEngland\n4.4397845\nNaN\n-0.6973228\n-0.1688321\n-0.1688321\nHoly Roman Empire\n2.1552644\nNaN\n-0.6973228\n-0.1688321\n-0.1688321\nKingdom of France\n1.0130043\nNaN\n-0.6973228\n-0.1688321\n-0.1688321\nKingdom of Sicily\n0.1563093\n-0.2053296\n-0.6628278\n-0.4286929\n-0.4286929\nPapal States\n-0.2720383\n-0.1781918\n-0.6712334\n-0.3997174\n1.6840665\n\nBrokerage scores in the\n1200s\n\n\n\n\n\n\n\n\n\n\nname\nbroker.tot\nbroker.coord\nbroker.itin\nbroker.rep\nbroker.gate\nMongol Empire\n47.964825\nNaN\n-0.5953457\nNaN\nNaN\nKingdom of France\n28.663539\nNaN\n-0.5953457\nNaN\nNaN\nAyyubid Dynasty\n26.995527\nNaN\n1.6524957\nNaN\nNaN\nKingdom of England\n21.991489\nNaN\n8.3960200\nNaN\nNaN\nRepublic of Genoa\n11.983415\nNaN\n-0.5953457\nNaN\nNaN\nKnights Templar\n10.077115\nNaN\n1.6524957\nNaN\nNaN\nHoly Roman Empire\n4.834790\n-0.0170801\n-0.5948396\n10.86552\n10.8655226\nPrincipality of Antioch\n4.834790\n-0.0170801\n2.4030361\n13.61357\n-0.1266480\nKingdom of Cyprus\n4.596503\n58.5391124\n0.1546293\n13.61357\n10.8655226\nCounty of Tripoli\n3.643353\nNaN\n0.9035078\n19.28056\n-0.0898366\n\n\nname\nbroker.gate\nPapal States\n11.6872209\nCounty of Sicily\n-0.0800286\nEngland\n-0.0800286\nCounty of Aversa\n-0.1126843\nKingdom of Georgia\n-0.1126843\nGreat Seljuq Empire\n-0.1126843\nChola Empire\n-0.1126843\nTaifa of Lérida\n-0.1126843\nCounty of Apulia\n-0.1374029\nSeljuk Empire\n-0.1374029\nname\nbroker.tot\nByzantine Empire\n25.2728731\nSultanate of Rum\n10.4364880\nHoly Roman Empire\n10.0243662\nEngland\n7.5516353\nKingdom of Sicily\n5.4910263\nKingdom of France\n2.1940518\nSeljuk Empire\n1.7819300\nKingdom of Georgia\n0.5455645\nPapal States\n0.5455645\nNormandy\n0.1334427\n\nOption 2.A\nFor a Specific Research Question: If you have a\nspecific research question, please feel free to use that to guide your\nanalysis. Otherwise, you may want to orient your analysis as follows in\norder to identify a compelling question or noteworthy pattern in the\ndata that can be interpreted.\nAnswer: Since I am interested in the relative power\nof nations by their relative position ad centrality in the worldwide\nconflict, network brokerage can be used to illustrate significant\npositions in global conflict. Below I wanted to look at 4 kinds of\nbrokerage, these are broker.gate or gatekeeper, coordinator, liason, and\nitinerant. I am interested to see if these specific coordination types\nare primarily done by specific nations.\n\n\n\nTotal Brokerage\nExplanation: Looking at total brokerage in this\ndataset gives a sense of which factions were responsible for highest\nconnection of unconnected actors through conflict. Given the crusades\nigniting conflict between Europe and the middle east it is sensible that\nthe Byzantine Empire in the center of both connects the most unconnected\nactors through conflict closely followed by the Sultanate of Rum, a\nmajor Muslim faction that fought against the crusades and third being\nthe Holy Roman Empire who participated in many conflicts including the\ncrusades. These are followed by England who centered the wars in the\nBritish isles and the Kingdom of Sicily who were also in a position of\nconflict.\n\nname\nbroker.tot\nByzantine Empire\n25.272873\nSultanate of Rum\n10.436488\nHoly Roman Empire\n10.024366\nEngland\n7.551635\nKingdom of Sicily\n5.491026\n\nCoordinator Brokerage\nExplanation: In this case no particular country is\nvery high above any other in terms of their coordinator brokerage,\nmeaning that within groups no particular nations appear to be brokering\nmore within the groups.\n\nname\nbroker.coord\nCounty of Aversa\n-0.0158536\nKingdom of Georgia\n-0.0158536\nGreat Seljuq Empire\n-0.0158536\nPapal States\n-0.0158536\nChola Empire\n-0.0158536\n\nItinerant Brokerage\nExplanation: Itinerant brokerage represents when a\nnon-group actor connects 2 actors in a group it is no in to each other,\nin this case England has the highest score. Looking at the network graph\nthey do appear to connect 2 actors in a group together.\n\nname\nbroker.itin\nEngland\n6.6906430\nHoly Roman Empire\n4.8919293\nKingdom of Sicily\n3.9930250\nByzantine Empire\n3.9930250\nPrincipality of Kiev\n0.4413428\n\nRepresentative Brokerage\nExplanation: Representative brokerage indicates that\nthe broker, or nation in question loses a war to another in their group,\nbut wins another against a faction outside of their group. This can be\nthough of as their directed connections to them. In this case the Seljuk\nEmpire and Kingdom of Aragon have instances in which they lose to\nfactions within their group before beating those outside of it.\n\nname\nbroker.rep\nSeljuk Empire\n6.3140099\nKingdom of Aragon\n1.1415607\nCounty of Sicily\n-0.0800286\nEngland\n-0.0800286\nCounty of Aversa\n-0.1126843\n\nGatekeeper Brokerage\nExplanation: The Papal states being ranked highest\nin gatekeeper brokerage is an interesting observation as no other nation\nin the dataset appears to be close to their level as most are negative\nin this category. In this cae being a gatekeeper means that they are in\nat conflict in a group with another while the nation in a different\ngroup of conflicts is only at war with them from the group. This is an\ninteresting observation given the Papal states role as a coordinator of\nthe war, but not a participant in the conflcit as directly as other\nbelligerents. (This being the crusade given the period)\n\nname\nbroker.gate\nPapal States\n11.6872209\nCounty of Sicily\n-0.0800286\nEngland\n-0.0800286\nCounty of Aversa\n-0.1126843\nKingdom of Georgia\n-0.1126843\n\nLiaison Brokerage\nExplanation: A liaison broker, in this case, is a\nfaction that loses a war to a group they do not belong to and wins a war\nagainst a different group than the first that they also do not belong\nto. The Byzantine Empire, Sultanate of Rum, and Holy Roman Empire are\nhighest in this category likely owing to their frequent states of\nconflict beyond the crusades against a variety of groups.\n\nname\nbroker.lia\nByzantine Empire\n31.767840\nSultanate of Rum\n14.454659\nHoly Roman Empire\n10.545231\nEngland\n6.202342\nKingdom of Sicily\n4.960334\n\nwars_in_1000s_edgelist <- as.matrix(wars_in_1000s)\nwars_in_1000s_edgelist_network_edgelist <-\ngraph.edgelist(wars_in_1000s_edgelist, directed=TRUE)\nwars_in_1000s.ig<-graph_from_data_frame(wars_in_1000s)\nwars_in_1000s_network <- asNetwork(wars_in_1000s.ig)\n\n\npls_work<-as.network(wars_in_1000s_edgelist, matrix.type = \"edgelist\", directed = FALSE,  hyper = FALSE, loops = FALSE, multiple = FALSE, bipartite = FALSE, vertex.attrnames=wars_in_1000s_network%v%\"vertex.names\")\n\nflomarr.se<-equiv.clust(pls_work, equiv.fun=\"sedist\", method=\"hamming\",mode=\"graph\")\nplot(flomarr.se, labels=flomarr.se$glabels,  cex=0.3)\nrect.hclust(flomarr.se$cluster,h=5)\n\n\n\n?plot()\n\n\nHelp on topic 'plot' was found in the following packages:\n\n  Package               Library\n  base                  /Library/Frameworks/R.framework/Resources/library\n  graphics              /Library/Frameworks/R.framework/Versions/4.1/Resources/library\n\n\nUsing the first match ...\n\n\n\n#blockmodel and select partitions\nblk_mod<-blockmodel(pls_work,flomarr.se,k=5)\n#assign block membership to vertex attribute\nV(wars_in_1000s.ig)$role<-blk_mod$block.membership[match(V(wars_in_1000s.ig)$name,blk_mod$plabels)]\nwars_in_1000s_network%v%\"role\"<-blk_mod$block.membership[match(wars_in_1000s_network%v%\"vertex.names\", blk_mod$glabels)]\n\n\n\n\n\n?blockmodel()\nset.seed(2)\n#blockmodel and select partitions\nblk_mod<-blockmodel(pls_work, flomarr.se, k=5)\n#assign block membership to vertex attribute\npls_work%v%\"role\"<-blk_mod$block.membership[match(pls_work%v%\"vertex.names\", blk_mod$glabels)]\n#plot network using \"role\" to color nodes: statnet\nGGally::ggnet2(pls_work,\n               node.color=\"role\", \n               node.size=degree(pls_work, gmode=\"graph\"),\n               node.label = \"vertex.names\",\n               label.size= 1,\n               node.alpha = .5)\n\n\n\n?ggnet2()\n\n\n\n\n\nplot.block<-function(x=blk_mod, main=NULL, cex.lab=1){\n  plot.sociomatrix(x$blocked.data, labels=list(x$plabels,x$plabels),\n                   main=main, drawlines = FALSE, cex.lab=cex.lab)\n  for (j in 2:length(x$plabels)) if (x$block.membership[j] !=\n                                     x$block.membership[j-1]) \n    abline(v = j - 0.5, h = j - 0.5, lty = 3, xpd=FALSE)\n}\n\n\n\n\n\nplot.block(blk_mod, cex.lab=.35)\n\n\n\n\n(information regarding the meaning of each type of brokerage was\nacquired from https://edis.ifas.ufl.edu/publication/WC197)\n\n\n\n",
    "preview": "posts/httpsnmilsteinumagithubioposts2022-02-21-week-5-interpretaive-assignment/week-5-interpretaive-assignment_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2022-03-03T12:51:04-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsrpubscomburnworthj873118/",
    "title": "Betweeness Centrality",
    "description": "\"My dataset includes every Supreme Court Justice and the school that their clerks attended. There are 187 vertices which contstitute the Justices and the different universiteis. There are 2487 edges and an edge means there is a connection between a Justice and a school because they have hired a clerk that graduated with their law degree from the university.  \nI tried to calculate brokerage, but it says that my data is not proper and I get an error message. I am not sure if that it user error(most likely) or if I am just mixing the steps up.\nI was able to calcuate betweeness centrality, but I could not get dplyr to let me slice or arrange the data so I could tell which nodes were the highest. I will work further to make progress on working with the data.\"",
    "author": [
      {
        "name": "Justin Burnworth",
        "url": {}
      }
    ],
    "date": "2022-03-03",
    "categories": [],
    "contents": "\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-03-03T12:51:23-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httpssvirguezgithubioichrnetworksposts2022-02-23-brokerage-and-betweenness-in-the-amici-network/",
    "title": "Betweenness in the Amici Network",
    "description": "Brokerage, betweenness, and other centrality measures",
    "author": [
      {
        "name": "Santiago Virgüez",
        "url": {}
      }
    ],
    "date": "2022-03-03",
    "categories": [],
    "contents": "\nAmnesty Internation, an influential actorRecap affiliation and one-mode network\nLet’s organize the data one more time. I’m gonna work again with the one-matrix (actorxactor). As you might remember, this one-mode matrix is a projection of the affiliation network (actorxcase), which means that the actors (the nodes) are tied by virtue of their participation in the same cases.\n\n\n#Affiliation network data\nlibrary(igraph)\nlibrary(tidyr)\ndata <- read.csv(\"Cleaned_Data.csv\")\n##New column count\ndata$count <- 1\n\n##Gather the data at case level\nlev_data <- pivot_wider(data,id_cols = CaseID, names_from = `Name`, \n                        values_from = count, values_fn = list(count = length), \n                        values_fill = list(count = 0))\n\n##transpose lev_data to have amici grouped by case\nlibrary(data.table)\nT_lev_data <- transpose(lev_data,)\nrownames(T_lev_data) <- colnames(lev_data)\ncolnames(T_lev_data) <- lev_data$CaseID\nT_lev_data <- T_lev_data[-c(1),]\n\n##create affiliation network graph using 'igraph'\nAff_network <- graph.incidence(T_lev_data)\n\n############\n\n#One-Mode matrix (actor x actor)\n\n##extracting the one-mode projection\nAff_network.pr <- bipartite.projection(Aff_network)\n\n##Actor x actor adjacency matrix\n\namici_net <- Aff_network.pr$proj1\n\namici_ad <- graph.adjacency(get.adjacency(amici_net, sparse = FALSE,attr = \"weight\"))\n\n\n\nCentrality measures by node (amici)\nLet’s obtain the centrality measures by node in order to compare them with the betweenness scores:\n\n\nlibrary(dplyr)\n#dataframe for the nodes + degree\namici.nodes<-data.frame(name=V(amici_ad)$name, degree=igraph::degree(amici_ad))\namici.nodes <- subset(amici.nodes, select = -name)\n\n#eigenvector centrality\ntemp<-centr_eigen(amici_ad,directed=F)\namici.nodes$eigen<-temp$vector\n\n#bonacich power centrality\namici.nodes$bonpow <- power_centrality(amici_ad, exponent = 0.9)\n\n#top 5 eigenvector centrality\namici.nodes%>%\n  arrange(desc(eigen))%>%\n  slice(1:5)\n\n\n                               degree     eigen     bonpow\nYale University                   192 1.0000000 -0.6392321\nDEJUSTICIA                        218 0.9886959 -0.6535497\nCenter for Reproductive Rights    116 0.9051396 -0.5626440\nUNAM                              134 0.8920983 -0.5961262\nLoyola Law School                 114 0.8841434 -0.4763785\n\nFirst, the eigenvector centrality is showing what actors are linked to other well connected actors. In terms of this network, the eigenvector centrality allow us to see what amici actors focus their participation on ‘popular’ cases, cases that atract interventions from well connected amici. We cannot say if their ‘strategic’ behavior is driven by the other participants (du to their popularity) or the impact of the substantive matter discussed in these cases.\nOn the other hand, the bonacich power centrality shows the actors that participated on the cases were no other people participated (therefore the actors with greater power of influence). All of these actrs has the same bonachich power score probably because they all filed a brief only once, for a case which wasn’t of interest for other actors:\n\n\n#top 5 bonacich power centrality\namici.nodes%>%\n  arrange(desc(bonpow))%>%\n  slice(1:5)\n\n\n                                                    degree eigen\nInternational Legal Advisors Esq.                        2     0\nFoundation for the Development of International Law      2     0\nThe International Commission of Jurists                  2     0\nCatalina Martinez Coral                                  2     0\nFundacion Vida Solidaria                                 2     0\n                                                      bonpow\nInternational Legal Advisors Esq.                   3.927038\nFoundation for the Development of International Law 3.927038\nThe International Commission of Jurists             3.927038\nCatalina Martinez Coral                             3.927038\nFundacion Vida Solidaria                            3.927038\n\nBetwenness centrality and network constraint\nIn order to find the most influential actors in the amici network, it is is necessary to calculate both de closeness and betweenness centrality measures. The closeness centrality calculates the shortest paths between all nodes, then assigns each node a score based on its sum of shortest paths, this can help find good ‘broadcasters’. Meanwhile, betweenness centrality measures the number of times a node lies on the shortest path between other nodes, which can help us to find the actors who influence the flow around a system.\nWe might expect that international organizations and well-funded actors have a greater participation in the Inter-American system, with an influential role among local and less endowed actors.\n\n\n#Closeness centrality\namici.nodes$close <- igraph::closeness(amici_ad)\n\namici.nodes%>%\n  arrange(desc(close))%>%\n  slice(1:5)\n\n\n                               degree     eigen     bonpow\nWomen's Link Worldwide             66 0.0933683 -0.6017687\nYale University                   192 1.0000000 -0.6392321\nUNAM                              134 0.8920983 -0.5961262\nCenter for Reproductive Rights    116 0.9051396 -0.5626440\nInterights                        110 0.8835159 -1.4061725\n                                      close\nWomen's Link Worldwide         2.049516e-05\nYale University                2.049138e-05\nUNAM                           2.048509e-05\nCenter for Reproductive Rights 2.047251e-05\nInterights                     2.047167e-05\n\n#Betweenness centrality\namici.nodes$between<-igraph::betweenness(amici_ad, directed=FALSE)\n\namici.nodes%>%\n  arrange(desc(between))%>%\n  slice(1:5)\n\n\n                       degree       eigen     bonpow        close\nWomen's Link Worldwide     66 0.093368302 -0.6017687 2.049516e-05\nCEJIL                     138 0.003024349 -0.6255743 2.045617e-05\nYale University           192 1.000000000 -0.6392321 2.049138e-05\nAmnesty International      96 0.002862279 -0.7003592 2.044739e-05\nUNAM                      134 0.892098273 -0.5961262 2.048509e-05\n                         between\nWomen's Link Worldwide 14257.860\nCEJIL                   9557.596\nYale University         8762.995\nAmnesty International   8186.167\nUNAM                    7470.614\n\nAs expected, international actors such as Amnesty International, Women’s Link Worldwide, and Interights are among the most influential actors. Likewise, although local, Yale University and the National Autonomous University of Mexico (UNAM) are a good example of well-funded organization with enough capacity to influence the Inter-American system. Furthermore, CEJIL (Center for Justice and International Law) is precisely an organization aimed to contribute to the “full enjoyment of human rights in the Americas through the effective use of Inter-American System tools and other international human rights law protection mechanisms”.\nAs we can see, these centrality measures provide a better understanding of the most influential actors in the IAcHR network. Because this is a ‘undirected’ network, we cannot provide any measures of brockerage.\n\n\n\n",
    "preview": {},
    "last_modified": "2022-03-03T12:51:19-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httpswalidmedanigithubionetworks-blogposts2022-03-02-assignment5/",
    "title": "Assignment_5",
    "description": "Structural Holes\nauthor:\n- name: Walid Medani\n  url: https://walidmedani.github.io/networks-blog/",
    "author": [],
    "date": "2022-03-03",
    "categories": [],
    "contents": "\n\n\n\nGame of Thrones Like/Dislike\n\n\n\nNetwork Size\n\n[1] 11\n[1] 46\n\nAttributes\n\n[1] FALSE\n[1] TRUE\n[1] FALSE\n[1] \"name\"\n [1] \"Name\"                  \"Lysa.Arryn\"           \n [3] \"Petyr.Baelish\"         \"Joffrey.Baratheon\"    \n [5] \"Margaery.Tyrell\"       \"Renly.Baratheon\"      \n [7] \"Robert.Baratheon\"      \"Stannis.Baratheon\"    \n [9] \"Brienne.of.Tarth\"      \"Bronn\"                \n[11] \"Gregor.Clegane\"        \"Sandor.Clegane\"       \n[13] \"Xaro.Xhoan.Daxos\"      \"Gendry\"               \n[15] \"Balon.Greyjoy\"         \"Theon.Greyjoy\"        \n[17] \"Jaqen.H.ghar\"          \"Hodor\"                \n[19] \"Khal.Drogo\"            \"Cersei.Lannister\"     \n[21] \"Jaime.Lannister\"       \"Lancel.Lannister\"     \n[23] \"Tyrion.Lannister\"      \"Tywin.Lannister\"      \n[25] \"Maester.Luwin\"         \"Melisandre\"           \n[27] \"Jeor.Mormont\"          \"Jorah.Mormont\"        \n[29] \"Osha\"                  \"Podrick.Payne\"        \n[31] \"Pyat.Pree\"             \"Grand.Maester.Pycelle\"\n[33] \"Ros\"                   \"Davos.Seaworth\"       \n[35] \"Shae\"                  \"Jon.Snow\"             \n[37] \"Arya.Stark\"            \"Bran.Stark\"           \n[39] \"Catelyn.Stark\"         \"Robb.Stark\"           \n[41] \"Sansa.Stark\"           \"Daenerys.Targaryen\"   \n[43] \"Viserys.Targaryen\"     \"Samwell.Tarly\"        \n[45] \"Loras.Tyrell\"          \"Varys\"                \n[47] \"Eddard.Stark\"         \n\nCentrality Measures\nBetweenness Centrality\n\n        Arryn       Baelish     Lannister        Tyrell     Baratheon \n            0             0             0             0             0 \n        Stark                     Greyjoy Night's Watch     Targaryen \n            1             5             0             0             0 \n        Tully \n            0 \n\nEdge Betweeness plot\n\n\n\nBetweeness Centralization\n\n[1] 0.05444444\n\nCloseness Centralization\n\n[1] 0.03548935\n\nNetwork Constraint\n\n    Arryn   Baelish Lannister    Tyrell Baratheon     Stark \n1.0000000 1.0000000 0.9917431 1.0436180 0.9977808 0.8002717 \n\nGould-Fernandez Brokerage\n\n                     w_I        w_O       b_IO       b_OI       b_O\nArryn                NaN -0.9759951 -0.6715120 -0.6715120 -1.561299\nBaelish              NaN -0.9759951 -0.6715120 -0.6715120 -1.561299\nLannister            NaN -0.9759951 -0.6715120 -0.6715120 -1.561299\nTyrell        -0.4759641 -0.8243941 -0.8953493 -0.8953493 -1.458012\nBaratheon            NaN -1.0836066        NaN        NaN -1.672677\nStark                NaN -0.9759951 -0.6715120 -0.6715120 -1.313798\n                     NaN -1.0836066        NaN        NaN  1.910340\nGreyjoy       -0.4759641 -0.8243941 -0.8953493 -0.8953493 -1.458012\nNight's Watch        NaN -0.9759951 -0.6715120 -0.6715120 -1.561299\nTargaryen            NaN -0.9759951 -0.6715120 -0.6715120 -1.561299\nTully         -0.4759641 -0.8243941 -0.8953493 -0.8953493 -1.458012\n                      t\nArryn         -1.701438\nBaelish       -1.701438\nLannister     -1.701438\nTyrell        -1.701438\nBaratheon     -1.701438\nStark         -1.515633\n               1.457237\nGreyjoy       -1.701438\nNight's Watch -1.701438\nTargaryen     -1.701438\nTully         -1.701438\n\n\n\n\n",
    "preview": "posts/httpswalidmedanigithubionetworks-blogposts2022-03-02-assignment5/assignment5_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2022-03-03T12:51:30-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsyli210813githubiosocialnetworkanalysishw5/",
    "title": "Homework 5",
    "description": "Week 5 Assignment: Brokerage and Power.",
    "author": [
      {
        "name": "Yifan Li",
        "url": {}
      }
    ],
    "date": "2022-03-03",
    "categories": [],
    "contents": "\n\n\n#Load the libraries\n  library(dplyr)\n  library(igraph)\n  library(tidyr)\n  library(corrr)\n  library(ggplot2)\n\n\n\n\n\n#Read the network into the environment. This will import it as an edgelist\n  ##data_orig <- read.csv(\"C:/Users/Yifan Desktop/OneDrive/Social Network Analysis/COW_Trade_4.0/Dyadic_COW_4.0.csv\", header=T,stringsAsFactors=FALSE)\ndata_orig <- read.csv(\"C:/Users/LYF-YOGA14s/OneDrive/Social Network Analysis/COW_Trade_4.0/Dyadic_COW_4.0.csv\", header=T,stringsAsFactors=FALSE)\n  ##flow 1 is Imports of Country A from Country B, in US millions of current dollars\n  ##flow 2 is imports of country B from country A\n\n  ##trade.nodes <- read.csv(\"C:/Users/Yifan Desktop/OneDrive/Social Network Analysis/COW_Trade_4.0/National_COW_4.0.csv\", header = T, stringsAsFactors = F)\ntrade.nodes <- read.csv(\"C:/Users/LYF-YOGA14s/OneDrive/Social Network Analysis/COW_Trade_4.0/National_COW_4.0.csv\", header = T, stringsAsFactors = F)\n\n  trade2014 <- subset(data_orig, data_orig$year == 2014)\n  \n#Create weight column that holds the total trade on each edge. \n  temp <- trade2014 %>%\n    mutate(from = importer1,\n           to = importer2,\n           weight = flow1) %>%\n    select(from, to, weight, year)\n  temp2 <- trade2014 %>%\n    mutate(from = importer2,\n           to = importer1,\n           weight = flow2) %>%\n    select(from, to, weight, year)\n\n  temp_edgelist <- full_join(temp,temp2)\n  network_edgelist <- subset(temp_edgelist, temp_edgelist$weight > 0)\n  \n  #Create igraph objects from the edgelists\n  trade2014.ig <- graph.edgelist(as.matrix(network_edgelist[,c(\"from\",\"to\")]), directed = T)\n  \n  #Specify the weights values\n  E(trade2014.ig)$weight <- network_edgelist$weight \n\n  #Add in long and short versions of country names for reports\n    V(trade2014.ig)$long_name <- trade.nodes$statename[match(V(trade2014.ig)$name, trade.nodes$statename)]\n    V(trade2014.ig)$short_name <- trade.nodes$stateabb[match(V(trade2014.ig)$name, trade.nodes$statename)]\n    V(trade2014.ig)$ccode <- trade.nodes$ccode[match(V(trade2014.ig)$name, trade.nodes$statename)]\n    V(trade2014.ig)$continent <- trade.nodes$continent[match(V(trade2014.ig)$name, trade.nodes$statename)]\n\n  ##rm(data_orig)\n    trade2014.nodes <- data.frame(name = V(trade2014.ig)$long_name,\n                                  short_name = V(trade2014.ig)$short_name,\n                                  ccode = V(trade2014.ig)$ccode)\n    trade2014.nodes$continent <- V(trade2014.ig)$continent\n\n\n\n\n\n#Find network features: \nis_bipartite(trade2014.ig)\n\n\n[1] FALSE\n\nis_directed(trade2014.ig)\n\n\n[1] TRUE\n\nis_weighted(trade2014.ig)\n\n\n[1] TRUE\n\nThe original dataset is the trade dataset version 4 from the Correlates of War Project. In this subject I only use trade data of year 2014. The format is edgelist. The nodes are countries, and the ties are the trading relations between countries in 2014. The network is directed and weighted.\nLet’s look at some basic descriptive facts.\n\n\n#Original network size\nvcount(trade2014.ig)\n\n\n[1] 186\n\necount(trade2014.ig)\n\n\n[1] 22451\n\necount(trade2014.ig) * 2 / vcount(trade2014.ig)\n\n\n[1] 241.4086\n\necount(trade2014.ig) / (vcount(trade2014.ig) * (vcount(trade2014.ig - 1)))\n\n\n[1] 0.6524557\n\n\n\n#summarize numeric network attribute\nsummary(E(trade2014.ig)$weight)\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n     0.0      0.2      4.9    813.1     78.5 472525.2 \n\nThe network in 2014 has 186 nodes, i.e. 186 countries involed in the trading network. There are 22451 egdes. Each country has 241 connected edges on average. On average, one country import 813 million dollars of good from another country each year. 65% of potential ties exit.\nLet’s classify all dyads and traids in the network:\n\n\n#Classify all dyads in the network:\nigraph::dyad.census(trade2014.ig)\n\n\n$mut\n[1] 9933\n\n$asym\n[1] 2585\n\n$null\n[1] 4687\n\n#Classify all triads in the network:\nigraph::triad_census(trade2014.ig)\n\n\n [1]  75574  62420  92513  11021   9514  11233  60137  45246   5530\n[10]    788 188669  14094   9006  15882 147383 306230\n\n75574 / sum(igraph::triad_census(trade2014.ig))\n\n\n[1] 0.07161783\n\n(75574+62420+92513+11021+9514+11233+60137+45246) / sum(igraph::triad_census(trade2014.ig))\n\n\n[1] 0.3484117\n\nigraph::components(trade2014.ig)$no\n\n\n[1] 1\n\nThere are 9933 mutual bilateral trade relations, 2585 unilateral trade relations, and 4687 pairs of coutries have no trading in 2014.\n7% of the triads are empty, and 65% of them are triangle. The network is quite dense.\nLet’s look at the distribution of nodes centrality.\n\n\ntrade2014.nodes$closeness <- centr_clo(trade2014.ig)$res\n\ntrade2014.nodes$betweenness <- centr_betw(trade2014.ig, directed = TRUE)$res\n\ntrade2014.nodes$eigen <- centr_eigen(trade2014.ig, directed=TRUE, scale=FALSE)$vector\n\ntrade2014.nodes$bonpow <- power_centrality(trade2014.ig)\n\n\nmat2014<-as.matrix(as_adjacency_matrix(trade2014.ig, attr=\"weight\"))\n\n#square the adjacency matrix\nmat2014sq<-t(mat2014) %*% mat2014\n\n#Calculate the proportion of reflected centrality.\ntrade2014.nodes$rc<-diag(mat2014sq)/rowSums(mat2014sq)\n#replace missing values with 0\ntrade2014.nodes$rc<-ifelse(is.nan(trade2014.nodes$rc),0,trade2014.nodes$rc)\n\n#Calculate received eigenvalue centrality\ntrade2014.nodes$eigen.rc<-trade2014.nodes$eigen*trade2014.nodes$rc\n\n#Calculate the proportion of derived centrality.\n  trade2014.nodes$dc<-1-diag(mat2014sq)/rowSums(mat2014sq)\n#replace missing values with 0\n  trade2014.nodes$dc<-ifelse(is.nan(trade2014.nodes$dc),1,trade2014.nodes$dc)\n#Calculate received eigenvalue centrality\ntrade2014.nodes$eigen.dc<-trade2014.nodes$eigen*trade2014.nodes$dc\n\n\n\nFollowing last week’s analysis, I continued to add brokerage.\nTo calculate brokerage scores with the trade dataset, I try to create a statnet network (whose import script is not provided.) I’m not sure what I did wrong. The betweenness is much different from what I expect (and very different from results igraph). Then I check the degree. The statnet gives a totally different outcome from igraph too. The two packages shouldn’t give different results for such a simple parameter.\nI also failed to calculate brokerage scores. I only got the total scores while all roles scores are NA.\nMy codes show below. What did I do wrongly?\n\n\n##I need the statnet package and network data to calculate brokerage.\nlibrary(statnet)\ntrade2014.stat <- network(as.matrix(network_edgelist[1:2], matrix.type = 'edgelist'))\n\nprint(trade2014.stat)\n\n\n Network attributes:\n  vertices = 186 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 22451 \n    missing edges= 0 \n    non-missing edges= 22451 \n\n Vertex attribute names: \n    vertex.names \n\n Edge attribute names not shown \n\ntrade2014.stat%e%\"weight\"      <- network_edgelist$weight\ntrade2014.stat%e%\"year\"      <- network_edgelist$year\n\ntrade2014.stat%v%\"long_name\" <- trade.nodes$statename[match(trade2014.stat%v%\"vertex.names\", trade.nodes$statename)]\ntrade2014.stat%v%\"short_name\" <- trade.nodes$stateabb[match(trade2014.stat%v%\"vertex.names\", trade.nodes$statename)]\ntrade2014.stat%v%\"ccode\" <- trade.nodes$ccode[match(trade2014.stat%v%\"vertex.names\", trade.nodes$statename)]\ntrade2014.stat%v%\"continent\" <- trade.nodes$continent[match(trade2014.stat%v%\"vertex.names\", trade.nodes$statename)]\n\nnetwork::list.vertex.attributes(trade2014.stat)\n\n\n[1] \"ccode\"        \"continent\"    \"long_name\"    \"na\"          \n[5] \"short_name\"   \"vertex.names\"\n\n\n\ntrade2014.nodes$between_stat <- sna::betweenness(trade2014.stat)\ntrade2014.nodes$degree <- igraph::degree(trade2014.ig)\ntrade2014.nodes$degree_stat <- sna::degree(trade2014.stat)\n\n\n\n\n\nbrokerage_stat <- data.frame(brokerage(trade2014.stat, cl = trade2014.nodes$continent)$z.nli)\ntrade2014.nodes<-trade2014.nodes %>%\n  mutate(broker.tot = brokerage_stat$t,\n         broker.coord = brokerage_stat$w_I,\n         broker.itin = brokerage_stat$w_O,\n         broker.rep = brokerage_stat$b_IO,\n         broker.gate = brokerage_stat$b_OI,\n         broker.lia = brokerage_stat$b_O)\n\n\n\n\n\n\n",
    "preview": {},
    "last_modified": "2022-03-03T12:51:33-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httprpubscomkbecenron/",
    "title": "Week 2 Assignment",
    "description": "Analyzing the Enron Emails dataset from the network package",
    "author": [
      {
        "name": "Kristina Becvar",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\r\n“Enron Emails.R” is a file in the course repository that consists of a network of emails between enron employees from the igraphdata package. According to the import script, this is a large, un-weighted, directed network with employees as nodes and emails as edges.\r\nThe import script also indicates that there are no node attributes. I found that there was, in fact, node attributes to be found in the igraph dataset in the form of what seems to be titles as ‘Notes’ and email addresses in ‘email’ without the domain name, but that was not relevant for this assignment.\r\nAdditionally, the import script indicated that but topic and time information is stored as edge attributes. This is correct, and another thing that I learned through working on this assignment about the dataset is that there is a topical dataset directory in the LDC details data frame that serves as a codebook for the topic codes assembled in the edgelist, for future reference.\r\nThe import script has created three objects that represent the network: network_edgelist (a data frame of an edge list and edge attributes), network_igraph (an igraph object), and network_statnet (a network object compatible with statnet packages like sna & ergm).\r\nWith that contextual introduction, I’ll go back to the start, and execute the import script. I also look at the R Documentation to view the detailed information on this data set via: enron {igraphdata}\r\nI load the libraries for statnet, igraph, and igraphdata\r\nNext, I read the data into the environment. This imports the data as an adjacency matrix\r\n\r\n\r\ndata(\"enron\", package = \"igraphdata\")\r\nnetwork_igraph <- enron\r\nrm(enron)\r\n\r\n\r\n\r\nThen, I create the edgelist\r\n\r\n\r\nnetwork_edgelist <- as.data.frame(as_edgelist(network_igraph))\r\n\r\n\r\n\r\nand add edge attributes to the edge list\r\n\r\n\r\nnetwork_edgelist <-cbind(network_edgelist, Time      = E(network_igraph)$Time, \r\n                                               Reciptype = E(network_igraph)$Reciptype, \r\n                                               Topic     = E(network_igraph)$Topic, \r\n                                               LDC_topic = E(network_igraph)$LDC_topic)\r\n\r\n\r\n\r\nThis collects details about the attribute “LDC Details” into a data frame\r\n\r\n\r\nLDC_details <- data.frame(LDC_topic_name = network_igraph$LDC_names, LDC_topic_desc = network_igraph$LDC_desc, LDC_topic = 1:32)\r\n\r\n\r\n\r\nThe data frame can then be added as details to the edge list\r\n\r\n\r\nnetwork_edgelist <- merge(network_edgelist, LDC_details, by = 'LDC_topic', all.x = TRUE)\r\n\r\n\r\n\r\nand then re-ordered within the edge list\r\n\r\n\r\nnetwork_edgelist <- network_edgelist[c(2:5,1,6,7)]\r\n\r\n\r\n\r\nNow I can create a statnet network object from our edge list\r\n\r\n\r\nnetwork_statnet <- network(as.matrix(network_edgelist[1:2]), matrix.type = \"edgelist\", directed = TRUE)\r\n\r\n\r\n\r\nand add attributes to the statnet network object\r\n\r\n\r\nnetwork_statnet%e%'Time' <- as.character(network_edgelist$Time)\r\nnetwork_statnet%e%'Reciptype' <- as.character(network_edgelist$Reciptype)\r\nnetwork_statnet%e%'Topic' <- as.character(network_edgelist$Topic)\r\nnetwork_statnet%e%'LDC_topic' <- as.character(network_edgelist$LDC_topic)\r\nnetwork_statnet%e%'LDC_topic_name' <- as.character(network_edgelist$LDC_topic_name)\r\nnetwork_statnet%e%'LDC_topic_desc' <- as.character(network_edgelist$LDC_topic_desc)\r\n\r\n\r\n\r\nFinally, I can clean up and remove any unnecessary objects if I no longer need the details as a reference, as in this assignment.\r\n\r\n\r\nrm(LDC_details)\r\n\r\n\r\n\r\nNow, I’ll take a first look at the network\r\n\r\n\r\nplot(network_statnet)\r\n\r\n\r\n\r\n\r\nThat’s interesting, but doesn’t tell me much about the network yet except that I may expect to see 2 isolates.\r\nUsing tools to inspect the network data and confirm the objects created through the import script are present\r\n\r\n\r\nls()\r\n\r\n\r\n[1] \"network_edgelist\" \"network_igraph\"   \"network_statnet\" \r\n\r\nI’ll inspect vertices and edges using commands in both igraph and statnet\r\n\r\n\r\nvcount(network_igraph)\r\n\r\n\r\n[1] 184\r\n\r\necount(network_igraph)\r\n\r\n\r\n[1] 125409\r\n\r\nprint(network_statnet) \r\n\r\n\r\n Network attributes:\r\n  vertices = 184 \r\n  directed = TRUE \r\n  hyper = FALSE \r\n  loops = FALSE \r\n  multiple = FALSE \r\n  bipartite = FALSE \r\n  total edges= 3010 \r\n    missing edges= 0 \r\n    non-missing edges= 3010 \r\n\r\n Vertex attribute names: \r\n    vertex.names \r\n\r\n Edge attribute names not shown \r\n\r\nThere is quite a difference between the number of edges in the igraph network (123,409) and the statnet network (3010), which leads me to believe there is something a bit off with the way the data was processed between the two network programs.\r\nLooking at more comparisons in the two network files, I can look at the network features.\r\n\r\n\r\nis_bipartite(network_igraph)\r\n\r\n\r\n[1] FALSE\r\n\r\nis_directed(network_igraph)\r\n\r\n\r\n[1] TRUE\r\n\r\nis_weighted(network_igraph)\r\n\r\n\r\n[1] FALSE\r\n\r\nvertex_attr_names(network_igraph)\r\n\r\n\r\n[1] \"Email\" \"Name\"  \"Note\" \r\n\r\nedge_attr_names(network_igraph)\r\n\r\n\r\n[1] \"Time\"      \"Reciptype\" \"Topic\"     \"LDC_topic\"\r\n\r\nLooking at the same features of the statnet network with the appropriate commands\r\n\r\n\r\nprint(network_statnet)\r\n\r\n\r\n Network attributes:\r\n  vertices = 184 \r\n  directed = TRUE \r\n  hyper = FALSE \r\n  loops = FALSE \r\n  multiple = FALSE \r\n  bipartite = FALSE \r\n  total edges= 3010 \r\n    missing edges= 0 \r\n    non-missing edges= 3010 \r\n\r\n Vertex attribute names: \r\n    vertex.names \r\n\r\n Edge attribute names not shown \r\n\r\nnetwork::list.vertex.attributes(network_statnet)\r\n\r\n\r\n[1] \"na\"           \"vertex.names\"\r\n\r\nnetwork::list.edge.attributes(network_statnet)\r\n\r\n\r\n[1] \"LDC_topic\"      \"LDC_topic_desc\" \"LDC_topic_name\"\r\n[4] \"na\"             \"Reciptype\"      \"Time\"          \r\n[7] \"Topic\"         \r\n\r\nUsing more tools to inspect the network data:\r\n\r\n\r\n#List network attributes: igraph\r\n\r\nigraph::vertex_attr_names(network_igraph)\r\n\r\n\r\n[1] \"Email\" \"Name\"  \"Note\" \r\n\r\nigraph::edge_attr_names(network_igraph)\r\n\r\n\r\n[1] \"Time\"      \"Reciptype\" \"Topic\"     \"LDC_topic\"\r\n\r\n#List network attributes: statnet\r\n\r\nnetwork::list.vertex.attributes(network_statnet)\r\n\r\n\r\n[1] \"na\"           \"vertex.names\"\r\n\r\nnetwork::list.edge.attributes(network_statnet)\r\n\r\n\r\n[1] \"LDC_topic\"      \"LDC_topic_desc\" \"LDC_topic_name\"\r\n[4] \"na\"             \"Reciptype\"      \"Time\"          \r\n[7] \"Topic\"         \r\n\r\nI want to look at specific attribute data. First using igraph\r\n\r\n\r\nhead(V(network_igraph)$Email)\r\n\r\n\r\n[1] \"albert.meyers\" \"a..martin\"     \"andrea.ring\"   \"andrew.lewis\" \r\n[5] \"andy.zipper\"   \"a..shankman\"  \r\n\r\nhead(V(network_igraph)$Name)\r\n\r\n\r\n[1] \"Albert Meyers\"    \"Thomas Martin\"    \"Andrea Ring\"     \r\n[4] \"Andrew Lewis\"     \"Andy Zipper\"      \"Jeffrey Shankman\"\r\n\r\nhead(V(network_igraph)$Note)\r\n\r\n\r\n[1] \"Employee, Specialist\"         \"Vice President\"              \r\n[3] \"NA\"                           \"Director\"                    \r\n[5] \"Vice President, Enron Online\" \"President, Enron Global Mkts\"\r\n\r\nhead(E(network_igraph)$Time)\r\n\r\n\r\n[1] \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\"\r\n[4] \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\"\r\n\r\nhead(E(network_igraph)$Reciptype)\r\n\r\n\r\n[1] \"to\"  \"to\"  \"cc\"  \"cc\"  \"bcc\" \"bcc\"\r\n\r\nhead(E(network_igraph)$Topic)\r\n\r\n\r\n[1] 1 1 3 3 3 3\r\n\r\nhead(E(network_igraph)$LDC_topic)\r\n\r\n\r\n[1]  0 -1 -1 -1 -1 -1\r\n\r\nNext, using statnet\r\n\r\n\r\nhead(network_statnet %v% \"na\")\r\n\r\n\r\n[1] FALSE FALSE FALSE FALSE FALSE FALSE\r\n\r\nnetwork_statnet %v% \"vertex.names\"\r\n\r\n\r\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\r\n [17]  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32\r\n [33]  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48\r\n [49]  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64\r\n [65]  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80\r\n [81]  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96\r\n [97]  97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112\r\n[113] 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128\r\n[129] 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144\r\n[145] 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160\r\n[161] 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176\r\n[177] 177 178 179 180 181 182 183 184\r\n\r\nhead(network_statnet %e% \"LDC_topic\")\r\n\r\n\r\n[1] \"-1\" \"-1\" \"-1\" \"-1\" \"-1\" \"-1\"\r\n\r\nhead(network_statnet %e% \"LDC_topic_desc\")\r\n\r\n\r\n[1] NA NA NA NA NA NA\r\n\r\nhead(network_statnet %e% \"LDC_topic_name\")\r\n\r\n\r\n[1] NA NA NA NA NA NA\r\n\r\nhead(network_statnet %e% \"na\")\r\n\r\n\r\n[1] FALSE FALSE FALSE FALSE FALSE FALSE\r\n\r\nhead(network_statnet %e% \"Reciptype\")\r\n\r\n\r\n[1] \"to\"  \"cc\"  \"cc\"  \"bcc\" \"bcc\" \"to\" \r\n\r\nhead(network_statnet %e% \"Time\")\r\n\r\n\r\n[1] \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\"\r\n[4] \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\"\r\n\r\nhead(network_statnet %e% \"Topic\")\r\n\r\n\r\n[1] \"1\" \"3\" \"3\" \"3\" \"3\" \"3\"\r\n\r\nClearly, there are differences in how the vertices are represented in igraph v. statnet. For example, the anonymized names are node attributes in igraph, but in statnet they are represented by numbers.\r\nNext, I want to look at the dyad census in igraph\r\n\r\n\r\nigraph::dyad.census(network_igraph)\r\n\r\n\r\n$mut\r\n[1] 30600\r\n\r\n$asym\r\n[1] 64208\r\n\r\n$null\r\n[1] -77972\r\n\r\nand in statnet\r\n\r\n\r\nsna::dyad.census(network_statnet)\r\n\r\n\r\n     Mut Asym  Null\r\n[1,] 913 1184 14739\r\n\r\nThe dyad census clearly gives vastly different responses between the two programs, but I am not sure how or why they are represented so differently yet.\r\nNext I’ll look at the triad census in igraph\r\n\r\n\r\nigraph::triad.census(network_igraph)\r\n\r\n\r\n [1] 700234  19530 249694   8409   2695   5176   7060  13227   1180\r\n[10]     59   6781   1023   1137    786   2782   1611\r\n\r\nand in statnet\r\n\r\n\r\nsna::triad.census(network_statnet)\r\n\r\n\r\n        003    012    102 021D 021U 021C 111D  111U 030T 030C  201\r\n[1,] 700234 150250 118974 8409 2695 5176 7060 13227 1180   59 6781\r\n     120D 120U 120C  210  300\r\n[1,] 1023 1137  786 2782 1611\r\n\r\nIf I use the igraph data, the enron network has 184 vertices, so if I want to see if the triad census is working correctly, I want to compare the data:\r\n\r\n\r\n#possible triads in network\r\n184*183*182/6\r\n\r\n\r\n[1] 1021384\r\n\r\nsum(igraph::triad.census(network_igraph))\r\n\r\n\r\n[1] 1021384\r\n\r\nSimilarly, if I use the statnet data, the enron network has 184 vertices, so if I want to see if the triad census is working correctly, I want to compare the data:\r\n\r\n\r\n#possible triads in network\r\n184*183*182/6\r\n\r\n\r\n[1] 1021384\r\n\r\nsum(sna::triad.census(network_statnet))\r\n\r\n\r\n[1] 1021384\r\n\r\nNow I’m getting somewhere! I don’t yet know exactly how the triad census informs my interpretations fully, but I know it is accurately being represented in this area of network analysis.\r\nLooking next at the global transitivity in statnet:\r\n\r\n\r\ngtrans(network_statnet)\r\n\r\n\r\n[1] 0.3580924\r\n\r\nLooking next at the network transitivity in igraph:\r\n\r\n\r\ntransitivity(network_igraph)\r\n\r\n\r\n[1] 0.3725138\r\n\r\nThey are not the same, but not completely out of the realm of reasonable differences given the different algorithms each program uses.\r\nLooking next at the ego transitivity for the employee names that appeared in the header of the igraph node information, but I cannot get the command to run which would give me the local transitivity for specific nodes, for some reason I will need to take more time to explore.\r\n#transitivity(network_igraph, type=“local”, vids=V(network_igraph)[c(“Albert Meyers”, “Thomas Martin:, Andrea Ring”, “Andrew Lewis”, “Andy Zipper”, “Jeffrey Shankman”)])\r\nHowevwer, I can look at global v. average local transitivity\r\n\r\n\r\ntransitivity(network_igraph, type=\"global\")\r\n\r\n\r\n[1] 0.3725138\r\n\r\ntransitivity(network_igraph, type=\"average\")\r\n\r\n\r\n[1] 0.5055302\r\n\r\nThis transitivity tells me that the average network transitivity is significantly higher than the global transitivity, indicating, from my still naive network knowledge, that the overall network is generally more loose, and that there is a more connected sub-network.\r\nLooking at the geodesic distance:\r\n\r\n\r\naverage.path.length(network_igraph,directed=T)\r\n\r\n\r\n[1] 2.390464\r\n\r\nThis tells me that on average, the path length is just over 2.\r\nGetting to look at the components of the network in igraph:\r\n\r\n\r\nnames(igraph::components(network_igraph))\r\n\r\n\r\n[1] \"membership\" \"csize\"      \"no\"        \r\n\r\nigraph::components(network_igraph)$no \r\n\r\n\r\n[1] 3\r\n\r\nigraph::components(network_igraph)$csize\r\n\r\n\r\n[1] 182   1   1\r\n\r\nIt shows that there are 3 components in the network, and 182 of the 182 nodes make up the giant component with 2 isolates.\r\nFinally, I get my answer on isolates.\r\n\r\n\r\nisolates(network_statnet)\r\n\r\n\r\n[1]  72 118\r\n\r\nSince I know that the nodes are Enron employees and they are assigned numbers in the statnet network, running the isolate command tells me that employee #72 and #118 are indeed the 2 isolates viewed in the initial graphic representation of the network.\r\n\r\n\r\n\r\n",
    "preview": "posts/httprpubscomkbecenron/distill-preview.png",
    "last_modified": "2022-02-17T13:44:46-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsnmilsteinumagithubioposts2022-01-31-the-sharpe-ratio/",
    "title": "Initial Network Analysis Florentine Family",
    "description": "Homework 2: Brief Analysis of the Florentine Family Set",
    "author": [
      {
        "name": "Noah Milstein",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\n\n\n\n\n\n\nChosen Network:\nThe Network I chose was the Florentine family dataset network from the network package. This dataset represents marriages between influential families in Florence. Each node represents a family with arrows indicating which family married into which other family.\nNetwork Size:\nNetwork size for the Florentine Family network dataset is described briefly by the code below:\n\n\nset.seed(2)\n# I access the florentine families dataset through the package \"network\"\n\ndata(flo, package=\"network\")\n\n# In order to make the dataset usable I make it into a matrix using as.matrix()\n\nmatrix_florentine <- as.matrix(flo) \n\n# Next I used the graph.adjacency command to make the florentine dataset into\n# An Adjacency Matrix \n\nflorentine<- graph.adjacency(flo, mode=\"directed\", weighted=NULL)\n\nplot(florentine, vertex.color=\"skyblue1\", vertex.label.color=\"navy\", \n     vertex.label.dist=1, vertex.size=7,  edge.arrow.size=0.5, margin=0000)\n\n\n\n\n\n\nvcount(florentine)\n\n\n[1] 16\n\necount(florentine)\n\n\n[1] 40\n\n\n\nstatted_florentine<-as.network(matrix_florentine)\nprint(statted_florentine)\n\n\n Network attributes:\n  vertices = 16 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 40 \n    missing edges= 0 \n    non-missing edges= 40 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nThe number of vertices in the dataset is 16, in this case these nodes each represent a florentine family. Te number of edges is 40. In this instance ties or edges, represent marriages between these influential families. The is the same in both the statnet and igraph outputs.\nNetwork Features\nNext the features of the dataset are described using the 3 commands in the code chunk below.\n\n\nis_bipartite(florentine)\n\n\n[1] FALSE\n\nis_directed(florentine)\n\n\n[1] TRUE\n\nis_weighted(florentine)\n\n\n[1] FALSE\n\nThese results suggests that the florentine family dataset is not bipartite, which would indicate that they do not fall into to sets. In addition the dataset’s ties are directed do they flow in directions as a result of which family is marrying to which, and the ties are unweighted because marriage cannot vary in numerican significance, it is simply a category that is either true or false between families.\n\n\nvertex_attr_names(florentine)\n\n\n[1] \"name\"\n\nedge_attr_names(florentine)\n\n\ncharacter(0)\n\n\n\nnetwork::list.vertex.attributes(statted_florentine)\n\n\n[1] \"na\"           \"vertex.names\"\n\nnetwork::list.edge.attributes(statted_florentine)\n\n\n[1] \"na\"\n\nThe vector attribute names are the names of the florentine families.\nThe edge attributes do not have name.\nDyad and Triad Census\nDyads\n\n\nigraph::dyad.census(florentine)\n\n\n$mut\n[1] 20\n\n$asym\n[1] 0\n\n$null\n[1] 100\n\n\n\nsna::dyad.census(statted_florentine)\n\n\n     Mut Asym Null\n[1,]  20    0  100\n\nThe dyad census indicates that amongest that among the dyad ties, being between 2 families, 20 are mutual and none are asymptotic. In addition 100 of the dyad are null, or not connected.\nTriads\n\n\nigraph::triad_census(florentine)\n\n\n [1] 324   0 195   0   0   0   0   0   0   0  38   0   0   0   0   3\n\n?triad_census(florentine)\n\n\n\n\n\nsna::triad.census(statted_florentine, mode=\"graph\")\n\n\n       0   1  2 3\n[1,] 324 195 38 3\n\n\n\nsum(sna::triad.census(statted_florentine, mode=\"graph\"))\n\n\n[1] 560\n\nFor dyads there are 16 possibilities. Here our results are as follows:\n324, 003 (A,B,C, the empty graph.)\n195, 102 (A<->B, C, the graph with a mutual connection between two vertices.)\nboth of which are vacuously transitive\n38, 030C (A<-B<-C, A->C.)\n3, 300 (A<->B<->C, A<->C, the complete graph.)\nwhich are both transitive\nBoth statnet and igraph confirm this, however igraph specifies the exact instances of each type of connection.\nNetwork Transitivity\n\n\ntransitivity(florentine, type=\"global\")\n\n\n[1] 0.1914894\n\nThe global transitivity of the graph is 0.1914894 which is the ratio of triangles to connected triangles.\n\n\ntransitivity(florentine, type=\"average\")\n\n\n[1] 0.2181818\n\nThe average transitivity is the average transitivity of local triad clusters. Here it is 0.2181818. This is the ratio of local triangles to all connected triangles.\n\n\ngtrans(statted_florentine)\n\n\n[1] 0.1914894\n\nStatnet code confirms this transitivity assessment.\n\n\nV(florentine)[c(\"Peruzzi\",\"Lamberteschi\", \"Ginori\")]\n\n\n+ 3/16 vertices, named, from e7ac6d4:\n[1] Peruzzi      Lamberteschi Ginori      \n\nNetwork Distances\nFirst we see that the average path length between 2 nodes in our dataset is 2.485714\n\n\naverage.path.length(florentine,directed=F)\n\n\n[1] 2.485714\n\nI then test the distances between 3 families, those being the Peruzzi, Lamberteschi, and Ginori\n\n\ndistances(florentine,\"Peruzzi\", \"Lamberteschi\")\n\n\n        Lamberteschi\nPeruzzi            3\n\nThe distance between the nodes of Peruzzi and Lamberteschi is 3\n\n\ndistances(florentine,\"Peruzzi\", \"Ginori\")\n\n\n        Ginori\nPeruzzi      4\n\nThe distance between the nodes of Peruzzi and Ginori is 4\n\n\ndistances(florentine,\"Lamberteschi\",\"Ginori\")\n\n\n             Ginori\nLamberteschi      3\n\nThe distance between the nodes of Lamberteschi and Ginori is 3.\n\n\nisolates(statted_florentine)\n\n\n[1] 12\n\nThe names of all families in our dataset is as follows:\n\n\nas.vector(statted_florentine%v%'vertex.names')\n\n\n [1] \"Acciaiuoli\"   \"Albizzi\"      \"Barbadori\"    \"Bischeri\"    \n [5] \"Castellani\"   \"Ginori\"       \"Guadagni\"     \"Lamberteschi\"\n [9] \"Medici\"       \"Pazzi\"        \"Peruzzi\"      \"Pucci\"       \n[13] \"Ridolfi\"      \"Salviati\"     \"Strozzi\"      \"Tornabuoni\"  \n\nThe names of the isolated influential families is as follows below:\n\n\nas.vector(statted_florentine%v%'vertex.names')[c(isolates(statted_florentine))]\n\n\n[1] \"Pucci\"\n\n\n\n\n",
    "preview": "posts/httpsnmilsteinumagithubioposts2022-01-31-the-sharpe-ratio/Homework_2_Noah_Milstein_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2022-02-17T13:44:37-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsnmilsteinumagithubioposts2022-02-07-florentine-families-week-3-assignment/",
    "title": "Florentine Families Week 3 Assignment",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Noah Milstein",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\n\n\n\n\n\nset.seed(1)\ncanvas_flow(colors = colorPalette(\"vrolik3\"), lines = 3000, lwd = 0.5,\n            iterations = 1000, stepmax = 0.1, angles = 'svm')\n\n\n\n# see ?canvas_flow for more input parameters of this function\n\n\n\nData Description:\n\n\ndata(flo, package=\"network\")\n\n\nstatted_florentine<-as.network(flo)\n\nprint(statted_florentine)\n\n\n Network attributes:\n  vertices = 16 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 40 \n    missing edges= 0 \n    non-missing edges= 40 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\n\n\nplot(statted_florentine)\n\n\n\n\nNodes and Edges:\nAs can be seen from the graph and summary statistics above the florentine family dataset is made up of 40 edges and 16 vertices. Each vertex or node is a family in florence. Each edge, or tie represents a marriage between the two.\nAs a result the ties are not weighted, so they are binary. However, though the dataset labels the ties are directed, they are actually all mutual so in essence, the dataset does not measure marriaage “into” a family but simply uses a mutual directed tie for every set of families with a marriage between them.\n\n\nsna::dyad.census(statted_florentine)\n\n\n     Mut Asym Null\n[1,]  20    0  100\n\nAs can be seen from the code above the dyads within the dataset are either mutual or null, meaning that between any two nodes there are no asymmetric dyads despite the fact that the network is labeled as being directed.\n\n\nsna::triad.census(statted_florentine)\n\n\n     003 012 102 021D 021U 021C 111D 111U 030T 030C 201 120D 120U\n[1,] 324   0 195    0    0    0    0    0    0    0  38    0    0\n     120C 210 300\n[1,]    0   0   3\n\nAs can be seen from the triad census above the types of triads in the dataset are 324 of the 003-type, 102 of the 102-type, 38 of the 201-type and 3 of the 300-type. The 324 of 003-type and 195 of the 102-type indicate that 519 of the 560 triads are vacuously transitive, the remaining 38 of the 201-type are intransitive and only the 3 300-types are transitive\nTransitivity\nAs can be seen in the code below indicates the the transitivity of the network as a whole is 0.1914894, which follows from the results above. This would indicate a relatively low rate of transitivity and thus low inter-connectedness of the nodes and potientally lower density overall.\n\n\ngtrans(statted_florentine)\n\n\n[1] 0.1914894\n\nIsolates\nThough the code below indicates that there are 12 isolates in the network, the data from our plot suggests that this is likely untrue and due to the discrepancy between the un-directed true nature of the network and its label as directed as a network object.\n\n\nisolates(statted_florentine)\n\n\n[1] 12\n\nDensity\nAs indicated by the code chunk below network density here is 0.1666667 indicating that only 16.67% of possible ties in the network are made.\n\n\nnetwork.density(statted_florentine)\n\n\n[1] 0.1666667\n\nDegree and Interesting Results\nEach of the 16 node’s degrees are acquired from the code bellow in integer form, from the digits alone it is difficult to distinguish any sort of overall pattern in the data.\n\n\nsna::degree(statted_florentine)\n\n\n [1]  2  6  4  6  6  2  8  2 12  2  6  0  6  4  8  6\n\nBelow I create a data frame with the overall degree of each family.\n\n\nflorentine.nodes<-data.frame(name=statted_florentine%v%\"vertex.names\",\n                             degree=sna::degree(statted_florentine))\nflorentine.nodes\n\n\n           name degree\n1    Acciaiuoli      2\n2       Albizzi      6\n3     Barbadori      4\n4      Bischeri      6\n5    Castellani      6\n6        Ginori      2\n7      Guadagni      8\n8  Lamberteschi      2\n9        Medici     12\n10        Pazzi      2\n11      Peruzzi      6\n12        Pucci      0\n13      Ridolfi      6\n14     Salviati      4\n15      Strozzi      8\n16   Tornabuoni      6\n\nBelow I then calculate each individual nodes indegree and out-degree.\nNotewory Results\nUpon running the above code I realized that despite the network being labeled “directed” all of its ties were actually mutual and thus the in-degree and out-degree would be identical since marriage is considered mutual. Though this follows from the fact that are generally considered mutual it is interesting to observe that marriages are not considered “into” another family but are represented as a mutual, but directed ties between nodes in every case.\n\n\nsna::degree(statted_florentine, cmode=\"indegree\")\n\n\n [1] 1 3 2 3 3 1 4 1 6 1 3 0 3 2 4 3\n\nsna::degree(statted_florentine, cmode=\"outdegree\")\n\n\n [1] 1 3 2 3 3 1 4 1 6 1 3 0 3 2 4 3\n\nAs can be seen from the code above each node has identical in-degrees and out-degrees\n\n\nflorentine.nodes <- data.frame(name=statted_florentine%v%\"vertex.names\",\n    totdegree=sna::degree(statted_florentine),\n    indegree=sna::degree(statted_florentine, cmode=\"indegree\"),\n    outdegree=sna::degree(statted_florentine, cmode=\"outdegree\"))\n\nflorentine.nodes\n\n\n           name totdegree indegree outdegree\n1    Acciaiuoli         2        1         1\n2       Albizzi         6        3         3\n3     Barbadori         4        2         2\n4      Bischeri         6        3         3\n5    Castellani         6        3         3\n6        Ginori         2        1         1\n7      Guadagni         8        4         4\n8  Lamberteschi         2        1         1\n9        Medici        12        6         6\n10        Pazzi         2        1         1\n11      Peruzzi         6        3         3\n12        Pucci         0        0         0\n13      Ridolfi         6        3         3\n14     Salviati         4        2         2\n15      Strozzi         8        4         4\n16   Tornabuoni         6        3         3\n\nThe notion is confirmed by the degree summaries in the code below and the table above. In both cases all indicators are identical for both in-degree and out-degree and sum to the values seen in the total-degree column.\n\n\nsummary(florentine.nodes)\n\n\n     name             totdegree     indegree     outdegree  \n Length:16          Min.   : 0   Min.   :0.0   Min.   :0.0  \n Class :character   1st Qu.: 2   1st Qu.:1.0   1st Qu.:1.0  \n Mode  :character   Median : 6   Median :3.0   Median :3.0  \n                    Mean   : 5   Mean   :2.5   Mean   :2.5  \n                    3rd Qu.: 6   3rd Qu.:3.0   3rd Qu.:3.0  \n                    Max.   :12   Max.   :6.0   Max.   :6.0  \n\nHistograms of the distribution of the degrees also illustrate that the only difference between in-degree, out-degree, and total degree is that total degree has values twice as large for marriages but the same relative frequency.\n\n\nhist(florentine.nodes$totdegree, main=\"Florentine Marriages: Total Degrees\", xlab=\"Marriages\")\n\n\n\n\n\n\nhist(florentine.nodes$indegree, main=\"Florentine Marriages: In-Degrees\", xlab=\"Marriages\")\n\n\n\n\n\n\nhist(florentine.nodes$outdegree, main=\"Florentine Marriages: Out-Degrees\", xlab=\"Marriages\")\n\n\n\n\nThese results do make degree analysis ineffectual on the dataset, but offer some potential questions. Specifically it would be useful to look at dynamics of marriages “into” other families as this would have been important at the time. Though marriage is considered symmetric in this dataset it was often used in asymmetric ways during the medieval and renaissance times as a means of diplomacy and establishing goodwill between nobility and as a result the ties between the families are not necessarily symmetric in all cases. It would be interesting to see married into what families in terms of sex and birth status hierarchy i.e. first, second, third born, etc.\n\n\nflo_sorted_by_total_degree<-florentine.nodes[order(-florentine.nodes$totdegree),]\n\nflo_sorted_by_total_degree\n\n\n           name totdegree indegree outdegree\n9        Medici        12        6         6\n7      Guadagni         8        4         4\n15      Strozzi         8        4         4\n2       Albizzi         6        3         3\n4      Bischeri         6        3         3\n5    Castellani         6        3         3\n11      Peruzzi         6        3         3\n13      Ridolfi         6        3         3\n16   Tornabuoni         6        3         3\n3     Barbadori         4        2         2\n14     Salviati         4        2         2\n1    Acciaiuoli         2        1         1\n6        Ginori         2        1         1\n8  Lamberteschi         2        1         1\n10        Pazzi         2        1         1\n12        Pucci         0        0         0\n\nThe results above indicate that the medici family are the most “central” node in the network having the most marriages and thus the most in-degrees and out-degrees. The mean of these two degrees is 2.5 in the dataset thus they have more than double the average marriages, however 4 other families have just 2, while the pucci’s have no ties.\nThis also poses the question as to whether or not there are more families that could be included and what the criteria was for allowance in the florentine family data. In this case 4-6 marriages is the most common with 6 nodes having 4-6 marriages.\nThe least central are the Pucci family who are included in the dataset but have no edges or connections to others families by marriage. The Acciaiuoli, Ginori, Lamberteschi, and Pazzi all have 2 total ties, one in and one out representing a single marriage.\n\n\ncentralization(statted_florentine, degree, cmode=\"indegree\")\n\n\n[1] 0.2488889\n\nThe measure of centralization above represents how concentrated edges between nodes are concentrated among actors. He centralization is slightly less than 25% which would indicate that concentration is relatively low this follows from the low transitivity of the network as a whole, there very few actual connections as compared to the possible connections. As a result of these findings it appears as if the network is not extremely centralized with most families having 2-3 marriages with the largest only being 6. The network also has a low level of transitivity as most nodes are not connected to one another.\nHowever it is important to note that we do not know aspects certain aspects of the families that are relevant to understanding the extent of the network’s true connectivity, this could be heirs with ties to both families marriages and the number of marriages between families that happened out of the possible number afforded to each family by their number of heirs. Having family tree measurements would allow for more meaningful analysis that could make the network truly directed by seeing who married into what family and what they represented to their families in terms of succession including their effects in creating prior generations that continued these connections.\n\n\n\n",
    "preview": "posts/httpsnmilsteinumagithubioposts2022-02-07-florentine-families-week-3-assignment/florentine-families-week-3-assignment_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2022-02-17T13:45:19-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsnmilsteinumagithubioposts2022-02-10-workwithmedievalnetworks/",
    "title": "Work with Medieval Networks",
    "description": "A Brief Analysis of Networks of Medieval Conflict.",
    "author": [
      {
        "name": "Noah Milstein",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\n\n\n\n\n\n\nBriefly Describe the Dataset You Are Using:\nQuestion: Identify initial network format\n\n\n\nNetwork Structure: Wars Startings in the 1000s\n\n Network attributes:\n  vertices = 117 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 153 \n    missing edges= 0 \n    non-missing edges= 153 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nNetwork Structure: Wars Startings in the 1100s\n\n Network attributes:\n  vertices = 78 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 225 \n    missing edges= 0 \n    non-missing edges= 225 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nNetwork Structure: Wars Startings in the 1200s\n\n Network attributes:\n  vertices = 161 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 313 \n    missing edges= 0 \n    non-missing edges= 313 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nQuestion: Describe and identify the nodes (including how many nodes are in the dataset)\nAnswer: Nodes or vertices in these datasets represent belligerents in wars throughout history, the involved parties in each conflict can be a nation, province, individual, or group so long as they are listed as involved in the conflict.\nQuestion: What constitutes a tie or edge (including how many ties, whether ties are directed/undirected and weighted/binary, and how to interpret the value of the tie if any)\nAnswer: A tie or edge in this dataset represents a war, this war can be between two nations or groups within a nation. These edges can represent a war that involved many more nations but are always tied to each and every party involved on both sides. These edges are directed and the direction indicates which side “won” the conflict.\nQuestion: Whether or not there are edge attributes that might be used to subset data or stack multiple networks (e.g., tie type, year, etc).\nAnswer: There are a number of attributes that could be used to subset the data, years that the conflict began or the length of time it lasted are available. Aspects like each side’s religion and the area where the conflict took place.\nCloseness Betweeness and Eigenvector Centrality\nQuestion: Calculate closeness, betweenness and eigenvector centrality measures for your network data, and bonachic-power if possible. Compare these measures to basic degree centrality measures. Try to interpret the results. Are there any interesting patterns in the distribution of measures or correlations between them that provide insight into the measures?\nCentralization: Wars Startings in the 1000s\n\nname\ntotdegree\nindegree\noutdegree\neigen\nCounty of Apulia\n7\n0\n7\n0.000000\nCounty of Aversa\n5\n0\n5\n0.000000\nKingdom of Sicily\n8\n3\n5\n0.000000\nGhaznavids\n2\n0\n2\n0.000000\nKingdom of Poland\n1\n0\n1\n0.182744\nKingdom of Hungary\n3\n0\n3\n0.000000\n\n\n\n\n\n\ncentralization(wars_in_1000s_network, degree, cmode=\"outdegree\") %>% kable()\n\n\nx\n0.1016647\n\ncentralization(wars_in_1000s_network, degree, cmode=\"indegree\") %>% kable()\n\n\nx\n0.0494946\n\ncentralization(wars_in_1000s_network, degree) %>% kable()\n\n\nx\n0.0674663\n\nAs can be seen above I have coded measures of indegree, outdegree, and total centralization in the wars in the 1000s dataset.\nCentralization: Wars Startings in the 1100s\n\nname\ntotdegree\nindegree\noutdegree\neigen\nSultanate of Rum\n23\n0\n23\n0.2893116\nDanishmends\n13\n0\n13\n0.0690251\nSeljuk Emirate of Aleppo\n13\n0\n13\n0.0690251\nKingdom of Jerusalem\n23\n11\n12\n0.5378974\nFatimids of Egypt\n1\n0\n1\n0.0973860\nKingdom of Norway\n4\n0\n4\n0.0398827\n\n\n\n\n\n\ncentralization(wars_in_1100s_network, degree, cmode=\"outdegree\") %>% kable()\n\n\nx\n0.2646315\n\ncentralization(wars_in_1100s_network, degree, cmode=\"indegree\") %>% kable()\n\n\nx\n0.1593861\n\ncentralization(wars_in_1100s_network, degree) %>% kable()\n\n\nx\n0.1148325\n\nI do the same above and calculate measures of indegree, outdegree, and total centralization in the wars in the 1100s dataset.\nCentralization: Wars Startings in the 1200s\n\nname\ntotdegree\nindegree\noutdegree\neigen\nForces of Bohemond IV of Antioch\n3\n0\n3\n0.0000000\nKnights Templar\n22\n3\n19\n0.4663665\nAyyubid Emirate of Aleppo\n3\n0\n3\n0.0000000\nKingdom of Jerusalem\n3\n0\n3\n0.0000000\nSultanate of Rum\n3\n0\n3\n0.0000000\nHoly Roman Empire\n11\n6\n5\n0.1770181\n\n\n\n\n\n\ncentralization(wars_in_1200s_network, degree, cmode=\"outdegree\") %>% kable()\n\n\nx\n0.2016016\n\ncentralization(wars_in_1200s_network, degree, cmode=\"indegree\") %>% kable()\n\n\nx\n0.0758203\n\ncentralization(wars_in_1200s_network, degree) %>% kable()\n\n\nx\n0.1174332\n\nFinally I calculate measures of indegree, outdegree, and total centralization in the wars in the 1200s dataset.\nEigenvector Centralization\nQuestion: You may also want to identify whether the same node(s) are more/less central using the different measures, and see if you can find any patterns in the results based on which nodes are high/low on each measures. Discuss (with any related evidence) whether or not the node(s) behavior is in line with or violates expectations based on the degree centrality measure, comparing across those measures using a data frame similar to that constructed in the syntax. Be sure to share your assignment with group members for comments.\n\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nByzantine Empire\n18\n5\n13\n0.478430\n0.3571429\n0.1708679\n0.6428571\n0.3075621\nHoly Roman Empire\n15\n2\n13\n0.295686\n1.0000000\n0.2956860\n0.0000000\n0.0000000\nMirdasid Emirate of Aleppo\n1\n0\n1\n0.295686\n0.0000000\n0.0000000\n1.0000000\n0.2956860\nKingdom of Georgia\n5\n1\n4\n0.295686\n0.0769231\n0.0227451\n0.9230769\n0.2729409\nDuklja\n1\n0\n1\n0.295686\n0.0000000\n0.0000000\n1.0000000\n0.2956860\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nKingdom of Jerusalem\n23\n11\n12\n0.5378974\n0.2980769\n0.1603348\n0.7019231\n0.3775626\nAyyubid Dynasty\n18\n10\n8\n0.5188525\n0.3200000\n0.1660328\n0.6800000\n0.3528197\nSultanate of Rum\n23\n0\n23\n0.2893116\n0.0000000\n0.0000000\n1.0000000\n0.2893116\nHoly Roman Empire\n12\n8\n4\n0.2303733\n0.0892857\n0.0205690\n0.9107143\n0.2098042\nAlmoravid Dynasty\n10\n0\n10\n0.2202864\n0.0000000\n0.0000000\n1.0000000\n0.2202864\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nKnights Templar\n22\n3\n19\n0.4663665\n0.1428571\n0.0666238\n0.8571429\n0.3997427\nAyyubid Dynasty\n23\n9\n14\n0.4263748\n0.1046512\n0.0446206\n0.8953488\n0.3817542\nBahris\n7\n0\n7\n0.2911519\n0.0000000\n0.0000000\n1.0000000\n0.2911519\nRepublic of Genoa\n18\n5\n13\n0.2880895\n0.1428571\n0.0411556\n0.8571429\n0.2469339\nMongol Empire\n41\n7\n34\n0.2228895\n0.1206897\n0.0269005\n0.8793103\n0.1959891\n\nAnswer: Looking at the outputs above we see that regular eigenvector centrality, which accounts for the centrality of nodes attached to our node of interest. Here we see the top 5 highest observations in each dataset, in the 1000s the Byzantine Empire has the highest war, which is logical historically as they represented a bridge between major fighting factions in the Crusades between the Muslim Middle East and European west. The Kingdom of Jerusalem in the 1100s would also be connected, through its wars to other important powers being contested territory between Muslim empires like the Ayyubid Dynasty and crusading states like the Holy Roman Empire.\n\n\narrange(wars_in_1000s.nodes.stat, desc(eigen.rc\n))%>%\n  slice(1:5) %>% kable()\n\n\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nHoly Roman Empire\n15\n2\n13\n0.295686\n1.0000000\n0.2956860\n0.0000000\n0.0000000\nByzantine Empire\n18\n5\n13\n0.478430\n0.3571429\n0.1708679\n0.6428571\n0.3075621\nSultanate of Rum\n11\n7\n4\n0.295686\n0.1186441\n0.0350814\n0.8813559\n0.2606046\nKingdom of Georgia\n5\n1\n4\n0.295686\n0.0769231\n0.0227451\n0.9230769\n0.2729409\nKingdom of France\n10\n3\n7\n0.182744\n0.1034483\n0.0189046\n0.8965517\n0.1638394\n\narrange(wars_in_1100s.nodes.stat, desc(eigen.rc\n))%>%\n  slice(1:5) %>% kable()\n\n\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nAyyubid Dynasty\n18\n10\n8\n0.5188525\n0.3200000\n0.1660328\n0.6800000\n0.3528197\nKingdom of Jerusalem\n23\n11\n12\n0.5378974\n0.2980769\n0.1603348\n0.7019231\n0.3775626\nFatimid Caliphate\n17\n7\n10\n0.2202864\n0.2884615\n0.0635442\n0.7115385\n0.1567423\nZengid Dynasty\n16\n6\n10\n0.2202864\n0.1714286\n0.0377634\n0.8285714\n0.1825230\nRepublic of Venice\n6\n1\n5\n0.0797655\n0.3333333\n0.0265885\n0.6666667\n0.0531770\n\narrange(wars_in_1200s.nodes.stat, desc(eigen.rc\n))%>%\n  slice(1:5) %>% kable()\n\n\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nKnights Templar\n22\n3\n19\n0.4663665\n0.1428571\n0.0666238\n0.8571429\n0.3997427\nAyyubid Dynasty\n23\n9\n14\n0.4263748\n0.1046512\n0.0446206\n0.8953488\n0.3817542\nRepublic of Genoa\n18\n5\n13\n0.2880895\n0.1428571\n0.0411556\n0.8571429\n0.2469339\nKingdom of Cyprus\n11\n4\n7\n0.2025283\n0.1428571\n0.0289326\n0.8571429\n0.1735957\nMongol Empire\n41\n7\n34\n0.2228895\n0.1206897\n0.0269005\n0.8793103\n0.1959891\n\nAnswer: Reflected centrality represents the centrality one nation receives from another another that is attributable to the first nations contribution to the other nations score. Looking at reflected centrality through wars we see relatively similar trends. In the 1000s the Holy Roman Empire and Byzantine Empire play a distinct role in the crusades so in this case we see how central a nation is in conflict dependent on how much centrality they contribute to a nation they have a conflict with. Being focal points in the center of Europe in the case of the HRE and the focal point of Christian, Muslim conflict in the case of the Byzantine empire. For both fighting minor nations gives the two a great deal of centrality to other, potentially less central groups that they fight. The Ayyubids and Kingdom of Jerusalem that each occupy a central position in conflict. Into the 1200s the Knights Templar and Ayyubids occupy this position.\n\n\narrange(wars_in_1000s.nodes.stat, desc(eigen.dc\n\n))%>%\n  slice(1:5) %>% kable()\n\n\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nByzantine Empire\n18\n5\n13\n0.478430\n0.3571429\n0.1708679\n0.6428571\n0.3075621\nMirdasid Emirate of Aleppo\n1\n0\n1\n0.295686\n0.0000000\n0.0000000\n1.0000000\n0.2956860\nDuklja\n1\n0\n1\n0.295686\n0.0000000\n0.0000000\n1.0000000\n0.2956860\nGreat Seljuq Empire\n4\n0\n4\n0.295686\n0.0000000\n0.0000000\n1.0000000\n0.2956860\nKingdom of Georgia\n5\n1\n4\n0.295686\n0.0769231\n0.0227451\n0.9230769\n0.2729409\n\narrange(wars_in_1100s.nodes.stat, desc(eigen.dc\n\n))%>%\n  slice(1:5) %>% kable()\n\n\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nKingdom of Jerusalem\n23\n11\n12\n0.5378974\n0.2980769\n0.1603348\n0.7019231\n0.3775626\nAyyubid Dynasty\n18\n10\n8\n0.5188525\n0.3200000\n0.1660328\n0.6800000\n0.3528197\nSultanate of Rum\n23\n0\n23\n0.2893116\n0.0000000\n0.0000000\n1.0000000\n0.2893116\nAlmoravid Dynasty\n10\n0\n10\n0.2202864\n0.0000000\n0.0000000\n1.0000000\n0.2202864\nAbbasid Caliphate\n10\n0\n10\n0.2202864\n0.0000000\n0.0000000\n1.0000000\n0.2202864\n\narrange(wars_in_1200s.nodes.stat, desc(eigen.dc\n\n))%>%\n  slice(1:5) %>% kable()\n\n\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nKnights Templar\n22\n3\n19\n0.4663665\n0.1428571\n0.0666238\n0.8571429\n0.3997427\nAyyubid Dynasty\n23\n9\n14\n0.4263748\n0.1046512\n0.0446206\n0.8953488\n0.3817542\nBahris\n7\n0\n7\n0.2911519\n0.0000000\n0.0000000\n1.0000000\n0.2911519\nRepublic of Genoa\n18\n5\n13\n0.2880895\n0.1428571\n0.0411556\n0.8571429\n0.2469339\nAnti-Imperial faction\n7\n0\n7\n0.2025283\n0.0000000\n0.0000000\n1.0000000\n0.2025283\n\nAnswer: Finally Derived Centrality measures the centrality a nation receives from fighting another nation that is not a reflection of the first nation’s contribution of centrality to the others. Here the Byzantine Empire remains one of the largest, potentially suggesting their status as a cosmopolitan being high in both derived and reflected centrality. However, nations like the Mirdasid Emirate of Aleppo have little to no reflected centrality by high derived centrality suggesting that they are are a pure bridge.\n\n\nwars_in_1000s.nodes<-data.frame(name=V(wars_in_1000s.ig)$name,\n    totdegree=igraph::degree(wars_in_1000s.ig, loops=FALSE),\n    indegree=igraph::degree(wars_in_1000s.ig, mode=\"in\", loops=FALSE),\n    outdegree=igraph::degree(wars_in_1000s.ig, mode=\"out\", loops=FALSE))\n\nwars_in_1100s.nodes<-data.frame(name=V(wars_in_1100s.ig)$name,\n    totdegree=igraph::degree(wars_in_1100s.ig, loops=FALSE),\n    indegree=igraph::degree(wars_in_1100s.ig, mode=\"in\", loops=FALSE),\n    outdegree=igraph::degree(wars_in_1100s.ig, mode=\"out\", loops=FALSE))\n\nwars_in_1200s.nodes<-data.frame(name=V(wars_in_1200s.ig)$name,\n    totdegree=igraph::degree(wars_in_1200s.ig, loops=FALSE),\n    indegree=igraph::degree(wars_in_1200s.ig, mode=\"in\", loops=FALSE),\n    outdegree=igraph::degree(wars_in_1200s.ig, mode=\"out\", loops=FALSE))\n\neigen_cent_wars_in_1000s<-centr_eigen(wars_in_1000s.ig,directed=T)\n\neigen_cent_wars_in_1100s<-centr_eigen(wars_in_1100s.ig,directed=T)\n\neigen_cent_wars_in_1200s<-centr_eigen(wars_in_1200s.ig,directed=T)\n\n\n\nSome Attempts at Visualization\nGraph 1:\nExplanation: Below I have graphed the network for the 1000s dataset using base plot and an edgelist\n\n\nplot(wars_in_1000s_edgelist_network_edgelist, vertex.size=2,  edge.arrow.size=.2, vertex.color=\"gold\", vertex.size=20, vertex.frame.color=\"gray\", vertex.label.color=\"black\", vertex.label.cex=0.25, vertex.label.dist=2, edge.curved=0.2)\n\n\n\n\nGraph 2:\nExplanation: Next I used the igraph network object and graphed it using the automatic, proportional clustering.\n\n\n\nGraph 3:\nExplanation: Finally I used the ggplot network and graphed it using a generic network object. This order follows for the visualization of the 1100s datasets and 1200s.\n\n\n\nGraph 4:\n\n\nplot(wars_in_1100s_edgelist_network_edgelist, vertex.size=2,  edge.arrow.size=.2, vertex.color=\"gold\", vertex.size=20, vertex.frame.color=\"gray\", vertex.label.color=\"black\", vertex.label.cex=0.25, vertex.label.dist=2, edge.curved=0.2)\n\n\n\n\nGraph 5:\n\n\n\nGraph 6:\n\n\n\nGraph 7:\n\n\nplot(wars_in_1200s_edgelist_network_edgelist, vertex.size=2,  edge.arrow.size=.2, vertex.color=\"gold\", vertex.size=20, vertex.frame.color=\"gray\", vertex.label.color=\"black\", vertex.label.cex=0.25, vertex.label.dist=2, edge.curved=0.2)\n\n\n\n\nGraph 8:\n\n\n\nGraph 9:\n\n\n\n\n$mut\n[1] 3\n\n$asym\n[1] 147\n\n$null\n[1] 6636\n\n\n [1] 243974  14792    744    288    149    129     11     28     13\n[10]      0      1      0      0      1      0      0\n\n\n[1] 0.06481481\n[1] 0.0774983\n[1] 0.093224\n\n\n[1] 0.01117686\n[1] 0.03698225\n[1] 0.01207515\n\n\n     name               degree      \n Length:117         Min.   : 1.000  \n Class :character   1st Qu.: 1.000  \n Mode  :character   Median : 1.000  \n                    Mean   : 2.615  \n                    3rd Qu.: 3.000  \n                    Max.   :18.000  \n\n\n                name degree\n15  Byzantine Empire     18\n25 Holy Roman Empire     15\n28  Sultanate of Rum     11\n47 Kingdom of France     10\n29  County of Sicily      9\n34           England      9\n\n\n     name               degree      \n Length:117         Min.   : 1.000  \n Class :character   1st Qu.: 1.000  \n Mode  :character   Median : 1.000  \n                    Mean   : 2.615  \n                    3rd Qu.: 3.000  \n                    Max.   :18.000  \n\n\n\n\n",
    "preview": "posts/httpsnmilsteinumagithubioposts2022-02-10-workwithmedievalnetworks/workwithmedievalnetworks_files/figure-html5/unnamed-chunk-20-1.png",
    "last_modified": "2022-02-17T13:45:57-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsrpubscomak64823865458/",
    "title": "The Human Disease Taana Baana",
    "description": "Gene to Gene Network Analysis (bird's eye view)",
    "author": [
      {
        "name": "Abhinav Kumar",
        "url": "https://www.linkedin.com/in/abhinavkumar2603/"
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\r\nData Description\r\nThis is a gene disease dataset set. This has been published by Carlos Castillo, a computer scientist based out o Barcelona Spain.The dataset has been used to teach network analysis to students at the university. The dataset was a result of the research conducted by Goh, K. I., Cusick, M. E., Valle, D., Childs, B., Vidal, M., & Barabási, A. L. (2007). “The human disease network”. Proceedings of the National Academy of Sciences, 104(21), 8685-8690. (https://doi.org/10.1073/pnas.0701361104). The effort here is to understand that many diseases may have common genetic origin. Hence, we want to find out which are those genes that may be connected by common among disorders. Therefore, here we will look Gene to Gene network. Below are the features of the data set:\r\nDisorder ID\r\nDisorder Name\r\nComma-separated list of Genes\r\nThe OMIM ID (Online Mendelian Inheritance in Man) of this disorder\r\nThe location in the Chromosome\r\nA disorder Class indicating the physiological system that is affected\r\nWe will only use the below two features:\r\nDisorder Name\r\nComma-separated list of Genes\r\nUsing these two features a bi-partite adjacency matrix will be created which then will be converted to one to one mode (Gene to Gene) by matrix operation. The disorder name would be pivoted in the data set to get the bi-partite matrix in place.\r\n\r\n\r\nlibrary(readr)\r\n\r\nurlfile = (\"https://raw.githubusercontent.com/chatox/networks-science-course/master/practicum/data/disease-genes.csv\")\r\n\r\ngeny = read_csv(url(urlfile))\r\nhead(geny)\r\n\r\n\r\n# A tibble: 6 x 6\r\n     ID Name                   Genes       `OMIM ID` Chromosome Class \r\n  <dbl> <chr>                  <chr>           <dbl> <chr>      <chr> \r\n1     1 17,20-lyase deficienc~ CYP17A1, C~    609300 10q24.3    Endoc~\r\n2     1 17-alpha-hydroxylase/~ CYP17A1, C~    609300 10q24.3    Endoc~\r\n3     3 2-methyl-3-hydroxybut~ HADH2, ERAB    300256 Xp11.2     Metab~\r\n4     4 2-methylbutyrylglycin~ ACADSB         600301 10q25-q26  Metab~\r\n5     5 3-beta-hydroxysteroid~ HSD3B2         201810 1p13.1     Metab~\r\n6     6 3-hydroxyacyl-CoA deh~ HADHSC, SC~    601609 4q22-q26   Metab~\r\n\r\nCleaning the Genes column in dataset\r\n\r\n\r\nlibrary(stringr)\r\n\r\n# Genes is character column and we need to split each row into list of genes\r\n# strsplit() will split the character to list of characters\r\n\r\n\r\ngeny$Genes <- strsplit(geny$Genes, split = \", \")\r\n\r\n\r\nhead(geny)\r\n\r\n\r\n# A tibble: 6 x 6\r\n     ID Name                       Genes   `OMIM ID` Chromosome Class \r\n  <dbl> <chr>                      <list>      <dbl> <chr>      <chr> \r\n1     1 17,20-lyase deficiency, i~ <chr [~    609300 10q24.3    Endoc~\r\n2     1 17-alpha-hydroxylase/17,2~ <chr [~    609300 10q24.3    Endoc~\r\n3     3 2-methyl-3-hydroxybutyryl~ <chr [~    300256 Xp11.2     Metab~\r\n4     4 2-methylbutyrylglycinuria  <chr [~    600301 10q25-q26  Metab~\r\n5     5 3-beta-hydroxysteroid deh~ <chr [~    201810 1p13.1     Metab~\r\n6     6 3-hydroxyacyl-CoA dehydro~ <chr [~    601609 4q22-q26   Metab~\r\n\r\n\r\n\r\n# creating a new dataframe\r\n\r\ngeny_new <- geny[, c(2,3)]\r\ncolnames(geny_new)[1] <- \"Disorder\"\r\n\r\nhead(geny_new)\r\n\r\n\r\n# A tibble: 6 x 2\r\n  Disorder                                                 Genes    \r\n  <chr>                                                    <list>   \r\n1 17,20-lyase deficiency, isolated                         <chr [3]>\r\n2 17-alpha-hydroxylase/17,20-lyase deficiency              <chr [3]>\r\n3 2-methyl-3-hydroxybutyryl-CoA dehydrogenase deficiency   <chr [2]>\r\n4 2-methylbutyrylglycinuria                                <chr [1]>\r\n5 3-beta-hydroxysteroid dehydrogenase, type II, deficiency <chr [1]>\r\n6 3-hydroxyacyl-CoA dehydrogenase deficiency               <chr [2]>\r\n\r\n\r\n\r\n# replicating rows for Genes having more than 1 gene per disease\r\nlibrary(tidyverse)\r\ngeny_new <- unnest(geny_new)\r\nhead(geny_new)\r\n\r\n\r\n# A tibble: 6 x 2\r\n  Disorder                                    Genes  \r\n  <chr>                                       <chr>  \r\n1 17,20-lyase deficiency, isolated            CYP17A1\r\n2 17,20-lyase deficiency, isolated            CYP17  \r\n3 17,20-lyase deficiency, isolated            P450C17\r\n4 17-alpha-hydroxylase/17,20-lyase deficiency CYP17A1\r\n5 17-alpha-hydroxylase/17,20-lyase deficiency CYP17  \r\n6 17-alpha-hydroxylase/17,20-lyase deficiency P450C17\r\n\r\n\r\n\r\ngeny_new[\"count\"] <- 1\r\nadmat <- geny_new %>%\r\n  pivot_wider(id_cols = Genes, names_from = Disorder, values_from = count, values_fn = list(count = ~1))\r\n\r\n# take out first column, make it column name:\r\nadmat2 <- as.matrix(admat[,-1])\r\nrownames(admat2) <- admat$Genes\r\n\r\n# now admat2 is the bipartite adjacency matrix\r\n\r\n# it can stay NA, too\r\nadmat2[is.na(admat2)] <- 0\r\n\r\n\r\n# this is now weighted, each cell will show how many disorders the genes share.\r\nadj_mat <- admat2 %*% t(admat2)\r\n\r\n\r\n\r\n\r\n\r\nlibrary(statnet)\r\n\r\n\r\nnetwork.stat<-network(adj_mat, directed=F, matrix.type=\"adjacency\", ignore.eval=FALSE, names.eval=\"weight\") \r\n\r\nprint(network.stat)\r\n\r\n\r\n Network attributes:\r\n  vertices = 3823 \r\n  directed = FALSE \r\n  hyper = FALSE \r\n  loops = FALSE \r\n  multiple = FALSE \r\n  bipartite = FALSE \r\n  total edges= 6643 \r\n    missing edges= 0 \r\n    non-missing edges= 6643 \r\n\r\n Vertex attribute names: \r\n    vertex.names \r\n\r\n Edge attribute names not shown \r\n\r\nThe gene to gene network has below details:\r\nNumber of Vertices = 3823\r\nNumber of Edges = 6643\r\nIt is an “undirected network”\r\nIt is a “single mode network”\r\nThe edges of the network are “weighted”\r\nExtracting vertex attribute values from statnet object\r\n\r\n\r\n# Extracting vertex attribute values from statnet object\r\n\r\nhead(network.stat %v% \"vertex.names\")\r\n\r\n\r\n[1] \"CYP17A1\" \"CYP17\"   \"P450C17\" \"HADH2\"   \"ERAB\"    \"ACADSB\" \r\n\r\nExtracting edge attribute values from statnet object\r\n\r\n\r\nhead(network.stat %e% \"weight\")\r\n\r\n\r\n[1] 2 2 2 1 1 1\r\n\r\nSummarizing numeric network attribute\r\n\r\n\r\nsummary(network.stat %e% \"weight\")\r\n\r\n\r\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \r\n  1.000   1.000   1.000   1.642   2.000  11.000 \r\n\r\nClassify all dyads in the network using statnet object\r\n\r\n\r\nsna::dyad.census(network.stat)\r\n\r\n\r\n      Mut Asym    Null\r\n[1,] 6643    0 7299110\r\n\r\nThere are 6643 mutual relationships of gene to gene in the , which share common disorders\r\nThere are no asymmetric gene to gene relationships\r\nThere are 7299110 Null dyads\r\n#Classify all triads in the networkusing statnet object\r\n\r\n\r\nsna::triad.census(network.stat, mode = \"graph\") \r\n\r\n\r\n              0        1    2     3\r\n[1,] 9279748342 25323442 7400 14887\r\n\r\nGlobal Transitivity\r\n\r\n\r\ngtrans(network.stat)\r\n\r\n\r\n[1] 0.857859\r\n\r\nIdentifying the Isolates in the network\r\n\r\n\r\nisolates(network.stat)\r\n\r\n\r\n  [1]    6    7   14   17   18   22   32   33   39   89  105  106  109\r\n [14]  119  131  145  156  197  202  203  204  205  225  226  227  273\r\n [27]  285  288  289  290  303  304  325  326  333  345  346  361  372\r\n [40]  381  382  383  389  390  391  395  415  424  479  488  504  519\r\n [53]  531  534  535  536  537  553  554  572  585  586  592  607  608\r\n [66]  609  610  621  629  636  644  647  656  661  668  674  679  683\r\n [79]  750  757  763  764  772  773  774  775  776  778  783  784  785\r\n [92]  786  808  809  813  825  866  874  881  915  928  940  975  978\r\n[105]  979  982  995 1029 1036 1043 1044 1061 1077 1090 1091 1092 1117\r\n[118] 1144 1167 1197 1211 1244 1254 1255 1278 1296 1328 1343 1344 1366\r\n[131] 1375 1379 1390 1391 1398 1399 1450 1453 1480 1492 1519 1527 1535\r\n[144] 1552 1556 1583 1586 1587 1593 1598 1599 1602 1610 1639 1655 1658\r\n[157] 1669 1682 1687 1698 1702 1708 1711 1725 1752 1771 1788 1792 1793\r\n[170] 1794 1795 1796 1799 1812 1815 1816 1822 1823 1824 1825 1830 1851\r\n[183] 1888 1889 1890 1895 1896 1910 1911 1912 1913 1914 1919 1920 1921\r\n[196] 1927 1939 1950 1974 1989 1994 1995 1996 2004 2012 2013 2018 2019\r\n[209] 2024 2025 2026 2027 2028 2029 2036 2037 2045 2056 2057 2058 2059\r\n[222] 2062 2086 2087 2104 2105 2108 2109 2112 2125 2128 2133 2173 2174\r\n[235] 2183 2184 2185 2187 2188 2217 2224 2227 2230 2231 2254 2262 2273\r\n[248] 2279 2291 2294 2314 2315 2332 2333 2354 2364 2370 2371 2386 2402\r\n[261] 2406 2427 2437 2446 2450 2456 2469 2472 2473 2478 2481 2515 2521\r\n[274] 2529 2542 2565 2566 2580 2581 2582 2603 2612 2615 2628 2636 2637\r\n[287] 2650 2651 2673 2702 2706 2707 2731 2751 2781 2782 2783 2784 2789\r\n[300] 2790 2791 2796 2809 2814 2823 2824 2844 2851 2863 2878 2928 2935\r\n[313] 2939 2948 2966 2971 2974 2987 2990 3041 3050 3059 3070 3071 3072\r\n[326] 3086 3087 3099 3105 3119 3122 3161 3211 3212 3237 3244 3248 3249\r\n[339] 3250 3251 3258 3264 3276 3279 3287 3291 3292 3310 3319 3327 3340\r\n[352] 3349 3357 3358 3363 3364 3384 3395 3407 3417 3418 3430 3431 3434\r\n[365] 3435 3446 3447 3467 3470 3471 3472 3473 3482 3486 3494 3496 3507\r\n[378] 3525 3528 3529 3532 3542 3551 3566 3585 3600 3608 3612 3616 3617\r\n[391] 3622 3639 3651 3652 3656 3657 3660 3668 3669 3674 3675 3689 3690\r\n[404] 3714 3715 3726 3738 3748 3749 3750 3751 3752 3753 3756 3773 3788\r\n[417] 3801 3802 3805 3822 3823\r\n\r\nIdentifying the name of the Genes that are isoltes\r\n\r\n\r\n#subset vertex.names attribute to get names of isolates\r\nx <- as.vector(network.stat%v%'vertex.names')[c(isolates(network.stat))]\r\n\r\nx\r\n\r\n\r\n  [1] \"ACADSB\"   \"HSD3B2\"   \"AUH\"      \"CUL7\"     \"TPMT\"    \r\n  [6] \"HLA-B\"    \"CAT\"      \"MDM2\"     \"COL2A1\"   \"EGFR\"    \r\n [11] \"ADA\"      \"ADSL\"     \"MEN1\"     \"POR\"      \"TBS19\"   \r\n [16] \"GCNT2\"    \"FGA\"      \"TYR\"      \"ALDH2\"    \"GABRA2\"  \r\n [21] \"ALDOA\"    \"CYP11B2\"  \"ACTN3\"    \"ACAT1\"    \"AMACR\"   \r\n [26] \"ENAM\"     \"AMPD3\"    \"APOA1\"    \"GSN\"      \"LYZ\"     \r\n [31] \"ALB\"      \"MC1R\"     \"NRAMP2\"   \"SPTB\"     \"COL3A1\"  \r\n [36] \"XPNPEP2\"  \"HP\"       \"AT3\"      \"FGF10\"    \"APOA2\"   \r\n [41] \"APOC3\"    \"APOH\"     \"VPS33B\"   \"ARG1\"     \"ASL\"     \r\n [46] \"DDC\"      \"AGA\"      \"ALOX5\"    \"TF\"       \"GATA4\"   \r\n [51] \"GLO1\"     \"DRD4\"     \"BBS1\"     \"BBS7\"     \"BBS2\"    \r\n [56] \"BBS4\"     \"BBS5\"     \"RFX5\"     \"RFXAP\"    \"BSND\"    \r\n [61] \"FTL\"      \"SLC19A3\"  \"MYF6\"     \"GP1BA\"    \"GP1BB\"   \r\n [66] \"GP9\"      \"HLA-DPB1\" \"BTD\"      \"HRAS\"     \"TBXA2R\"  \r\n [71] \"ABO\"      \"DAF\"      \"AQP3\"     \"KEL\"      \"LW\"      \r\n [76] \"BSG\"      \"RHCE\"     \"XG\"       \"PHB\"      \"PLOD2\"   \r\n [81] \"MAOA\"     \"MYC\"      \"C1QA\"     \"C1QB\"     \"C1QG\"    \r\n [86] \"C1S\"      \"C2\"       \"C3\"       \"C6\"       \"C7\"      \r\n [91] \"C8B\"      \"C9\"       \"ASPA\"     \"FGFR4\"    \"CPS1\"    \r\n [96] \"SCO2\"     \"TNNC1\"    \"COX15\"    \"MYH8\"     \"CRYBB1\"  \r\n[101] \"CD8A\"     \"CP\"       \"CLN2\"     \"CLN5\"     \"CLN6\"    \r\n[106] \"CETP\"     \"DNM2\"     \"KIAA1985\" \"CHD7\"     \"NSDHL\"   \r\n[111] \"CHIT\"     \"LIPA\"     \"EXT1\"     \"CYBA\"     \"NCF1\"    \r\n[116] \"NCF2\"     \"ASS\"      \"COH1\"     \"ODC1\"     \"BUB1\"    \r\n[121] \"NDUFS6\"   \"ALG6\"     \"ALG12\"    \"ALG8\"     \"PLG\"     \r\n[126] \"CPO\"      \"IGBP1\"    \"CPT1A\"    \"CPT2\"     \"HLA-DQB1\"\r\n[131] \"INSL3\"    \"ELN\"      \"CTH\"      \"CTNS\"     \"D2HGD\"   \r\n[136] \"HSD17B4\"  \"DFNA5\"    \"MYO1A\"    \"ESPN\"     \"KIAA1199\"\r\n[141] \"DRPLA\"    \"WT1\"      \"AQP2\"     \"INSR\"     \"GCK\"     \r\n[146] \"PTF1A\"    \"AKT2\"     \"IPF1\"     \"VEGF\"     \"LIG1\"    \r\n[151] \"TOP1\"     \"DBH\"      \"FAAH\"     \"F2\"       \"COL7A1\"  \r\n[156] \"EDARADD\"  \"PKP1\"     \"COL1A2\"   \"SPTA1\"    \"COX10\"   \r\n[161] \"TLR4\"     \"ENO3\"     \"EPX\"      \"ITGA6\"    \"ME2\"     \r\n[166] \"SYN1\"     \"OPCML\"    \"HBA1\"     \"HBB\"      \"HBA2\"    \r\n[171] \"EPOR\"     \"LOR\"      \"RNF6\"     \"EXT2\"     \"NPC1L1\"  \r\n[176] \"GLA\"      \"MCFD2\"    \"F7\"       \"F10\"      \"F11\"     \r\n[181] \"F13B\"     \"FANCF\"    \"LCAT\"     \"FMO3\"     \"KNG\"     \r\n[186] \"FSHB\"     \"TDGF1\"    \"FBP1\"     \"ALDOB\"    \"KHK\"     \r\n[191] \"FUCA1\"    \"FUT6\"     \"GALK1\"    \"GALE\"     \"GALT\"    \r\n[196] \"GAMT\"     \"GBA\"      \"CYP7B1\"   \"DMBT1\"    \"MC2R\"    \r\n[201] \"GCS1\"     \"FTCD\"     \"GCDH\"     \"GK\"       \"GNMT\"    \r\n[206] \"PHKG2\"    \"G6PT1\"    \"GAA\"      \"GBE1\"     \"GYS2\"    \r\n[211] \"PYGL\"     \"PFKM\"     \"GLB1\"     \"GM2A\"     \"KIAA1279\"\r\n[216] \"DHH\"      \"CTLA4\"    \"MLPH\"     \"GHRHR\"    \"STAT5B\"  \r\n[221] \"IGF1\"     \"OAT\"      \"ELA2\"     \"HMOX1\"    \"AK1\"     \r\n[226] \"BPGM\"     \"GPI\"      \"HK1\"      \"TPI1\"     \"F5\"      \r\n[231] \"LIPC\"     \"MET\"      \"HMGCL\"    \"HMGCS2\"   \"TBX5\"    \r\n[236] \"CBS\"      \"MTHFR\"    \"HBG1\"     \"HBG2\"     \"EPHX2\"   \r\n[241] \"GLRB\"     \"GLUD1\"    \"APOC2\"    \"AASS\"     \"INS\"     \r\n[246] \"KCNMB1\"   \"ADD1\"     \"TSHR\"     \"PAX9\"     \"LHB\"     \r\n[251] \"PTH\"      \"GCMB\"     \"PAX8\"     \"TSHB\"     \"ICHYN\"   \r\n[256] \"IGHG2\"    \"CD3E\"     \"CD3G\"     \"MYH2\"     \"ITPA\"    \r\n[261] \"GABRB3\"   \"IVD\"      \"AHI1\"     \"NAGA\"     \"IGKC\"    \r\n[266] \"DSG1\"     \"GALC\"     \"LDHB\"     \"PDX1\"     \"GHR\"     \r\n[271] \"ALAD\"     \"SURF1\"    \"COL4A6\"   \"TAL2\"     \"ARNT\"    \r\n[276] \"AF1Q\"     \"NUMA1\"    \"BCL2\"     \"TCRA\"     \"ABL1\"    \r\n[281] \"LIG4\"     \"STAR\"     \"ECM1\"     \"AKAP10\"   \"LPA\"     \r\n[286] \"CILP\"     \"RAP1GDS1\" \"BCL8\"     \"VMD2\"     \"MASP2\"   \r\n[291] \"PYGM\"     \"XK\"       \"NF2\"      \"OPHN1\"    \"ARSA\"    \r\n[296] \"COL10A1\"  \"CYB5\"     \"DIA1\"     \"MMAA\"     \"MMAB\"    \r\n[301] \"RFXANK\"   \"MCPH1\"    \"SIX6\"     \"EDNRA\"    \"TK2\"     \r\n[306] \"SUCLA2\"   \"MYMY3\"    \"GNPTAG\"   \"HYAL1\"    \"PHKA1\"   \r\n[311] \"IL12RB1\"  \"MDS1\"     \"CBFB\"     \"AMPD1\"    \"ECGF1\"   \r\n[316] \"ITGA7\"    \"CLCN1\"    \"NAGS\"     \"NHS\"      \"HSN2\"    \r\n[321] \"RAC2\"     \"GNAT1\"    \"NP\"       \"POMC\"     \"MC4R\"    \r\n[326] \"UCP3\"     \"MC3R\"     \"OA1\"      \"SAG\"      \"PAX2\"    \r\n[331] \"OTC\"      \"RIL\"      \"NDUFV2\"   \"PIGA\"     \"PEX12\"   \r\n[336] \"PTS\"      \"PHGDH\"    \"PRPS1\"    \"PHKB\"     \"PSP\"     \r\n[341] \"GLI2\"     \"LHX3\"     \"PKD1\"     \"PKDTS\"    \"COL4A1\"  \r\n[346] \"UROS\"     \"UROD\"     \"PEPD\"     \"MSR1\"     \"PROS1\"   \r\n[351] \"SRD5A2\"   \"PSORS6\"   \"CTSK\"     \"NOS1\"     \"PC\"      \r\n[356] \"PDHB\"     \"OGG1\"     \"CA2\"      \"OPRM1\"    \"LRAT\"    \r\n[361] \"IMPDH1\"   \"RP2\"      \"CERKL\"    \"RP9\"      \"USH2A\"   \r\n[366] \"MERTK\"    \"RBP4\"     \"RHD\"      \"CYP2R1\"   \"VDR\"     \r\n[371] \"ESCO2\"    \"WNT4\"     \"HEXB\"     \"NAGLU\"    \"EMX2\"    \r\n[376] \"TRAR4\"    \"SOST\"     \"SPR\"      \"USP26\"    \"IL7R\"    \r\n[381] \"LHX4\"     \"NODAL\"    \"TBX4\"     \"SPG3A\"    \"EPB42\"   \r\n[386] \"PPP2R2B\"  \"SCA25\"    \"PLEKHG4\"  \"SCA8\"     \"TDP1\"    \r\n[391] \"MESP2\"    \"HMGCR\"    \"SSADH\"    \"SI\"       \"SUOX\"    \r\n[396] \"SOD3\"     \"FBLN1\"    \"WHN\"      \"DAD1\"     \"HBD\"     \r\n[401] \"LCRB\"     \"HRG\"      \"PROC\"     \"TRHR\"     \"TBG\"     \r\n[406] \"TALDO1\"   \"TRPS1\"    \"HADHB\"    \"SPG20\"    \"FAH\"     \r\n[411] \"TAT\"      \"HPD\"      \"TBX3\"     \"APRT\"     \"GGCX\"    \r\n[416] \"TKT\"      \"XDH\"      \"XPA\"      \"DDB2\"     \"PEX16\"   \r\n[421] \"PEX3\"    \r\n\r\nPlotting the Gene to Gene network\r\n\r\n\r\nplot(network.stat)\r\n\r\n\r\n\r\noptions(warn=0)\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/httpsrpubscomak64823865458/distill-preview.png",
    "last_modified": "2022-02-17T13:45:34-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsrpubscombunnificent862631/",
    "title": "Social Network Analysis: Week 2: Basic Network Structure",
    "description": "use `igraph` and `statnet` tools to describe aspects of network structure introduced in the Week 2 Lecture: Dyads and Dyad Census, Triads and Triad Census, Network Transitivity and Clustering, Path Length & Geodesic",
    "author": [
      {
        "name": "Audra Jamai White",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\r\nSocial Network Analysis\r\nWeek 2 Assignment: Network Structure\r\nIdentify an existing data set.\r\nThis can be one provided in the course directory, in an R package or library, located online, or some other source. \r\nBriefly describe the network dataset.\r\nIdentify and describe content of nodes and links, and identify format of data set (i.e., matrix or edgelist, directed or not, weighted or not), and whether attribute data are present. Be sure to provide information about network size (e.g., information obtained from network description using week 1 network basics tutorial commands.)\r\nExplore the dataset using commands from week 2 tutorial.\r\nComment on the highlighted aspects of network structure such as geodesic and path distances, triads or transitivity, connectedness and.or component structure, etc. Be sure to both provide the relevant statistics calculated in R, as well as your own interpretation of these statistics.\r\n1. Identify an existing data set.\r\nData set: Florentine Families\r\nDescription: This is an adjacency matrix for a small, directed network of the marriages held by the Florentine family and others in Rome.\r\nPackage: network\r\nAccess:\r\nImport Script:\r\n>source(\"./Import Scripts/Florentine Families.R\")\r\nOrignial Format from Package:\r\n>install.packages(\"network\")\r\n>data(\"flo\", package = \"network\")\r\n\r\n\r\n\r\n  # install.packages(\"network\")\r\n  \r\n    data(\"flo\", package = \"network\")\r\n\r\n\r\n\r\n2. Briefly describe the network dataset.\r\nBe sure to provide information about network size (e.g., information obtained from network description using week 1 network basics tutorial commands.)\r\nIdentify and describe content of nodes and links,\r\neach of the 16 Florentine Family Names represent a Node in the network.\r\n\r\n [1] \"Acciaiuoli\"   \"Albizzi\"      \"Barbadori\"    \"Bischeri\"    \r\n [5] \"Castellani\"   \"Ginori\"       \"Guadagni\"     \"Lamberteschi\"\r\n [9] \"Medici\"       \"Pazzi\"        \"Peruzzi\"      \"Pucci\"       \r\n[13] \"Ridolfi\"      \"Salviati\"     \"Strozzi\"      \"Tornabuoni\"  \r\n\r\nIdentify format of data set (i.e., matrix or edgelist, directed or not, weighted or not), and\r\nFlo Format: Size: 16 x 16 square dimmentions indicate a adjacency matrix format\r\nNetwork attributes: vertices = 16 directed = TRUE hyper = FALSE loops = FALSE multiple = FALSE bipartite = FALSE total edges= 40 missing edges= 0 non-missing edges= 40\r\nVertex attribute names: vertex.names\r\nNo edge attributes\r\n\r\n\r\n  dim(flo)\r\n\r\n\r\n[1] 16 16\r\n\r\n\r\n\r\n  network(flo)\r\n\r\n\r\n Network attributes:\r\n  vertices = 16 \r\n  directed = TRUE \r\n  hyper = FALSE \r\n  loops = FALSE \r\n  multiple = FALSE \r\n  bipartite = FALSE \r\n  total edges= 40 \r\n    missing edges= 0 \r\n    non-missing edges= 40 \r\n\r\n Vertex attribute names: \r\n    vertex.names \r\n\r\nNo edge attributes\r\n\r\nIdentify whether attribute data are present.\r\n\r\n\r\n  summary(flo,\r\n          print.adj = TRUE\r\n          )\r\n\r\n\r\n   Acciaiuoli        Albizzi         Barbadori        Bischeri     \r\n Min.   :0.0000   Min.   :0.0000   Min.   :0.000   Min.   :0.0000  \r\n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.000   1st Qu.:0.0000  \r\n Median :0.0000   Median :0.0000   Median :0.000   Median :0.0000  \r\n Mean   :0.0625   Mean   :0.1875   Mean   :0.125   Mean   :0.1875  \r\n 3rd Qu.:0.0000   3rd Qu.:0.0000   3rd Qu.:0.000   3rd Qu.:0.0000  \r\n Max.   :1.0000   Max.   :1.0000   Max.   :1.000   Max.   :1.0000  \r\n   Castellani         Ginori          Guadagni     Lamberteschi   \r\n Min.   :0.0000   Min.   :0.0000   Min.   :0.00   Min.   :0.0000  \r\n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.00   1st Qu.:0.0000  \r\n Median :0.0000   Median :0.0000   Median :0.00   Median :0.0000  \r\n Mean   :0.1875   Mean   :0.0625   Mean   :0.25   Mean   :0.0625  \r\n 3rd Qu.:0.0000   3rd Qu.:0.0000   3rd Qu.:0.25   3rd Qu.:0.0000  \r\n Max.   :1.0000   Max.   :1.0000   Max.   :1.00   Max.   :1.0000  \r\n     Medici          Pazzi           Peruzzi           Pucci  \r\n Min.   :0.000   Min.   :0.0000   Min.   :0.0000   Min.   :0  \r\n 1st Qu.:0.000   1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0  \r\n Median :0.000   Median :0.0000   Median :0.0000   Median :0  \r\n Mean   :0.375   Mean   :0.0625   Mean   :0.1875   Mean   :0  \r\n 3rd Qu.:1.000   3rd Qu.:0.0000   3rd Qu.:0.0000   3rd Qu.:0  \r\n Max.   :1.000   Max.   :1.0000   Max.   :1.0000   Max.   :0  \r\n    Ridolfi          Salviati        Strozzi       Tornabuoni    \r\n Min.   :0.0000   Min.   :0.000   Min.   :0.00   Min.   :0.0000  \r\n 1st Qu.:0.0000   1st Qu.:0.000   1st Qu.:0.00   1st Qu.:0.0000  \r\n Median :0.0000   Median :0.000   Median :0.00   Median :0.0000  \r\n Mean   :0.1875   Mean   :0.125   Mean   :0.25   Mean   :0.1875  \r\n 3rd Qu.:0.0000   3rd Qu.:0.000   3rd Qu.:0.25   3rd Qu.:0.0000  \r\n Max.   :1.0000   Max.   :1.000   Max.   :1.00   Max.   :1.0000  \r\n\r\nCreate & Describe: Directed Adjacency Matrix\r\nFlorentine Families Directed Adjacency Matrix Network Objects: iGraph flo.ig Statnet flo.stat\r\niGraph and Statnet both use {r graph4} for Directed Adjacency Matrix Objects\r\n\r\n\r\n    flo.stat<-\r\n        network(\r\n        flo,\r\n        directed=F,\r\n        matrix.type=\"adjacency\"\r\n        )\r\n\r\n#     provides a description of several critical network features\r\n    print(flo.stat)\r\n\r\n\r\n Network attributes:\r\n  vertices = 16 \r\n  directed = FALSE \r\n  hyper = FALSE \r\n  loops = FALSE \r\n  multiple = FALSE \r\n  bipartite = FALSE \r\n  total edges= 20 \r\n    missing edges= 0 \r\n    non-missing edges= 20 \r\n\r\n Vertex attribute names: \r\n    vertex.names \r\n\r\nNo edge attributes\r\n\r\n\r\n\r\n    flo.ig<-\r\n      graph.adjacency(\r\n      flo,\r\n      mode=\"undirected\"\r\n      ) \r\n    print(flo.ig)\r\n\r\n\r\nIGRAPH 60a423d UN-- 16 20 -- \r\n+ attr: name (v/c)\r\n+ edges from 60a423d (vertex names):\r\n [1] Acciaiuoli--Medici       Albizzi   --Ginori      \r\n [3] Albizzi   --Guadagni     Albizzi   --Medici      \r\n [5] Barbadori --Castellani   Barbadori --Medici      \r\n [7] Bischeri  --Guadagni     Bischeri  --Peruzzi     \r\n [9] Bischeri  --Strozzi      Castellani--Peruzzi     \r\n[11] Castellani--Strozzi      Guadagni  --Lamberteschi\r\n[13] Guadagni  --Tornabuoni   Medici    --Ridolfi     \r\n[15] Medici    --Salviati     Medici    --Tornabuoni  \r\n+ ... omitted several edges\r\n\r\n\r\n\r\n#     Count Vertices\r\n    vcount(flo.ig)\r\n\r\n\r\n[1] 16\r\n\r\n#     Count Edges\r\n    ecount(flo.ig)\r\n\r\n\r\n[1] 20\r\n\r\n# Is this a Bipartite or single mode network?\r\n    is_bipartite(flo.ig)\r\n\r\n\r\n[1] FALSE\r\n\r\n#  Are edges directed or undirected?\r\n    is_directed(flo.ig)\r\n\r\n\r\n[1] FALSE\r\n\r\n#Are edges weighted or unweighted?\r\n    is_weighted(flo.ig)        \r\n\r\n\r\n[1] FALSE\r\n\r\nVertex and Edge Attributes\r\n\r\n\r\n#     access vertex attributes\r\n  head(flo.stat %v% \"vertex.names\")\r\n\r\n\r\n[1] \"Acciaiuoli\" \"Albizzi\"    \"Barbadori\"  \"Bischeri\"   \"Castellani\"\r\n[6] \"Ginori\"    \r\n\r\n#      list the names of vertex attributes\r\n  network::list.vertex.attributes(flo.stat)\r\n\r\n\r\n[1] \"na\"           \"vertex.names\"\r\n\r\n#     access edge attribute\r\n  head(flo.stat%e% \"weight\")\r\n\r\n\r\nNULL\r\n\r\n#  Generate a list the names of edge attributes\r\n  network::list.edge.attributes(flo.stat)\r\n\r\n\r\n[1] \"na\"\r\n\r\n#   summarize numeric network attribute\r\n  summary(flo.stat  %v% \"name\")\r\n\r\n\r\n   Mode    NA's \r\nlogical      16 \r\n\r\n\r\n\r\n#     access vertex attribute \r\n  V(flo.ig)$name\r\n\r\n\r\n [1] \"Acciaiuoli\"   \"Albizzi\"      \"Barbadori\"    \"Bischeri\"    \r\n [5] \"Castellani\"   \"Ginori\"       \"Guadagni\"     \"Lamberteschi\"\r\n [9] \"Medici\"       \"Pazzi\"        \"Peruzzi\"      \"Pucci\"       \r\n[13] \"Ridolfi\"      \"Salviati\"     \"Strozzi\"      \"Tornabuoni\"  \r\n\r\n#     Generate a list the names of vertex attributes\r\n  igraph::vertex_attr_names(flo.ig)\r\n\r\n\r\n[1] \"name\"\r\n\r\n#     access edge attribute\r\n  E(flo.ig)$weight\r\n\r\n\r\nNULL\r\n\r\n#   Generate a list the names of edge attributes  \r\n  igraph::edge_attr_names(flo.ig)\r\n\r\n\r\ncharacter(0)\r\n\r\n#   summarize numeric network attribute\r\n  summary(E(flo.ig)$weight)  \r\n\r\n\r\nLength  Class   Mode \r\n     0   NULL   NULL \r\n\r\n3. Explore the dataset using commands from week 2 tutorial.\r\ngeodesic and path distances,\r\nPath Length and Geodesic\r\n\r\n\r\n#     Calculate distances between two nodes\r\n    distances(flo.ig,\"Bischeri\",\"Ridolfi\")\r\n\r\n\r\n         Ridolfi\r\nBischeri       2\r\n\r\n#     Calculate distance between two nodes using unweighted edges\r\n    distances(flo.ig,\"Bischeri\", \"Castellani\",weights=NA)\r\n\r\n\r\n         Castellani\r\nBischeri          2\r\n\r\nWe can also find all of the shortest paths between two famalies in this network. These list the starting node and the ending node with all nodes inbetween for each path. The option weights=NA means that any available edge weights are ignored.\r\n\r\n\r\n#     isolating the distances between specific node\r\n    all_shortest_paths(flo.ig,\"Strozzi\",\"Tornabuoni\", weights=NA)$res\r\n\r\n\r\n[[1]]\r\n+ 3/16 vertices, named, from 60a423d:\r\n[1] Strozzi    Ridolfi    Tornabuoni\r\n\r\n## Note: manually tell igraph to ignore edge weights.\r\n\r\n\r\n\r\nThe concept of shortest path to describe the overall network structure can be more useful\r\n\r\n\r\n#     find average shortest path for network\r\n    average.path.length(flo.ig,directed=F)    \r\n\r\n\r\n[1] 2.485714\r\n\r\ntriads or transitivity,\r\nDyad Census\r\nClassifies all dyads in the network as: - Reciprocal (mutual), or mut - Asymmetric (non-mutual), or asym, and - Absent, or null\r\n\r\n\r\n    sna::dyad.census(flo.stat)\r\n\r\n\r\n     Mut Asym Null\r\n[1,]  20    0  100\r\n\r\n\r\n\r\n  igraph::dyad.census(flo.ig)\r\n\r\n\r\n$mut\r\n[1] 20\r\n\r\n$asym\r\n[1] 0\r\n\r\n$null\r\n[1] 100\r\n\r\nTriad Census\r\nClassifies all triads in the network. The triad census provides a fundamental descriptive insight into the types of triads found in a particular dataset.\r\n\r\n\r\n#     Classify all Triad in the network: Directed Network\r\n  sna::triad.census(flo.stat, mode= )\r\n\r\n\r\n     003 012 102 021D 021U 021C 111D 111U 030T 030C 201 120D 120U\r\n[1,] 324   0 195    0    0    0    0    0    0    0  38    0    0\r\n     120C 210 300\r\n[1,]    0   0   3\r\n\r\n#     Classify all Triad in the network: Undirected Network\r\n   sna::triad.census(flo.stat, mode=\"graph\")\r\n\r\n\r\n       0   1  2 3\r\n[1,] 324 195 38 3\r\n\r\n#     total number of all four triad types returned by triad census\r\n   sum(sna::triad.census(flo.stat, mode=\"graph\"))\r\n\r\n\r\n[1] 560\r\n\r\n\r\n\r\n#Classify all Triad in the network\r\n     igraph::triad_census(flo.ig)\r\n\r\n\r\n [1] 324   0 195   0   0   0   0   0   0   0  38   0   0   0   0   3\r\n\r\nTransitivity or Global Clustering\r\n\r\n\r\n#     network transitivity:\r\n    transitivity(flo.ig)\r\n\r\n\r\n[1] 0.1914894\r\n\r\n#     weighted network transitivity:\r\n#   igraph::transivity(flo.ig)\r\n\r\n\r\n\r\n\r\n\r\n#     Directed Networks transitivity:\r\n  gtrans(flo.stat)\r\n\r\n\r\n[1] 0.1914894\r\n\r\n#   methods for weighted networks, rank and correlation, along with the relevant references.\r\n#  sna::gtrans()\r\n\r\n\r\n\r\nLocal Transivity or Clustering\r\nLocal transitivity (local clustering coefficient), is a technical description of the density of an ego network.\r\n\r\n\r\n#     Retrive a list of the vertices we are interested\r\n    V(flo.ig)[c(\"Bischeri\" ,\r\n                \"Castellani\", \r\n                \"Medici\",\r\n                \"Ridolfi\")]\r\n\r\n\r\n+ 4/16 vertices, named, from 60a423d:\r\n[1] Bischeri   Castellani Medici     Ridolfi   \r\n\r\n#     check ego network transitivity\r\ntransitivity(flo.ig,\r\n             type=\"local\", \r\n             vids=V(flo.ig)\r\n             [c(\"Bischeri\",\r\n                \"Castellani\", \r\n                \"Medici\",\r\n                \"Ridolfi\")]) \r\n\r\n\r\n[1] 0.33333333 0.33333333 0.06666667 0.33333333\r\n\r\n#     get global clustering cofficient\r\n  transitivity(flo.ig, type=\"global\")\r\n\r\n\r\n[1] 0.1914894\r\n\r\n#     get average local clustering coefficient\r\n  transitivity(flo.ig, type=\"average\")\r\n\r\n\r\n[1] 0.2181818\r\n\r\nconnectedness and.or component structure, etc.\r\n\r\nDistill is a publication format for scientific and technical writing, native to the web.\r\nLearn more about using Distill for R Markdown at https://rstudio.github.io/distill.\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-02-17T13:45:02-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httpsrpubscomburnworthj864158/",
    "title": "Degree and Centrality",
    "description": "'My dataset includes every Supreme Court Justice and the school that their clerks attended. There are 187 vertices which contstitute the Justices and the different universiteis. There are 2487 edges and an edge means there is a connection between a Justice and a school because they have hired a clerk that graduated with their law degree from the university.The network density of the dataset is .149 not including loops. When looking at node degreee, you will see that Harvard has the highest count of relationships with 681, Yale is second wiht 464, and Chicago is third with 172.The median node degree is 3 and The mean is 27.33. While the max is 681. The centralziation score for both in and out degrees is 3.65. The nodes with the most outdegree are Harvard, Yale, Chicago, Standford, and Columbia. The nodes with the least outdegree are Penn, Northeastern, Virginia, Temple, Washington & Lee.'",
    "author": [
      {
        "name": "Justin Burnworth",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-02-17T13:45:08-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httpsrpubscomburnworthj867161/",
    "title": "Week 4",
    "description": "My dataset includes every Supreme Court Justice and the school that their clerks attended. There are 187 vertices which contstitute the Justices and the different universiteis. There are 2487 edges and an edge means there is a connection between a Justice and a school because they have hired a clerk that graduated with their law degree from the university.\n\nThe centralization score for the dataset is .952. The more modern Justices have a higher betweenness score and I believe that is attributed to the fact that the total number of clerks have significantly grown starting back in the 1950s. The schools with the highest scores are Harvard, Georgetown, GW all schools where there have been many clerks hired from. While the schools with a few or only one clerk hired from have much lower scores. \n\nWhen it comes to eigenvector centarlity, shows some intersting reults. A modern justice such as Justice Gorsuch has among the highest while Justice Scalia is more middle of the pack. Howver, an older justice, Justice William Howard Taft has just as high of a score as Justice Gorsuch. I am not really sure what these results man. Justice Gorsuch's high score might be explained because he both clerked for a Justice and is a Justice himself.\n\n  The school with the highest bonachi-power is Minnesota with -3.63 whil the lowest is Notre Dame. The Justice with the highest score is interestingly the newest Justice, Amy Coney-Barrett.",
    "author": [
      {
        "name": "Justin Burnworth",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\nD\n\n\n\n",
    "preview": {},
    "last_modified": "2022-02-17T13:46:16-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httpsrpubscomchester860583/",
    "title": "Testing",
    "description": "A new article created using the Distill format.",
    "author": [
      {
        "name": "Cynthia Hester",
        "url": "https://example.com/norajones"
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-02-17T13:43:51-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httpsrpubscomecaetanoesil865861/",
    "title": "Short Assignment 2",
    "description": "Describing Network Data",
    "author": [
      {
        "name": "Eunice C. Silva",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\nI am working with a dataset accessed from the network package -\nFlorentine Families. This dataset is already in a format suitable for\nnetwork analysis (an adjancecy matrix) and ready to work with. The\nmatrix shows the marriage links of different families in Florence. A 1\nindicates the presence of a marriage link, while a 0 indicates the\nabsence of a marriage link.\n\n\nlibrary(network)\nlibrary(igraph)\nlibrary(statnet)\ndata(\"flo\")\nnetwork_adjacencey<- flo\nnetwork_adjacencey \n\n\n             Acciaiuoli Albizzi Barbadori Bischeri Castellani Ginori\nAcciaiuoli            0       0         0        0          0      0\nAlbizzi               0       0         0        0          0      1\nBarbadori             0       0         0        0          1      0\nBischeri              0       0         0        0          0      0\nCastellani            0       0         1        0          0      0\nGinori                0       1         0        0          0      0\nGuadagni              0       1         0        1          0      0\nLamberteschi          0       0         0        0          0      0\nMedici                1       1         1        0          0      0\nPazzi                 0       0         0        0          0      0\nPeruzzi               0       0         0        1          1      0\nPucci                 0       0         0        0          0      0\nRidolfi               0       0         0        0          0      0\nSalviati              0       0         0        0          0      0\nStrozzi               0       0         0        1          1      0\nTornabuoni            0       0         0        0          0      0\n             Guadagni Lamberteschi Medici Pazzi Peruzzi Pucci Ridolfi\nAcciaiuoli          0            0      1     0       0     0       0\nAlbizzi             1            0      1     0       0     0       0\nBarbadori           0            0      1     0       0     0       0\nBischeri            1            0      0     0       1     0       0\nCastellani          0            0      0     0       1     0       0\nGinori              0            0      0     0       0     0       0\nGuadagni            0            1      0     0       0     0       0\nLamberteschi        1            0      0     0       0     0       0\nMedici              0            0      0     0       0     0       1\nPazzi               0            0      0     0       0     0       0\nPeruzzi             0            0      0     0       0     0       0\nPucci               0            0      0     0       0     0       0\nRidolfi             0            0      1     0       0     0       0\nSalviati            0            0      1     1       0     0       0\nStrozzi             0            0      0     0       1     0       1\nTornabuoni          1            0      1     0       0     0       1\n             Salviati Strozzi Tornabuoni\nAcciaiuoli          0       0          0\nAlbizzi             0       0          0\nBarbadori           0       0          0\nBischeri            0       1          0\nCastellani          0       1          0\nGinori              0       0          0\nGuadagni            0       0          1\nLamberteschi        0       0          0\nMedici              1       0          1\nPazzi               1       0          0\nPeruzzi             0       1          0\nPucci               0       0          0\nRidolfi             0       1          1\nSalviati            0       0          0\nStrozzi             0       0          0\nTornabuoni          0       0          0\n\nFollowing the script, I’ve created both a statnet and igraph network\nobject from the dataset (adjancecy matrix).\n\n\nnetwork_statnet <- network(network_adjacencey, direct = FALSE)\n\n\n\n\n\nnetwork_igraph <- graph_from_adjacency_matrix(network_adjacencey, mode = \"upper\", weighted = NULL)\n\n\n\nList of the objects available:\n\n\nls()\n\n\n[1] \"flo\"                \"network_adjacencey\" \"network_igraph\"    \n[4] \"network_statnet\"   \n\nWe already know that the Florentine Families dataset is in the format\nof a matrix. In terms of network size, the network has 16 vertices or\nnodes (16 families) connected by 20 edges (representing ties of\nmarriage, in this case).\n\n\nprint(network_statnet)\n\n\n Network attributes:\n  vertices = 16 \n  directed = FALSE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 20 \n    missing edges= 0 \n    non-missing edges= 20 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nWhen it comes to network features, we learn from running the codes\nbelow that the network is unweighted/binary (with 0 and 1 inidicating\nthe absence and presence of a marriage tie, respectively), undirected\n(meaning that the relationship between nodes is inherently symmetric, as\nmarriage relationships are), and single/not bipartite.\n\n\nis_weighted(network_igraph)\n\n\n[1] FALSE\n\n\n\nis_directed(network_igraph)\n\n\n[1] FALSE\n\n\n\nis_bipartite(network_igraph)\n\n\n[1] FALSE\n\nNetwork attributes:\n\n\nnetwork::list.vertex.attributes(network_statnet)\n\n\n[1] \"na\"           \"vertex.names\"\n\n\n\nnetwork::list.edge.attributes(network_statnet)\n\n\n[1] \"na\"\n\nNetwork structure comments\n\n\nsna::dyad.census(network_statnet)\n\n\n     Mut Asym Null\n[1,]  20    0  100\n\nSince the ties are undirected, the dyad census command confirms the\nexpected - that there are no assymetric edges. In ohter words, that all\nedges are reciprocal/mutual.\n\n\nsna::triad.census(network_statnet, mode = \"graph\")\n\n\n       0   1  2 3\n[1,] 324 195 38 3\n\n\n\nsum(sna::triad.census(network_statnet, mode = \"graph\"))\n\n\n[1] 560\n\nThe statnet command allowed me to indicate that the netwrok is\nundirected with the option mode=“graph”. There are 4 undirected triads,\nfor a total number of 560.\nHow transitive are the relationships? What proportion of the\nconnected triads are complete?\nLocal clustering (below)\n\n\ntransitivity(network_igraph, type = \"average\")\n\n\n[1] 0.2181818\n\nGlobal clustering (below)\n\n\ntransitivity(network_igraph, type = \"global\")\n\n\n[1] 0.1914894\n\nLocal clustering is higher than global clustering, but overall low\nproportion of connected triads that are complete, I think. But I am\nhaving difficulties understanding/explaining what this means in this\nmarriage dataset.\n\n\ngtrans(network_statnet)\n\n\n[1] 0.1914894\n\nAverage path length in whole network:\n\n\naverage.path.length(network_igraph, directed = F)\n\n\n[1] 2.485714\n\n\n\nnames(igraph::components(network_igraph))\n\n\n[1] \"membership\" \"csize\"      \"no\"        \n\n\n\nigraph::components(network_igraph)$no\n\n\n[1] 2\n\nThe network has 2 components…\n\n\nigraph::components(network_igraph)$csize\n\n\n[1] 15  1\n\n… 1 of the components is larger, with 15 members and the other has\none single member.\n\n\nisolates(network_statnet)\n\n\n[1] 12\n\nThere are 12 isolates in the network - 12 nodes that have no link to\nthe rest of the network.\n\n\nas.vector(network_statnet%v%'vertex.names')[c(isolates(network_statnet))]\n\n\n[1] \"Pucci\"\n\nWhen we retrieve the names of the isolates, they all refer to the\nPucci family, which is not linked by marriage to any of the other\nFlorentine families.\nDistill is a publication format for scientific and technical writing,\nnative to the web.\nLearn more about using Distill for R Markdown at https://rstudio.github.io/distill.\n\n\n\n",
    "preview": {},
    "last_modified": "2022-02-17T13:45:38-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httpsrpubscomlbateshaus862879/",
    "title": "Week 2 Assignment",
    "description": "An exploration of the Sampson's Monks dataset.",
    "author": [
      {
        "name": "Lissie  Bates-Haus, Ph.D.",
        "url": "https://github.com/lbateshaus"
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\nIn this assignment, I will be exploring the Sampson’s Monks dataset.\nFirst, I utilized the provided Import Script shared in the Google Classroom to import the data and create the relevant data formats to interact with igraph and statnet.\n\n\n#This script imports the sampson monk dataset from the ergm package.\n\n#Let's load the libraries you need (install them first if you need to)\n  if(\"statnet\" %in% rownames(installed.packages()) == FALSE) {install.packages(\"statnet\")}\n  if(\"igraph\"   %in% rownames(installed.packages()) == FALSE) {install.packages(\"igraph\")}\n  if(\"intergraph\"   %in% rownames(installed.packages()) == FALSE) {install.packages(\"intergraph\")}\n  \n  \n  library(statnet)\n  library(igraph)\n  library(intergraph)\n  \n#Lets read the data into the enviroment. This will import it as a \n  data(\"sampson\", package = \"ergm\")\n  network_statnet <- samplike\n  rm(samplike)\n\n#Let's create an edgelist version\n  network_edgelist <- as.data.frame(as.edgelist(network_statnet))\n  network_edgelist$nominaations <- network_statnet%e%'nominations'\n  \n#Let's create a dataframe of node attributes\n  network_nodes <- data.frame(cloisterville = network_statnet%v%'cloisterville',\n                              group         = network_statnet%v%'group',\n                              names         = network_statnet%v%'vertex.names'\n  )\n\n  \n#Finaly, lets make an igraph version\n  network_igraph <- asIgraph(network_statnet)\n\n\n\nInformation about the network data can be accessed by the command: “?sampson”\nFirst, using igraph:\n\n\ndim(network_edgelist)\n\n\n[1] 88  3\n\nThe dim() command tells us that we have a dataframe (called network_edgelist) which has 88 observations (rows) of 3 variables, which tells us that this (as the name indicates from the Import Script) an edgelist and not an adjacency matrix (which would be a square dataframe).\n\n\nis_bipartite(network_igraph)\n\n\n[1] FALSE\n\nis_directed(network_igraph)\n\n\n[1] TRUE\n\nis_weighted(network_igraph)\n\n\n[1] FALSE\n\nFrom these commands, we learn that this dataset is not bipartite, it is directed, and it is not weighted.\n\n\nvertex_attr_names(network_igraph)\n\n\n[1] \"cloisterville\" \"group\"         \"na\"            \"vertex.names\" \n\nFrom here we learn that our nodes have the following attributes (meaning, additional information available about each node): Cloisterville, Group, NA and vertex.names.\nNote: we have also created a Nodes dataframe, which has three columns: cloisterville, group and names. It’s not clear to me what the NA attribute is.\n\n\nedge_attr_names(network_igraph)\n\n\n[1] \"na\"          \"nominations\"\n\nOur edge attributes include na and nominations. In this case, the nominations value is the “the number of times (out of 3) that monk A nominated monk B.”\nWe can also utilize the statnet package to learn about our network:\n\n\nsummary(network_statnet)\n\n\nNetwork attributes:\n  vertices = 18\n  directed = TRUE\n  hyper = FALSE\n  loops = FALSE\n  multiple = FALSE\n total edges = 88 \n   missing edges = 0 \n   non-missing edges = 88 \n density = 0.2875817 \n\nVertex attributes:\n\n cloisterville:\n   logical valued attribute\n   attribute summary:\n   Mode   FALSE    TRUE \nlogical      12       6 \n\n group:\n   character valued attribute\n   attribute summary:\n   Loyal Outcasts    Turks \n       7        4        7 \n  vertex.names:\n   character valued attribute\n   18 valid vertex names\n\nEdge attributes:\n\n nominations:\n   numeric valued attribute\n   attribute summary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   1.000   2.000   1.909   3.000   3.000 \n\nNetwork edgelist matrix:\n      [,1] [,2]\n [1,]    5    1\n [2,]    7    1\n [3,]    1    2\n [4,]    3    2\n [5,]   12    2\n [6,]   15    2\n [7,]    1    3\n [8,]    5    4\n [9,]    1    5\n[10,]    4    5\n[11,]    6    5\n[12,]   13    7\n[13,]    9    8\n[14,]   10    8\n[15,]   11    8\n[16,]    8    9\n[17,]   10    9\n[18,]    8   10\n[19,]   14   12\n[20,]   10   13\n[21,]   18   13\n[22,]    2   15\n[23,]   16   15\n[24,]    9   16\n[25,]   18   17\n[26,]   17   18\n[27,]    2    1\n[28,]    3    1\n[29,]    6    1\n[30,]    8    1\n[31,]   12    1\n[32,]   14    1\n[33,]   15    1\n[34,]   16    1\n[35,]   18    1\n[36,]    7    2\n[37,]    8    2\n[38,]   14    2\n[39,]   16    2\n[40,]   17    2\n[41,]   18    2\n[42,]   17    3\n[43,]   18    3\n[44,]    6    4\n[45,]    8    4\n[46,]   10    4\n[47,]   11    4\n[48,]    9    5\n[49,]   10    5\n[50,]   11    5\n[51,]   13    5\n[52,]   15    5\n[53,]    4    6\n[54,]    8    6\n[55,]    2    7\n[56,]   12    7\n[57,]   15    7\n[58,]   16    7\n[59,]   18    7\n[60,]    1    8\n[61,]    7    8\n[62,]    5    9\n[63,]    6    9\n[64,]    4   10\n[65,]    4   11\n[66,]    5   11\n[67,]   14   11\n[68,]    1   12\n[69,]    2   12\n[70,]    7   12\n[71,]    9   12\n[72,]   15   12\n[73,]   16   12\n[74,]    3   13\n[75,]    5   13\n[76,]   17   13\n[77,]    1   14\n[78,]    2   14\n[79,]   10   14\n[80,]   11   14\n[81,]   12   14\n[82,]   15   14\n[83,]   14   15\n[84,]    7   16\n[85,]   11   16\n[86,]    3   17\n[87,]    3   18\n[88,]   13   18\n\nFrom here, we’ll run some assessments based on our Week 2 tutorial.\nFirst, we’ll run a dyad census:\n\n\nigraph::dyad.census(network_igraph)\n\n\n$mut\n[1] 28\n\n$asym\n[1] 32\n\n$null\n[1] 93\n\nThere are 153 possible combinations of dyads in a group of 18 people. What this tells us that of those 153 combinations, only 28 are mutual (where A chooses B and B chooses A). Another 32 are assymmetic, meaning only one pair of the dyad chooses another, and 93, or more than 60% are null.\nNext, we’ll look at a triad census (note: there are 816 possible triads in this network). We’ll confirm this:\n\n\nsum(sna::triad.census(network_statnet, mode=\"graph\"))\n\n\n[1] 816\n\n\n\n#Classify all triads in the network: statnet\n#note: omit the 'mode' option for a directed network\nsna::triad.census(network_statnet)\n\n\n     003 012 102 021D 021U 021C 111D 111U 030T 030C 201 120D 120U\n[1,] 167 205 190   12   24   24   68   34    5    0  35   15    6\n     120C 210 300\n[1,]    5  18   8\n\n\n\n#get network transitivity: igraph\ntransitivity(network_igraph)\n\n\n[1] 0.4646739\n\nthis measure states that about 46.5% of the triads in our network are connected. However, this is a directed network.\n\n\ngtrans(network_statnet)\n\n\n[1] 0.4074074\n\nWe can look at global vs local transitivity as well.\n\n\ntransitivity(network_igraph, type=\"global\")\n\n\n[1] 0.4646739\n\ntransitivity(network_igraph, type=\"average\")\n\n\n[1] 0.4925926\n\n\n\n\n",
    "preview": {},
    "last_modified": "2022-02-17T13:44:53-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httpsrpubscomlbateshaus867200/",
    "title": "Week 4 Data Exploration",
    "description": "An exploration of centrality and centralization in the Florentine Families dataset",
    "author": [
      {
        "name": "Lissie Bates-Haus",
        "url": "https://github.com/lbateshaus"
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\nFirst: copy over the import script provided:\n\n#################################################################################################\n\"Florentine Families.R\" has imported a network of weddings among powerful Florentine families. \n\nThis is a small, unweighted, undirected network stored as an adjacency matrix with no additional node or edge attributes. For more information use \"?flo\".\n\nThe import script has created three objects that represent the network:\n     -network_adjacency     (an adjacency matrix containing edges and node names)\n     -network_igraph        (an igraph object)\n     -network_statnet       (a network object compatable with statnet packages like sna & ergm)\n\nEach object name starts, quite generically, with \"network_\" and ends with the type of object it is. Note that the names are generic so that they are  compatable with other scripts you will use in this course. Feel free to rename the objects for your purposes. \n################################################################################################\n\nA brief description of the network:\n\n Network attributes:\n  vertices = 16 \n  directed = FALSE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 20 \n    missing edges= 0 \n    non-missing edges= 20 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n[1] FALSE\n\n\n[1] \"name\"\ncharacter(0)\n\nNodes are the names of 16 prominent families in Florentine during the earily 1400s. Ties are marriage connections between two families. This is an unweighted (binary), undirected graph.\nFirst, we’ll take a brief look at the structure of this network.\n\n[1] \"membership\" \"csize\"      \"no\"        \n[1] 2\n[1] 15  1\n     Mut Asym Null\n[1,]  20    0  100\n     003 012 102 021D 021U 021C 111D 111U 030T 030C 201 120D 120U\n[1,] 324   0 195    0    0    0    0    0    0    0  38    0    0\n     120C 210 300\n[1,]    0   0   3\n[1] 0.1914894\n\nFrom here, we see there are two components in this graph: one consisting of fifteen of the elements, and one consisting of one (one isolate). This is an undirected graph so there are no asymmetrical dyads. Our global transitivity statistic is approximately 0.191.\n\n\n\nThis plot is a visual representation of our two-component network, with 15 nodes conneted and 1 isolate (the Pucci family).\nNow we’ll run some measures of centrality.\n\n           name degree indegree outdegree      eigen   Bonacich\n1    Acciaiuoli      2        1         1 0.13215429 -0.3796632\n2       Albizzi      6        3         3 0.24395611 -2.0881476\n3     Barbadori      4        2         2 0.21170525 -1.5186528\n4      Bischeri      6        3         3 0.28280009  0.0000000\n5    Castellani      6        3         3 0.25902617 -1.3288212\n6        Ginori      2        1         1 0.07492271 -1.8983160\n7      Guadagni      8        4         4 0.28911560 -0.1898316\n8  Lamberteschi      2        1         1 0.08879189  0.0000000\n9        Medici     12        6         6 0.43030809 -0.5694948\n10        Pazzi      2        1         1 0.04481344  0.0000000\n11      Peruzzi      6        3         3 0.27573037 -0.5694948\n12        Pucci      0        0         0 0.00000000  0.0000000\n13      Ridolfi      6        3         3 0.34155264  1.3288212\n14     Salviati      4        2         2 0.14591720 -0.1898316\n15      Strozzi      8        4         4 0.35598045  0.1898316\n16   Tornabuoni      6        3         3 0.32584230  1.1389896\n          rc   eigen.rc        dc   eigen.dc\n1  0.1666667 0.02202572 0.8333333 0.11012858\n2  0.2727273 0.06653348 0.7272727 0.17742262\n3  0.2222222 0.04704561 0.7777778 0.16465964\n4  0.2727273 0.07712730 0.7272727 0.20567279\n5  0.3333333 0.08634206 0.6666667 0.17268411\n6  0.3333333 0.02497424 0.6666667 0.04994847\n7  0.4000000 0.11564624 0.6000000 0.17346936\n8  0.2500000 0.02219797 0.7500000 0.06659392\n9  0.4285714 0.18441775 0.5714286 0.24589034\n10 0.5000000 0.02240672 0.5000000 0.02240672\n11 0.3000000 0.08271911 0.7000000 0.19301126\n12 0.0000000 0.00000000 1.0000000 0.00000000\n13 0.2307692 0.07881984 0.7692308 0.26273280\n14 0.2857143 0.04169063 0.7142857 0.10422657\n15 0.3333333 0.11866015 0.6666667 0.23732030\n16 0.2307692 0.07519438 0.7692308 0.25064792\n\nThe question is, now that we’ve calculated all of these scores, what do we do with them?\nIf we simply sort by degree:\n\n           name degree indegree outdegree      eigen   Bonacich\n1        Medici     12        6         6 0.43030809 -0.5694948\n2      Guadagni      8        4         4 0.28911560 -0.1898316\n3       Strozzi      8        4         4 0.35598045  0.1898316\n4       Albizzi      6        3         3 0.24395611 -2.0881476\n5      Bischeri      6        3         3 0.28280009  0.0000000\n6    Castellani      6        3         3 0.25902617 -1.3288212\n7       Peruzzi      6        3         3 0.27573037 -0.5694948\n8       Ridolfi      6        3         3 0.34155264  1.3288212\n9    Tornabuoni      6        3         3 0.32584230  1.1389896\n10    Barbadori      4        2         2 0.21170525 -1.5186528\n11     Salviati      4        2         2 0.14591720 -0.1898316\n12   Acciaiuoli      2        1         1 0.13215429 -0.3796632\n13       Ginori      2        1         1 0.07492271 -1.8983160\n14 Lamberteschi      2        1         1 0.08879189  0.0000000\n15        Pazzi      2        1         1 0.04481344  0.0000000\n16        Pucci      0        0         0 0.00000000  0.0000000\n          rc   eigen.rc        dc   eigen.dc\n1  0.4285714 0.18441775 0.5714286 0.24589034\n2  0.4000000 0.11564624 0.6000000 0.17346936\n3  0.3333333 0.11866015 0.6666667 0.23732030\n4  0.2727273 0.06653348 0.7272727 0.17742262\n5  0.2727273 0.07712730 0.7272727 0.20567279\n6  0.3333333 0.08634206 0.6666667 0.17268411\n7  0.3000000 0.08271911 0.7000000 0.19301126\n8  0.2307692 0.07881984 0.7692308 0.26273280\n9  0.2307692 0.07519438 0.7692308 0.25064792\n10 0.2222222 0.04704561 0.7777778 0.16465964\n11 0.2857143 0.04169063 0.7142857 0.10422657\n12 0.1666667 0.02202572 0.8333333 0.11012858\n13 0.3333333 0.02497424 0.6666667 0.04994847\n14 0.2500000 0.02219797 0.7500000 0.06659392\n15 0.5000000 0.02240672 0.5000000 0.02240672\n16 0.0000000 0.00000000 1.0000000 0.00000000\n\nWe find, unsurprisingly, that the Medici family has the highest overall degree measure (12) as well as both the highest in- and out-degree measures, which suggest to me that the Medici family is the most highly connected of the Florentine Families. They also have the highest eigenvalue measure, which suggests again that they are most centrally connected and that they are connected to the most centrally connected other families.\nOf note is the Bonacich measure:\n\n           name degree indegree outdegree      eigen   Bonacich\n1       Ridolfi      6        3         3 0.34155264  1.3288212\n2    Tornabuoni      6        3         3 0.32584230  1.1389896\n3       Strozzi      8        4         4 0.35598045  0.1898316\n4      Bischeri      6        3         3 0.28280009  0.0000000\n5  Lamberteschi      2        1         1 0.08879189  0.0000000\n6         Pazzi      2        1         1 0.04481344  0.0000000\n7         Pucci      0        0         0 0.00000000  0.0000000\n8      Guadagni      8        4         4 0.28911560 -0.1898316\n9      Salviati      4        2         2 0.14591720 -0.1898316\n10   Acciaiuoli      2        1         1 0.13215429 -0.3796632\n11       Medici     12        6         6 0.43030809 -0.5694948\n12      Peruzzi      6        3         3 0.27573037 -0.5694948\n13   Castellani      6        3         3 0.25902617 -1.3288212\n14    Barbadori      4        2         2 0.21170525 -1.5186528\n15       Ginori      2        1         1 0.07492271 -1.8983160\n16      Albizzi      6        3         3 0.24395611 -2.0881476\n          rc   eigen.rc        dc   eigen.dc\n1  0.2307692 0.07881984 0.7692308 0.26273280\n2  0.2307692 0.07519438 0.7692308 0.25064792\n3  0.3333333 0.11866015 0.6666667 0.23732030\n4  0.2727273 0.07712730 0.7272727 0.20567279\n5  0.2500000 0.02219797 0.7500000 0.06659392\n6  0.5000000 0.02240672 0.5000000 0.02240672\n7  0.0000000 0.00000000 1.0000000 0.00000000\n8  0.4000000 0.11564624 0.6000000 0.17346936\n9  0.2857143 0.04169063 0.7142857 0.10422657\n10 0.1666667 0.02202572 0.8333333 0.11012858\n11 0.4285714 0.18441775 0.5714286 0.24589034\n12 0.3000000 0.08271911 0.7000000 0.19301126\n13 0.3333333 0.08634206 0.6666667 0.17268411\n14 0.2222222 0.04704561 0.7777778 0.16465964\n15 0.3333333 0.02497424 0.6666667 0.04994847\n16 0.2727273 0.06653348 0.7272727 0.17742262\n\nThis seems to be capturing something different about network position than the eigen score, and on this measure, the Medici family is at number 11. Per the igraph documentation:\n“…positive values imply that vertices become more powerful as their alters become more powerful (as occurs in cooperative relations), while negative values imply that vertices become more powerful only as their alters become weaker (as occurs in competitive or antagonistic relations).”\nOnly three families have positive Bonacich scores (I am not sure how to interpret a Bonacich score of 0?).\nThe last measure I’ll look at is the reflected and derived centrality scores. Note: a higher score of eigen reflected centrality indicates the node may occupy a hub position.\n\n           name degree indegree outdegree      eigen   Bonacich\n1        Medici     12        6         6 0.43030809 -0.5694948\n2       Strozzi      8        4         4 0.35598045  0.1898316\n3      Guadagni      8        4         4 0.28911560 -0.1898316\n4    Castellani      6        3         3 0.25902617 -1.3288212\n5       Peruzzi      6        3         3 0.27573037 -0.5694948\n6       Ridolfi      6        3         3 0.34155264  1.3288212\n7      Bischeri      6        3         3 0.28280009  0.0000000\n8    Tornabuoni      6        3         3 0.32584230  1.1389896\n9       Albizzi      6        3         3 0.24395611 -2.0881476\n10    Barbadori      4        2         2 0.21170525 -1.5186528\n11     Salviati      4        2         2 0.14591720 -0.1898316\n12       Ginori      2        1         1 0.07492271 -1.8983160\n13        Pazzi      2        1         1 0.04481344  0.0000000\n14 Lamberteschi      2        1         1 0.08879189  0.0000000\n15   Acciaiuoli      2        1         1 0.13215429 -0.3796632\n16        Pucci      0        0         0 0.00000000  0.0000000\n          rc   eigen.rc        dc   eigen.dc\n1  0.4285714 0.18441775 0.5714286 0.24589034\n2  0.3333333 0.11866015 0.6666667 0.23732030\n3  0.4000000 0.11564624 0.6000000 0.17346936\n4  0.3333333 0.08634206 0.6666667 0.17268411\n5  0.3000000 0.08271911 0.7000000 0.19301126\n6  0.2307692 0.07881984 0.7692308 0.26273280\n7  0.2727273 0.07712730 0.7272727 0.20567279\n8  0.2307692 0.07519438 0.7692308 0.25064792\n9  0.2727273 0.06653348 0.7272727 0.17742262\n10 0.2222222 0.04704561 0.7777778 0.16465964\n11 0.2857143 0.04169063 0.7142857 0.10422657\n12 0.3333333 0.02497424 0.6666667 0.04994847\n13 0.5000000 0.02240672 0.5000000 0.02240672\n14 0.2500000 0.02219797 0.7500000 0.06659392\n15 0.1666667 0.02202572 0.8333333 0.11012858\n16 0.0000000 0.00000000 1.0000000 0.00000000\n\nBy this metric, the Medici family is a hub, as well as the Strozzi and Guadagni families. If we look at our plot again, this makes sense.\n\n\n\nRecall that nodes with higher eigen derived centrality scores may occupy a bridge position.\n\n           name degree indegree outdegree      eigen   Bonacich\n1       Ridolfi      6        3         3 0.34155264  1.3288212\n2    Tornabuoni      6        3         3 0.32584230  1.1389896\n3        Medici     12        6         6 0.43030809 -0.5694948\n4       Strozzi      8        4         4 0.35598045  0.1898316\n5      Bischeri      6        3         3 0.28280009  0.0000000\n6       Peruzzi      6        3         3 0.27573037 -0.5694948\n7       Albizzi      6        3         3 0.24395611 -2.0881476\n8      Guadagni      8        4         4 0.28911560 -0.1898316\n9    Castellani      6        3         3 0.25902617 -1.3288212\n10    Barbadori      4        2         2 0.21170525 -1.5186528\n11   Acciaiuoli      2        1         1 0.13215429 -0.3796632\n12     Salviati      4        2         2 0.14591720 -0.1898316\n13 Lamberteschi      2        1         1 0.08879189  0.0000000\n14       Ginori      2        1         1 0.07492271 -1.8983160\n15        Pazzi      2        1         1 0.04481344  0.0000000\n16        Pucci      0        0         0 0.00000000  0.0000000\n          rc   eigen.rc        dc   eigen.dc\n1  0.2307692 0.07881984 0.7692308 0.26273280\n2  0.2307692 0.07519438 0.7692308 0.25064792\n3  0.4285714 0.18441775 0.5714286 0.24589034\n4  0.3333333 0.11866015 0.6666667 0.23732030\n5  0.2727273 0.07712730 0.7272727 0.20567279\n6  0.3000000 0.08271911 0.7000000 0.19301126\n7  0.2727273 0.06653348 0.7272727 0.17742262\n8  0.4000000 0.11564624 0.6000000 0.17346936\n9  0.3333333 0.08634206 0.6666667 0.17268411\n10 0.2222222 0.04704561 0.7777778 0.16465964\n11 0.1666667 0.02202572 0.8333333 0.11012858\n12 0.2857143 0.04169063 0.7142857 0.10422657\n13 0.2500000 0.02219797 0.7500000 0.06659392\n14 0.3333333 0.02497424 0.6666667 0.04994847\n15 0.5000000 0.02240672 0.5000000 0.02240672\n16 0.0000000 0.00000000 1.0000000 0.00000000\n\nBy this measure, the Ridolfi and Tornabuoni occupy bridge positions. Of note is that the Medici family is also high on this list, which perhaps speaks to the centrality of that family, regardless of measure.\n\n\n\n",
    "preview": "posts/httpsrpubscomlbateshaus867200/distill-preview.png",
    "last_modified": "2022-02-17T13:46:24-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsrpubscompjsulliv34864273/",
    "title": "Networks Hw 2",
    "description": "A closer look at Enrons Emails",
    "author": [
      {
        "name": "Peter Sullivan",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\r\nLooking at Nodes and Edges:\r\n\r\n\r\nls()\r\n\r\n\r\n[1] \"network_edgelist\" \"network_igraph\"   \"network_statnet\" \r\n\r\nvcount(network_igraph)\r\n\r\n\r\n[1] 184\r\n\r\necount(network_igraph)\r\n\r\n\r\n[1] 125409\r\n\r\nprint(network_statnet)\r\n\r\n\r\n Network attributes:\r\n  vertices = 184 \r\n  directed = TRUE \r\n  hyper = FALSE \r\n  loops = FALSE \r\n  multiple = FALSE \r\n  bipartite = FALSE \r\n  total edges= 3010 \r\n    missing edges= 0 \r\n    non-missing edges= 3010 \r\n\r\n Vertex attribute names: \r\n    vertex.names \r\n\r\n Edge attribute names not shown \r\n\r\n#print(network_igraph)\r\n\r\n\r\n\r\nIt looks like the igraph and statnet variables are showing different edges. The network igraph is showing 184 nodes and 125409 edges. The network statnet is showing 184 nodes, and 3010 edges.\r\n\r\nWeighted, Directed, Single Mode Network?\r\n\r\n\r\nis_bipartite(network_igraph)\r\n\r\n\r\n[1] FALSE\r\n\r\nis_directed(network_igraph)\r\n\r\n\r\n[1] TRUE\r\n\r\nis_weighted(network_igraph)\r\n\r\n\r\n[1] FALSE\r\n\r\nUsing the Network Igraph set, we have a single mode network, which is directed, and is not weighted.\r\n\r\nLooking at Vertex and Edge Attributes:\r\n\r\n\r\nvertex_attr_names(network_igraph)\r\n\r\n\r\n[1] \"Email\" \"Name\"  \"Note\" \r\n\r\nnetwork::list.vertex.attributes(network_statnet)\r\n\r\n\r\n[1] \"na\"           \"vertex.names\"\r\n\r\nedge_attr_names(network_igraph)\r\n\r\n\r\n[1] \"Time\"      \"Reciptype\" \"Topic\"     \"LDC_topic\"\r\n\r\nnetwork::list.edge.attributes(network_statnet)\r\n\r\n\r\n[1] \"LDC_topic\"      \"LDC_topic_desc\" \"LDC_topic_name\"\r\n[4] \"na\"             \"Reciptype\"      \"Time\"          \r\n[7] \"Topic\"         \r\n\r\nIgraph Attribute Names: Email, Name, Note\r\nIgraph edge names: Time, Reciptype, Topic, LDC_topic\r\nStatnet attribute names: na, vertex.names\r\nstatnet edge names: LDC_topic, LDC_topic_desc, LDC_topic_name, na, Reciptype, Time, Topic\r\n\r\nAccessing Attribute DATA:\r\n\r\n\r\nV(network_igraph)$Name %>% head()\r\n\r\n\r\n[1] \"Albert Meyers\"    \"Thomas Martin\"    \"Andrea Ring\"     \r\n[4] \"Andrew Lewis\"     \"Andy Zipper\"      \"Jeffrey Shankman\"\r\n\r\nV(network_igraph)$Email %>% head()\r\n\r\n\r\n[1] \"albert.meyers\" \"a..martin\"     \"andrea.ring\"   \"andrew.lewis\" \r\n[5] \"andy.zipper\"   \"a..shankman\"  \r\n\r\nV(network_igraph)$Note %>% head()\r\n\r\n\r\n[1] \"Employee, Specialist\"         \"Vice President\"              \r\n[3] \"NA\"                           \"Director\"                    \r\n[5] \"Vice President, Enron Online\" \"President, Enron Global Mkts\"\r\n\r\n(network_igraph)$Carrier %>% head()\r\n\r\n\r\nNULL\r\n\r\nhead(network_statnet %v% \"vertex.names\")\r\n\r\n\r\n[1] 1 2 3 4 5 6\r\n\r\nhead(network_statnet %e% \"Time\")\r\n\r\n\r\n[1] \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\"\r\n[4] \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\"\r\n\r\nhead(network_statnet %e% \"LDC_topic\")\r\n\r\n\r\n[1] \"-1\" \"-1\" \"-1\" \"-1\" \"-1\" \"-1\"\r\n\r\n\r\nSummarizing Attribute DATA\r\n\r\n\r\nsummary(E(network_igraph)$Time)\r\n\r\n\r\n   Length     Class      Mode \r\n   125409 character character \r\n\r\nsummary(network_statnet %e% \"Distance\")\r\n\r\n\r\nLength  Class   Mode \r\n     0   NULL   NULL \r\n\r\n #### Dyad Census\r\n\r\n\r\nigraph::dyad.census(network_igraph)\r\n\r\n\r\n$mut\r\n[1] 30600\r\n\r\n$asym\r\n[1] 64208\r\n\r\n$null\r\n[1] -77972\r\n\r\nsna::dyad.census(network_statnet)\r\n\r\n\r\n     Mut Asym  Null\r\n[1,] 913 1184 14739\r\n\r\nThe dyad census for null using igraph is coming up -77,972. This seems wrong.\r\n\r\nTriad Census\r\n\r\n\r\nigraph::triad.census(network_igraph)\r\n\r\n\r\n [1] 700234  19530 249694   8409   2695   5176   7060  13227   1180\r\n[10]     59   6781   1023   1137    786   2782   1611\r\n\r\nsna::triad.census(network_statnet)\r\n\r\n\r\n        003    012    102 021D 021U 021C 111D  111U 030T 030C  201\r\n[1,] 700234 150250 118974 8409 2695 5176 7060 13227 1180   59 6781\r\n     120D 120U 120C  210  300\r\n[1,] 1023 1137  786 2782 1611\r\n\r\n\r\nTransitivity\r\n\r\n\r\ntransitivity(network_igraph)\r\n\r\n\r\n[1] 0.3725138\r\n\r\ngtrans(network_statnet)\r\n\r\n\r\n[1] 0.3580924\r\n\r\ntransitivity(network_igraph, type = \"global\")\r\n\r\n\r\n[1] 0.3725138\r\n\r\ntransitivity(network_igraph, type = \"average\")\r\n\r\n\r\n[1] 0.5055302\r\n\r\ntransitivity(network_igraph, type = \"local\") %>% head()\r\n\r\n\r\n[1] 0.0023288309 0.0013788877 0.0008393993 0.0031740105 0.0007847921\r\n[6] 0.0017129438\r\n\r\nThe transitivity for igraph and statnet data sets were pretty close.\r\nThe global transitivity is .3725 while the average transitivity is higher at .5. This means that actors with fewer connections will have higher transitivity. This could be due to overweighted groups or this could be similar to different departments that know a lot of people in their department, but do not know others in the other departments.\r\n\r\nLocal Transitivity\r\n\r\n\r\nNames <- V(network_igraph)$Name\r\nNames %>% head()\r\n\r\n\r\n[1] \"Albert Meyers\"    \"Thomas Martin\"    \"Andrea Ring\"     \r\n[4] \"Andrew Lewis\"     \"Andy Zipper\"      \"Jeffrey Shankman\"\r\n\r\nLocal_transivity <- transitivity(network_igraph, type = \"local\")\r\n\r\ntransitivity_tibble <- tibble(Names = Names, Local_transivity = Local_transivity)\r\n\r\ntransitivity_tibble %>% arrange(desc(Local_transivity))\r\n\r\n\r\n# A tibble: 184 x 2\r\n   Names            Local_transivity\r\n   <chr>                       <dbl>\r\n 1 Thomas Martin             0.0571 \r\n 2 Joe Quenet                0.0179 \r\n 3 Mark Haedicke             0.0159 \r\n 4 Kim Ward                  0.0157 \r\n 5 Peter Keavey              0.0146 \r\n 6 Monika Causholli          0.0134 \r\n 7 David Delainey            0.00917\r\n 8 Susan Pereira             0.00909\r\n 9 Larry Campbell            0.00810\r\n10 NA                        0.00641\r\n# ... with 174 more rows\r\n\r\ngtrans(network_statnet)\r\n\r\n\r\n[1] 0.3580924\r\n\r\nFor some reason I am unable to pull local transitivity by type using the method used in HW 1 (vids = V()). I’m not sure if these local transivitys are correct. I ordered it by descending so the largest transivity would be thomas Martin at .05.\r\n\r\nDistances in the Network\r\n\r\n\r\n#distances(network_igraph, \"Thomas Martin\",\"Andrea Ring\")\r\n\r\n\r\n\r\naverage.path.length(network_igraph)\r\n\r\n\r\n[1] 2.390464\r\n\r\naverage.path.length(network_igraph, directed = F)\r\n\r\n\r\n[1] 2.085787\r\n\r\nI took these vertex names, so I’m a bit confused why these are not showing up correctly.\r\n\r\nIdentifying Isolates\r\n\r\n\r\nigraph::components(network_igraph)\r\n\r\n\r\n$membership\r\n  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n [33] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n [65] 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n [97] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 1 1 1\r\n[129] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n[161] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n\r\n$csize\r\n[1] 182   1   1\r\n\r\n$no\r\n[1] 3\r\n\r\n#Isolates\r\nisolates(network_statnet)\r\n\r\n\r\n[1]  72 118\r\n\r\nas.vector(network_statnet %v% \"vertex.names\")[c(isolates(network_statnet))]\r\n\r\n\r\n[1]  72 118\r\n\r\nFor some reason it seems that Network statnet vertex.names is only showing numbers, not actually the names. I wonder if the statnet was set up incorrectly.\r\nThere are two isolates. \r\nDensity\r\n\r\n\r\ngraph.density(network_igraph)\r\n\r\n\r\n[1] 3.72443\r\n\r\nnetwork.density(network_statnet)\r\n\r\n\r\n[1] 0.08939178\r\n\r\ngraph.density(network_igraph, loops = TRUE)\r\n\r\n\r\n[1] 3.704188\r\n\r\ngden(network_statnet, diag = FALSE)\r\n\r\n\r\n[1] 0.08939178\r\n\r\nThe Igraph density is over 1, and the network density is around 9%. Very different densities.\r\n\r\nVertex Degrees\r\n\r\n\r\nigraph::degree(network_igraph) %>% head()\r\n\r\n\r\n[1] 114 428 391 104 957 381\r\n\r\nsna::degree(network_statnet) %>% head()\r\n\r\n\r\n[1] 10 32 21  9 59 30\r\n\r\nThere is a significant difference between degrees from the igraph dataset compared to the statnet data.\r\n\r\n\r\n\r\nnetwork_degree <- data.frame(Name = V(network_igraph)$Name,\r\n                             degree = igraph::degree(network_igraph, loops =FALSE))\r\nnetwork_degree %>% arrange(desc(degree)) %>% slice(1:10)\r\n\r\n\r\n              Name degree\r\n1    Jeff Dasovich  13967\r\n2    James Steffes   9404\r\n3       Tana Jones   9307\r\n4  Richard Shapiro   8994\r\n5               NA   6591\r\n6      Steven Kean   6384\r\n7    John Lavorato   6177\r\n8  Michael Grigsby   5860\r\n9      Mark Taylor   5693\r\n10  Louise Kitchen   5362\r\n\r\nJeff Dasovich has the highest number of degrees around 13K. He must be very high up in the company.\r\n\r\nDegree in Directed Networks\r\n\r\n\r\nsna::degree(network_statnet, cmode = \"indegree\")%>% head()\r\n\r\n\r\n[1]  4 21 10  6 30 17\r\n\r\nsna::degree(network_statnet, cmode = \"outdegree\") %>% head()\r\n\r\n\r\n[1]  6 11 11  3 29 13\r\n\r\nigraph::degree(network_igraph, mode =\"in\", loops = FALSE) %>% head()\r\n\r\n\r\n[1]  78 334 224  88 614 210\r\n\r\nigraph::degree(network_igraph, mode =\"out\", loops = FALSE)%>%head()\r\n\r\n\r\n[1]  36  92 167  16 325 169\r\n\r\nDegree_network <- data.frame(Name = V(network_igraph)$Name,\r\n           total_degrees = igraph::degree(network_igraph, loops = FALSE),\r\n           in_degree = igraph::degree(network_igraph, mode =\"in\", loops = FALSE),\r\n           out_degree = igraph::degree(network_igraph, mode =\"out\", loops = FALSE) ) %>% arrange(desc(total_degrees))\r\n\r\nDegree_network %>% slice(1:10)\r\n\r\n\r\n              Name total_degrees in_degree out_degree\r\n1    Jeff Dasovich         13967      2612      11355\r\n2    James Steffes          9404      4988       4416\r\n3       Tana Jones          9307      2268       7039\r\n4  Richard Shapiro          8994      6893       2101\r\n5               NA          6591      2698       3893\r\n6      Steven Kean          6384      2676       3708\r\n7    John Lavorato          6177      3352       2825\r\n8  Michael Grigsby          5860      1097       4763\r\n9      Mark Taylor          5693      3694       1999\r\n10  Louise Kitchen          5362      2087       3275\r\n\r\nAs expected from someone high up in the company. They would mostly have out degree connections, with a select few in degree connections.\r\n\r\nSummary Statistics\r\n\r\n\r\nsummary(Degree_network)\r\n\r\n\r\n     Name           total_degrees       in_degree     \r\n Length:184         Min.   :    0.0   Min.   :   0.0  \r\n Class :character   1st Qu.:  212.8   1st Qu.: 150.5  \r\n Mode  :character   Median :  512.5   Median : 314.0  \r\n                    Mean   : 1184.0   Mean   : 592.0  \r\n                    3rd Qu.: 1401.2   3rd Qu.: 655.2  \r\n                    Max.   :13967.0   Max.   :6893.0  \r\n   out_degree      \r\n Min.   :    0.00  \r\n 1st Qu.:   30.75  \r\n Median :  159.00  \r\n Mean   :  591.99  \r\n 3rd Qu.:  600.50  \r\n Max.   :11355.00  \r\n\r\n\r\nDegree Distribution\r\n\r\n\r\nhist(Degree_network$total_degrees, main = \"Enron Degree Distribution\", xlab = \"Degree\")\r\n\r\n\r\n\r\nhist(Degree_network$out_degree, main =\"Enron Out-Degree Distribution\", xlab = \"Degree\")\r\n\r\n\r\n\r\nhist(Degree_network$in_degree, main = \"Enron In-Degree Distribution\", xlab = \"Degree\")\r\n\r\n\r\n\r\n\r\nMost people in the company have limited number of degrees of connections, while their are a select few with many connections.\r\nNetwork Degree Centralization\r\n\r\n\r\n#centralization(network_statnet, degree, cmode= \"indegree\")\r\n#centralization(network_statnet, degree, cmode = \"outdegree\")\r\n\r\n\r\ncentr_degree(network_igraph, loops = FALSE, mode = \"in\")$centralization\r\n\r\n\r\n[1] 34.61991\r\n\r\ncentr_degree(network_igraph, loops = FALSE, mode = \"out\")$centralization\r\n\r\n\r\n[1] 59.13566\r\n\r\nThere is a higher centralization for out-degree nodes compared to in-degree nodes.\r\n\r\n\r\n\r\n",
    "preview": "posts/httpsrpubscompjsulliv34864273/distill-preview.png",
    "last_modified": "2022-02-17T13:45:29-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsrpubscomyli210813861702/",
    "title": "Short Assignment 2",
    "description": "A new article created using the Distill format.",
    "author": [
      {
        "name": "Yifan Li",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\r\nLoad a built-in dataset from igraph.\r\n\r\n\r\n#Load the data.\r\nlibrary(igraphdata)\r\ndata(\"enron\",package=\"igraphdata\")\r\nls()\r\n\r\n\r\n[1] \"enron\"\r\n\r\nThis is an Enron email dataset has been made public by the U.S. Department of Justice. Let’s look at some of its basic descriptive statistics.\r\n\r\n\r\nlibrary(igraph)\r\n#Basic descriptive facts.\r\n#Network size\r\nvcount(enron)\r\n\r\n\r\n[1] 184\r\n\r\necount(enron)\r\n\r\n\r\n[1] 125409\r\n\r\n(ecount(enron) / vcount(enron))\r\n\r\n\r\n[1] 681.5707\r\n\r\n(ecount(enron) / (vcount(enron) * (vcount(enron) - 1)))\r\n\r\n\r\n[1] 3.72443\r\n\r\n#Find network features: \r\nis_bipartite(enron)\r\n\r\n\r\n[1] FALSE\r\n\r\nis_directed(enron)\r\n\r\n\r\n[1] TRUE\r\n\r\nis_weighted(enron)\r\n\r\n\r\n[1] FALSE\r\n\r\n#display vertex attributes\r\nvertex_attr_names(enron)\r\n\r\n\r\n[1] \"Email\" \"Name\"  \"Note\" \r\n\r\n#display edge attributes\r\nedge_attr_names(enron)\r\n\r\n\r\n[1] \"Time\"      \"Reciptype\" \"Topic\"     \"LDC_topic\"\r\n\r\n#summarize numeric network attribute\r\nhead(V(enron)$Email)\r\n\r\n\r\n[1] \"albert.meyers\" \"a..martin\"     \"andrea.ring\"   \"andrew.lewis\" \r\n[5] \"andy.zipper\"   \"a..shankman\"  \r\n\r\nhead(V(enron)$Name)\r\n\r\n\r\n[1] \"Albert Meyers\"    \"Thomas Martin\"    \"Andrea Ring\"     \r\n[4] \"Andrew Lewis\"     \"Andy Zipper\"      \"Jeffrey Shankman\"\r\n\r\nhead(V(enron)$Note)\r\n\r\n\r\n[1] \"Employee, Specialist\"         \"Vice President\"              \r\n[3] \"NA\"                           \"Director\"                    \r\n[5] \"Vice President, Enron Online\" \"President, Enron Global Mkts\"\r\n\r\nhead(E(enron)$Time)\r\n\r\n\r\n[1] \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\"\r\n[4] \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\"\r\n\r\nhead(E(enron)$Reciptype)\r\n\r\n\r\n[1] \"to\"  \"to\"  \"cc\"  \"cc\"  \"bcc\" \"bcc\"\r\n\r\nhead(E(enron)$Topic)\r\n\r\n\r\n[1] 1 1 3 3 3 3\r\n\r\nhead(E(enron)$LDC_topic)\r\n\r\n\r\n[1]  0 -1 -1 -1 -1 -1\r\n\r\nsummary(E(enron)$Topic)\r\n\r\n\r\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \r\n  0.000   1.000   1.000   1.711   3.000   3.000 \r\n\r\nsummary(E(enron)$LDC_Topic)\r\n\r\n\r\nLength  Class   Mode \r\n     0   NULL   NULL \r\n\r\nThis network has 184 nodes and 125409 edges. It is a non-bipartite, directed and unweighted network. Each node is a employee of Enron. The edge represents the email communication from one person to the other one. (Noticing it’s directed. So it is “from…to…” rather than “between”.) Each employee sent 681.57 messages on average, and averagely sent 3.72 messages to each potential receiver (collegue).\r\nEvery node has three attributes, which are Email, Name and Note. “Email” is the email address (omitting the domain name) of the person. “Name” is just the real name. “Note” is mainly about position and department.\r\nEach edge has four attributes, which are Time, Reciptype, Topic, and LDC-topic. “Time” is a string telling the when the email was sent. To make further analysis, we need to transfer the string to some kind of numeric data (which we haven’t learnt.) The “Reciptype” is how the recipient receive the email, ‘to’,‘cc’ or ‘bcc’.\r\n(Not sure about what Topic nad LDC_topic is about. Maybe categories assigned by the publisher describing types of topics.)\r\n\r\n\r\n#Classify all dyads in the network:\r\nigraph::dyad.census(enron)\r\n\r\n\r\n$mut\r\n[1] 30600\r\n\r\n$asym\r\n[1] 64208\r\n\r\n$null\r\n[1] -77972\r\n\r\nThere are 30600 mutual dyads, and 64208 asymmetric dyads. (Didn’t understand what negative 77972 means.)\r\n\r\n\r\n#Classify all triads in the network:\r\nigraph::triad_census(enron)\r\n\r\n\r\n [1] 700234  19530 249694   8409   2695   5176   7060  13227   1180\r\n[10]     59   6781   1023   1137    786   2782   1611\r\n\r\nsum(igraph::triad_census(enron))\r\n\r\n\r\n[1] 1021384\r\n\r\n(700234 / 1021384)\r\n\r\n\r\n[1] 0.6855737\r\n\r\n((19530 + 249694) / 1021384)\r\n\r\n\r\n[1] 0.2635874\r\n\r\n#get global clustering coefficient(i.e. network transitivity):\r\ntransitivity(enron, type=\"global\")\r\n\r\n\r\n[1] 0.3725138\r\n\r\n##get average local clustering coefficient:\r\ntransitivity(enron, type=\"average\")\r\n\r\n\r\n[1] 0.5055302\r\n\r\n#find average shortest path for network\r\naverage.path.length(enron,directed=F)\r\n\r\n\r\n[1] 2.085787\r\n\r\nAbove shows the census of 16 kinds of triads. Almost 69% triads are empty, and 26% are one egded. This implies a relatively loosely connected network. To learn more about the connectivity, let’s look at the transitivity. The global clustering coefficient is 0.3723, which means 37% of connected Triplets are closed, which is relatively loose. The average local clustering coefficient is 0.5055. It means on average, if two nodes are connected to a same node (two person respectively have email communication to one person), they have about 51% chance to connect to each other (communicate via email with each other.)\r\nThe local clustering coefficient is much larger than the global one, implying the network is clustering around, or concentrate to, some focus node. In other word, alters of employees who have few email communication are less likely to connect to each other than alters of employees with many other connections.(Not sure whether I understand it right. The Tuesday lecure recording link is wrong so I couldn’t watch it.)\r\nThe average geodesic distance is 2. It means onaverage, one need only one other person to have email connection to a random person in the network.\r\n\r\n\r\n#Number of components\r\nigraph::components(enron)$no \r\n\r\n\r\n[1] 3\r\n\r\n#Size of each component\r\nigraph::components(enron)$csize\r\n\r\n\r\n[1] 182   1   1\r\n\r\nThere are only 3 components in the network. 182 of the nodes are in the major componets, while there are two isolates.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-02-17T13:44:43-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httpssvirguezgithubioichrnetworksposts2022-02-02-describing-the-network-data/",
    "title": "Describing the Network Data",
    "description": "From raw data to network data",
    "author": [
      {
        "name": "Santiago Virgüez",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\nAs mentioned in the previous post, I’m working with a new database on the IAcHR rulings compiled by the PluriCourts project of the University of Oslo (Stiansen, Naurin, and Bøyum 2020). This dataset of amici actors has 425 observations of 2 variables (“Name of Amicus” and “Case ID”), indicating in which cases an amici actor participated in:\nA view of the dataset on amiciFrom raw data to an adjacency matrix\nIn order to work with this dataset, I need to put the data into a format that is suitable for network analysis. So, after cleaning the data, I create an adjacency matrix (nxn) where I can see how many times interveners have filed an amicus brief in the same case than each other. I asigned “0” to the diagonal of the matrix to ignore the ties from a node to itself.\n\n\ndata <- read.csv(\"CleanedData.csv\")\n\n#New column count\ndata$count <- 1\n\nlibrary(tidyr)\n\n#Gather the data at case level\nlev_data <- pivot_wider(data,id_cols = CaseID, names_from = `Name.of.Amicus`, values_from = count, values_fn = list(count = length), values_fill = list(count = 0))\n\n#Create the adjacency matrix\nmat <- as.matrix(lev_data[-1])\nad_matrix <- t(mat) %*% mat\ndiag(ad_matrix) <- 0\n\n\n\nAdjacency matrixDescribing the network dataset\nBefore describing the network dataset, I need first to create a network object from the dataset loaded (the adjacency network):\n\n\nlibrary(igraph)\namici_network <- graph.adjacency(ad_matrix, mode = \"undirected\", weighted = TRUE)\n\nis_directed(amici_network)\n\n\n[1] FALSE\n\nis_weighted(amici_network)\n\n\n[1] TRUE\n\nis_bipartite(amici_network)\n\n\n[1] FALSE\n\nNow, I can identify and describe content of nodes and links, and identify format of data set, Of course, from the previous steps we know that this a matrix, symmetric, and weighted. This means that each time there is a connection between two amici, each of them is filing a briefe before the court (symetrical), but these ties among amici are valued according to how many time they have intervened in the same cases.\nWe can also identify the network attributes:\n\n\n#size\nvcount(amici_network)\n\n\n[1] 403\n\necount(amici_network)\n\n\n[1] 3615\n\n#attributes names and content\nvertex_attr_names(amici_network)\n\n\n[1] \"name\"\n\nedge_attr_names(amici_network)\n\n\n[1] \"weight\"\n\nhead(V(amici_network)$name)\n\n\n[1] \"Fernando Linares Beltranena\"                                                     \n[2] \"Amnesty International\"                                                           \n[3] \"Association of the Bar of the City of New York\"                                  \n[4] \"Lawyers Committee for Human Rights\"                                              \n[5] \" The Central American Associaion of Families of Detained and Disappeared Persons\"\n[6] \"Minnesota Lawyers International Human Rights Committee\"                          \n\nhead(E(amici_network)$weight)\n\n\n[1] 2 2 1 3 1 1\n\nIt is also possible to describe the network structure:\n\n\n#Dyad census: because the ties are undirected we will expect that there is no assymetrical edges\nigraph::dyad.census(amici_network)\n\n\n$mut\n[1] 3615\n\n$asym\n[1] 0\n\n$null\n[1] 77388\n\n#Triad census\nigraph::triad_census(amici_network)\n\n\n [1] 9455588       0 1331612       0       0       0       0       0\n [9]       0       0    2600       0       0       0       0   37601\n\nIn terms of transitivity or global clustering, it is possible to see how the proption of connected triads in the network of amici that are complete is hight, meaning that almost all connected triads are transitive. Likewise, the local clustering coefficient (emphasis on low degree nodes) confirms the high transitivity of the network:\n\n\n#global clustering\ntransitivity(amici_network)\n\n\n[1] 0.9774703\n\n#local clustering coefficient\ntransitivity(amici_network, type=\"average\")\n\n\n[1] 0.9920321\n\n\n\n\n",
    "preview": {},
    "last_modified": "2022-02-17T13:44:26-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httpssvirguezgithubioichrnetworksposts2022-02-16-status-and-centrality-measures-in-the-iachr-network/",
    "title": "Status and Centrality Measures in the IAcHR Network",
    "description": "A look at the status measures of the network",
    "author": [
      {
        "name": "Santiago Virgüez",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\nRecap Affiliation network\nLet’s organize the affiliation matrix (actor by case) first:\n\n\n#Affiliation network data\nlibrary(igraph)\nlibrary(tidyr)\ndata <- read.csv(\"CleanedData.csv\")\n##New column count\ndata$count <- 1\n\n##Gather the data at case level\nlev_data <- pivot_wider(data,id_cols = CaseID, names_from = `Name.of.Amicus`, \n                        values_from = count, values_fn = list(count = length), \n                        values_fill = list(count = 0))\n\n##transpose lev_data to have amici grouped by case\nlibrary(data.table)\nT_lev_data <- transpose(lev_data,)\nrownames(T_lev_data) <- colnames(lev_data)\ncolnames(T_lev_data) <- lev_data$CaseID\nT_lev_data <- T_lev_data[-c(1),]\n\n##create affiliation network graph using 'igraph'\nAff_network <- graph.incidence(T_lev_data)\n\n\n\nPloting the affiliation network\nWe haven’t provided a visualization of the affiliation network yet. Let’s plot it.\n\n\nplot(Aff_network, vertex.label=NA)\n\n\n\n\nRemember that in this affiliation network, so there are two types of nodes: one type for the amici actors and another type for the legal cases (case 16, case 18 …) to which the actors belong. Ties then connect the actors to those cases. So, as bipartite network it is better to plot the edges between the 2 types of nodes (the orange/circular nodes represent the amici actors, while the squared/blue nodes represent the cases):\n\n\nV(Aff_network)$color <- c(\"orange\", \"steel blue\")[V(Aff_network)$type+1]\nV(Aff_network)$shape <- c(\"circle\", \"square\")[V(Aff_network)$type+1]\n\nplot(Aff_network, vertex.label=NA, vertex.size=7, layout=layout.bipartite) \n\n\n\n\nDegree centrality by node{.tabset}g\nIn the last post, I presented centrality measures for the one matrix (actor x actor), which was aimed to show the ties between actors by virtue of their participation in the same cases. Nevertheless, we saw that actors such as the Colombian NGO ‘Dejusticia’ had a higher degree of centrality due to the fact that they participated in (only) one case where a greater number of other amici actors participated. These actors were not central in the amici network, they just happen to be part of a really famous case.\nSo, to have a better understanding of the centrality of the actors it is necessary to work with the affiliation network.\n\n\n#data frame for the nodes in the affiliation network\naff.nodes<-data.frame(name=V(Aff_network)$name, degree=igraph::degree(Aff_network))\n\n#data frame for the actors nodes\naff.nodes_amici <- aff.nodes[-c(404:482),]\n#data frame for the cases nodes\naff.nodes_cases <- aff.nodes[-c(1:403),]\n\n\n\nNow we can see the distribution of the centrality measures for each types of nodes. As you can see, both distributions are skewed towards zero, indicating the low degree centrality of the actors/cases.\n\n\n#distribution for actors\nhist(aff.nodes_amici$degree, main = \"Degree Distribution Actors to Cases\", xlab = \"# Cases in which an actor participated\")\n\n\n\n#distribution for cases\nhist(aff.nodes_cases$degree, main = \"Degree Distribution Cases to Actors\", xlab = \"# Actors that participated in the case\")\n\n\n\n\nWe can also see the actors and cases with the highest degree of centrality in the affiliation network:\n\n\nlibrary(dplyr)\n#top 3 actors\narrange(aff.nodes_amici, desc(degree))%>%slice(1:3)\n\n\n                                                                                                         name\nAmnesty International                                                                   Amnesty International\nMinnesota Lawyers International Human Rights Committee Minnesota Lawyers International Human Rights Committee\nThe International Human Rights Law Group                             The International Human Rights Law Group\n                                                       degree\nAmnesty International                                       9\nMinnesota Lawyers International Human Rights Committee      3\nThe International Human Rights Law Group                    3\n\n#top 3 cases\narrange(aff.nodes_cases, desc(degree))%>%slice(1:3)\n\n\n    name degree\n152  152     46\n203  203     41\n167  167     32\n\nAs expected, international organizations have a higher degree centrality, that is participation in a higher number of cases, due to the fact that they have political interests across different countries, while local NGOs focus on legal cases from their base country. In terms of the cases, it is possible to see that the ones that attracted a greater number of amicus briefs were:\nArtavia Murillo et al. (“In vitro fertilization”) v. Costa Rica. This case concerns human rights violations resulting from the State’s general prohibition of the practice of in vitro fertilization.\nAtala Riffo and Daughters v. Chile. This case concerns the discriminatory treatment and arbitrary interference in the private and family life of a lesbian mother, Ms. Karen Atala Riffo.\nNogueira de Carvalho et al. V. Brazil. Murder of Gilson Nogueira de Carvalho, a lawyer and human rights defender and the State failure to undertake an effective investigation into his death and failed to punish the responsible parties.\nEigenvector and Bonacich power centrality{.tabset}g\nWe can also compare different measures of centrality, including the eigen vector and Bonacich power. To do so, we need to add the data to the data frame of each type of node\n\n\n#eigen vector centrality\ntemp<-centr_eigen(Aff_network,directed=F)\naff.nodes$eigen<-temp$vector\n\n#bonacich power centrality\naff.nodes$bonpow <- power_centrality(Aff_network, exponent = 0.9)\n\naff.nodes_amici <- aff.nodes[-c(404:482),]\naff.nodes_cases <- aff.nodes[-c(1:403),]\n\n\n\nThen we can plot the distribution of the three measures of centrality. As you can see, there are not many central actors/cases in this network\n\n\n#plot distribution centrality measures\nlibrary(ggplot2)\naff.nodes_amici%>%\n  select(-name) %>% \n  gather() %>% \n  ggplot(aes(value)) +\n  geom_histogram() +\n  facet_wrap(~key, scales = \"free\")\n\n\n\n\nBecause the ties we are looking at are the connections between actors and cases, the eigenvector simply shows what actors are linked to the most central or ‘popular’ cases. On the other hand, the bonacich power centrality shows the actors that participated on the cases were no other people participated (therefore the actors with greater power of influence).\n\n\n#top 3 actors with highest eigenvector centrality\narrange(aff.nodes_amici, desc(eigen))%>%\n  slice(1:3)\n\n\n                                                                                                                                                                                                                                                                                       name\nCentro de Estudios of Derecho, Justicia y Sociedad (DEJUSTICIA)                                                                                                                                                             Centro de Estudios of Derecho, Justicia y Sociedad (DEJUSTICIA)\nViviana Bohórquez Monsalve, Beatriz Galli, Alma Beltra?n y Puga, A?lvaro Her-rero, Gastón Chillier, Lourdes Bascary and Agustina Ramón Michel Viviana Bohórquez Monsalve, Beatriz Galli, Alma Beltra?n y Puga, A?lvaro Her-rero, Gastón Chillier, Lourdes Bascary and Agustina Ramón Michel\nAlexandra Loría Beeche                                                                                                                                                                                                                                               Alexandra Loría Beeche\n                                                                                                                                              degree\nCentro de Estudios of Derecho, Justicia y Sociedad (DEJUSTICIA)                                                                                    2\nViviana Bohórquez Monsalve, Beatriz Galli, Alma Beltra?n y Puga, A?lvaro Her-rero, Gastón Chillier, Lourdes Bascary and Agustina Ramón Michel      1\nAlexandra Loría Beeche                                                                                                                             1\n                                                                                                                                                  eigen\nCentro de Estudios of Derecho, Justicia y Sociedad (DEJUSTICIA)                                                                               0.1577985\nViviana Bohórquez Monsalve, Beatriz Galli, Alma Beltra?n y Puga, A?lvaro Her-rero, Gastón Chillier, Lourdes Bascary and Agustina Ramón Michel 0.1473282\nAlexandra Loría Beeche                                                                                                                        0.1473282\n                                                                                                                                                  bonpow\nCentro de Estudios of Derecho, Justicia y Sociedad (DEJUSTICIA)                                                                               -0.6041584\nViviana Bohórquez Monsalve, Beatriz Galli, Alma Beltra?n y Puga, A?lvaro Her-rero, Gastón Chillier, Lourdes Bascary and Agustina Ramón Michel -0.3000833\nAlexandra Loría Beeche                                                                                                                        -0.3000833\n\n#top 3 actors with highest bonacich power centrality\narrange(aff.nodes_amici, desc(bonpow))%>%\n  slice(1:3)\n\n\n                                                                                                                                                           name\nFernando Linares Beltranena                                                                                                         Fernando Linares Beltranena\nOscar Augusto Díaz Urquizú, former Director of the Treasury Police of Guatemala Oscar Augusto Díaz Urquizú, former Director of the Treasury Police of Guatemala\nThe International Commission of Jurists                                                                                 The International Commission of Jurists\n                                                                                degree\nFernando Linares Beltranena                                                          1\nOscar Augusto Díaz Urquizú, former Director of the Treasury Police of Guatemala      1\nThe International Commission of Jurists                                              1\n                                                                                eigen\nFernando Linares Beltranena                                                         0\nOscar Augusto Díaz Urquizú, former Director of the Treasury Police of Guatemala     0\nThe International Commission of Jurists                                             0\n                                                                                  bonpow\nFernando Linares Beltranena                                                     2.624369\nOscar Augusto Díaz Urquizú, former Director of the Treasury Police of Guatemala 2.624369\nThe International Commission of Jurists                                         2.624369\n\nFinally, we can correlate the different measures of centrality. As you can see all of the measures have negative correlation with each other.\n\n\nlibrary(corrr)\nlibrary(seriation)\n\ncent.corr<-aff.nodes_amici %>% \n  select(degree,eigen,bonpow)%>%\n  correlate() %>%\n  rearrange()\n\ncent.corr\n\n\n# A tibble: 3 × 4\n  term    degree   eigen  bonpow\n  <chr>    <dbl>   <dbl>   <dbl>\n1 degree NA      -0.0194 -0.0515\n2 eigen  -0.0194 NA      -0.0402\n3 bonpow -0.0515 -0.0402 NA     \n\n\n\n\n",
    "preview": "posts/httpssvirguezgithubioichrnetworksposts2022-02-16-status-and-centrality-measures-in-the-iachr-network/status-and-centrality-measures-in-the-iachr-network_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2022-02-17T13:46:05-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpswalidmedanigithubionetworks-blogposts2022-02-02-assignment2/",
    "title": "Assignment_2",
    "description": "Network of militarized interstate disputes from 1870 to 2014. (https://correlatesofwar.org/data-sets/MIDs)",
    "author": [
      {
        "name": "Walid Medani",
        "url": "https://walidmedani.github.io/networks-blog/"
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\nNetwork Graph\n\n\n\nNetwork Size\n\n[1] 156\n[1] 1374\n\nAttributes\n\n[1] FALSE\n[1] FALSE\n[1] TRUE\n[1] \"name\"\n[1] \"weight\"\n\nNetwork isn’t bipartite nor directed however it is weighted.\nDyad & Triad Census\n\n$mut\n[1] 1374\n\n$asym\n[1] 0\n\n$null\n[1] 10716\n [1] 449446      0 144438      0      0      0      0      0      0\n[10]      0  13050      0      0      0      0  13686\n[1] 620620\n# A tibble: 1 x 3\n    Mut  Asym  Null\n  <dbl> <dbl> <dbl>\n1  1374     0 10716\n# A tibble: 1 x 5\n  Triad0 Triad1 Triad2 Triad3 Triadsum\n   <dbl>  <dbl>  <dbl>  <dbl>    <dbl>\n1 449446 144438  13050  13686   620620\n\nTransivity\n\n[1] 0.7588157\n[1] 0.6456076\n\nGlobal transivity shows a proportion of .76 of completely connected triads within the network and the density of the ego network is .65.\nGeodesic & Component structure\n\n[1] 3.038289\n[1] 4\n[1] 150   2   2   2\n\nThere are 4 components with the first comprising of 150 members and the next 3 components having only 2 members each.\nNetwork density\n\n[1] 0.1136476\n\n\n\n\n",
    "preview": "posts/httpswalidmedanigithubionetworks-blogposts2022-02-02-assignment2/assignment2_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2022-02-17T13:44:17-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpswalidmedanigithubionetworks-blogposts2022-02-07-assignment3/",
    "title": "Assignment_3",
    "description": "Degree and Centrality. (https://correlatesofwar.org/data-sets/MIDs)",
    "author": [
      {
        "name": "Walid Medani",
        "url": "https://walidmedani.github.io/networks-blog/"
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\nNetwork Graph\n\n\n\nDescription\nThere are 156 nodes within the militarized interstate dispute dataset. Edges are undirected and are defined as instances of when one state threatened, displayed, or used force directed towards the government, official representatives, official forces, property, or territory of another state.\nNetwork Density & Centralization\n\n[1] 0.1136476\n$res\n  [1] 74 56 64 60 47 63 53 51 58 55 43 59 46 62 17 22 20 63 23 36  2\n [22] 37  4 39 15  5  2  3  5  8  2 17  4  4  3  1  3  3  2  1  1  7\n [43] 41  7 13  8  5  8  8 33  5 12  3 36 23 39  2 19  6 18  6 18  7\n [64]  8  5  1  2 12  8  2  8 21  2  1  8 10  4  4  1  3  5 45 45 34\n [85] 47 54  2  7  1  1  3  2  7 45 46 45 45  1  1  1  2  1  1  1 36\n[106]  1  1  2 26  9  1  1  1  1  4  5  5 19 19 53 53 42  2  2  3  1\n[127]  7 37 37 44 38 37 44 44 37 44  3  1  3  1  1  1  1  1  3  1  1\n[148]  1  1  2  1  2  2 33 33  1\n\n$centralization\n[1] 0.3637717\n\n$theoretical_max\n[1] 24180\n\nDegrees\n\n    name degree\nUSA  USA     74\nUKG  UKG     64\nFRN  FRN     63\nRUS  RUS     63\nTUR  TUR     62\nNTH  NTH     60\n     name               degree     \n Length:156         Min.   : 1.00  \n Class :character   1st Qu.: 2.00  \n Mode  :character   Median : 7.00  \n                    Mean   :17.62  \n                    3rd Qu.:36.25  \n                    Max.   :74.00  \n\n\nResults\nUSA, UK, France, Russia, and Turkey are some of the most central nodes within the dataset. Whereas Tunisia, Kosovo, Jamaica, Sri Lanka, and Nepal are the lowest central nodes. The network density is low (.11) with not many actual connections despite the portion of potential connections. With a centralization score of .36, ties of the network aren’t too concentrated on a group of actors.\n\n\n\n",
    "preview": "posts/httpswalidmedanigithubionetworks-blogposts2022-02-07-assignment3/assignment3_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2022-02-17T13:45:00-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpswalidmedanigithubionetworks-blogposts2022-02-16-assignment4/",
    "title": "Assignment_4",
    "description": "Status and Eigenvector (https://correlatesofwar.org/data-sets/MIDs)",
    "author": [
      {
        "name": "Walid Medani",
        "url": "https://walidmedani.github.io/networks-blog/"
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\nNetwork Graph\n\n\n\nDescription\nThere are 156 nodes within the militarized interstate dispute dataset. Edges are undirected and are defined as instances of when one state threatened, displayed, or used force directed towards the government, official representatives, official forces, property, or territory of another state.\nNetwork Density & Degree Centralization\n\n[1] 0.1136476\n$res\n  [1] 74 56 64 60 47 63 53 51 58 55 43 59 46 62 17 22 20 63 23 36  2\n [22] 37  4 39 15  5  2  3  5  8  2 17  4  4  3  1  3  3  2  1  1  7\n [43] 41  7 13  8  5  8  8 33  5 12  3 36 23 39  2 19  6 18  6 18  7\n [64]  8  5  1  2 12  8  2  8 21  2  1  8 10  4  4  1  3  5 45 45 34\n [85] 47 54  2  7  1  1  3  2  7 45 46 45 45  1  1  1  2  1  1  1 36\n[106]  1  1  2 26  9  1  1  1  1  4  5  5 19 19 53 53 42  2  2  3  1\n[127]  7 37 37 44 38 37 44 44 37 44  3  1  3  1  1  1  1  1  3  1  1\n[148]  1  1  2  1  2  2 33 33  1\n\n$centralization\n[1] 0.3637717\n\n$theoretical_max\n[1] 24180\n\n\n    name degree\nUSA  USA     74\nUKG  UKG     64\nFRN  FRN     63\nRUS  RUS     63\nTUR  TUR     62\nNTH  NTH     60\n     name               degree     \n Length:156         Min.   : 1.00  \n Class :character   1st Qu.: 2.00  \n Mode  :character   Median : 7.00  \n                    Mean   :17.62  \n                    3rd Qu.:36.25  \n                    Max.   :74.00  \n\n\nCentrality Measures\nCloseness Centraility\n\n         USA          CAN          UKG          NTH          BEL \n6.082355e-05 6.068329e-05 5.990894e-05 6.071645e-05 5.998081e-05 \n         FRN \n6.110975e-05 \n\nBetweenness Centrality\n\n      USA       CAN       UKG       NTH       BEL       FRN \n1543.1492  199.5687  295.0000  124.3906  345.1667 3030.5423 \n\n\nEigen Centrality\n\n[1] 1.0000000 0.9302363 0.9867230 0.9781763 0.8832846 0.9820892\n[1] 0.7215986\n\n\n\n\n\n\n\n",
    "preview": "posts/httpswalidmedanigithubionetworks-blogposts2022-02-16-assignment4/assignment4_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2022-02-17T13:46:14-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsyli210813githubiosocialnetworkanalysishw3/",
    "title": "Homework 3",
    "description": "Week 3 Assignment: Degree and Centrality.",
    "author": [
      {
        "name": "Yifan Li",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\n\n\n\n\n\n\n\n[1] FALSE\n[1] TRUE\n[1] TRUE\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1870    1971    1990    1982    2003    2014 \n\nThe original dataset is the trade dataset version 4 from the Correlates of War Project. The original format is an edgelist. The nodes are countries, and the ties are the trading relations between countries from 1870 to 2014. The network is directed and weighted.\nThe original dataset is too dense. To identify the structure of the network more clearly, I create a subset which only keep ties with import larger than (or equal to) 100 million.\nLet’s look at some basic descriptive facts.\n\n[1] 207\n[1] 1773656\n[1] 17136.77\n[1] 41.59411\n[1] 189\n[1] 117168\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n     -9      -9       0     143       2  472525 \n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n   100.0    178.4    373.7   2139.9   1133.2 472525.2 \n\nThe original dataset has 207 nodes, i.e. 207 countries involed in the trading network. There are 1773656 egdes. It’s really a huge amount since each edge counts as the trading number for one year. On average, one country import 142 million dollars of good from another country each year.\nIn the subset, we only have 189 nodes, meaning there are 18 countries never have import or export larger than 100 million from 1870 to 2014. The number of egdes decrease to 117168, which is only about 6.6% of the whole dataset. It implies a skewed distribution among international trade. The much looser network give us more chance to identify characteristic of international trading network.\n(I will keep comparing the subset with the original one.)\nLet’s classify all dyads and traids in the network:\n\n$mut\n[1] 886828\n\n$asym\n[1] 0\n\n$null\n[1] -865507\n$mut\n[1] 45072\n\n$asym\n[1] 27024\n\n$null\n[1] -54330\n [1]    1884       0   73511       0       0       0       0       0\n [9]       0       0   73236       0       0       0       0 1308304\n [1] 576073  42173 270669   3983   9872  10708  48167  26529   1316\n[10]    228  54882   5108   2127   3675  23094  28810\n[1] 0.5201966\n[1] 0.2824978\n[1] 0.8923257\n\nIn the original network, we cannot find a single asymmetry dyad. It makes it look like a undirected network in some way, which constrain the finding we can get.\nIn the subset, we identify 45072 mutual dyads and 27024 asymmetry dyads, showing signs of trade imbalance. The triad census also show a large proportion (52%) of empty triads. 28% of them only have one egde. 89% of the triads are not triangle.\nTo get more sense of the pattern of the clustering, let’s calculate the coefficients.\n\n[1] 0.9816825\n[1] 0.5560647\n[1] 0.9825593\n[1] 0.8148533\n[1] 1.051686\n[1] 1.781887\n[1] 1\n[1] 1\n[1] 207\n[1] 189\n\nFor the original network, the global and average local clustering coefficient are both near 0.98, almost telling us nothing about the characteristics of the network. In the subset, the global coefficient is 0.57 and the average local one is 0.81. The local one is much larger. It shows the nodes are more clustering in local level. In other words, those trade partners of a country who has less trading relations tends to trade more to each other.\nThe average shortest path for the original network is 1.05, meaning almost every two country have direct trading relationship. How closely the global market is connected! Meanwhile, in the subset the average shortest path is 1.78. One country needs to take 0.78 more step to get another on average under the threshold. Still very close, isn’t it?\nIn both dataset, we can only identify one huge component. Global market!\n\n[1] 41.39317\n[1] 3.280087\n\nIn the original network, the density is 41.39, which is really dense. Not surprisingly, with the threshold we only get a density of 3.28, a much looser picture.\n\n     name               degree         indegree       outdegree    \n Length:207         Min.   :  142   Min.   :   71   Min.   :   71  \n Class :character   1st Qu.:12284   1st Qu.: 6142   1st Qu.: 6142  \n Mode  :character   Median :17716   Median : 8858   Median : 8858  \n                    Mean   :17137   Mean   : 8568   Mean   : 8568  \n                    3rd Qu.:23300   3rd Qu.:11650   3rd Qu.:11650  \n                    Max.   :27168   Max.   :13584   Max.   :13584  \n     name               degree         indegree        outdegree     \n Length:189         Min.   :    1   Min.   :   0.0   Min.   :   0.0  \n Class :character   1st Qu.:  129   1st Qu.:  40.0   1st Qu.:  72.0  \n Mode  :character   Median :  463   Median : 210.0   Median : 276.0  \n                    Mean   : 1240   Mean   : 619.9   Mean   : 619.9  \n                    3rd Qu.: 1708   3rd Qu.: 850.0   3rd Qu.: 855.0  \n                    Max.   :10305   Max.   :5366.0   Max.   :4939.0  \n\nOn average, each country has 17137 edges, or trade from 1870 to 2014. With the threshold, they only got 1240 on average. To learn more about it, let’s graph some histograms.\n\n\n\n\n\n\nThe original network has a distribution closer to normal distribution, while in with the threshold is highly right skewed. It’s another evidence of imbalance of economy and exchange among countries.\n\n[1] 24.46583\n[1] 24.46583\n[1] 25.3793\n[1] 23.09594\n\nSurprisingly, we found the original network and the subset have almost the same centralization. The world market goes around some giants no matter you look at the trivial exchange or huge trade.\n\n                      name degree indegree outdegree\n1 United States of America  27168    13584     13584\n2                   Mexico  27168    13584     13584\n3                Guatemala  27168    13584     13584\n4                 Colombia  27168    13584     13584\n5                Venezuela  27168    13584     13584\n                      name degree indegree outdegree\n1 United States of America  27168    13584     13584\n2                   Mexico  27168    13584     13584\n3                Guatemala  27168    13584     13584\n4                 Colombia  27168    13584     13584\n5                Venezuela  27168    13584     13584\n                      name degree indegree outdegree\n1 United States of America  27168    13584     13584\n2                   Mexico  27168    13584     13584\n3                Guatemala  27168    13584     13584\n4                 Colombia  27168    13584     13584\n5                Venezuela  27168    13584     13584\n                      name degree indegree outdegree\n1 United States of America  10305     5366      4939\n2           United Kingdom   8516     4254      4262\n3                   France   7651     3995      3656\n4                    Japan   6982     3881      3101\n5                    Italy   6829     3438      3391\n                      name degree indegree outdegree\n1 United States of America  10305     5366      4939\n2           United Kingdom   8516     4254      4262\n3                   France   7651     3995      3656\n4                    Italy   6829     3438      3391\n5                    Japan   6982     3881      3101\n                      name degree indegree outdegree\n1 United States of America  10305     5366      4939\n2           United Kingdom   8516     4254      4262\n3                   France   7651     3995      3656\n4                    Japan   6982     3881      3101\n5                    Italy   6829     3438      3391\n\nIn the original network, the US, Mexico, Guatemala, Colombia, and Venezuela have the highest degree, or most trading relations, which is quite against our common sense. Probably it is because the publisher managed to got more data in North and South America in early age. We could constrain our data to recent decades next time.\nIn the subset, we got the US, the UK, France, Japan and Italy on the top 5, which is not surprising. If we constrain our data to recent decades, maybe we can expect China to show up.\n\n\n\n",
    "preview": "posts/httpsyli210813githubiosocialnetworkanalysishw3/distill-preview.png",
    "last_modified": "2022-02-17T13:45:31-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsyli210813githubiosocialnetworkanalysishw4/",
    "title": "Homework 4",
    "description": "Week 4 Assignment: Network Status.",
    "author": [
      {
        "name": "Yifan Li",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\n\n\n\n\n\n\n\n[1] FALSE\n[1] TRUE\n[1] TRUE\n\nThe original dataset is the trade dataset version 4 from the Correlates of War Project. In this subject I only use trade data of year 2014. The format is edgelist. The nodes are countries, and the ties are the trading relations between countries in 2014. The network is directed and weighted.\nLet’s look at some basic descriptive facts.\n\n[1] 186\n[1] 22451\n[1] 241.4086\n[1] 0.6524557\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n     0.0      0.2      4.9    813.1     78.5 472525.2 \n\nThe network in 2014 has 186 nodes, i.e. 186 countries involed in the trading network. There are 22451 egdes. Each country has 241 connected edges on average. On average, one country import 813 million dollars of good from another country each year. 65% of potential ties exit.\nLet’s classify all dyads and traids in the network:\n\n$mut\n[1] 9933\n\n$asym\n[1] 2585\n\n$null\n[1] 4687\n [1]  75574  62420  92513  11021   9514  11233  60137  45246   5530\n[10]    788 188669  14094   9006  15882 147383 306230\n[1] 0.07161783\n[1] 0.3484117\n[1] 1\n\nThere are 9933 mutual bilateral trade relations, 2585 unilateral trade relations, and 4687 pairs of coutries have no trading in 2014.\n7% of the triads are empty, and 65% of them are triangle. The network is quite dense.\nLet’s look at the distribution of nodes centrality.\n\n\n\nThe betweenness centrality and reflected centrality are right-skewed as expected. Limited coutries locate at the central bridging positions. But the bonachic-power and closeness show nearly normal distribution, and the eigenvector centrality and deprived centrality are highly left-skewed, which might show a decentralized network. The deprived centrality contribute to largest part of eigenvector centrality. Every country kind of plays as bridge in the network.\n\n\n\n\n                      name short_name ccode closeness betweenness\n1                    China        CHN   710 0.9946237    316.8033\n2 United States of America        USA     2 0.9788360    306.0056\n3              South Korea        ROK   732 0.9840426    304.6967\n4                Australia        AUL   900 0.9788360    294.1315\n5                    India        IND   750 0.9893048    224.8866\n       eigen     bonpow         rc    eigen.rc        dc   eigen.dc\n1 0.09697295 -1.2742959 0.18197333 0.017646489 0.8180267 0.07932646\n2 0.09703836 -1.0694386 0.19337928 0.018765208 0.8066207 0.07827315\n3 0.09650158 -1.1175464 0.07623579 0.007356874 0.9237642 0.08914470\n4 0.09535200 -0.8813261 0.04057029 0.003868458 0.9594297 0.09148354\n5 0.09695131 -1.1636487 0.02262084 0.002193121 0.9773792 0.09475819\n                    name short_name ccode closeness betweenness\n1 Bosnia and Herzegovina        BOS   346 0.6271186    2.042703\n2           Saudi Arabia        SAU   670 0.8726415   83.004276\n3               Zimbabwe        ZIM   552 0.6902985   26.360045\n4     Dominican Republic        DOM    42 0.8258929   56.408439\n5               Malaysia        MAL   820 0.9487179  199.363801\n       eigen    bonpow           rc     eigen.rc        dc   eigen.dc\n1 0.05841333 0.6260723 0.0014683688 8.577231e-05 0.9985316 0.05832756\n2 0.08701319 0.5455796 0.0317620070 2.763714e-03 0.9682380 0.08424948\n3 0.07643869 0.5220134 0.0004566747 3.490762e-05 0.9995433 0.07640378\n4 0.07625539 0.4349504 0.0020462397 1.560368e-04 0.9979538 0.07609935\n5 0.09645108 0.4242820 0.0301872862 2.911596e-03 0.9698127 0.09353948\n            name short_name ccode closeness betweenness      eigen\n1          China        CHN   710 0.9946237    316.8033 0.09697295\n2 United Kingdom        UKG   200 0.9893048    224.4011 0.09698944\n3         France        FRN   220 0.9893048    217.5927 0.09701673\n4          India        IND   750 0.9893048    224.8866 0.09695131\n5    Netherlands        NTH   210 0.9840426    213.0323 0.09701673\n     bonpow         rc    eigen.rc        dc   eigen.dc\n1 -1.274296 0.18197333 0.017646489 0.8180267 0.07932646\n2 -1.000833 0.03264763 0.003166476 0.9673524 0.09382296\n3 -1.371359 0.04966972 0.004818793 0.9503303 0.09219793\n4 -1.163649 0.02262084 0.002193121 0.9773792 0.09475819\n5 -1.315812 0.10053860 0.009753925 0.8994614 0.08726280\n                      name short_name ccode closeness betweenness\n1 United States of America        USA     2 0.9788360    306.0056\n2              Netherlands        NTH   210 0.9840426    213.0323\n3                   France        FRN   220 0.9893048    217.5927\n4                  Denmark        DEN   390 0.9536082    186.4211\n5                    Spain        SPN   230 0.9536082    187.3443\n       eigen     bonpow          rc     eigen.rc        dc   eigen.dc\n1 0.09703836 -1.0694386 0.193379284 0.0187652082 0.8066207 0.07827315\n2 0.09701673 -1.3158118 0.100538595 0.0097539253 0.8994614 0.08726280\n3 0.09701673 -1.3713593 0.049669717 0.0048187933 0.9503303 0.09219793\n4 0.09701673 -0.7065288 0.009933439 0.0009637097 0.9900666 0.09605302\n5 0.09701673 -0.5716878 0.031197741 0.0030267026 0.9688023 0.09399002\n          name short_name ccode closeness betweenness      eigen\n1      Finland        FIN   375 0.8809524    141.8394 0.09667270\n2      Denmark        DEN   390 0.9536082    186.4211 0.09701673\n3       Turkey        TUR   640 0.9840426    208.8803 0.09679966\n4       Sweden        SWD   380 0.9788360    205.9708 0.09677237\n5 South Africa        SAF   560 0.9736842    200.3019 0.09685164\n      bonpow          rc     eigen.rc        dc   eigen.dc\n1  0.1099607 0.006087120 0.0005884583 0.9939129 0.09608424\n2 -0.7065288 0.009933439 0.0009637097 0.9900666 0.09605302\n3 -1.6759857 0.011984440 0.0011600897 0.9880156 0.09563957\n4 -1.1753454 0.013861294 0.0013413903 0.9861387 0.09543098\n5 -1.2631864 0.017108054 0.0016569431 0.9828919 0.09519470\n                      name short_name ccode closeness betweenness\n1 United States of America        USA     2 0.9788360    306.0056\n2                    China        CHN   710 0.9946237    316.8033\n3                   Canada        CAN    20 0.9788360    192.3823\n4              Netherlands        NTH   210 0.9840426    213.0323\n5                  Germany        GMY   255 0.9840426    219.4348\n       eigen     bonpow        rc    eigen.rc        dc   eigen.dc\n1 0.09703836 -1.0694386 0.1933793 0.018765208 0.8066207 0.07827315\n2 0.09697295 -1.2742959 0.1819733 0.017646489 0.8180267 0.07932646\n3 0.09672468 -1.3044404 0.1339702 0.012958227 0.8660298 0.08376646\n4 0.09701673 -1.3158118 0.1005386 0.009753925 0.8994614 0.08726280\n5 0.09689933 -0.6890218 0.1000104 0.009690938 0.8999896 0.08720839\n\nAmong these countries, China has the highest betweenness and closeness centrality. Bosnia and Herzegovina has the highest bonachic-power. The US gets the highest deprived centrality and eigenvector centrality. The Finland has the highest reflected centrality. On the top 5 lits of betweenness, closeness, deprived and eigenvector centrality, all we see are familiar trading powerhouses. But the list of bonachic-power has many unexpected country on the list. I don’t really understand what bonachic-power presents so don’t know how to interpret this outcome.\n\n         term closeness eigen betweenness eigen.dc eigen.rc bonpow\n1   closeness             .91         .91      .89      .51   -.02\n2       eigen       .91               .79      .99      .41    .01\n3 betweenness       .91   .79                  .74      .66   -.04\n4    eigen.dc       .89   .99         .74               .31    .02\n5    eigen.rc       .51   .41         .66      .31            -.07\n6      bonpow      -.02   .01        -.04      .02     -.07       \n\n\nCloseness, betweeness, eigenvector centrality are highly corralled. They are interchangeable measures of centrality. The reflected centrality is less correlated with those parameters, but it’s a small part compared with the deprived one. Bonachic-power is almost independent with other parameters.\n\n\n\n",
    "preview": "posts/httpsyli210813githubiosocialnetworkanalysishw4/distill-preview.png",
    "last_modified": "2022-02-17T13:46:26-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to DACSS 601",
    "description": "Welcome to DACSS 601: Foundations of Data Science. We hope you enjoy \nreading what we have to say!",
    "author": [
      {
        "name": "Meredith Rolfe",
        "url": "http://umass.edu/sbs/dacss"
      }
    ],
    "date": "2021-03-25",
    "categories": [
      "welcome"
    ],
    "contents": "\n\n\n\n",
    "preview": {},
    "last_modified": "2022-02-17T13:37:57-05:00",
    "input_file": {}
  }
]
