[
  {
    "path": "posts/httpswwwsullivcomposts2022-04-24-clustering-stocks/",
    "title": "Clustering Stocks",
    "description": "A closer look into the S&P 500 stocks",
    "author": [
      {
        "name": "Peter Sullivan",
        "url": {}
      }
    ],
    "date": "2022-05-11",
    "categories": [],
    "contents": "\nGather DATA\n\n\nlibrary(rvest)\n\n\n   url <- \"https://www.slickcharts.com/sp500\"\n   x<-   read_html(url) %>% html_nodes(\"table\") %>% html_table()\n  symbols <-  x[[1]]$Symbol\n  symbols %>% head()%>% kable(caption = \"Stock symbols\")\n\n\nTable 1: Stock symbols\nx\nAAPL\nMSFT\nAMZN\nTSLA\nGOOGL\nGOOG\n\nSlickcharts.com has a table with the full list of S and P 500\ncompanies. To pull the stock symbols, I used the read_html fuction from\nthe rvest package. Next I need to pull price data for each stock.\nI plan to gather all sock prices for the last year using the\ntidyquant package.\n\n\ndata <- c()\nclose_data <- c()\nsymbols_names <- c()\nsymbols <- symbols[!symbols %in% c(\"BRK.B\",\"CEG\",\"BF.B\",\"EMBC\",\"PEG\")]\nsymbols %>% length()\n\n\n\n\nfor (stock in symbols){\n  #print(stock)\n  stock_price <-tq_get(stock, get = \"stock.prices\", from = \"2021-01-01\", to = \"2021-12-31\")\n\n  close_data <- cbind(close_data,stock_price$close)\n  symbols_names <- rbind(symbols_names,stock)\n\n}\n\n\nsaveRDS(close_data, file = \"Stock_data.RDS\")\nsaveRDS(symbols_names, file = \"Symbol_names.RDS\")\n\n\n\n\n\nclose_data<- readRDS(\"Stock_data.RDS\")\nsymbols_names <- readRDS(\"Symbol_names.RDS\")\n\n\n\n\n\nclose_data %>% dim()\n\n\n[1] 251 500\n\nclose_data[1:5,1:10] \n\n\n       [,1]   [,2]    [,3]   [,4]    [,5]    [,6]   [,7]     [,8]\n[1,] 129.41 217.69 3186.63 729.77 1726.13 1728.24 349.50 131.1350\n[2,] 131.01 217.90 3218.51 735.11 1740.05 1740.92 344.80 134.0475\n[3,] 126.60 212.25 3138.38 755.98 1722.88 1735.29 359.27 126.1450\n[4,] 130.92 218.29 3162.16 816.04 1774.34 1787.25 365.03 133.4400\n[5,] 132.05 219.62 3182.70 880.02 1797.83 1807.21 363.39 132.7675\n       [,9]  [,10]\n[1,] 156.50 268.94\n[2,] 158.34 270.97\n[3,] 159.83 263.31\n[4,] 160.37 268.74\n[5,] 160.04 267.57\n\nThe for loop above loops through all stock symbols that I pulled\nearlier. I noticed that as I looped through pulling the data from yahoo,\nthat the following symbols did not work when pulling with the tq_get()\nfunction: “BRK.B”,“CEG”,“BF.B”,“EMBC”,“PEG”. I omitted these symbols,\nand the loop funciton was able to finish with out any more errors. I\nalso then saved the object, so that I wouldn’t have to keep re-running\nthis for loop.\nAs I looped through and pulled each stocks data, I added that data to\na matrix as a column. Each column represents a stocks price data for the\ndates specified above. For this example, I only looked at the close\nprice. The close data column has 500 variables, which means we have\nstock data for 500 stocks.\nIt looks like the data we currently have is missing the stock names,\nso I’ll have to re add these to the matrix.To make sure I was attaching\nthe correct name to stock in the matrix, I created a vector named symbol\nnames that added the stock to the vector every time I pulled the data\nfrom yahoo.\n\n\n## renaming the columns\ncolnames(close_data)<- symbols_names\nclose_data <- data.frame(close_data)\nclose_data[1:10,1:10]\n\n\n     AAPL   MSFT    AMZN   TSLA   GOOGL    GOOG    UNH     NVDA\n1  129.41 217.69 3186.63 729.77 1726.13 1728.24 349.50 131.1350\n2  131.01 217.90 3218.51 735.11 1740.05 1740.92 344.80 134.0475\n3  126.60 212.25 3138.38 755.98 1722.88 1735.29 359.27 126.1450\n4  130.92 218.29 3162.16 816.04 1774.34 1787.25 365.03 133.4400\n5  132.05 219.62 3182.70 880.02 1797.83 1807.21 363.39 132.7675\n6  128.98 217.49 3114.21 811.19 1756.29 1766.72 360.75 136.2150\n7  128.80 214.93 3120.83 849.44 1737.43 1746.55 357.37 134.8475\n8  130.89 216.34 3165.89 854.41 1747.25 1754.40 355.04 135.3175\n9  128.91 213.02 3127.47 845.00 1730.92 1740.18 350.53 132.0025\n10 127.14 212.65 3104.25 826.16 1727.62 1736.19 351.30 128.5950\n      JNJ     FB\n1  156.50 268.94\n2  158.34 270.97\n3  159.83 263.31\n4  160.37 268.74\n5  160.04 267.57\n6  159.37 256.84\n7  158.13 251.09\n8  157.89 251.64\n9  160.65 245.64\n10 160.30 251.36\n\nWe can now see that we have a data frame with the stock names on the\nappropriate columsn. Now I will need to create a network data set with\nthis data. I will use the cor funciton to create a correlation matrix\nbased on each stock.\n\n\ncor_data <-cor(close_data)\n\ncor_data[1:10,1:10] %>% kable(caption = \"Correlation Matrix\")\n\n\nTable 2: Correlation Matrix\n\nAAPL\nMSFT\nAMZN\nTSLA\nGOOGL\nGOOG\nUNH\nNVDA\nJNJ\nFB\nAAPL\n1.0000000\n0.8870806\n0.6175751\n0.6913052\n0.7920204\n0.7769435\n0.7866560\n0.8860761\n0.3119568\n0.5561364\nMSFT\n0.8870806\n1.0000000\n0.6402836\n0.6750190\n0.9552820\n0.9443883\n0.8752349\n0.9619908\n0.2462644\n0.6928203\nAMZN\n0.6175751\n0.6402836\n1.0000000\n0.3224856\n0.6288011\n0.6565958\n0.5497846\n0.6267292\n0.2645278\n0.6557263\nTSLA\n0.6913052\n0.6750190\n0.3224856\n1.0000000\n0.4678658\n0.4308348\n0.4979180\n0.7472442\n-0.2174422\n0.0275073\nGOOGL\n0.7920204\n0.9552820\n0.6288011\n0.4678658\n1.0000000\n0.9971395\n0.8589968\n0.8821331\n0.3504886\n0.8331696\nGOOG\n0.7769435\n0.9443883\n0.6565958\n0.4308348\n0.9971395\n1.0000000\n0.8623970\n0.8722996\n0.3679844\n0.8554034\nUNH\n0.7866560\n0.8752349\n0.5497846\n0.4979180\n0.8589968\n0.8623970\n1.0000000\n0.8524150\n0.3611373\n0.6956164\nNVDA\n0.8860761\n0.9619908\n0.6267292\n0.7472442\n0.8821331\n0.8722996\n0.8524150\n1.0000000\n0.1286555\n0.5920620\nJNJ\n0.3119568\n0.2462644\n0.2645278\n-0.2174422\n0.3504886\n0.3679844\n0.3611373\n0.1286555\n1.0000000\n0.5965237\nFB\n0.5561364\n0.6928203\n0.6557263\n0.0275073\n0.8331696\n0.8554034\n0.6956164\n0.5920620\n0.5965237\n1.0000000\n\nSince the matrix is so large I”m only showing the first 10 stocks.\nLets see where the stocks correlation falls compared to each other. To\ndo this, I will use the hist function. I will first set the diagonals to\n0 since I don’t care about stocks being correlated to themselves.\n\n\n## histogram\n\n\ndiag(cor_data)<- 0\nhist(cor_data)\n\n\n\n\nThere is definitely a skew to towards 1. Meaning most stocks are\ncorrelated. For my ties in my nextwork, I will look at only 5 percent of\nthe population. To identify what I should set as my limit in correlation\n(specfically at 5%), I will use the quantile funciton.\n\n\nquantile(as.numeric(cor_data), probs = c(.90,0.95,.98))\n\n\n      90%       95%       98% \n0.8304499 0.8831460 0.9221825 \n\nTo get ties for 5 percent of the population, I will use the metric of\n.88 as my slicer. I will now rename all corelations .88 or above to 1\nand below to 0. A 1 represents a tie.\n\n\ncor_small <-cor_data\n\n## Specifying \ncor_data[cor_data>=.89]<-1\ncor_data[cor_data<.89]<-0\ncor_data[1:10,1:10] %>% kable(caption = \"Correlation Matrix\")\n\n\nTable 3: Correlation Matrix\n\nAAPL\nMSFT\nAMZN\nTSLA\nGOOGL\nGOOG\nUNH\nNVDA\nJNJ\nFB\nAAPL\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\nMSFT\n0\n0\n0\n0\n1\n1\n0\n1\n0\n0\nAMZN\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\nTSLA\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\nGOOGL\n0\n1\n0\n0\n0\n1\n0\n0\n0\n0\nGOOG\n0\n1\n0\n0\n1\n0\n0\n0\n0\n0\nUNH\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\nNVDA\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\nJNJ\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\nFB\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\ncor_small[cor_small >= .98] <- 1\ncor_small[cor_small <.98] <- 0\n\n\n\nNow we have a adjaceny matrix showing our ties for our network. If I\nwere to create a network object now with this data, I would get a very\nlarge amount of stocks with out ties, and these would be seen as\nisolates. As these isolates will not be helpful in the analysis, I will\nnow remove all isolates from the matrix before creating a network\nobject.\n\n\ncorrelated <- cor_data\n\nx <- (colSums(correlated, na.rm = TRUE)) !=0\nx[1:10] %>% kable(caption = \"Stocks that have a TIE\")\n\n\nTable 4: Stocks that have a TIE\n\nx\nAAPL\nTRUE\nMSFT\nTRUE\nAMZN\nFALSE\nTSLA\nFALSE\nGOOGL\nTRUE\nGOOG\nTRUE\nUNH\nTRUE\nNVDA\nTRUE\nJNJ\nFALSE\nFB\nTRUE\n\ncorrelated = correlated[x,x]\n\n\ny <- (colSums(cor_small, na.rm = TRUE)) !=0\ny[1:10] %>% kable(caption = \"Stocks that have a TIE\")\n\n\nTable 4: Stocks that have a TIE\n\nx\nAAPL\nFALSE\nMSFT\nFALSE\nAMZN\nFALSE\nTSLA\nFALSE\nGOOGL\nTRUE\nGOOG\nTRUE\nUNH\nFALSE\nNVDA\nFALSE\nJNJ\nFALSE\nFB\nFALSE\n\ncor_small = cor_small[y,y]\n\ncorrelated %>% dim()\n\n\n[1] 334 334\n\ncor_small %>% dim()\n\n\n[1] 32 32\n\nnetwork_igraph <- graph.adjacency(correlated, mode = \"undirected\", weighted = NULL)\nplot(network_igraph, vertex.label = NA)\n\n\n\nnetwork_small <- graph.adjacency(cor_small, mode = \"undirected\", weighted = NULL)\n\nplot(network_small, vertex.color = \"skyblue3\",vertex.label = NA, vertex.size = 20, layout = layout_with_fr)\n\n\n\nas_edgelist(network_igraph)[1:10,]\n\n\n      [,1]   [,2]  \n [1,] \"AAPL\" \"PFE\" \n [2,] \"AAPL\" \"COST\"\n [3,] \"AAPL\" \"TMO\" \n [4,] \"AAPL\" \"ACN\" \n [5,] \"AAPL\" \"PLD\" \n [6,] \"AAPL\" \"ZTS\" \n [7,] \"AAPL\" \"SNPS\"\n [8,] \"AAPL\" \"APH\" \n [9,] \"AAPL\" \"CDNS\"\n[10,] \"AAPL\" \"KEYS\"\n\nas_edgelist(network_small)[1:10,]\n\n\n      [,1]    [,2]  \n [1,] \"GOOGL\" \"GOOG\"\n [2,] \"GOOGL\" \"SPGI\"\n [3,] \"GOOGL\" \"FTNT\"\n [4,] \"GOOGL\" \"NDAQ\"\n [5,] \"GOOGL\" \"EPAM\"\n [6,] \"HD\"    \"LOW\" \n [7,] \"DHR\"   \"WST\" \n [8,] \"SPGI\"  \"MMC\" \n [9,] \"COP\"   \"MRO\" \n[10,] \"PLD\"   \"DRE\" \n\nI now have two network I graphs. One with 334 nodes and one with 32\nnodes.\nInspect Network Structure\n\n\nvcount(network_igraph)\n\n\n[1] 334\n\necount(network_igraph)\n\n\n[1] 5470\n\nvcount(network_small)\n\n\n[1] 32\n\necount(network_small)\n\n\n[1] 41\n\nis_bipartite(network_igraph)\n\n\n[1] FALSE\n\nis_directed(network_igraph)\n\n\n[1] FALSE\n\nis_weighted(network_igraph)\n\n\n[1] FALSE\n\nvertex_attr_names(network_igraph)\n\n\n[1] \"name\"\n\nedge_attr_names(network_igraph)\n\n\ncharacter(0)\n\nV(network_igraph)$name[1:10]\n\n\n [1] \"AAPL\"  \"MSFT\"  \"GOOGL\" \"GOOG\"  \"UNH\"   \"NVDA\"  \"FB\"    \"PG\"   \n [9] \"JPM\"   \"XOM\"  \n\nThe large network has many more ties then the small network. I\nchecked to see if the object is a bipartite, directed or weighted. As\nexpected, the network is single mode, undirected and unweighted. The\nnetwork seems like it was set up correctly!\nFast and Greedy Detection\n\n\nlarge.fg <- cluster_fast_greedy(network_igraph)\nsmall.fg <- cluster_fast_greedy(network_small)\n\nnames(small.fg)\n\n\n[1] \"merges\"     \"modularity\" \"membership\" \"names\"      \"algorithm\" \n[6] \"vcount\"    \n\nsmall.fg\n\n\nIGRAPH clustering fast greedy, groups: 9, mod: 0.57\n+ groups:\n  $`1`\n  [1] \"PSA\" \"MSI\" \"AVB\" \"EQR\" \"EXR\" \"MAA\" \"ESS\" \"UDR\" \"CPT\"\n  \n  $`2`\n  [1] \"SPGI\" \"MMC\"  \"WM\"   \"RSG\" \n  \n  $`3`\n  [1] \"GOOGL\" \"GOOG\"  \"FTNT\"  \"IT\"    \"NDAQ\"  \"EPAM\" \n  \n  $`4`\n  + ... omitted several groups/vertices\n\nigraph::groups(large.fg)[1:2]\n\n\n$`1`\n [1] \"MSFT\"  \"GOOGL\" \"GOOG\"  \"FB\"    \"COST\"  \"PEP\"   \"LLY\"   \"ACN\"  \n [9] \"ADBE\"  \"DHR\"   \"SPGI\"  \"INTU\"  \"PLD\"   \"MS\"    \"AMT\"   \"TGT\"  \n[17] \"ISRG\"  \"MMC\"   \"ZTS\"   \"EW\"    \"REGN\"  \"EQIX\"  \"HCA\"   \"EL\"   \n[25] \"PSA\"   \"CHTR\"  \"SHW\"   \"ETN\"   \"MCO\"   \"MRNA\"  \"ROP\"   \"ORLY\" \n[33] \"PAYX\"  \"FTNT\"  \"CMG\"   \"WELL\"  \"IDXX\"  \"SBAC\"  \"MSI\"   \"KR\"   \n[41] \"MSCI\"  \"A\"     \"CTAS\"  \"CARR\"  \"YUM\"   \"AVB\"   \"RMD\"   \"EBAY\" \n[49] \"TROW\"  \"OTIS\"  \"ROK\"   \"MTD\"   \"AWK\"   \"ARE\"   \"EXR\"   \"RSG\"  \n[57] \"ALGN\"  \"WST\"   \"LH\"    \"CPRT\"  \"IT\"    \"STE\"   \"EFX\"   \"MAA\"  \n[65] \"CDW\"   \"ULTA\"  \"ZBRA\"  \"DOV\"   \"PKI\"   \"NDAQ\"  \"WAT\"   \"BR\"   \n[73] \"UDR\"   \"CPT\"   \"TRMB\"  \"POOL\"  \"GRMN\"  \"DGX\"   \"EPAM\"  \"TECH\" \n[81] \"XYL\"   \"GNRC\"  \"CRL\"   \"DPZ\"   \"CBOE\"  \"BIO\"   \"SEE\"   \"PNR\"  \n\n$`2`\n [1] \"AAPL\" \"UNH\"  \"NVDA\" \"PG\"   \"HD\"   \"PFE\"  \"AVGO\" \"TMO\"  \"MCD\" \n[10] \"CRM\"  \"LIN\"  \"NEE\"  \"AMD\"  \"LOW\"  \"CVS\"  \"NOW\"  \"ADP\"  \"ADI\" \n[19] \"ICE\"  \"F\"    \"ITW\"  \"KLAC\" \"MCK\"  \"EXC\"  \"AZO\"  \"DXCM\" \"SNPS\"\n[28] \"APH\"  \"CDNS\" \"TEL\"  \"VRSK\" \"FAST\" \"AME\"  \"KEYS\" \"ANET\" \"ODFL\"\n[37] \"TSCO\" \"ALB\"  \"VMC\"  \"MLM\"  \"DRE\"  \"GWW\"  \"VRSN\" \"MOH\"  \"IR\"  \n[46] \"MPWR\" \"WAB\"  \"STX\"  \"FDS\"  \"CTLT\" \"BRO\"  \"TYL\"  \"IEX\"  \"PAYC\"\n[55] \"NDSN\" \"JNPR\" \"PHM\"  \"WHR\"  \"FBHS\" \"AOS\"  \"CDAY\"\n\nigraph::groups(small.fg)[1:2]\n\n\n$`1`\n[1] \"PSA\" \"MSI\" \"AVB\" \"EQR\" \"EXR\" \"MAA\" \"ESS\" \"UDR\" \"CPT\"\n\n$`2`\n[1] \"SPGI\" \"MMC\"  \"WM\"   \"RSG\" \n\nWhen looking at the large network, most stocks are in the 1st group.\nSurprisingly APPL is not included with google and microsoft, when I\nwould have assumed those to be highly correlated together.\nCommunity Membership\n\n\nmembership(small.fg)\n\n\nGOOGL  GOOG    HD   DHR  SPGI   LOW   COP   PLD  ISRG   MMC    EW \n    3     3     6     9     2     6     5     8     7     2     7 \n  PSA    WM  FTNT   MSI   AVB   EQR   EXR   RSG   WST    IT   MAA \n    1     2     3     1     1     1     1     2     9     3     1 \n  ESS   DRE   MRO  NDAQ   UDR   CPT  EPAM   KIM   REG   FRT \n    1     8     5     3     1     1     3     4     4     4 \n\nPlot Network Community\n\n\nplot(large.fg,network_igraph, vertex.label = NA)\n\n\n\nplot(small.fg,network_small)\n\n\n\n\nI removed the vertex labels from the large igraph object since there\nare so many stocks in that group.\nWaltrap Detection\n\n\nlarge.wt <- walktrap.community(network_igraph)\nsmall.wt <- walktrap.community(network_small)\n\ngroups(large.wt)[1:5]\n\n\n$`1`\n[1] \"NOW\"  \"CTLT\" \"TYL\" \n\n$`2`\n[1] \"EOG\" \"WMB\"\n\n$`3`\n[1] \"JPM\" \"USB\" \"MET\" \"CE\"  \"MGM\" \"L\"   \"LNC\"\n\n$`4`\n[1] \"SLB\" \"HES\"\n\n$`5`\n [1] \"UNH\"  \"WFC\"  \"ANTM\" \"SCHW\" \"CB\"   \"AON\"  \"F\"    \"GD\"   \"AIG\" \n[10] \"SPG\"  \"AJG\"  \"DVN\"  \"BK\"   \"AMP\"  \"OKE\"  \"SIVB\" \"CBRE\" \"FRC\" \n[19] \"STT\"  \"MLM\"  \"RJF\"  \"PFG\"  \"PWR\"  \"SBNY\" \"KIM\"  \"JBHT\" \"AAP\" \n[28] \"LKQ\"  \"RHI\"  \"REG\" \n\ngroups(small.wt)[1:5]\n\n\n$`1`\n [1] \"MMC\" \"PSA\" \"MSI\" \"AVB\" \"EQR\" \"EXR\" \"MAA\" \"ESS\" \"UDR\" \"CPT\"\n\n$`2`\n[1] \"GOOGL\" \"GOOG\"  \"SPGI\"  \"FTNT\"  \"IT\"    \"NDAQ\"  \"EPAM\" \n\n$`3`\n[1] \"WM\"  \"RSG\"\n\n$`4`\n[1] \"KIM\" \"REG\" \"FRT\"\n\n$`5`\n[1] \"ISRG\" \"EW\"  \n\nplot(large.wt, network_igraph, vertex.label = NA)\n\n\n\nplot(small.wt, network_small)\n\n\n\n\nAdding in Steps\n\n\n##10 steps\n\nlarge.wt.10 <- walktrap.community(network_igraph,steps = 10)\nsmall.wt.10 <- walktrap.community(network_small, steps = 10)\n\n##100 steps\nlarge.wt.100 <- walktrap.community(network_igraph,steps = 100)\nsmall.wt.100 <- walktrap.community(network_small, steps = 100)\n\n## Plots\n\nplot(large.wt.10, network_igraph, vertex.label = NA)\n\n\n\nplot(large.wt.100, network_igraph, vertex.label = NA)\n\n\n\nplot(small.wt.10, network_small)\n\n\n\nplot(small.wt.100, network_small)\n\n\n\n\nEdge Betweeness\n\n\nlarge.ed <- label.propagation.community(network_igraph)\nsmall.ed <- label.propagation.community(network_small)\n\n\nplot(large.ed, network_igraph,vertex.label = NA)\n\n\n\nplot(small.ed, network_small)\n\n\n\n\neigenvector community\n\n\nlarge.eig<- leading.eigenvector.community(network_igraph)\nsmall.egi <- leading.eigenvector.community(network_small)\n\n\nplot(large.eig,network_igraph, vertex.label = NA)\n\n\n\nplot(small.egi, network_small)\n\n\n\n\n\n\n\n",
    "preview": "posts/httpswwwsullivcomposts2022-04-24-clustering-stocks/preview.png",
    "last_modified": "2022-05-11T18:45:39-04:00",
    "input_file": {},
    "preview_width": 900,
    "preview_height": 525
  },
  {
    "path": "posts/httpswwwsullivcomposts2022-04-24-inferential-network-statistics/",
    "title": "Inferential Network Statistics",
    "description": "A closer look into the S&P 500 stock network properties.",
    "author": [
      {
        "name": "Peter Sullivan",
        "url": {}
      }
    ],
    "date": "2022-05-11",
    "categories": [],
    "contents": "\nThis is the same network that I used for Hw 7. The small network\nabove is a filtered correlation network created from the S&P 500. I\ngrabbed the close prices from all s&p 500 stocks for 2021. I then\ncreated a correlation matrix from those prices. I then created ties for\nstocks that were 98% correlated. This filtered down the list of 500\nstocks to 32 stocks. I then filtered out any isolates.\nCUG-tests to Test Network\nProperties\nI first need to change my network objects into adjacency matrixs.\n\n\nsmall.mat <- as.matrix(as_adjacency_matrix(small_network))\n\n\n\nsmall.cug <- sna::cug.test(small.mat,FUN=gtrans,mode=\"digraph\",cmode=\"size\", reps = 100)\n\n\nsmall.cug\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 0.4322034 \nPr(X>=Obs): 1 \nPr(X<=Obs): 0 \n\nplot(small.cug)\n\n\n\npaste(\"The T stat: \",(small.cug$obs.stat-mean(small.cug$rep.stat))/sd(small.cug$rep.stat))\n\n\n[1] \"The T stat:  -4.09960327592022\"\n\nThere is a low probability the transitivity can be randomly\ngenerated.\nCreating T stat funciton\n\n\ncug.t<-function(cug.object){\n  (cug.object$obs.stat-mean(cug.object$rep.stat))/sd(cug.object$rep.stat)\n}\n\n\n\nCug test to different\nNetwork Properties\nDegree\n\n\nsmall.cug <-cug.test(small.mat,FUN=centralization,  FUN.arg=list(FUN=degree, cmode=\"indegree\"), mode=\"digraph\", cmode=\"size\") \n#plot vs simulation results\nplot(small.cug)\n\n\n\npaste(\"T Statistic: \",cug.t(small.cug))\n\n\n[1] \"T Statistic:  -1.03322042697641\"\n\nThere is a good probability that the degree could be randomly\ngenerated.\nBetweenness\n\n\nsmall.bet <-cug.test(small.mat,FUN=centralization,  FUN.arg=list(FUN=betweenness, cmode=\"directed\"), mode=\"digraph\", cmode=\"size\", reps=100) \n#plot vs simulation results\nplot(small.bet)\n\n\n\npaste(\"T stat: \", cug.t(small.bet))\n\n\n[1] \"T stat:  37.733590672985\"\n\nThere is a very small probability that the betweeness could be\nrandomly generated.\nTransitivity\n\n\nsmall.trans <- cug.test(small.mat,FUN=gtrans,mode=\"digraph\",cmode=\"dyad\")\nsmall.trans\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: dyad.census \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 0.4322034 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\nplot(small.trans)\n\n\n\npaste(\"T stat: \", cug.t(small.trans))\n\n\n[1] \"T stat:  7.6129532301842\"\n\nEdges\n\n\nsmall.edge<-cug.test(small.mat,FUN=gtrans,mode=\"digraph\",cmode=\"edges\", reps=100)\nsmall.edge\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: edges \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 0.4322034 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\nplot(small.edge)\n\n\n\npaste(\"T stat: \", cug.t(small.edge))\n\n\n[1] \"T stat:  16.395883128983\"\n\n\n\n\n",
    "preview": "posts/httpswwwsullivcomposts2022-04-24-inferential-network-statistics/inferential-network-statistics_files/figure-html5/unnamed-chunk-1-1.png",
    "last_modified": "2022-05-11T18:46:02-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsrpubscomak64823895256/",
    "title": "The Human Disease -- Week 3",
    "description": "Gene to Gene Network Analysis (bird's eye view)",
    "author": [
      {
        "name": "Abhinav Kumar",
        "url": "https://www.linkedin.com/in/abhinavkumar2603/"
      }
    ],
    "date": "2022-05-11",
    "categories": [],
    "contents": "\r\nData Description\r\nThis is a gene disease dataset set. This has been published by Carlos Castillo, a computer scientist based out o Barcelona Spain.The dataset has been used to teach network analysis to students at the university. The dataset was a result of the research conducted by Goh, K. I., Cusick, M. E., Valle, D., Childs, B., Vidal, M., & Barabási, A. L. (2007). “The human disease network”. Proceedings of the National Academy of Sciences, 104(21), 8685-8690. (https://doi.org/10.1073/pnas.0701361104). The effort here is to understand that many diseases may have common genetic origin. Hence, we want to find out which are those genes that may be connected by common among disorders. Therefore, here we will look Gene to Gene network. Below are the features of the data set:\r\nDisorder ID\r\nDisorder Name\r\nComma-separated list of Genes\r\nThe OMIM ID (Online Mendelian Inheritance in Man) of this disorder\r\nThe location in the Chromosome\r\nA disorder Class indicating the physiological system that is affected\r\nWe will only use the below two features:\r\nDisorder Name\r\nComma-separated list of Genes\r\nUsing these two features a bi-partite adjacency matrix will be created which then will be converted to one to one mode (Gene to Gene) by matrix operation. The disorder name would be pivoted in the data set to get the bi-partite matrix in place.\r\n\r\n\r\nlibrary(readr)\r\n\r\nurlfile = (\"https://raw.githubusercontent.com/chatox/networks-science-course/master/practicum/data/disease-genes.csv\")\r\n\r\ngeny = read_csv(url(urlfile))\r\nknitr::kable(head(geny))\r\n\r\n\r\nID\r\nName\r\nGenes\r\nOMIM ID\r\nChromosome\r\nClass\r\n1\r\n17,20-lyase deficiency, isolated\r\nCYP17A1, CYP17, P450C17\r\n609300\r\n10q24.3\r\nEndocrine\r\n1\r\n17-alpha-hydroxylase/17,20-lyase deficiency\r\nCYP17A1, CYP17, P450C17\r\n609300\r\n10q24.3\r\nEndocrine\r\n3\r\n2-methyl-3-hydroxybutyryl-CoA dehydrogenase deficiency\r\nHADH2, ERAB\r\n300256\r\nXp11.2\r\nMetabolic\r\n4\r\n2-methylbutyrylglycinuria\r\nACADSB\r\n600301\r\n10q25-q26\r\nMetabolic\r\n5\r\n3-beta-hydroxysteroid dehydrogenase, type II, deficiency\r\nHSD3B2\r\n201810\r\n1p13.1\r\nMetabolic\r\n6\r\n3-hydroxyacyl-CoA dehydrogenase deficiency\r\nHADHSC, SCHAD\r\n601609\r\n4q22-q26\r\nMetabolic\r\n\r\nCleaning the Genes column in dataset\r\n\r\n\r\nlibrary(stringr)\r\n\r\n# Genes is character column and we need to split each row into list of genes\r\n# strsplit() will split the character to list of characters\r\n\r\n\r\ngeny$Genes <- strsplit(geny$Genes, split = \", \")\r\n\r\n\r\nhead(geny)\r\n\r\n\r\n# A tibble: 6 x 6\r\n     ID Name                          Genes `OMIM ID` Chromosome Class\r\n  <dbl> <chr>                         <lis>     <dbl> <chr>      <chr>\r\n1     1 17,20-lyase deficiency, isol~ <chr>    609300 10q24.3    Endo~\r\n2     1 17-alpha-hydroxylase/17,20-l~ <chr>    609300 10q24.3    Endo~\r\n3     3 2-methyl-3-hydroxybutyryl-Co~ <chr>    300256 Xp11.2     Meta~\r\n4     4 2-methylbutyrylglycinuria     <chr>    600301 10q25-q26  Meta~\r\n5     5 3-beta-hydroxysteroid dehydr~ <chr>    201810 1p13.1     Meta~\r\n6     6 3-hydroxyacyl-CoA dehydrogen~ <chr>    601609 4q22-q26   Meta~\r\n\r\n\r\n\r\n# creating a new dataframe\r\n\r\ngeny_new <- geny[, c(2,3)]\r\ncolnames(geny_new)[1] <- \"Disorder\"\r\n\r\nhead(geny_new)\r\n\r\n\r\n# A tibble: 6 x 2\r\n  Disorder                                                 Genes    \r\n  <chr>                                                    <list>   \r\n1 17,20-lyase deficiency, isolated                         <chr [3]>\r\n2 17-alpha-hydroxylase/17,20-lyase deficiency              <chr [3]>\r\n3 2-methyl-3-hydroxybutyryl-CoA dehydrogenase deficiency   <chr [2]>\r\n4 2-methylbutyrylglycinuria                                <chr [1]>\r\n5 3-beta-hydroxysteroid dehydrogenase, type II, deficiency <chr [1]>\r\n6 3-hydroxyacyl-CoA dehydrogenase deficiency               <chr [2]>\r\n\r\n\r\n\r\n# replicating rows for Genes having more than 1 gene per disease\r\nlibrary(tidyverse)\r\ngeny_new <- unnest(geny_new)\r\nhead(geny_new)\r\n\r\n\r\n# A tibble: 6 x 2\r\n  Disorder                                    Genes  \r\n  <chr>                                       <chr>  \r\n1 17,20-lyase deficiency, isolated            CYP17A1\r\n2 17,20-lyase deficiency, isolated            CYP17  \r\n3 17,20-lyase deficiency, isolated            P450C17\r\n4 17-alpha-hydroxylase/17,20-lyase deficiency CYP17A1\r\n5 17-alpha-hydroxylase/17,20-lyase deficiency CYP17  \r\n6 17-alpha-hydroxylase/17,20-lyase deficiency P450C17\r\n\r\n\r\n\r\ngeny_new[\"count\"] <- 1\r\nadmat <- geny_new %>%\r\n  pivot_wider(id_cols = Genes, names_from = Disorder, values_from = count, values_fn = list(count = ~1))\r\n\r\n# take out first column, make it column name:\r\nadmat2 <- as.matrix(admat[,-1])\r\nrownames(admat2) <- admat$Genes\r\n\r\n# now admat2 is the bipartite adjacency matrix\r\n\r\n# it can stay NA, too\r\nadmat2[is.na(admat2)] <- 0\r\n\r\n\r\n# this is now weighted, each cell will show how many disorders the genes share.\r\nadj_mat <- admat2 %*% t(admat2)\r\n\r\n\r\n\r\n\r\n\r\nlibrary(statnet)\r\nlibrary(igraph)\r\n\r\n\r\nnetwork.stat<-network(adj_mat, directed=F, matrix.type=\"adjacency\", ignore.eval=FALSE, names.eval=\"weight\") \r\n\r\nprint(network.stat)\r\n\r\n\r\n Network attributes:\r\n  vertices = 3823 \r\n  directed = FALSE \r\n  hyper = FALSE \r\n  loops = FALSE \r\n  multiple = FALSE \r\n  bipartite = FALSE \r\n  total edges= 6643 \r\n    missing edges= 0 \r\n    non-missing edges= 6643 \r\n\r\n Vertex attribute names: \r\n    vertex.names \r\n\r\n Edge attribute names not shown \r\n\r\nThe gene to gene network has below details:\r\nNumber of Vertices = 3823\r\nNumber of Edges = 6643\r\nIt is an “undirected network”\r\nIt is a “single mode network”\r\nThe edges of the network are “weighted”\r\nExtracting vertex attribute values from statnet object\r\n\r\n\r\n# Extracting vertex attribute values from statnet object\r\n\r\nhead(network.stat %v% \"vertex.names\")\r\n\r\n\r\n[1] \"CYP17A1\" \"CYP17\"   \"P450C17\" \"HADH2\"   \"ERAB\"    \"ACADSB\" \r\n\r\nExtracting edge attribute values from statnet object\r\n\r\n\r\nhead(network.stat %e% \"weight\")\r\n\r\n\r\n[1] 2 2 2 1 1 1\r\n\r\nSummarizing numeric network attribute\r\n\r\n\r\nsummary(network.stat %e% \"weight\")\r\n\r\n\r\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \r\n  1.000   1.000   1.000   1.642   2.000  11.000 \r\n\r\nClassify all dyads in the network using statnet object\r\n\r\n\r\nsna::dyad.census(network.stat)\r\n\r\n\r\n      Mut Asym    Null\r\n[1,] 6643    0 7299110\r\n\r\nThere are 6643 mutual relationships of gene to gene in the , which share common disorders\r\nThere are no asymmetric gene to gene relationships\r\nThere are 7299110 Null dyads\r\n#Classify all triads in the networkusing statnet object\r\n\r\n\r\nsna::triad.census(network.stat) \r\n\r\n\r\n            003 012      102 021D 021U 021C 111D 111U 030T 030C  201\r\n[1,] 9279748342   0 25323442    0    0    0    0    0    0    0 7400\r\n     120D 120U 120C 210   300\r\n[1,]    0    0    0   0 14887\r\n\r\nGlobal Transitivity\r\n\r\n\r\ngtrans(network.stat)\r\n\r\n\r\n[1] 0.857859\r\n\r\nIdentifying the Isolates in the network\r\n\r\n\r\nisolates(network.stat)\r\n\r\n\r\n  [1]    6    7   14   17   18   22   32   33   39   89  105  106  109\r\n [14]  119  131  145  156  197  202  203  204  205  225  226  227  273\r\n [27]  285  288  289  290  303  304  325  326  333  345  346  361  372\r\n [40]  381  382  383  389  390  391  395  415  424  479  488  504  519\r\n [53]  531  534  535  536  537  553  554  572  585  586  592  607  608\r\n [66]  609  610  621  629  636  644  647  656  661  668  674  679  683\r\n [79]  750  757  763  764  772  773  774  775  776  778  783  784  785\r\n [92]  786  808  809  813  825  866  874  881  915  928  940  975  978\r\n[105]  979  982  995 1029 1036 1043 1044 1061 1077 1090 1091 1092 1117\r\n[118] 1144 1167 1197 1211 1244 1254 1255 1278 1296 1328 1343 1344 1366\r\n[131] 1375 1379 1390 1391 1398 1399 1450 1453 1480 1492 1519 1527 1535\r\n[144] 1552 1556 1583 1586 1587 1593 1598 1599 1602 1610 1639 1655 1658\r\n[157] 1669 1682 1687 1698 1702 1708 1711 1725 1752 1771 1788 1792 1793\r\n[170] 1794 1795 1796 1799 1812 1815 1816 1822 1823 1824 1825 1830 1851\r\n[183] 1888 1889 1890 1895 1896 1910 1911 1912 1913 1914 1919 1920 1921\r\n[196] 1927 1939 1950 1974 1989 1994 1995 1996 2004 2012 2013 2018 2019\r\n[209] 2024 2025 2026 2027 2028 2029 2036 2037 2045 2056 2057 2058 2059\r\n[222] 2062 2086 2087 2104 2105 2108 2109 2112 2125 2128 2133 2173 2174\r\n[235] 2183 2184 2185 2187 2188 2217 2224 2227 2230 2231 2254 2262 2273\r\n[248] 2279 2291 2294 2314 2315 2332 2333 2354 2364 2370 2371 2386 2402\r\n[261] 2406 2427 2437 2446 2450 2456 2469 2472 2473 2478 2481 2515 2521\r\n[274] 2529 2542 2565 2566 2580 2581 2582 2603 2612 2615 2628 2636 2637\r\n[287] 2650 2651 2673 2702 2706 2707 2731 2751 2781 2782 2783 2784 2789\r\n[300] 2790 2791 2796 2809 2814 2823 2824 2844 2851 2863 2878 2928 2935\r\n[313] 2939 2948 2966 2971 2974 2987 2990 3041 3050 3059 3070 3071 3072\r\n[326] 3086 3087 3099 3105 3119 3122 3161 3211 3212 3237 3244 3248 3249\r\n[339] 3250 3251 3258 3264 3276 3279 3287 3291 3292 3310 3319 3327 3340\r\n[352] 3349 3357 3358 3363 3364 3384 3395 3407 3417 3418 3430 3431 3434\r\n[365] 3435 3446 3447 3467 3470 3471 3472 3473 3482 3486 3494 3496 3507\r\n[378] 3525 3528 3529 3532 3542 3551 3566 3585 3600 3608 3612 3616 3617\r\n[391] 3622 3639 3651 3652 3656 3657 3660 3668 3669 3674 3675 3689 3690\r\n[404] 3714 3715 3726 3738 3748 3749 3750 3751 3752 3753 3756 3773 3788\r\n[417] 3801 3802 3805 3822 3823\r\n\r\nThere are 421 isolates in the network. 421 genes are not connected to any other gene.\r\nIdentifying the name of the Genes that are isoltes\r\n\r\n\r\n#subset vertex.names attribute to get names of isolates\r\nx <- as.vector(network.stat%v%'vertex.names')[c(isolates(network.stat))]\r\n\r\nx\r\n\r\n\r\n  [1] \"ACADSB\"   \"HSD3B2\"   \"AUH\"      \"CUL7\"     \"TPMT\"    \r\n  [6] \"HLA-B\"    \"CAT\"      \"MDM2\"     \"COL2A1\"   \"EGFR\"    \r\n [11] \"ADA\"      \"ADSL\"     \"MEN1\"     \"POR\"      \"TBS19\"   \r\n [16] \"GCNT2\"    \"FGA\"      \"TYR\"      \"ALDH2\"    \"GABRA2\"  \r\n [21] \"ALDOA\"    \"CYP11B2\"  \"ACTN3\"    \"ACAT1\"    \"AMACR\"   \r\n [26] \"ENAM\"     \"AMPD3\"    \"APOA1\"    \"GSN\"      \"LYZ\"     \r\n [31] \"ALB\"      \"MC1R\"     \"NRAMP2\"   \"SPTB\"     \"COL3A1\"  \r\n [36] \"XPNPEP2\"  \"HP\"       \"AT3\"      \"FGF10\"    \"APOA2\"   \r\n [41] \"APOC3\"    \"APOH\"     \"VPS33B\"   \"ARG1\"     \"ASL\"     \r\n [46] \"DDC\"      \"AGA\"      \"ALOX5\"    \"TF\"       \"GATA4\"   \r\n [51] \"GLO1\"     \"DRD4\"     \"BBS1\"     \"BBS7\"     \"BBS2\"    \r\n [56] \"BBS4\"     \"BBS5\"     \"RFX5\"     \"RFXAP\"    \"BSND\"    \r\n [61] \"FTL\"      \"SLC19A3\"  \"MYF6\"     \"GP1BA\"    \"GP1BB\"   \r\n [66] \"GP9\"      \"HLA-DPB1\" \"BTD\"      \"HRAS\"     \"TBXA2R\"  \r\n [71] \"ABO\"      \"DAF\"      \"AQP3\"     \"KEL\"      \"LW\"      \r\n [76] \"BSG\"      \"RHCE\"     \"XG\"       \"PHB\"      \"PLOD2\"   \r\n [81] \"MAOA\"     \"MYC\"      \"C1QA\"     \"C1QB\"     \"C1QG\"    \r\n [86] \"C1S\"      \"C2\"       \"C3\"       \"C6\"       \"C7\"      \r\n [91] \"C8B\"      \"C9\"       \"ASPA\"     \"FGFR4\"    \"CPS1\"    \r\n [96] \"SCO2\"     \"TNNC1\"    \"COX15\"    \"MYH8\"     \"CRYBB1\"  \r\n[101] \"CD8A\"     \"CP\"       \"CLN2\"     \"CLN5\"     \"CLN6\"    \r\n[106] \"CETP\"     \"DNM2\"     \"KIAA1985\" \"CHD7\"     \"NSDHL\"   \r\n[111] \"CHIT\"     \"LIPA\"     \"EXT1\"     \"CYBA\"     \"NCF1\"    \r\n[116] \"NCF2\"     \"ASS\"      \"COH1\"     \"ODC1\"     \"BUB1\"    \r\n[121] \"NDUFS6\"   \"ALG6\"     \"ALG12\"    \"ALG8\"     \"PLG\"     \r\n[126] \"CPO\"      \"IGBP1\"    \"CPT1A\"    \"CPT2\"     \"HLA-DQB1\"\r\n[131] \"INSL3\"    \"ELN\"      \"CTH\"      \"CTNS\"     \"D2HGD\"   \r\n[136] \"HSD17B4\"  \"DFNA5\"    \"MYO1A\"    \"ESPN\"     \"KIAA1199\"\r\n[141] \"DRPLA\"    \"WT1\"      \"AQP2\"     \"INSR\"     \"GCK\"     \r\n[146] \"PTF1A\"    \"AKT2\"     \"IPF1\"     \"VEGF\"     \"LIG1\"    \r\n[151] \"TOP1\"     \"DBH\"      \"FAAH\"     \"F2\"       \"COL7A1\"  \r\n[156] \"EDARADD\"  \"PKP1\"     \"COL1A2\"   \"SPTA1\"    \"COX10\"   \r\n[161] \"TLR4\"     \"ENO3\"     \"EPX\"      \"ITGA6\"    \"ME2\"     \r\n[166] \"SYN1\"     \"OPCML\"    \"HBA1\"     \"HBB\"      \"HBA2\"    \r\n[171] \"EPOR\"     \"LOR\"      \"RNF6\"     \"EXT2\"     \"NPC1L1\"  \r\n[176] \"GLA\"      \"MCFD2\"    \"F7\"       \"F10\"      \"F11\"     \r\n[181] \"F13B\"     \"FANCF\"    \"LCAT\"     \"FMO3\"     \"KNG\"     \r\n[186] \"FSHB\"     \"TDGF1\"    \"FBP1\"     \"ALDOB\"    \"KHK\"     \r\n[191] \"FUCA1\"    \"FUT6\"     \"GALK1\"    \"GALE\"     \"GALT\"    \r\n[196] \"GAMT\"     \"GBA\"      \"CYP7B1\"   \"DMBT1\"    \"MC2R\"    \r\n[201] \"GCS1\"     \"FTCD\"     \"GCDH\"     \"GK\"       \"GNMT\"    \r\n[206] \"PHKG2\"    \"G6PT1\"    \"GAA\"      \"GBE1\"     \"GYS2\"    \r\n[211] \"PYGL\"     \"PFKM\"     \"GLB1\"     \"GM2A\"     \"KIAA1279\"\r\n[216] \"DHH\"      \"CTLA4\"    \"MLPH\"     \"GHRHR\"    \"STAT5B\"  \r\n[221] \"IGF1\"     \"OAT\"      \"ELA2\"     \"HMOX1\"    \"AK1\"     \r\n[226] \"BPGM\"     \"GPI\"      \"HK1\"      \"TPI1\"     \"F5\"      \r\n[231] \"LIPC\"     \"MET\"      \"HMGCL\"    \"HMGCS2\"   \"TBX5\"    \r\n[236] \"CBS\"      \"MTHFR\"    \"HBG1\"     \"HBG2\"     \"EPHX2\"   \r\n[241] \"GLRB\"     \"GLUD1\"    \"APOC2\"    \"AASS\"     \"INS\"     \r\n[246] \"KCNMB1\"   \"ADD1\"     \"TSHR\"     \"PAX9\"     \"LHB\"     \r\n[251] \"PTH\"      \"GCMB\"     \"PAX8\"     \"TSHB\"     \"ICHYN\"   \r\n[256] \"IGHG2\"    \"CD3E\"     \"CD3G\"     \"MYH2\"     \"ITPA\"    \r\n[261] \"GABRB3\"   \"IVD\"      \"AHI1\"     \"NAGA\"     \"IGKC\"    \r\n[266] \"DSG1\"     \"GALC\"     \"LDHB\"     \"PDX1\"     \"GHR\"     \r\n[271] \"ALAD\"     \"SURF1\"    \"COL4A6\"   \"TAL2\"     \"ARNT\"    \r\n[276] \"AF1Q\"     \"NUMA1\"    \"BCL2\"     \"TCRA\"     \"ABL1\"    \r\n[281] \"LIG4\"     \"STAR\"     \"ECM1\"     \"AKAP10\"   \"LPA\"     \r\n[286] \"CILP\"     \"RAP1GDS1\" \"BCL8\"     \"VMD2\"     \"MASP2\"   \r\n[291] \"PYGM\"     \"XK\"       \"NF2\"      \"OPHN1\"    \"ARSA\"    \r\n[296] \"COL10A1\"  \"CYB5\"     \"DIA1\"     \"MMAA\"     \"MMAB\"    \r\n[301] \"RFXANK\"   \"MCPH1\"    \"SIX6\"     \"EDNRA\"    \"TK2\"     \r\n[306] \"SUCLA2\"   \"MYMY3\"    \"GNPTAG\"   \"HYAL1\"    \"PHKA1\"   \r\n[311] \"IL12RB1\"  \"MDS1\"     \"CBFB\"     \"AMPD1\"    \"ECGF1\"   \r\n[316] \"ITGA7\"    \"CLCN1\"    \"NAGS\"     \"NHS\"      \"HSN2\"    \r\n[321] \"RAC2\"     \"GNAT1\"    \"NP\"       \"POMC\"     \"MC4R\"    \r\n[326] \"UCP3\"     \"MC3R\"     \"OA1\"      \"SAG\"      \"PAX2\"    \r\n[331] \"OTC\"      \"RIL\"      \"NDUFV2\"   \"PIGA\"     \"PEX12\"   \r\n[336] \"PTS\"      \"PHGDH\"    \"PRPS1\"    \"PHKB\"     \"PSP\"     \r\n[341] \"GLI2\"     \"LHX3\"     \"PKD1\"     \"PKDTS\"    \"COL4A1\"  \r\n[346] \"UROS\"     \"UROD\"     \"PEPD\"     \"MSR1\"     \"PROS1\"   \r\n[351] \"SRD5A2\"   \"PSORS6\"   \"CTSK\"     \"NOS1\"     \"PC\"      \r\n[356] \"PDHB\"     \"OGG1\"     \"CA2\"      \"OPRM1\"    \"LRAT\"    \r\n[361] \"IMPDH1\"   \"RP2\"      \"CERKL\"    \"RP9\"      \"USH2A\"   \r\n[366] \"MERTK\"    \"RBP4\"     \"RHD\"      \"CYP2R1\"   \"VDR\"     \r\n[371] \"ESCO2\"    \"WNT4\"     \"HEXB\"     \"NAGLU\"    \"EMX2\"    \r\n[376] \"TRAR4\"    \"SOST\"     \"SPR\"      \"USP26\"    \"IL7R\"    \r\n[381] \"LHX4\"     \"NODAL\"    \"TBX4\"     \"SPG3A\"    \"EPB42\"   \r\n[386] \"PPP2R2B\"  \"SCA25\"    \"PLEKHG4\"  \"SCA8\"     \"TDP1\"    \r\n[391] \"MESP2\"    \"HMGCR\"    \"SSADH\"    \"SI\"       \"SUOX\"    \r\n[396] \"SOD3\"     \"FBLN1\"    \"WHN\"      \"DAD1\"     \"HBD\"     \r\n[401] \"LCRB\"     \"HRG\"      \"PROC\"     \"TRHR\"     \"TBG\"     \r\n[406] \"TALDO1\"   \"TRPS1\"    \"HADHB\"    \"SPG20\"    \"FAH\"     \r\n[411] \"TAT\"      \"HPD\"      \"TBX3\"     \"APRT\"     \"GGCX\"    \r\n[416] \"TKT\"      \"XDH\"      \"XPA\"      \"DDB2\"     \"PEX16\"   \r\n[421] \"PEX3\"    \r\n\r\nPlotting the Gene to Gene network\r\n\r\n\r\nplot(network.stat)\r\n\r\n\r\n\r\noptions(warn=0)\r\n\r\n\r\n\r\n\r\n\r\n# Calculate the Component Size Distribution of the Graph\r\n\r\nn1 = data.frame(Gene = (network.stat%v%'vertex.names'), membership = sna::component.dist(network.stat, connected=c(\"strong\"))$membership, cdist = sna::component.dist(network.stat, connected=c(\"strong\"))$cdist)\r\n\r\nn2 = data.frame(csize = sna::component.dist(network.stat,connected=c(\"strong\"))$csize)\r\n# n3 = data.frame(cdist = sna::component.dist(network.stat, connected=c(\"strong\"))$cdist)\r\n\r\n\r\n\r\n\r\n\r\n# getting network density\r\n\r\nnetwork.density(network.stat)\r\n\r\n\r\n[1] 0.0009092834\r\n\r\n\r\n\r\n# network density without loops\r\n\r\ngden(network.stat, diag = FALSE)\r\n\r\n\r\n[1] 0.0009092834\r\n\r\n\r\n\r\n# Average network degree\r\n\r\nsort(sna::degree(network.stat), decreasing = T)\r\n\r\n\r\n   [1] 82 82 82 70 70 70 60 58 58 58 56 54 48 48 48 46 46 46 46 46 46\r\n  [22] 46 46 46 46 46 46 46 46 46 46 46 44 44 44 44 42 42 42 42 42 40\r\n  [43] 40 40 40 38 38 38 38 38 38 38 38 36 36 36 36 36 36 36 36 36 36\r\n  [64] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36\r\n  [85] 36 36 36 36 36 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34\r\n [106] 34 34 34 34 34 34 34 34 32 32 32 32 32 32 32 32 32 32 32 32 32\r\n [127] 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 30 30 30 30 28 28\r\n [148] 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28\r\n [169] 28 28 28 28 28 28 28 28 28 26 26 26 26 26 26 26 26 26 26 26 26\r\n [190] 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 24 24 24 24 24 24\r\n [211] 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24\r\n [232] 24 24 24 24 24 24 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22\r\n [253] 22 22 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20\r\n [274] 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20\r\n [295] 20 20 20 20 20 20 20 20 20 20 20 20 20 18 18 18 18 18 18 18 18\r\n [316] 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18\r\n [337] 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18\r\n [358] 18 18 18 18 18 18 18 18 18 18 16 16 16 16 16 16 16 16 16 16 16\r\n [379] 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16\r\n [400] 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16\r\n [421] 16 16 16 16 16 16 16 16 16 16 16 16 16 14 14 14 14 14 14 14 14\r\n [442] 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14\r\n [463] 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14\r\n [484] 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14\r\n [505] 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14\r\n [526] 14 14 14 14 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12\r\n [547] 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12\r\n [568] 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12\r\n [589] 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12\r\n [610] 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12\r\n [631] 12 12 12 12 12 12 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10\r\n [652] 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10\r\n [673] 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10\r\n [694] 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10\r\n [715] 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10  8  8\r\n [736]  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8\r\n [757]  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8\r\n [778]  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8\r\n [799]  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8\r\n [820]  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8\r\n [841]  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8\r\n [862]  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8\r\n [883]  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8\r\n [904]  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8\r\n [925]  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8\r\n [946]  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8\r\n [967]  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8\r\n [988]  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8\r\n[1009]  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8\r\n[1030]  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8\r\n[1051]  8  8  8  8  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6\r\n[1072]  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6\r\n[1093]  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6\r\n[1114]  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6\r\n[1135]  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6\r\n[1156]  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6\r\n[1177]  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6\r\n[1198]  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6\r\n[1219]  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6\r\n[1240]  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6\r\n[1261]  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6\r\n[1282]  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6\r\n[1303]  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6\r\n[1324]  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6\r\n[1345]  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6\r\n[1366]  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6\r\n[1387]  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6\r\n[1408]  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6\r\n[1429]  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6\r\n[1450]  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6\r\n[1471]  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6\r\n[1492]  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6\r\n[1513]  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6\r\n[1534]  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6\r\n[1555]  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6\r\n[1576]  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6\r\n[1597]  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6\r\n[1618]  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6\r\n[1639]  6  6  6  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[1660]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[1681]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[1702]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[1723]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[1744]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[1765]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[1786]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[1807]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[1828]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[1849]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[1870]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[1891]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[1912]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[1933]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[1954]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[1975]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[1996]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[2017]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[2038]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[2059]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[2080]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[2101]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[2122]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[2143]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[2164]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[2185]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[2206]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[2227]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[2248]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[2269]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[2290]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[2311]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[2332]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[2353]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[2374]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[2395]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[2416]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[2437]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[2458]  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4\r\n[2479]  4  4  4  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2  2  2  2\r\n[2500]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[2521]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[2542]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[2563]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[2584]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[2605]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[2626]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[2647]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[2668]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[2689]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[2710]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[2731]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[2752]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[2773]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[2794]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[2815]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[2836]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[2857]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[2878]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[2899]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[2920]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[2941]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[2962]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[2983]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[3004]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[3025]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[3046]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[3067]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[3088]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[3109]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[3130]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[3151]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[3172]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[3193]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[3214]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[3235]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[3256]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[3277]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[3298]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[3319]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[3340]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[3361]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[3382]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2\r\n[3403]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\r\n[3424]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\r\n[3445]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\r\n[3466]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\r\n[3487]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\r\n[3508]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\r\n[3529]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\r\n[3550]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\r\n[3571]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\r\n[3592]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\r\n[3613]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\r\n[3634]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\r\n[3655]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\r\n[3676]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\r\n[3697]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\r\n[3718]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\r\n[3739]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\r\n[3760]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\r\n[3781]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\r\n[3802]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\r\n[3823]  0\r\n\r\n\r\n\r\n#creating dataframe of vertex names and degree\r\n\r\ndata.frame(name = network.stat %v% \"vertex.names\", degree = sort(sna::degree(network.stat), decreasing = T))\r\n\r\n\r\n          name degree\r\n1      CYP17A1     82\r\n2        CYP17     82\r\n3      P450C17     82\r\n4        HADH2     70\r\n5         ERAB     70\r\n6       ACADSB     70\r\n7       HSD3B2     60\r\n8       HADHSC     58\r\n9        SCHAD     58\r\n10       MCCC1     58\r\n11        MCCA     56\r\n12       MCCC2     54\r\n13        MCCB     48\r\n14         AUH     48\r\n15        OPA3     48\r\n16        MGA3     46\r\n17        CUL7     46\r\n18        TPMT     46\r\n19        FGD1     46\r\n20        FGDY     46\r\n21         AAS     46\r\n22       HLA-B     46\r\n23       EDNRB     46\r\n24       HSCR2     46\r\n25       ABCDS     46\r\n26         MTP     46\r\n27        APOB     46\r\n28        FLDB     46\r\n29        SOX9     46\r\n30        CMD1     46\r\n31        SRA1     46\r\n32         CAT     46\r\n33        MDM2     44\r\n34        AAAS     44\r\n35         AAA     44\r\n36      C7orf2     44\r\n37        ACHP     42\r\n38       LMBR1     42\r\n39      COL2A1     42\r\n40     SLC26A2     42\r\n41         DTD     42\r\n42       DTDST     40\r\n43     D5S1708     40\r\n44        EDM4     40\r\n45       FGFR3     40\r\n46         ACH     38\r\n47       CNGA3     38\r\n48        CNG3     38\r\n49       ACHM2     38\r\n50       CNGB3     38\r\n51       ACHM3     38\r\n52       GNAT2     38\r\n53       ACHM4     38\r\n54      IGFALS     36\r\n55         ALS     36\r\n56       KCNH2     36\r\n57        LQT2     36\r\n58        HERG     36\r\n59        GLI3     36\r\n60        PAPA     36\r\n61        PAPB     36\r\n62        ACLS     36\r\n63         IHH     36\r\n64        BDA1     36\r\n65     SLC39A4     36\r\n66        ZIP4     36\r\n67      ATP2A2     36\r\n68       ATP2B     36\r\n69         DAR     36\r\n70        GNAS     36\r\n71       GNAS1     36\r\n72        GPSA     36\r\n73         POH     36\r\n74       PHP1B     36\r\n75       PHP1A     36\r\n76         AHO     36\r\n77       SSTR5     36\r\n78        GDF5     36\r\n79       CDMP1     36\r\n80        NPR2     36\r\n81       ANPRB     36\r\n82        AMDM     36\r\n83       ACADL     36\r\n84        LCAD     36\r\n85       ACADM     36\r\n86        MCAD     36\r\n87       ACADS     36\r\n88        SCAD     36\r\n89        EGFR     36\r\n90        BRAF     34\r\n91       ERBB2     34\r\n92         NGL     34\r\n93         NEU     34\r\n94        HER2     34\r\n95        PRKN     34\r\n96       PARK2     34\r\n97         PDJ     34\r\n98         APC     34\r\n99          GS     34\r\n100        FPC     34\r\n101      MUTYH     34\r\n102      PLAG1     34\r\n103       SGPA     34\r\n104        PSA     34\r\n105        ADA     34\r\n106       ADSL     34\r\n107       APM1     34\r\n108      GBP28     34\r\n109       MEN1     34\r\n110       TP53     34\r\n111        P53     34\r\n112       LFS1     34\r\n113    CYP11B1     34\r\n114    P450C11     32\r\n115        FHI     32\r\n116    CYP21A2     32\r\n117      CYP21     32\r\n118      CA21H     32\r\n119        POR     32\r\n120       DAX1     32\r\n121        AHC     32\r\n122        AHX     32\r\n123      NROB1     32\r\n124      FTZF1     32\r\n125       FTZ1     32\r\n126        SF1     32\r\n127    PRKAR1A     32\r\n128       TSE1     32\r\n129       CNC1     32\r\n130        CAR     32\r\n131      TBS19     32\r\n132      ABCD1     32\r\n133        ALD     32\r\n134        AMN     32\r\n135      PEX10     32\r\n136       NALD     32\r\n137      PEX13     32\r\n138        ZWS     32\r\n139       PEX1     32\r\n140       ZWS1     32\r\n141      PEX26     32\r\n142       PXR1     30\r\n143       PEX5     30\r\n144      PTS1R     30\r\n145      GCNT2     30\r\n146      TP73L     28\r\n147       TP63     28\r\n148        KET     28\r\n149       EEC3     28\r\n150      SHFM4     28\r\n151        LMS     28\r\n152        RHS     28\r\n153       PER2     28\r\n154      FASPS     28\r\n155   KIAA0347     28\r\n156        FGA     28\r\n157        FGB     28\r\n158       IGHM     28\r\n159         MU     28\r\n160      IGLL1     28\r\n161        IGO     28\r\n162       IGL5     28\r\n163     VPREB2     28\r\n164      LRRC8     28\r\n165   KIAA1437     28\r\n166        BTK     28\r\n167      AGMX1     28\r\n168       IMD1     28\r\n169        XLA     28\r\n170         AT     28\r\n171       GATM     28\r\n172       AGAT     28\r\n173    SLC12A6     28\r\n174      KCC3A     28\r\n175      KCC3B     28\r\n176       KCC3     28\r\n177      ACCPN     28\r\n178       ATIC     26\r\n179       PURH     26\r\n180      AICAR     26\r\n181    KIR3DL1     26\r\n182      NKAT3     26\r\n183       NKB1     26\r\n184      AMB11     26\r\n185    KIR3DS1     26\r\n186       IFNG     26\r\n187     CXCL12     26\r\n188       SDF1     26\r\n189       JAG1     26\r\n190        AGS     26\r\n191        AHD     26\r\n192       OCA2     26\r\n193          P     26\r\n194        PED     26\r\n195     D15S12     26\r\n196       BOCA     26\r\n197        TYR     26\r\n198      TYRP1     26\r\n199       CAS2     26\r\n200       GP75     26\r\n201      HTR2A     26\r\n202      ALDH2     26\r\n203     GABRA2     26\r\n204      ALDOA     26\r\n205    CYP11B2     24\r\n206       GFAP     24\r\n207     NDUFV1     24\r\n208      UQOR1     24\r\n209        HGD     24\r\n210        AKU     24\r\n211    SLC16A2     24\r\n212     DXS128     24\r\n213       XPCT     24\r\n214       IL13     24\r\n215       ALRH     24\r\n216         HR     24\r\n217         AU     24\r\n218       POLG     24\r\n219      POLG1     24\r\n220      POLGA     24\r\n221        PEO     24\r\n222   SERPINA3     24\r\n223       AACT     24\r\n224        ACT     24\r\n225      ACTN3     24\r\n226      ACAT1     24\r\n227      AMACR     24\r\n228       ATRX     24\r\n229        XH2     24\r\n230        XNP     24\r\n231      MRXS3     24\r\n232        SHS     24\r\n233     COL4A5     24\r\n234        ATS     24\r\n235       ASLN     24\r\n236     COL4A3     24\r\n237     COL4A4     24\r\n238      ALMS1     22\r\n239       ALSS     22\r\n240   KIAA0328     22\r\n241     ATP1A2     22\r\n242       FHM2     22\r\n243       MHP2     22\r\n244     ASPCR1     22\r\n245      RCC17     22\r\n246       ASPL     22\r\n247       ASPS     22\r\n248        APP     22\r\n249       CVAP     22\r\n250        AD1     22\r\n251       APOE     22\r\n252        AD2     22\r\n253      PSEN2     22\r\n254        AD4     22\r\n255       STM2     20\r\n256      APBB2     20\r\n257     FE65L1     20\r\n258       NOS3     20\r\n259       PLAU     20\r\n260        URK     20\r\n261        ACE     20\r\n262       DCP1     20\r\n263       ACE1     20\r\n264        MPO     20\r\n265     PACIP1     20\r\n266    PAXIP1L     20\r\n267       PTIP     20\r\n268        A2M     20\r\n269       BLMH     20\r\n270        BMH     20\r\n271      PSEN1     20\r\n272        AD3     20\r\n273       ENAM     20\r\n274      AMELX     20\r\n275        AMG     20\r\n276       AIH1     20\r\n277       AMGX     20\r\n278       DLX3     20\r\n279        TDO     20\r\n280       KLK4     20\r\n281      EMSP1     20\r\n282     PRSS17     20\r\n283      SIAT9     20\r\n284    ST3GALV     20\r\n285      AMPD3     20\r\n286        TTR     20\r\n287       PALB     20\r\n288      APOA1     20\r\n289        GSN     20\r\n290        LYZ     20\r\n291       VAPB     20\r\n292       VAPC     20\r\n293       ALS8     20\r\n294       SOD1     20\r\n295       ALS1     20\r\n296       ALS2     20\r\n297       ALSJ     20\r\n298       PLSJ     20\r\n299      IAHSP     20\r\n300      DCTN1     20\r\n301       NEFH     20\r\n302       PRPH     20\r\n303        ALB     20\r\n304       MC1R     20\r\n305      SARA2     20\r\n306      SAR1B     20\r\n307       CMRD     20\r\n308         AR     18\r\n309       DHTR     18\r\n310        TFM     18\r\n311       SBMA     18\r\n312         KD     18\r\n313      SMAX1     18\r\n314      CDAN1     18\r\n315       CDA1     18\r\n316      RPS19     18\r\n317        DBA     18\r\n318       PKLR     18\r\n319        PK1     18\r\n320      NT5C3     18\r\n321      UMPH1     18\r\n322       PSN1     18\r\n323       RHAG     18\r\n324      RH50A     18\r\n325     NRAMP2     18\r\n326       SPTB     18\r\n327      ALAS2     18\r\n328       ANH1     18\r\n329        ASB     18\r\n330      ABCB7     18\r\n331       ABC7     18\r\n332       ASAT     18\r\n333     COL3A1     18\r\n334      MECP2     18\r\n335        RTT     18\r\n336       PPMX     18\r\n337      MRX16     18\r\n338      MRX79     18\r\n339      UBE3A     18\r\n340       ANCR     18\r\n341       C1NH     18\r\n342       HAE1     18\r\n343       HAE2     18\r\n344   SERPING1     18\r\n345    XPNPEP2     18\r\n346         HP     18\r\n347       PAX6     18\r\n348        AN2     18\r\n349       MGDA     18\r\n350       SOX2     18\r\n351      ANOP3     18\r\n352       EYA1     18\r\n353        BOR     18\r\n354      FOXE3     18\r\n355     FKHL12     18\r\n356       ASMD     18\r\n357      FOXC1     18\r\n358      FKHL7     18\r\n359     FREAC3     18\r\n360      PITX3     18\r\n361        AT3     18\r\n362     SLC6A4     18\r\n363        HTT     18\r\n364       OCD1     18\r\n365       FBN1     18\r\n366       MFS1     18\r\n367        WMS     18\r\n368      FGFR2     16\r\n369        BEK     16\r\n370       CFD1     16\r\n371        JWS     16\r\n372      FGF10     16\r\n373       TERC     16\r\n374       TRC3     16\r\n375         TR     16\r\n376       TERT     16\r\n377       TCS1     16\r\n378       EST2     16\r\n379       BCHE     16\r\n380       CHE1     16\r\n381      APOA2     16\r\n382      APOC3     16\r\n383       APOH     16\r\n384    HSD11B2     16\r\n385     HSD11K     16\r\n386       AQP1     16\r\n387     CHIP28     16\r\n388         CO     16\r\n389     VPS33B     16\r\n390       ARG1     16\r\n391        ASL     16\r\n392    CYP19A1     16\r\n393      CYP19     16\r\n394        ARO     16\r\n395        DDC     16\r\n396       RYR2     16\r\n397      VTSIP     16\r\n398        DSP     16\r\n399      KPPS2     16\r\n400      PPKS2     16\r\n401       PKP2     16\r\n402      ARVD9     16\r\n403       TPM2     16\r\n404       TMSB     16\r\n405      AMCD1     16\r\n406        DA1     16\r\n407      TNNI2     16\r\n408     AMCD2B     16\r\n409       DA2B     16\r\n410       FSSV     16\r\n411      WISP3     16\r\n412       PPAC     16\r\n413        PPD     16\r\n414      TNNT3     16\r\n415        AGA     16\r\n416      NLGN3     16\r\n417      NLGN4     16\r\n418   KIAA1260     16\r\n419     AUTSX2     16\r\n420      PHF11     16\r\n421    NYREN34     16\r\n422      MS4A2     16\r\n423     FCER1B     16\r\n424      ALOX5     16\r\n425      ADRB2     16\r\n426      PTGDR     16\r\n427        AS1     16\r\n428     GPR154     16\r\n429       GPRA     16\r\n430       VRR1     16\r\n431      PGR14     16\r\n432       HNMT     16\r\n433      IL12B     16\r\n434      NKSF2     14\r\n435     PLA2G7     14\r\n436      PAFAH     14\r\n437    SCGB3A2     14\r\n438      UGRP1     14\r\n439        TNF     14\r\n440       TNFA     14\r\n441        UGB     14\r\n442       CC10     14\r\n443       CCSP     14\r\n444    SCGB1A1     14\r\n445      ATCAY     14\r\n446       CLAC     14\r\n447   KIAA1872     14\r\n448       APTX     14\r\n449        AOA     14\r\n450       AOA1     14\r\n451     CACNB4     14\r\n452        EJM     14\r\n453       SETX     14\r\n454      SCAR1     14\r\n455       AOA2     14\r\n456        ATM     14\r\n457        ATA     14\r\n458        AT1     14\r\n459     MRE11A     14\r\n460      MRE11     14\r\n461       ATLD     14\r\n462       TTPA     14\r\n463       TTP1     14\r\n464       AVED     14\r\n465       FLNB     14\r\n466        SCT     14\r\n467        AOI     14\r\n468      HOXA1     14\r\n469      HOX1F     14\r\n470       BSAS     14\r\n471     SPINK5     14\r\n472      LEKTI     14\r\n473     HAVCR1     14\r\n474      HAVCR     14\r\n475       SELP     14\r\n476       GRMP     14\r\n477       IL4R     14\r\n478      IL4RA     14\r\n479         TF     14\r\n480      KCNE2     14\r\n481      MIRP1     14\r\n482       LQT6     14\r\n483      KCNQ1     14\r\n484      KCNA9     14\r\n485       LQT1     14\r\n486     KVLQT1     14\r\n487      ATFB1     14\r\n488      GATA4     14\r\n489       MYH6     14\r\n490       ASD3     14\r\n491      MYHCA     14\r\n492      NKX2E     14\r\n493        CSX     14\r\n494       GJA1     14\r\n495       CX43     14\r\n496       ODDD     14\r\n497      SDTY3     14\r\n498       ODOD     14\r\n499     CRELD1     14\r\n500      AVSD2     14\r\n501       DRD5     14\r\n502      DRD1B     14\r\n503     DRD1L2     14\r\n504       GLO1     14\r\n505    TNFRSF6     14\r\n506       APT1     14\r\n507        FAS     14\r\n508       CD95     14\r\n509     ALPS1A     14\r\n510     CASP10     14\r\n511       MCH4     14\r\n512      ALPS2     14\r\n513      CASP8     14\r\n514       MCH5     14\r\n515       AIRE     14\r\n516     APECED     14\r\n517         TG     14\r\n518      AITD3     14\r\n519       DRD4     14\r\n520      USP9Y     14\r\n521      DFFRY     14\r\n522      SYCP3     14\r\n523       SCP3     14\r\n524       COR1     14\r\n525      FOXE1     14\r\n526     FKHL15     14\r\n527      TITF2     14\r\n528       TTF2     14\r\n529       PTEN     14\r\n530      MMAC1     12\r\n531       BBS1     12\r\n532       ARL6     12\r\n533       BBS3     12\r\n534       BBS7     12\r\n535       BBS2     12\r\n536       BBS4     12\r\n537       BBS5     12\r\n538       MKKS     12\r\n539       HMCS     12\r\n540        KMS     12\r\n541        MKS     12\r\n542       BBS6     12\r\n543       TTC8     12\r\n544       BBS8     12\r\n545      TAPBP     12\r\n546       TPSN     12\r\n547       TAP2     12\r\n548      ABCB3     12\r\n549       PSF2     12\r\n550     RING11     12\r\n551     MHC2TA     12\r\n552       C2TA     12\r\n553       RFX5     12\r\n554      RFXAP     12\r\n555        TAZ     12\r\n556       EFE2     12\r\n557       BTHS     12\r\n558      CMD3A     12\r\n559      LVNCX     12\r\n560       GJB2     12\r\n561       CX26     12\r\n562      DFNB1     12\r\n563        PPK     12\r\n564      DFNA3     12\r\n565        KID     12\r\n566        HID     12\r\n567    SLC12A1     12\r\n568      NKCC2     12\r\n569      KCNJ1     12\r\n570      ROMK1     12\r\n571     CLCNKB     12\r\n572       BSND     12\r\n573     CLCNKA     12\r\n574      RASA1     12\r\n575        GAP     12\r\n576      CMAVM     12\r\n577       PKWS     12\r\n578      PTCH2     12\r\n579       PTCH     12\r\n580      NBCCS     12\r\n581       BCNS     12\r\n582       HPE7     12\r\n583       SMOH     12\r\n584        SMO     12\r\n585        FTL     12\r\n586    SLC19A3     12\r\n587      BCL7A     12\r\n588       BCL7     12\r\n589     IFNGR1     12\r\n590        DMD     12\r\n591        BMD     12\r\n592       MYF6     12\r\n593     CDKN1C     12\r\n594       KIP2     12\r\n595        BWS     12\r\n596        H19     12\r\n597   D11S813E     12\r\n598       ASM1     12\r\n599   KCNQ10T1     12\r\n600       LIT1     12\r\n601       NSD1     12\r\n602     ARA267     12\r\n603        STO     12\r\n604       NQO1     12\r\n605       DIA4     12\r\n606      NMOR1     12\r\n607      GP1BA     12\r\n608      GP1BB     12\r\n609        GP9     12\r\n610   HLA-DPB1     12\r\n611       UPB1     12\r\n612       BUP1     12\r\n613     COL6A1     12\r\n614       OPLL     12\r\n615     COL6A2     12\r\n616     COL6A3     12\r\n617     CYP4V2     12\r\n618        BCD     12\r\n619    SLC10A2     12\r\n620      NTCP2     12\r\n621        BTD     12\r\n622       XBP1     12\r\n623       XBP2     12\r\n624       FLCN     12\r\n625        BHD     12\r\n626      KRAS2     12\r\n627      RASK2     12\r\n628        RB1     12\r\n629       HRAS     12\r\n630     CARD15     12\r\n631       NOD2     12\r\n632       IBD1     12\r\n633         CD     12\r\n634       ACUG     12\r\n635    PSORAS1     12\r\n636     TBXA2R     12\r\n637      P2RX1     10\r\n638       P2X1     10\r\n639      FOXL2     10\r\n640       BPES     10\r\n641      BPES1     10\r\n642       PFRK     10\r\n643       POF3     10\r\n644        ABO     10\r\n645         LU     10\r\n646       BCAM     10\r\n647        DAF     10\r\n648     SLC4A1     10\r\n649        AE1     10\r\n650       EPB3     10\r\n651       ART4     10\r\n652         DO     10\r\n653       GYPC     10\r\n654         GE     10\r\n655        GPC     10\r\n656       AQP3     10\r\n657       CD44     10\r\n658       MDU2     10\r\n659       MDU3     10\r\n660       MIC4     10\r\n661        KEL     10\r\n662    SLC14A1     10\r\n663         JK     10\r\n664        UTE     10\r\n665        UT1     10\r\n666        CR1     10\r\n667       C3BR     10\r\n668         LW     10\r\n669       FUT3     10\r\n670         LE     10\r\n671       GYPA     10\r\n672         MN     10\r\n673        GPA     10\r\n674        BSG     10\r\n675     A4GALT     10\r\n676         PK     10\r\n677    B3GALT3     10\r\n678      GLCT3     10\r\n679       RHCE     10\r\n680       GYPB     10\r\n681         SS     10\r\n682        MNS     10\r\n683         XG     10\r\n684       ACHE     10\r\n685         YT     10\r\n686     RECQL3     10\r\n687      RECQ2     10\r\n688        BLM     10\r\n689         BS     10\r\n690     OPN1LW     10\r\n691        RCP     10\r\n692        CBP     10\r\n693       CBBM     10\r\n694     OPN1MW     10\r\n695        GCP     10\r\n696        CBD     10\r\n697       FUT1     10\r\n698          H     10\r\n699         HH     10\r\n700       FUT2     10\r\n701         SE     10\r\n702       LRP5     10\r\n703      BMND1     10\r\n704       LRP7     10\r\n705        LR3     10\r\n706       OPPG     10\r\n707      VBCH2     10\r\n708       PHF6     10\r\n709       BFLS     10\r\n710      RLBP1     10\r\n711     BMPR1B     10\r\n712       ALK6     10\r\n713       ROR2     10\r\n714       BDB1     10\r\n715        BDB     10\r\n716     NTRKR2     10\r\n717     HOXD13     10\r\n718      HOX4I     10\r\n719        SPD     10\r\n720       R9AP     10\r\n721       RGS9     10\r\n722      PERRS     10\r\n723      CHEK2     10\r\n724      RAD53     10\r\n725       CHK2     10\r\n726       CDS1     10\r\n727       LFS2     10\r\n728     PIK3CA     10\r\n729      PPM1D     10\r\n730       WIP1     10\r\n731   SLC22A1L     10\r\n732    BWSCR1A     10\r\n733      IMPT1     10\r\n734      BRCA1      8\r\n735       PSCP      8\r\n736      BRCA2      8\r\n737     FANCD1      8\r\n738     TSG101      8\r\n739      BRIP1      8\r\n740      BACH1      8\r\n741      FANCJ      8\r\n742     RAD54L      8\r\n743       HR54      8\r\n744     HRAD54      8\r\n745       CDH1      8\r\n746        UVO      8\r\n747     RB1CC1      8\r\n748        CC1      8\r\n749   KIAA0203      8\r\n750        PHB      8\r\n751      BARD1      8\r\n752     RAD51A      8\r\n753       RECA      8\r\n754      XRCC3      8\r\n755     ATP2A1      8\r\n756     SERCA1      8\r\n757      PLOD2      8\r\n758      SCN5A      8\r\n759       LQT3      8\r\n760        IVF      8\r\n761        HB1      8\r\n762       SSS1      8\r\n763       MAOA      8\r\n764        MYC      8\r\n765      LEMD3      8\r\n766       MAN1      8\r\n767        RDS      8\r\n768        RP7      8\r\n769      PRPH2      8\r\n770       AVMD      8\r\n771      AOFMD      8\r\n772       C1QA      8\r\n773       C1QB      8\r\n774       C1QG      8\r\n775        C1S      8\r\n776         C2      8\r\n777         IF      8\r\n778         C3      8\r\n779        C4A      8\r\n780        C4S      8\r\n781        C4B      8\r\n782        C4F      8\r\n783         C6      8\r\n784         C7      8\r\n785        C8B      8\r\n786         C9      8\r\n787       MSH2      8\r\n788      COCA1      8\r\n789       FCC1      8\r\n790     HNPCC1      8\r\n791       MLH1      8\r\n792      COCA2      8\r\n793     HNPCC2      8\r\n794     COL1A1      8\r\n795      FGF23      8\r\n796       ADHR      8\r\n797      HPDR2      8\r\n798      PHPTC      8\r\n799     GALNT3      8\r\n800       PRG4      8\r\n801       CACP      8\r\n802        MSF      8\r\n803        SZP      8\r\n804       HAPO      8\r\n805      TGFB1      8\r\n806       DPD1      8\r\n807        CED      8\r\n808       ASPA      8\r\n809      FGFR4      8\r\n810       MSH6      8\r\n811       GTBP      8\r\n812     HNPCC5      8\r\n813       CPS1      8\r\n814       PMM2      8\r\n815       CDG1      8\r\n816        MPI      8\r\n817       PMI1      8\r\n818      MGAT2      8\r\n819      CDGS2      8\r\n820       CPN1      8\r\n821       SCPN      8\r\n822        CPN      8\r\n823       SDHD      8\r\n824       PGL1      8\r\n825       SCO2      8\r\n826       MYL3      8\r\n827       CMH8      8\r\n828       ACTC      8\r\n829       MYH7      8\r\n830       CMH1      8\r\n831       MPD1      8\r\n832       LMNA      8\r\n833       LMN1      8\r\n834       EMD2      8\r\n835       FPLD      8\r\n836      CMD1A      8\r\n837       HGPS      8\r\n838     LGMD1B      8\r\n839      TNNT2      8\r\n840       CMH2      8\r\n841      CMD1D      8\r\n842        TTN      8\r\n843      CMD1G      8\r\n844        DES      8\r\n845      CMD1I      8\r\n846       EYA4      8\r\n847     DFNA10      8\r\n848      CMD1J      8\r\n849       SGCD      8\r\n850        SGD      8\r\n851     LGMD2F      8\r\n852      CMD1L      8\r\n853      CSRP3      8\r\n854       CRP3      8\r\n855        CLP      8\r\n856      CMD1M      8\r\n857       TCAP      8\r\n858     LGMD2G      8\r\n859      CMD1N      8\r\n860      ABCC9      8\r\n861       SUR2      8\r\n862       MYL2      8\r\n863      CMH10      8\r\n864       CAV3      8\r\n865     LGMD1C      8\r\n866      TNNC1      8\r\n867       TPM1      8\r\n868       CMH3      8\r\n869      TNNI3      8\r\n870     MYBPC3      8\r\n871       CMH4      8\r\n872        TMD      8\r\n873     LGMD2J      8\r\n874      COX15      8\r\n875      MYLK2      8\r\n876       MLCK      8\r\n877     PRKAG2      8\r\n878       WPWS      8\r\n879        PLN      8\r\n880        PLB      8\r\n881       MYH8      8\r\n882   SLC25A20      8\r\n883       CACT      8\r\n884        CAC      8\r\n885    SLC22A5      8\r\n886      OCTN2      8\r\n887       CDSP      8\r\n888        SCD      8\r\n889       RMRP      8\r\n890      RMRPR      8\r\n891        CHH      8\r\n892      CRYAA      8\r\n893      CRYA1      8\r\n894     CRYBB2      8\r\n895      CRYB2      8\r\n896      BFSP2      8\r\n897       CP49      8\r\n898       CP47      8\r\n899     CRYBA1      8\r\n900      CRYB1      8\r\n901      CRYGC      8\r\n902      CRYG3      8\r\n903        CCL      8\r\n904       LIM2      8\r\n905       MP19      8\r\n906      CRYGD      8\r\n907      CRYG4      8\r\n908       HSF4      8\r\n909        CTM      8\r\n910        MIP      8\r\n911       AQP0      8\r\n912      CRYAB      8\r\n913      CRYA2      8\r\n914      CTPP2      8\r\n915     CRYBB1      8\r\n916       GJA8      8\r\n917       CX50      8\r\n918       CAE1      8\r\n919       GJA3      8\r\n920       CX46      8\r\n921       CZP3      8\r\n922       CAE3      8\r\n923       CCM1      8\r\n924        CAM      8\r\n925      KRIT1      8\r\n926       CD59      8\r\n927      MIC11      8\r\n928       CD8A      8\r\n929       RYR1      8\r\n930        MHS      8\r\n931        CCO      8\r\n932       GDNF      8\r\n933       BDNF      8\r\n934       EDN3      8\r\n935      PMX2B      8\r\n936     NBPHOX      8\r\n937     PHOX2B      8\r\n938        RET      8\r\n939      MEN2A      8\r\n940         CP      8\r\n941    CACNA1A      8\r\n942   CACNL1A4      8\r\n943       SCA6      8\r\n944      VLDLR      8\r\n945    VLDLRCH      8\r\n946      ABCA1      8\r\n947       ABC1      8\r\n948     HDLDT1      8\r\n949        TGD      8\r\n950       CST3      8\r\n951     NOTCH3      8\r\n952    CADASIL      8\r\n953      CASIL      8\r\n954    C7orf22      8\r\n955       CCM2      8\r\n956    MGC4067      8\r\n957     PDCD10      8\r\n958     TFAR15      8\r\n959       CCM3      8\r\n960     SNAP29      8\r\n961     CEDNIK      8\r\n962      ERCC2      8\r\n963        EM9      8\r\n964      ERCC5      8\r\n965        XPG      8\r\n966      ERCC6      8\r\n967       CKN2      8\r\n968       COFS      8\r\n969        CSB      8\r\n970    CYP27A1      8\r\n971      CYP27      8\r\n972        CTX      8\r\n973       PPT1      8\r\n974       CLN1      8\r\n975       CLN2      8\r\n976       CLN3      8\r\n977        BTS      8\r\n978       CLN5      8\r\n979       CLN6      8\r\n980       CLN8      8\r\n981       EPMR      8\r\n982       CETP      8\r\n983      ABHD5      8\r\n984      CGI58      8\r\n985      IECN2      8\r\n986      NCIE2      8\r\n987      HSPB1      8\r\n988      HSP27      8\r\n989      CMT2F      8\r\n990        MPZ      8\r\n991      CMT1B      8\r\n992     CMTDI3      8\r\n993        CHM      8\r\n994        DSS      8\r\n995       DNM2      8\r\n996     HOXD10      8\r\n997      HOX4D      8\r\n998      GDAP1      8\r\n999      CMT4A      8\r\n1000     CMT2K      8\r\n1001     CMT2G      8\r\n1002     PMP22      8\r\n1003     CMT1A      8\r\n1004     CMT1E      8\r\n1005     LITAF      8\r\n1006     CMT1C      8\r\n1007      EGR2      8\r\n1008    KROX20      8\r\n1009      NEFL      8\r\n1010     CMT2E      8\r\n1011     CMT1F      8\r\n1012     KIF1B      8\r\n1013     CMT2A      8\r\n1014    CMT2A1      8\r\n1015      MFN2      8\r\n1016  KIAA0214      8\r\n1017    CMT2A2      8\r\n1018      RAB7      8\r\n1019     CMT2B      8\r\n1020       PSN      8\r\n1021      GARS      8\r\n1022     SMAD1      8\r\n1023     CMT2D      8\r\n1024     MTMR2      8\r\n1025    CMT4B1      8\r\n1026      SBF2      8\r\n1027    MTMR13      8\r\n1028    CMT4B2      8\r\n1029  KIAA1985      8\r\n1030     NDRG1      8\r\n1031     HMSNL      8\r\n1032     CMT4D      8\r\n1033      GJB1      8\r\n1034      CX32      8\r\n1035     CMTX1      8\r\n1036      CHD7      8\r\n1037    TFAP2B      8\r\n1038      CHAR      8\r\n1039      CHS1      8\r\n1040      LYST      8\r\n1041    SH3BP2      8\r\n1042      CRPM      8\r\n1043     NSDHL      8\r\n1044      CHIT      8\r\n1045   SLC26A3      8\r\n1046       DRA      8\r\n1047       CLD      8\r\n1048     ABCB4      8\r\n1049      PGY3      8\r\n1050      MDR3      8\r\n1051    ATP8B1      8\r\n1052      FIC1      8\r\n1053      BRIC      8\r\n1054     PFIC1      8\r\n1055    ABCB11      6\r\n1056      BSEP      6\r\n1057      SPGP      6\r\n1058     PFIC2      6\r\n1059    HSD3B7      6\r\n1060     PFIC4      6\r\n1061      LIPA      6\r\n1062      ANKH      6\r\n1063      HANK      6\r\n1064       ANK      6\r\n1065      CMDJ      6\r\n1066     CCAL2      6\r\n1067     CPPDD      6\r\n1068     GNPAT      6\r\n1069    DHAPAT      6\r\n1070       EBP      6\r\n1071     CDPX2      6\r\n1072      CPXD      6\r\n1073       CPX      6\r\n1074      ARSE      6\r\n1075     CDPX1      6\r\n1076     CDPXR      6\r\n1077      EXT1      6\r\n1078      CSMF      6\r\n1079     EWSR1      6\r\n1080       EWS      6\r\n1081     TITF1      6\r\n1082     NKX2A      6\r\n1083      TTF1      6\r\n1084    VPS13A      6\r\n1085      CHAC      6\r\n1086       TCD      6\r\n1087     PSAP2      6\r\n1088   PROSAP2      6\r\n1089  KIAA1650      6\r\n1090      CYBA      6\r\n1091      NCF1      6\r\n1092      NCF2      6\r\n1093      CYBB      6\r\n1094       CGD      6\r\n1095      MBL2      6\r\n1096       MBL      6\r\n1097      MBP1      6\r\n1098       LPL      6\r\n1099      LIPD      6\r\n1100     DNAI1      6\r\n1101     CILD1      6\r\n1102       ICS      6\r\n1103       PCD      6\r\n1104     DNAH5      6\r\n1105       HL1      6\r\n1106     CILD3      6\r\n1107     CIAS1      6\r\n1108    C1orf7      6\r\n1109       FCU      6\r\n1110      FCAS      6\r\n1111     KRT18      6\r\n1112      KRT8      6\r\n1113    CIRH1A      6\r\n1114      NAIC      6\r\n1115    TEX292      6\r\n1116  KIAA1988      6\r\n1117       ASS      6\r\n1118  SLC25A13      6\r\n1119     CTLN2      6\r\n1120      HVEC      6\r\n1121     PVRL1      6\r\n1122     PVRR1      6\r\n1123      PRR1      6\r\n1124      MSX1      6\r\n1125      HOX7      6\r\n1126      HYD1      6\r\n1127      OFC5      6\r\n1128     TBX22      6\r\n1129     RUNX2      6\r\n1130     CBFA1      6\r\n1131   PEBP2A1      6\r\n1132      AML3      6\r\n1133       NDP      6\r\n1134        ND      6\r\n1135     ERCC8      6\r\n1136      CKN1      6\r\n1137       CSA      6\r\n1138    CYP2D@      6\r\n1139     CYP2D      6\r\n1140   P450C2D      6\r\n1141   RPS6KA3      6\r\n1142      RSK2      6\r\n1143     MRX19      6\r\n1144      COH1      6\r\n1145     ABCB1      6\r\n1146      PGY1      6\r\n1147      MDR1      6\r\n1148     CRLF1      6\r\n1149      CISS      6\r\n1150       SHH      6\r\n1151      HPE3      6\r\n1152      HLP3      6\r\n1153     SMMCI      6\r\n1154    RAD54B      6\r\n1155     BCL10      6\r\n1156    PTPN12      6\r\n1157     PTPG1      6\r\n1158    TGFBR2      6\r\n1159    HNPCC6      6\r\n1160       SRC      6\r\n1161       ASV      6\r\n1162      SRC1      6\r\n1163      MLH3      6\r\n1164    HNPCC7      6\r\n1165     PTPRJ      6\r\n1166      DEP1      6\r\n1167      ODC1      6\r\n1168    OPN1SW      6\r\n1169       BCP      6\r\n1170       CBT      6\r\n1171     AXIN2      6\r\n1172     BUB1B      6\r\n1173     BUBR1      6\r\n1174     EP300      6\r\n1175    PDGFRL      6\r\n1176     PDGRL      6\r\n1177     PRLTS      6\r\n1178       BAX      6\r\n1179    CTNNB1      6\r\n1180       DCC      6\r\n1181       MCC      6\r\n1182      NRAS      6\r\n1183      PMS1      6\r\n1184     PMSL1      6\r\n1185    HNPCC3      6\r\n1186      PMS2      6\r\n1187     PMSL2      6\r\n1188    HNPCC4      6\r\n1189      DLC1      6\r\n1190   PLA2G2A      6\r\n1191     PLA2B      6\r\n1192     PLA2L      6\r\n1193      MOM1      6\r\n1194     CCND1      6\r\n1195     PRAD1      6\r\n1196      BCL1      6\r\n1197      BUB1      6\r\n1198     LMAN1      6\r\n1199   ERGIC53      6\r\n1200     F5F8D      6\r\n1201     MCFD1      6\r\n1202     IL2RG      6\r\n1203    SCIDX1      6\r\n1204     SCIDX      6\r\n1205      IMD4      6\r\n1206      GFM1      6\r\n1207      EFG1      6\r\n1208       GFM      6\r\n1209      PSAP      6\r\n1210      SAP1      6\r\n1211    NDUFS6      6\r\n1212    ATPAF2      6\r\n1213     ATP12      6\r\n1214      RPGR      6\r\n1215       RP3      6\r\n1216       CRD      6\r\n1217      RP15      6\r\n1218      COD1      6\r\n1219    GUCA1A      6\r\n1220      GCAP      6\r\n1221     ABCA4      6\r\n1222      ABCR      6\r\n1223     STGD1      6\r\n1224       FFM      6\r\n1225      RP19      6\r\n1226     AIPL1      6\r\n1227      LCA4      6\r\n1228    GUCY2D      6\r\n1229     GUC2D      6\r\n1230      LCA1      6\r\n1231     CORD6      6\r\n1232   RPGRIP1      6\r\n1233      LCA6      6\r\n1234     CORD9      6\r\n1235       CRX      6\r\n1236     CORD2      6\r\n1237      CFTR      6\r\n1238     ABCC7      6\r\n1239        CF      6\r\n1240      MRP7      6\r\n1241     CTDP1      6\r\n1242      FCP1      6\r\n1243     CCFDN      6\r\n1244      ALG6      6\r\n1245      ALG3      6\r\n1246    NOT56L      6\r\n1247     CDGS4      6\r\n1248      DPM1      6\r\n1249      MPDS      6\r\n1250     CDGIE      6\r\n1251     MPDU1      6\r\n1252      SL15      6\r\n1253     CDGIF      6\r\n1254     ALG12      6\r\n1255      ALG8      6\r\n1256      ALG2      6\r\n1257     CDGII      6\r\n1258     DIBD1      6\r\n1259      ALG9      6\r\n1260   SLC35C1      6\r\n1261     FUCT1      6\r\n1262   B4GALT1      6\r\n1263     GGTB2      6\r\n1264       GT1      6\r\n1265       GTB      6\r\n1266      COG7      6\r\n1267     CDG2E      6\r\n1268    DPAGT2      6\r\n1269      DGPT      6\r\n1270      ALG1      6\r\n1271     HMAT1      6\r\n1272      HMT1      6\r\n1273    ADRA2C      6\r\n1274   ADRA2L2      6\r\n1275     ADRB1      6\r\n1276    ADRB1R      6\r\n1277       RHR      6\r\n1278       PLG      6\r\n1279      TBX1      6\r\n1280       DGS      6\r\n1281      CTHM      6\r\n1282      CAFS      6\r\n1283       TGA      6\r\n1284      DORV      6\r\n1285      VCFS      6\r\n1286      DGCR      6\r\n1287      FBN2      6\r\n1288       CCA      6\r\n1289     MASS1      6\r\n1290     VLGR1      6\r\n1291  KIAA0686      6\r\n1292      FEB4      6\r\n1293     USH2C      6\r\n1294      MMP1      6\r\n1295       CLG      6\r\n1296       CPO      6\r\n1297     TGFBI      6\r\n1298      CSD2      6\r\n1299     CDGG1      6\r\n1300       CSD      6\r\n1301     BIGH3      6\r\n1302      CDG2      6\r\n1303   TACSTD2      6\r\n1304     TROP2      6\r\n1305      M1S1      6\r\n1306      VSX1      6\r\n1307      RINX      6\r\n1308      PPCD      6\r\n1309      KTCN      6\r\n1310    COL8A2      6\r\n1311      FECD      6\r\n1312     PPCD2      6\r\n1313    PIP5K3      6\r\n1314       CFD      6\r\n1315      KERA      6\r\n1316      CNA2      6\r\n1317     NIPBL      6\r\n1318      CDLS      6\r\n1319     MEF2A      6\r\n1320    ADCAD1      6\r\n1321        KL      6\r\n1322      PON1      6\r\n1323       PON      6\r\n1324       ESA      6\r\n1325      PON2      6\r\n1326      MMP3      6\r\n1327     STMY1      6\r\n1328     IGBP1      6\r\n1329     NR3C1      6\r\n1330       GCR      6\r\n1331       GRL      6\r\n1332       GDH      6\r\n1333   HSD11B1      6\r\n1334     HSD11      6\r\n1335    HSD11L      6\r\n1336    CYP2A6      6\r\n1337    CYP2A3      6\r\n1338     CYP2A      6\r\n1339   P450C2A      6\r\n1340    BMPR1A      6\r\n1341   ACVRLK3      6\r\n1342      ALK3      6\r\n1343     CPT1A      6\r\n1344      CPT2      6\r\n1345     SCN4A      6\r\n1346      HYPP      6\r\n1347     NAC1A      6\r\n1348      PAX3      6\r\n1349       WS1      6\r\n1350      HUP2      6\r\n1351      CDHS      6\r\n1352     EFNB1      6\r\n1353     EPLG2      6\r\n1354      CFNS      6\r\n1355      CFND      6\r\n1356      MSX2      6\r\n1357      CRS2      6\r\n1358      HOX8      6\r\n1359     L1CAM      6\r\n1360     CAML1      6\r\n1361     HSAS1      6\r\n1362    SLC6A8      6\r\n1363      CRTR      6\r\n1364      PRNP      6\r\n1365      PRIP      6\r\n1366  HLA-DQB1      6\r\n1367    UGT1A1      6\r\n1368      UGT1      6\r\n1369      GNT1      6\r\n1370      DLG5      6\r\n1371      PDLG      6\r\n1372  KIAA0583      6\r\n1373      LGR8      6\r\n1374     GREAT      6\r\n1375     INSL3      6\r\n1376     HLXB9      6\r\n1377    HOXHB9      6\r\n1378     SCRA1      6\r\n1379       ELN      6\r\n1380     FBLN5      6\r\n1381     ARMD3      6\r\n1382     ATP7A      6\r\n1383       MNK      6\r\n1384        MK      6\r\n1385       OHS      6\r\n1386      KRT1      6\r\n1387     CYLD1      6\r\n1388      CDMT      6\r\n1389       EAC      6\r\n1390       CTH      6\r\n1391      CTNS      6\r\n1392    SLC3A1      6\r\n1393      ATR1      6\r\n1394       D2H      6\r\n1395      NBAT      6\r\n1396    SLC7A9      6\r\n1397     CSNU3      6\r\n1398     D2HGD      6\r\n1399   HSD17B4      6\r\n1400    DIAPH1      6\r\n1401     DFNA1      6\r\n1402     LFHL1      6\r\n1403     MYO7A      6\r\n1404     USH1B      6\r\n1405     DFNB2      6\r\n1406    DFNA11      6\r\n1407     TECTA      6\r\n1408     DFNA8      6\r\n1409    DFNA12      6\r\n1410    DFNB21      6\r\n1411   COL11A2      6\r\n1412      STL3      6\r\n1413    DFNA13      6\r\n1414    POU4F3      6\r\n1415     BRN3C      6\r\n1416      MYH9      6\r\n1417       MHA      6\r\n1418      FTNS      6\r\n1419    DFNA17      6\r\n1420     ACTG1      6\r\n1421    DFNA20      6\r\n1422    DFNA26      6\r\n1423      MYO6      6\r\n1424    DFNA22      6\r\n1425    DFNB37      6\r\n1426      GJB3      6\r\n1427      CX31      6\r\n1428     DFNA2      6\r\n1429     KCNQ4      6\r\n1430   TFCP2L3      6\r\n1431    DFNA28      6\r\n1432      GJB6      6\r\n1433      CX30      6\r\n1434       HED      6\r\n1435       ED2      6\r\n1436      TMC1      6\r\n1437     DFNB7      6\r\n1438    DFNB11      6\r\n1439    DFNA36      6\r\n1440      DSPP      6\r\n1441       DPP      6\r\n1442      DGI1      6\r\n1443    DFNA39      6\r\n1444     DTDP2      6\r\n1445      CRYM      6\r\n1446    DFNA40      6\r\n1447     MYH14      6\r\n1448  KIAA2034      6\r\n1449     DFNA4      6\r\n1450     DFNA5      6\r\n1451      COCH      6\r\n1452     DFNA9      6\r\n1453     MYO1A      6\r\n1454   TMPRSS3      6\r\n1455    ECHOS1      6\r\n1456     DFNB8      6\r\n1457    DFNB10      6\r\n1458     CDH23      6\r\n1459     USH1D      6\r\n1460    ATP2B2      6\r\n1461     PMCA2      6\r\n1462      STRC      6\r\n1463    DFNB16      6\r\n1464     USH1C      6\r\n1465    DFNB18      6\r\n1466      OTOA      6\r\n1467    DFNB22      6\r\n1468    PCDH15      6\r\n1469    DFNB23      6\r\n1470    CLDN14      6\r\n1471    DFNB29      6\r\n1472     MYO3A      6\r\n1473    DFNB30      6\r\n1474      WHRN      6\r\n1475     CIP98      6\r\n1476  KIAA1526      6\r\n1477    DFNB31      6\r\n1478    MYO15A      6\r\n1479     DFNB3      6\r\n1480      ESPN      6\r\n1481   SLC26A4      6\r\n1482       PDS      6\r\n1483     DFNB4      6\r\n1484      PRES      6\r\n1485    DFNB61      6\r\n1486   SLC26A5      6\r\n1487      TMIE      6\r\n1488     DFNB6      6\r\n1489      OTOF      6\r\n1490     DFNB9      6\r\n1491     NSRD9      6\r\n1492  KIAA1199      6\r\n1493    TIMM8A      6\r\n1494      DFN1      6\r\n1495       DDP      6\r\n1496       MTS      6\r\n1497      DDP1      6\r\n1498    POU3F4      6\r\n1499      DFN3      6\r\n1500       PRX      6\r\n1501     CMT4F      6\r\n1502     AANAT      6\r\n1503      SNAT      6\r\n1504     ITM2B      6\r\n1505       BRI      6\r\n1506      ABRI      6\r\n1507       FBD      6\r\n1508      MAPT      6\r\n1509     MTBT1      6\r\n1510     DDPAC      6\r\n1511      MSTD      6\r\n1512      SNCA      6\r\n1513      NACP      6\r\n1514     PARK1      6\r\n1515     PARK4      6\r\n1516      SNCB      6\r\n1517     CD209      6\r\n1518    CDSIGN      6\r\n1519     DRPLA      6\r\n1520     CLCN5      6\r\n1521     CLCK2      6\r\n1522     NPHL2      6\r\n1523     DENTS      6\r\n1524      OCRL      6\r\n1525      LOCR      6\r\n1526     OCRL1      6\r\n1527       WT1      6\r\n1528     PDGFB      6\r\n1529       SIS      6\r\n1530    DHCR24      6\r\n1531  KIAA0018      6\r\n1532     AVPR2      6\r\n1533       DIR      6\r\n1534       DI1      6\r\n1535      AQP2      6\r\n1536       AVP      6\r\n1537      AVRP      6\r\n1538        VP      6\r\n1539     ABCC8      6\r\n1540       SUR      6\r\n1541      PHHI      6\r\n1542      SUR1      6\r\n1543      TCF1      6\r\n1544     HNF1A      6\r\n1545     MODY3      6\r\n1546     SUMO4      6\r\n1547     IDDM5      6\r\n1548     PTPN8      6\r\n1549       PEP      6\r\n1550    PTPN22      6\r\n1551       LYP      6\r\n1552      INSR      6\r\n1553     PPARG      6\r\n1554    PPARG1      6\r\n1555    PPARG2      6\r\n1556       GCK      6\r\n1557      GCGR      6\r\n1558      GPD2      6\r\n1559     HNF4A      6\r\n1560     TCF14      6\r\n1561     MODY1      6\r\n1562      IRS2      6\r\n1563  MAPK8IP1      6\r\n1564       IB1      6\r\n1565   NEUROD1      6\r\n1566     NIDDM      6\r\n1567      TCF2      6\r\n1568      HNF2      6\r\n1569      IRS1      6\r\n1570    SLC2A2      6\r\n1571     GLUT2      6\r\n1572    SLC2A4      6\r\n1573     GLUT4      6\r\n1574    CAPN10      6\r\n1575     ENPP1      6\r\n1576     PDNP1      6\r\n1577      NPPS      6\r\n1578      M6S1      6\r\n1579      PCA1      6\r\n1580      RETN      6\r\n1581      RSTN      6\r\n1582     FIZZ3      6\r\n1583     PTF1A      6\r\n1584    KCNJ11      6\r\n1585       BIR      6\r\n1586      AKT2      6\r\n1587      IPF1      6\r\n1588     FOXP3      6\r\n1589      IPEX      6\r\n1590      AIID      6\r\n1591      XPID      6\r\n1592      PIDX      6\r\n1593      VEGF      6\r\n1594      DPYS      6\r\n1595       DHP      6\r\n1596     DMGDH      6\r\n1597    DMGDHD      6\r\n1598      LIG1      6\r\n1599      TOP1      6\r\n1600     TOP2A      6\r\n1601      TOP2      6\r\n1602       DBH      6\r\n1603      CFC1      6\r\n1604   CRYPTIC      6\r\n1605      HTX2      6\r\n1606       MTR      6\r\n1607    EFEMP1      6\r\n1608      FBNL      6\r\n1609      DHRD      6\r\n1610      FAAH      6\r\n1611     SALL4      6\r\n1612     HSAL4      6\r\n1613     ABCC2      6\r\n1614     CMOAT      6\r\n1615       DYM      6\r\n1616  FLJ90130      6\r\n1617       DMC      6\r\n1618       SMC      6\r\n1619    IKBKAP      6\r\n1620      IKAP      6\r\n1621      ADAR      6\r\n1622     DRADA      6\r\n1623       DSH      6\r\n1624     DSRAD      6\r\n1625     GATA1      6\r\n1626       GF1      6\r\n1627     ERYF1      6\r\n1628      NFE1      6\r\n1629       FGG      6\r\n1630      DKC1      6\r\n1631       DKC      6\r\n1632    DYX1C1      6\r\n1633     DYXC1      6\r\n1634      DYX1      6\r\n1635  KIAA0319      6\r\n1636      DYX2      6\r\n1637     DYLX2      6\r\n1638      DLX2      6\r\n1639        F2      6\r\n1640     HSPG2      6\r\n1641       PLC      6\r\n1642       SJS      4\r\n1643       SJA      4\r\n1644      SJS1      4\r\n1645    ATP1A3      4\r\n1646     DYT12      4\r\n1647       RDP      4\r\n1648      DYT1      4\r\n1649     TOR1A      4\r\n1650      GCH1      4\r\n1651      DYT5      4\r\n1652      DRD2      4\r\n1653      SGCE      4\r\n1654     DYT11      4\r\n1655    COL7A1      4\r\n1656       ED1      4\r\n1657       EDA      4\r\n1658   EDARADD      4\r\n1659     IKBKG      4\r\n1660      NEMO      4\r\n1661      FIP3      4\r\n1662       IP2      4\r\n1663    NFKBIA      4\r\n1664      IKBA      4\r\n1665      EDAR      4\r\n1666        DL      4\r\n1667       ED3      4\r\n1668      EDA3      4\r\n1669      PKP1      4\r\n1670      TNXB      4\r\n1671       TNX      4\r\n1672     TNXB1      4\r\n1673     TNXBS      4\r\n1674     TNXB2      4\r\n1675   B4GALT7      4\r\n1676    XGALT1      4\r\n1677     XGPT1      4\r\n1678    COL5A1      4\r\n1679    COL5A2      4\r\n1680      PLOD      4\r\n1681     PLOD1      4\r\n1682    COL1A2      4\r\n1683   ADAMTS2      4\r\n1684       NPI      4\r\n1685     EPB41      4\r\n1686       EL1      4\r\n1687     SPTA1      4\r\n1688       EVC      4\r\n1689       LBN      4\r\n1690      EVC2      4\r\n1691       EMD      4\r\n1692      EDMD      4\r\n1693       STA      4\r\n1694        PI      4\r\n1695       AAT      4\r\n1696  SERPINI1      4\r\n1697      PI12      4\r\n1698     COX10      4\r\n1699     PTHR1      4\r\n1700      PTHR      4\r\n1701      MSH3      4\r\n1702      TLR4      4\r\n1703      COLQ      4\r\n1704       EAD      4\r\n1705     NR2E3      4\r\n1706       PNR      4\r\n1707      ESCS      4\r\n1708      ENO3      4\r\n1709     PRSS7      4\r\n1710      ENTK      4\r\n1711       EPX      4\r\n1712     EVER1      4\r\n1713       EV1      4\r\n1714     EVER2      4\r\n1715       EV2      4\r\n1716   COL17A1      4\r\n1717     BPAG2      4\r\n1718     ITGB4      4\r\n1719     LAMA3      4\r\n1720      LOCS      4\r\n1721     LAMB3      4\r\n1722     LAMC2      4\r\n1723    LAMNB2      4\r\n1724    LAMB2T      4\r\n1725     ITGA6      4\r\n1726     KRT14      4\r\n1727      KRT5      4\r\n1728     PLEC1      4\r\n1729      PLTN      4\r\n1730      EBS1      4\r\n1731     KRT10      4\r\n1732      KRT9      4\r\n1733      EPPK      4\r\n1734     KCNQ2      4\r\n1735      EBN1      4\r\n1736     KCNQ3      4\r\n1737      EBN2      4\r\n1738     BFNC2      4\r\n1739    GABRG2      4\r\n1740    GEFSP3      4\r\n1741      CAE2      4\r\n1742      ECA2      4\r\n1743     CLCN2      4\r\n1744      EGMA      4\r\n1745      ECA3      4\r\n1746      EGI3      4\r\n1747       JRK      4\r\n1748       JH8      4\r\n1749     SCN1A      4\r\n1750    GEFSP2      4\r\n1751      SMEI      4\r\n1752       ME2      4\r\n1753    GABRA1      4\r\n1754     EPM2A      4\r\n1755      MELF      4\r\n1756      EPM2      4\r\n1757    NHLRC1      4\r\n1758     EPM2B      4\r\n1759  SLC25A22      4\r\n1760       GC1      4\r\n1761    CHRNA4      4\r\n1762     ENFL1      4\r\n1763    CHRNB2      4\r\n1764     EFNL3      4\r\n1765      LGI1      4\r\n1766       EPT      4\r\n1767      ETL1      4\r\n1768      CSTB      4\r\n1769      STFB      4\r\n1770      EPM1      4\r\n1771      SYN1      4\r\n1772      COMP      4\r\n1773      EDM1      4\r\n1774       MED      4\r\n1775     PSACH      4\r\n1776    COL9A3      4\r\n1777      EDM3      4\r\n1778       IDD      4\r\n1779     MATN3      4\r\n1780      EDM5      4\r\n1781       HOA      4\r\n1782    COL9A1      4\r\n1783    COL9A2      4\r\n1784      EDM2      4\r\n1785     KCNA1      4\r\n1786      AEMK      4\r\n1787       EA1      4\r\n1788     OPCML      4\r\n1789     SCN9A      4\r\n1790      NENA      4\r\n1791       PN1      4\r\n1792      HBA1      4\r\n1793       HBB      4\r\n1794      HBA2      4\r\n1795      EPOR      4\r\n1796       LOR      4\r\n1797      GJB4      4\r\n1798    CX30.3      4\r\n1799      RNF6      4\r\n1800     LZTS1      4\r\n1801       F37      4\r\n1802      FEZ1      4\r\n1803      WWOX      4\r\n1804       FOR      4\r\n1805      ESR1      4\r\n1806       ESR      4\r\n1807     ETHE1      4\r\n1808      HSCO      4\r\n1809    D83198      4\r\n1810      LDHA      4\r\n1811      LDH1      4\r\n1812      EXT2      4\r\n1813      FZD4      4\r\n1814      EVR1      4\r\n1815    NPC1L1      4\r\n1816       GLA      4\r\n1817   FSHMD1A      4\r\n1818    FSHD1A      4\r\n1819       HF1      4\r\n1820       CFH      4\r\n1821       HUS      4\r\n1822     MCFD2      4\r\n1823        F7      4\r\n1824       F10      4\r\n1825       F11      4\r\n1826       F12      4\r\n1827       HAF      4\r\n1828     F13A1      4\r\n1829      F13A      4\r\n1830      F13B      4\r\n1831      MEFV      4\r\n1832       MEF      4\r\n1833       FMF      4\r\n1834     FANCA      4\r\n1835      FACA      4\r\n1836       FA1      4\r\n1837        FA      4\r\n1838       FAA      4\r\n1839    FAAP95      4\r\n1840    FAAP90      4\r\n1841  FLJ34064      4\r\n1842     FANCB      4\r\n1843     FANCC      4\r\n1844      FACC      4\r\n1845    FANCD2      4\r\n1846     FANCD      4\r\n1847      FACD      4\r\n1848       FAD      4\r\n1849     FANCE      4\r\n1850      FACE      4\r\n1851     FANCF      4\r\n1852     XRCC9      4\r\n1853     FANCG      4\r\n1854      PHF9      4\r\n1855     FANCL      4\r\n1856     FANCM      4\r\n1857  KIAA1596      4\r\n1858      ASAH      4\r\n1859        AC      4\r\n1860     HADHA      4\r\n1861      MTPA      4\r\n1862      G6PD      4\r\n1863     G6PD1      4\r\n1864      MYCN      4\r\n1865      NMYC      4\r\n1866      ODED      4\r\n1867     MODED      4\r\n1868     GNRHR      4\r\n1869     LHRHR      4\r\n1870    SPINK1      4\r\n1871      PSTI      4\r\n1872      PCTT      4\r\n1873      TATI      4\r\n1874      SOS1      4\r\n1875     GINGF      4\r\n1876       HGF      4\r\n1877    ANTXR2      4\r\n1878      CMG2      4\r\n1879       JHF      4\r\n1880       ISH      4\r\n1881    KIF21A      4\r\n1882  KIAA1708      4\r\n1883     FEOM1      4\r\n1884    CFEOM1      4\r\n1885    PHOX2A      4\r\n1886      ARIX      4\r\n1887    CFEOM2      4\r\n1888      LCAT      4\r\n1889      FMO3      4\r\n1890       KNG      4\r\n1891      DPYD      4\r\n1892       DPD      4\r\n1893      TSC1      4\r\n1894       LAM      4\r\n1895      FSHB      4\r\n1896     TDGF1      4\r\n1897      FMR1      4\r\n1898     FRAXA      4\r\n1899     FRAS1      4\r\n1900     FREM2      4\r\n1901      FRDA      4\r\n1902      FARR      4\r\n1903      FLNA      4\r\n1904      FLN1      4\r\n1905      ABPX      4\r\n1906      NHBP      4\r\n1907      OPD1      4\r\n1908      OPD2      4\r\n1909       FMD      4\r\n1910      FBP1      4\r\n1911     ALDOB      4\r\n1912       KHK      4\r\n1913     FUCA1      4\r\n1914      FUT6      4\r\n1915        FH      4\r\n1916      RDH5      4\r\n1917      ABAT      4\r\n1918     GABAT      4\r\n1919     GALK1      4\r\n1920      GALE      4\r\n1921      GALT      4\r\n1922      PPGB      4\r\n1923       GSL      4\r\n1924      NGBE      4\r\n1925      GLB2      4\r\n1926      CTSA      4\r\n1927      GAMT      4\r\n1928      IRF1      4\r\n1929       MAR      4\r\n1930      IL1B      4\r\n1931     IL1RN      4\r\n1932      KLF6      4\r\n1933     COPEB      4\r\n1934      BCD1      4\r\n1935       ZF9      4\r\n1936       KIT      4\r\n1937       PBT      4\r\n1938    PDGFRA      4\r\n1939       GBA      4\r\n1940     ROBO3      4\r\n1941     RBIG1      4\r\n1942      RIG1      4\r\n1943     HGPPS      4\r\n1944    KCNMA1      4\r\n1945       SLO      4\r\n1946     SCN1B      4\r\n1947    GEFSP1      4\r\n1948       GAN      4\r\n1949      GAN1      4\r\n1950    CYP7B1      4\r\n1951   SLC12A3      4\r\n1952      NCCT      4\r\n1953       TSC      4\r\n1954    ITGA2B      4\r\n1955      GP2B      4\r\n1956     CD41B      4\r\n1957     ITGB3      4\r\n1958      GP3A      4\r\n1959      MYOC      4\r\n1960      TIGR      4\r\n1961     GLC1A      4\r\n1962      JOAG      4\r\n1963      GPOA      4\r\n1964      OPTN      4\r\n1965     GLC1E      4\r\n1966      FIP2      4\r\n1967      HYPL      4\r\n1968       NRP      4\r\n1969    CYP1B1      4\r\n1970     GLC3A      4\r\n1971      OPA1      4\r\n1972       NTG      4\r\n1973       NPG      4\r\n1974     DMBT1      4\r\n1975     ACTN4      4\r\n1976     FSGS1      4\r\n1977      FSGS      4\r\n1978     TRPC6      4\r\n1979      TRP6      4\r\n1980     FSGS2      4\r\n1981     CD2AP      4\r\n1982       CMS      4\r\n1983      GLML      4\r\n1984       GVM      4\r\n1985    VMGLOM      4\r\n1986      MRAP      4\r\n1987      FALP      4\r\n1988  C21orf61      4\r\n1989      MC2R      4\r\n1990    SLC5A1      4\r\n1991     SGLT1      4\r\n1992    SLC2A1      4\r\n1993     GLUT1      4\r\n1994      GCS1      4\r\n1995      FTCD      4\r\n1996      GCDH      4\r\n1997      ETFA      4\r\n1998       GA2      4\r\n1999      MADD      4\r\n2000      ETFB      4\r\n2001     ETFDH      4\r\n2002       GSS      4\r\n2003      GSHS      4\r\n2004        GK      4\r\n2005       AMT      4\r\n2006       NKH      4\r\n2007       GCE      4\r\n2008      GCSH      4\r\n2009      GLDC      4\r\n2010     HYGN1      4\r\n2011      GCSP      4\r\n2012      GNMT      4\r\n2013     PHKG2      4\r\n2014     PHKA2      4\r\n2015       PHK      4\r\n2016      G6PC      4\r\n2017      G6PT      4\r\n2018     G6PT1      4\r\n2019       GAA      4\r\n2020     LAMP2      4\r\n2021     LAMPB      4\r\n2022       AGL      4\r\n2023       GDE      4\r\n2024      GBE1      4\r\n2025      GYS2      4\r\n2026      PYGL      4\r\n2027      PFKM      4\r\n2028      GLB1      4\r\n2029      GM2A      4\r\n2030      HEXA      4\r\n2031       TSD      4\r\n2032   TMEM16E      4\r\n2033      GDD1      4\r\n2034       TPO      4\r\n2035       TPX      4\r\n2036  KIAA1279      4\r\n2037       DHH      4\r\n2038       SRY      4\r\n2039       TDF      4\r\n2040     BCS1L      4\r\n2041     FLNMS      4\r\n2042   GRACILE      4\r\n2043      IL10      4\r\n2044      CSIF      4\r\n2045     CTLA4      4\r\n2046        GC      4\r\n2047       DBP      4\r\n2048       LBR      4\r\n2049       PHA      4\r\n2050     MYO5A      4\r\n2051     MYH12      4\r\n2052       GS1      4\r\n2053    RAB27A      4\r\n2054       RAM      4\r\n2055       GS2      4\r\n2056      MLPH      4\r\n2057     GHRHR      4\r\n2058    STAT5B      4\r\n2059      IGF1      4\r\n2060    HOXA13      4\r\n2061     HOX1J      4\r\n2062       OAT      4\r\n2063    ATP2C1      4\r\n2064      BCPM      4\r\n2065       HHD      4\r\n2066      CTSC      4\r\n2067      CPPI      4\r\n2068      PALS      4\r\n2069       PLS      4\r\n2070       HMS      4\r\n2071     PANK2      4\r\n2072     NBIA1      4\r\n2073      PKAN      4\r\n2074      HARP      4\r\n2075   SLC6A19      4\r\n2076       HND      4\r\n2077      WFS1      4\r\n2078      WFRS      4\r\n2079       WFS      4\r\n2080     DFNA6      4\r\n2081       VHL      4\r\n2082      FLT4      4\r\n2083    VEGFR3      4\r\n2084       PCL      4\r\n2085       KDR      4\r\n2086      ELA2      4\r\n2087     HMOX1      4\r\n2088       HFE      4\r\n2089     HLA-H      4\r\n2090      HFE1      4\r\n2091      HAMP      4\r\n2092     LEAP1      4\r\n2093      HEPC      4\r\n2094      HFE2      4\r\n2095       HJV      4\r\n2096     HFE2A      4\r\n2097      TFR2      4\r\n2098      HFE3      4\r\n2099   SLC40A1      4\r\n2100   SLC11A3      4\r\n2101      FPN1      4\r\n2102     IREG1      4\r\n2103      HFE4      4\r\n2104       AK1      4\r\n2105      BPGM      4\r\n2106      GCLC      4\r\n2107     GLCLC      4\r\n2108       GPI      4\r\n2109       HK1      4\r\n2110      PGK1      4\r\n2111      PGKA      4\r\n2112      TPI1      4\r\n2113      PRF1      4\r\n2114     HPLH2      4\r\n2115    UNC13D      4\r\n2116  MUNC13-4      4\r\n2117     HPLH3      4\r\n2118      HLH3      4\r\n2119      FHL3      4\r\n2120        F8      4\r\n2121       F8C      4\r\n2122      HEMA      4\r\n2123        F9      4\r\n2124      HEMB      4\r\n2125        F5      4\r\n2126     SCOD1      4\r\n2127      SCO1      4\r\n2128      LIPC      4\r\n2129     AXIN1      4\r\n2130      AXIN      4\r\n2131     IGF2R      4\r\n2132      MPRI      4\r\n2133       MET      4\r\n2134       ENG      4\r\n2135       END      4\r\n2136      HHT1      4\r\n2137       ORW      4\r\n2138    ACVRL1      4\r\n2139   ACVRLK1      4\r\n2140      ALK1      4\r\n2141      HHT2      4\r\n2142       AFP      4\r\n2143     HPAFP      4\r\n2144      HPS1      4\r\n2145      HPS3      4\r\n2146      HPS4      4\r\n2147      HPS5      4\r\n2148       RU2      4\r\n2149  KIAA1017      4\r\n2150      HPS6      4\r\n2151        RU      4\r\n2152     AP3B1      4\r\n2153    ADTB3A      4\r\n2154      HPS2      4\r\n2155    DTNBP1      4\r\n2156      HPS7      4\r\n2157      ZIC3      4\r\n2158      HTX1      4\r\n2159       HTX      4\r\n2160      NRTN      4\r\n2161       NTN      4\r\n2162      ECE1      4\r\n2163       HAL      4\r\n2164      HSTD      4\r\n2165      CCL5      4\r\n2166     SCYA5      4\r\n2167  D17S136E      4\r\n2168    TCP228      4\r\n2169    CMKBR2      4\r\n2170      CCR2      4\r\n2171    CMKBR5      4\r\n2172    CCCKR5      4\r\n2173     HMGCL      4\r\n2174    HMGCS2      4\r\n2175      HLCS      4\r\n2176       HCS      4\r\n2177      SIX3      4\r\n2178      HPE2      4\r\n2179      TGIF      4\r\n2180      HPE4      4\r\n2181      ZIC2      4\r\n2182      HPE5      4\r\n2183      TBX5      4\r\n2184       CBS      4\r\n2185     MTHFR      4\r\n2186      MTRR      4\r\n2187      HBG1      4\r\n2188      HBG2      4\r\n2189     HPRT1      4\r\n2190      HPRT      4\r\n2191        HD      4\r\n2192      IT15      4\r\n2193      JPH3      4\r\n2194       JP3      4\r\n2195      HDL2      4\r\n2196       TBP      4\r\n2197     SCA17      4\r\n2198      PYCS      4\r\n2199      GSAS      4\r\n2200     PPARA      4\r\n2201      PPAR      4\r\n2202       SAC      4\r\n2203      HCA2      4\r\n2204      BAAT      4\r\n2205     EPHX1      4\r\n2206      TJP2      4\r\n2207       ZO2      4\r\n2208      LDLR      4\r\n2209       FHC      4\r\n2210     PCSK9      4\r\n2211     NARC1      4\r\n2212   HCHOLA3      4\r\n2213       FH3      4\r\n2214       ARH      4\r\n2215     FHCB2      4\r\n2216     FHCB1      4\r\n2217     EPHX2      4\r\n2218      GSBS      4\r\n2219     ITIH4      4\r\n2220     PK120      4\r\n2221    ITIHL1      4\r\n2222     GLRA1      4\r\n2223      STHE      4\r\n2224      GLRB      4\r\n2225       MVK      4\r\n2226      MVLK      4\r\n2227     GLUD1      4\r\n2228      USF1      4\r\n2229   HYPLIP1      4\r\n2230     APOC2      4\r\n2231      AASS      4\r\n2232     MAT1A      4\r\n2233     MATA1      4\r\n2234     SAMS1      4\r\n2235      AHCY      4\r\n2236      SAHH      4\r\n2237  SLC25A15      4\r\n2238     ORNT1      4\r\n2239       HHH      4\r\n2240      AGXT      4\r\n2241      SPAT      4\r\n2242     GRHPR      4\r\n2243      GLXR      4\r\n2244     HRPT2      4\r\n2245   C1orf28      4\r\n2246      CASR      4\r\n2247      HHC1      4\r\n2248     PCAR1      4\r\n2249       FIH      4\r\n2250      PCBD      4\r\n2251      DCOH      4\r\n2252       PAH      4\r\n2253      PKU1      4\r\n2254       INS      4\r\n2255     PRODH      4\r\n2256    PRODH2      4\r\n2257     SCZD4      4\r\n2258   ALDH4A1      4\r\n2259     ALDH4      4\r\n2260     P5CDH      4\r\n2261       REN      4\r\n2262    KCNMB1      4\r\n2263     NR3C2      4\r\n2264       MLR      4\r\n2265       MCR      4\r\n2266     AGTR1      4\r\n2267    AGTR1A      4\r\n2268     AT2R1      4\r\n2269     PTGIS      4\r\n2270    CYP8A1      4\r\n2271      PGIS      4\r\n2272      CYP8      4\r\n2273      ADD1      4\r\n2274       AGT      4\r\n2275  SERPINA8      4\r\n2276      GNB3      4\r\n2277    CYP3A5      4\r\n2278  P450PCN3      4\r\n2279      TSHR      4\r\n2280     APOA5      4\r\n2281      LIPI      4\r\n2282      LPDL      4\r\n2283     PRED5      4\r\n2284       RP1      4\r\n2285      ORP1      4\r\n2286      UMOD      4\r\n2287      HNFJ      4\r\n2288      FJHN      4\r\n2289     MCKD2      4\r\n2290   ADMCKD2      4\r\n2291      PAX9      4\r\n2292      BLNK      4\r\n2293     SLP65      4\r\n2294       LHB      4\r\n2295     GPR54      4\r\n2296      NELF      4\r\n2297     LHCGR      4\r\n2298   CACNA1S      4\r\n2299  CACNL1A3      4\r\n2300   CCHL1A3      4\r\n2301     KCNE3      4\r\n2302     HOKPP      4\r\n2303       LCT      4\r\n2304       LAC      4\r\n2305       LPH      4\r\n2306      MCM6      4\r\n2307     FXYD2      4\r\n2308    ATP1G1      4\r\n2309     HOMG2      4\r\n2310    CLDN16      4\r\n2311     PCLN1      4\r\n2312     TRPM6      4\r\n2313     CHAK2      4\r\n2314       PTH      4\r\n2315      GCMB      4\r\n2316      TBCE      4\r\n2317       KCS      4\r\n2318      KCS1      4\r\n2319       HRD      4\r\n2320     GATA3      4\r\n2321       HDR      4\r\n2322      ALPL      4\r\n2323      HOPS      4\r\n2324    TNSALP      4\r\n2325      PHEX      4\r\n2326       HYP      4\r\n2327     HPDR1      4\r\n2328    SLC5A5      4\r\n2329       NIS      4\r\n2330     DUOX2      4\r\n2331     THOX2      4\r\n2332      PAX8      4\r\n2333      TSHB      4\r\n2334      CDH3      4\r\n2335      CDHP      4\r\n2336      PCAD      4\r\n2337      HJMD      4\r\n2338      DSG4      4\r\n2339       LAH      4\r\n2340     SOX18      4\r\n2341      HLTS      4\r\n2342      CDSN      4\r\n2343      HTSS      4\r\n2344  SLC22A12      4\r\n2345     OAT4L      4\r\n2346     URAT1      4\r\n2347      TGM1      4\r\n2348      ICR2      4\r\n2349       LI1      4\r\n2350   ALOX12B      4\r\n2351    ALOXE3      4\r\n2352     KRT2A      4\r\n2353     KRT2E      4\r\n2354     ICHYN      4\r\n2355    ABCA12      4\r\n2356     ICR2B      4\r\n2357       LI2      4\r\n2358       STS      4\r\n2359     ARSC1      4\r\n2360      ARSC      4\r\n2361      SSDD      4\r\n2362      ICOS      4\r\n2363     AILIM      4\r\n2364     IGHG2      4\r\n2365    FCGR1A      4\r\n2366     IGFR1      4\r\n2367      CD64      4\r\n2368    DNMT3B      4\r\n2369       ICF      4\r\n2370      CD3E      4\r\n2371      CD3G      4\r\n2372     AICDA      4\r\n2373       AID      4\r\n2374     HIGM2      4\r\n2375   TNFRSF5      4\r\n2376      CD40      4\r\n2377       UNG      4\r\n2378       DGU      4\r\n2379     HIGM4      4\r\n2380    TNFSF5      4\r\n2381    CD40LG      4\r\n2382     HIGM1      4\r\n2383       IGM      4\r\n2384 TNFRSF14B      4\r\n2385      TACI      4\r\n2386      MYH2      4\r\n2387       GNE      4\r\n2388     GLCNE      4\r\n2389      IBM2      4\r\n2390      DMRV      4\r\n2391        NM      4\r\n2392       VCP      4\r\n2393    IBMPFD      4\r\n2394       ARX      4\r\n2395      ISSX      4\r\n2396      PRTS      4\r\n2397     MRXS1      4\r\n2398     MRX36      4\r\n2399     MRX54      4\r\n2400      SOX3      4\r\n2401      MRGH      4\r\n2402      ITPA      4\r\n2403     NTRK1      4\r\n2404      TRKA      4\r\n2405       MTC      4\r\n2406    GABRB3      4\r\n2407   PPP1R3A      4\r\n2408    PPP1R3      4\r\n2409     PTPN1      4\r\n2410     PTP1B      4\r\n2411     IL2RA      4\r\n2412      IL2R      4\r\n2413     IGF1R      4\r\n2414      IGF2      4\r\n2415       GIF      4\r\n2416     IRAK4      4\r\n2417     REN64      4\r\n2418     PITX2      4\r\n2419      IDG2      4\r\n2420     RIEG1      4\r\n2421       RGS      4\r\n2422     IGDS2      4\r\n2423      FTH1      4\r\n2424     FTHL6      4\r\n2425       GH1      4\r\n2426       GHN      4\r\n2427       IVD      4\r\n2428     FGFR1      4\r\n2429      FLT2      4\r\n2430      KAL2      4\r\n2431     KCNE1      4\r\n2432      JLNS      4\r\n2433      LQT5      4\r\n2434     NPHP1      4\r\n2435      NPH1      4\r\n2436     SLSN1      4\r\n2437      AHI1      4\r\n2438     MADH4      4\r\n2439      DPC4      4\r\n2440     SMAD4      4\r\n2441       JIP      4\r\n2442      KLK1      4\r\n2443      KLKR      4\r\n2444      KAL1      4\r\n2445     ADMLX      4\r\n2446      NAGA      4\r\n2447       IL6      4\r\n2448     IFNB2      4\r\n2449      BSF2      4\r\n2450      IGKC      4\r\n2451    DNAH11      4\r\n2452   DNAHC11      4\r\n2453       SAT      4\r\n2454      SSAT      4\r\n2455      KFSD      4\r\n2456      DSG1      4\r\n2457      SCOT      4\r\n2458      OXCT      4\r\n2459       MGP      4\r\n2460       NTI      4\r\n2461     KIND1      4\r\n2462      URP1      4\r\n2463  C20orf42      4\r\n2464      VG5Q      4\r\n2465  HUS84971      4\r\n2466  FLJ10283      4\r\n2467   COL18A1      4\r\n2468       KNO      4\r\n2469      GALC      4\r\n2470    L2HGDH      4\r\n2471 C14orf160      4\r\n2472      LDHB      4\r\n2473      PDX1      4\r\n2474      SHOX      4\r\n2475      GCFX      4\r\n2476      PHOG      4\r\n2477     SHOXY      4\r\n2478       GHR      4\r\n2479     SC5DL      4\r\n2480      ERG3      4\r\n2481      ALAD      4\r\n2482      AGRP      4\r\n2483       ART      4\r\n2484      AGRT      4\r\n2485      CRB1      4\r\n2486      RP12      4\r\n2487     RPE65      4\r\n2488      RP20      4\r\n2489     RDH12      4\r\n2490      LCA3      4\r\n2491    ACVR2B      2\r\n2492      EBAF      2\r\n2493     TGFB4      2\r\n2494    LEFTY2      2\r\n2495     LEFTA      2\r\n2496    LEFTYA      2\r\n2497      DTNA      2\r\n2498  D18S892E      2\r\n2499      DRP3      2\r\n2500     LVNC1      2\r\n2501      TLR5      2\r\n2502      TIL3      2\r\n2503       DLD      2\r\n2504       LAD      2\r\n2505      PHE3      2\r\n2506    NDUFS3      2\r\n2507    NDUFS4      2\r\n2508      AQDQ      2\r\n2509    NDUFS7      2\r\n2510      PSST      2\r\n2511    NDUFS8      2\r\n2512      SDHA      2\r\n2513      SDH2      2\r\n2514      SDHF      2\r\n2515     SURF1      2\r\n2516    LRPPRC      2\r\n2517    LRP130      2\r\n2518      LSFC      2\r\n2519     PDHA1      2\r\n2520     PHE1A      2\r\n2521    COL4A6      2\r\n2522    PTPN11      2\r\n2523     PTP2C      2\r\n2524      SHP2      2\r\n2525       NS1      2\r\n2526      TAL1      2\r\n2527      TCL5      2\r\n2528       SCL      2\r\n2529      TAL2      2\r\n2530      FLT3      2\r\n2531      NBS1      2\r\n2532       NBS      2\r\n2533   ZNFN1A1      2\r\n2534       IK1      2\r\n2535      LYF1      2\r\n2536     HOXD4      2\r\n2537     HOX4B      2\r\n2538       BCR      2\r\n2539       CML      2\r\n2540       PHL      2\r\n2541       ALL      2\r\n2542      ARNT      2\r\n2543      GMPS      2\r\n2544      AF10      2\r\n2545  ARHGEF12      2\r\n2546      LARG      2\r\n2547  KIAA0382      2\r\n2548      CALM      2\r\n2549      CLTH      2\r\n2550     CEBPA      2\r\n2551      CEBP      2\r\n2552     CHIC2      2\r\n2553       BTL      2\r\n2554       LPP      2\r\n2555      NPM1      2\r\n2556    NUP214      2\r\n2557    D9S46E      2\r\n2558       CAN      2\r\n2559      CAIN      2\r\n2560     RUNX1      2\r\n2561     CBFA2      2\r\n2562      AML1      2\r\n2563   WHSC1L1      2\r\n2564      NSD3      2\r\n2565      AF1Q      2\r\n2566     NUMA1      2\r\n2567    ZNF145      2\r\n2568      PLZF      2\r\n2569       PML      2\r\n2570       MYL      2\r\n2571     ARL11      2\r\n2572    ARLTS1      2\r\n2573     P2RX7      2\r\n2574      P2X7      2\r\n2575      GRAF      2\r\n2576       NF1      2\r\n2577      VRNF      2\r\n2578       WSS      2\r\n2579      NFNS      2\r\n2580      BCL2      2\r\n2581      TCRA      2\r\n2582      ABL1      2\r\n2583     ITGB2      2\r\n2584      CD18      2\r\n2585     LCAMB      2\r\n2586    EIF2B1      2\r\n2587    EIF2BA      2\r\n2588    EIF2B2      2\r\n2589    EIF2B3      2\r\n2590    EIF2B5      2\r\n2591      LVWM      2\r\n2592      CACH      2\r\n2593       CLE      2\r\n2594    EIF2B4      2\r\n2595    SCNN1B      2\r\n2596    SCNN1G      2\r\n2597      PHA1      2\r\n2598    CDKN2A      2\r\n2599      MTS1      2\r\n2600       P16      2\r\n2601       MLM      2\r\n2602      CMM2      2\r\n2603      LIG4      2\r\n2604    AGPAT2      2\r\n2605     LPAAB      2\r\n2606      BSCL      2\r\n2607     BSCL1      2\r\n2608     BSCL2      2\r\n2609     SPG17      2\r\n2610  PPARGC1A      2\r\n2611   PPARGC1      2\r\n2612      STAR      2\r\n2613    CYP11A      2\r\n2614   P450SCC      2\r\n2615      ECM1      2\r\n2616     HMGA2      2\r\n2617     HMGIC      2\r\n2618      BABL      2\r\n2619      LIPO      2\r\n2620  PAFAH1B1      2\r\n2621      LIS1      2\r\n2622      RELN      2\r\n2623        RL      2\r\n2624       DCX      2\r\n2625      DBCN      2\r\n2626      LISX      2\r\n2627    TGFBR1      2\r\n2628    AKAP10      2\r\n2629      ANK2      2\r\n2630      LQT4      2\r\n2631     KCNJ2      2\r\n2632    HHIRK1      2\r\n2633    KIR2.1      2\r\n2634      IRK1      2\r\n2635      LQT7      2\r\n2636       LPA      2\r\n2637      CILP      2\r\n2638   PPP2R1B      2\r\n2639    MAP3K8      2\r\n2640       COT      2\r\n2641       EST      2\r\n2642      TPL2      2\r\n2643    FCGR2A      2\r\n2644     IGFR2      2\r\n2645      CD32      2\r\n2646      TSC2      2\r\n2647     FOXC2      2\r\n2648    FKHL14      2\r\n2649      MFH1      2\r\n2650  RAP1GDS1      2\r\n2651      BCL8      2\r\n2652    FCGR2B      2\r\n2653    MAD1L1      2\r\n2654   TXBP181      2\r\n2655    SH2D1A      2\r\n2656      IMD5      2\r\n2657       XLP      2\r\n2658      XLPD      2\r\n2659    SLC7A7      2\r\n2660       LPI      2\r\n2661     ATXN3      2\r\n2662       MJD      2\r\n2663      SCA3      2\r\n2664     CHST6      2\r\n2665     MCDC1      2\r\n2666     HMCN1      2\r\n2667     FBLN6      2\r\n2668     FIBL6      2\r\n2669    ELOVL4      2\r\n2670      ADMD      2\r\n2671     STGD2      2\r\n2672     STGD3      2\r\n2673      VMD2      2\r\n2674     FKBP5      2\r\n2675    FKBP51      2\r\n2676      CD36      2\r\n2677     ICAM1      2\r\n2678     NOS2A      2\r\n2679      NOS2      2\r\n2680     MLYCD      2\r\n2681       MCD      2\r\n2682     MALT1      2\r\n2683       MLT      2\r\n2684  ZMPSTE24      2\r\n2685     FACE1      2\r\n2686     STE24      2\r\n2687      MADB      2\r\n2688    MAN2B1      2\r\n2689      MANB      2\r\n2690     MANBA      2\r\n2691     MANB1      2\r\n2692    BCKDHA      2\r\n2693     MSUD1      2\r\n2694    BCKDHB      2\r\n2695       E1B      2\r\n2696       DBT      2\r\n2697    BCATE2      2\r\n2698      ARSB      2\r\n2699      MPS6      2\r\n2700   COL11A1      2\r\n2701      STL2      2\r\n2702     MASP2      2\r\n2703     ACP33      2\r\n2704      MAST      2\r\n2705     SPG21      2\r\n2706      PYGM      2\r\n2707        XK      2\r\n2708      SUFU      2\r\n2709    SUFUXL      2\r\n2710     SUFUH      2\r\n2711     KRT12      2\r\n2712      KRT3      2\r\n2713      MKL1      2\r\n2714      AMKL      2\r\n2715       MAL      2\r\n2716      MLC1      2\r\n2717       LVM      2\r\n2718        VL      2\r\n2719      CUBN      2\r\n2720      IFCR      2\r\n2721      MGA1      2\r\n2722      CDK4      2\r\n2723      CMM3      2\r\n2724     STK11      2\r\n2725       PJS      2\r\n2726      LKB1      2\r\n2727    SLURP1      2\r\n2728       MDM      2\r\n2729       MN1      2\r\n2730      MGCR      2\r\n2731       NF2      2\r\n2732    PRSS12      2\r\n2733     BSSP3      2\r\n2734      CRBN      2\r\n2735     MRT2A      2\r\n2736      PAK3      2\r\n2737     MRX30      2\r\n2738     MRX47      2\r\n2739   IL1RAPL      2\r\n2740     MRX34      2\r\n2741     FTSJ1      2\r\n2742      JM23      2\r\n2743      SPB1      2\r\n2744     MRX44      2\r\n2745      MRX9      2\r\n2746     ZNF81      2\r\n2747     MRX45      2\r\n2748    TM4SF2      2\r\n2749      MXS1      2\r\n2750       A15      2\r\n2751     OPHN1      2\r\n2752      FMR2      2\r\n2753     FRAXE      2\r\n2754      MRX2      2\r\n2755      SMCX      2\r\n2756      MRXJ      2\r\n2757  DXS1272E      2\r\n2758     XE169      2\r\n2759   JARID1C      2\r\n2760      GDI1      2\r\n2761   RABGD1A      2\r\n2762     MRX41      2\r\n2763     MRX48      2\r\n2764     FACL4      2\r\n2765      ACS4      2\r\n2766     MRX63      2\r\n2767   ARHGEF6      2\r\n2768     MRX46      2\r\n2769     COOL2      2\r\n2770     AGTR2      2\r\n2771     ZNF41      2\r\n2772      DLG3      2\r\n2773     NEDLG      2\r\n2774    SAP102      2\r\n2775       MRX      2\r\n2776       SMS      2\r\n2777       SRS      2\r\n2778      MRSR      2\r\n2779     CYP2C      2\r\n2780   CYP2C19      2\r\n2781      ARSA      2\r\n2782   COL10A1      2\r\n2783      CYB5      2\r\n2784      DIA1      2\r\n2785   ALDH6A1      2\r\n2786     MMSDH      2\r\n2787       MUT      2\r\n2788       MCM      2\r\n2789      MMAA      2\r\n2790      MMAB      2\r\n2791    RFXANK      2\r\n2792  SLC25A19      2\r\n2793       DNC      2\r\n2794      MUP1      2\r\n2795     MCPHA      2\r\n2796     MCPH1      2\r\n2797  CDK5RAP2      2\r\n2798  KIAA1633      2\r\n2799     MCPH3      2\r\n2800      ASPM      2\r\n2801     MCPH5      2\r\n2802     CEMPJ      2\r\n2803      CPAP      2\r\n2804     MCPH6      2\r\n2805     LAMB2      2\r\n2806      LAMS      2\r\n2807     CHX10      2\r\n2808     HOX10      2\r\n2809      SIX6      2\r\n2810      BCOR      2\r\n2811  KIAA1575      2\r\n2812      MAA2      2\r\n2813     ANOP2      2\r\n2814     EDNRA      2\r\n2815     YWHAE      2\r\n2816      MDCR      2\r\n2817       MDS      2\r\n2818    NDUFS1      2\r\n2819    NDUFS2      2\r\n2820     UQCRB      2\r\n2821      UQBP      2\r\n2822       QPC      2\r\n2823       TK2      2\r\n2824    SUCLA2      2\r\n2825     DGUOK      2\r\n2826       DGK      2\r\n2827      PUS1      2\r\n2828     MLASA      2\r\n2829      DYSF      2\r\n2830    LGMD2B      2\r\n2831     MOCS1      2\r\n2832     MOCOD      2\r\n2833     MOCS2      2\r\n2834      MPTS      2\r\n2835       GPH      2\r\n2836  KIAA1385      2\r\n2837      GEPH      2\r\n2838    KRTHB1      2\r\n2839    KRTHB6      2\r\n2840       HB6      2\r\n2841    ZFHX1B      2\r\n2842   SMADIP1      2\r\n2843      SIP1      2\r\n2844     MYMY3      2\r\n2845     MAML2      2\r\n2846      MAM3      2\r\n2847     MECT1      2\r\n2848  KIAA0616      2\r\n2849    GNPTAB      2\r\n2850     GNPTA      2\r\n2851    GNPTAG      2\r\n2852    MCOLN1      2\r\n2853       ML4      2\r\n2854      IDUA      2\r\n2855       IDA      2\r\n2856       IDS      2\r\n2857      MPS2      2\r\n2858      SIDS      2\r\n2859     GALNS      2\r\n2860     MPS4A      2\r\n2861       GNS      2\r\n2862       G6S      2\r\n2863     HYAL1      2\r\n2864      GUSB      2\r\n2865      MPS7      2\r\n2866    TRIM37      2\r\n2867       MUL      2\r\n2868  KIAA0898      2\r\n2869      IRF4      2\r\n2870     LSIRF      2\r\n2871     PTPRC      2\r\n2872      CD45      2\r\n2873       LCA      2\r\n2874     SUMF1      2\r\n2875       FGE      2\r\n2876   POMGNT1      2\r\n2877       MEB      2\r\n2878     PHKA1      2\r\n2879      GDF8      2\r\n2880      MSTN      2\r\n2881      FKRP      2\r\n2882     MDC1C      2\r\n2883    LGMD2I      2\r\n2884     LAMA2      2\r\n2885      LAMM      2\r\n2886     LARGE      2\r\n2887  KIAA0609      2\r\n2888     MDC1D      2\r\n2889      FCMD      2\r\n2890      TTID      2\r\n2891      MYOT      2\r\n2892     CAPN3      2\r\n2893     CANP3      2\r\n2894      SGCG      2\r\n2895    LGMD2C      2\r\n2896     DMDA1      2\r\n2897      SCG3      2\r\n2898      SGCA      2\r\n2899       ADL      2\r\n2900      DAG2      2\r\n2901    LGMD2D      2\r\n2902     DMDA2      2\r\n2903      SGCB      2\r\n2904    LGMD2E      2\r\n2905    TRIM32      2\r\n2906      HT2A      2\r\n2907    LGMD2H      2\r\n2908     POMT1      2\r\n2909     SEPN1      2\r\n2910      SELN      2\r\n2911     RSMD1      2\r\n2912    CMS1A1      2\r\n2913      FIM1      2\r\n2914    CHRNB1      2\r\n2915     ACHRB      2\r\n2916     SCCMS      2\r\n2917     CMS2A      2\r\n2918     CMS1D      2\r\n2919     CHRNE      2\r\n2920     FCCMS      2\r\n2921     CMS1E      2\r\n2922     RAPSN      2\r\n2923      CHAT      2\r\n2924    CMS1A2      2\r\n2925    CHRNA1      2\r\n2926     ACHRD      2\r\n2927     CHRND      2\r\n2928   IL12RB1      2\r\n2929    IFNGR2      2\r\n2930    IFNGT1      2\r\n2931     IFGR2      2\r\n2932     STAT1      2\r\n2933    NRAMP1      2\r\n2934     NRAMP      2\r\n2935      MDS1      2\r\n2936     FACL6      2\r\n2937      ACS2      2\r\n2938      JAK2      2\r\n2939      CBFB      2\r\n2940     CSF1R      2\r\n2941       FMS      2\r\n2942     CXCR4      2\r\n2943   D2S201E      2\r\n2944     NPY3R      2\r\n2945      WHIM      2\r\n2946    PDGFRB      2\r\n2947     PDGFR      2\r\n2948     AMPD1      2\r\n2949   ALOX5AP      2\r\n2950      FLAP      2\r\n2951    LGALS2      2\r\n2952       LTA      2\r\n2953      TNFB      2\r\n2954      OLR1      2\r\n2955      LOX1      2\r\n2956      THBD      2\r\n2957      THRM      2\r\n2958      GCLM      2\r\n2959     GLCLR      2\r\n2960    TNFSF4      2\r\n2961      GP34      2\r\n2962     OX4OL      2\r\n2963     EFHC1      2\r\n2964  FLJ10466      2\r\n2965      EJM1      2\r\n2966     ECGF1      2\r\n2967     ACTA1      2\r\n2968      ASMA      2\r\n2969      NEM3      2\r\n2970      NEM1      2\r\n2971     ITGA7      2\r\n2972     PGAM2      2\r\n2973     PGAMM      2\r\n2974     CLCN1      2\r\n2975      DMPK      2\r\n2976        DM      2\r\n2977       DMK      2\r\n2978      ZNF9      2\r\n2979     CNBP1      2\r\n2980       DM2      2\r\n2981     PROMM      2\r\n2982      MTM1      2\r\n2983      MTMX      2\r\n2984     DDIT3      2\r\n2985   GADD153      2\r\n2986    CHOP10      2\r\n2987      NAGS      2\r\n2988     LMX1B      2\r\n2989      NPS1      2\r\n2990       NHS      2\r\n2991      HCRT      2\r\n2992        OX      2\r\n2993     TREM2      2\r\n2994    TYROBP      2\r\n2995     PLOSL      2\r\n2996     DAP12      2\r\n2997       JUP      2\r\n2998       DP3      2\r\n2999      PDGB      2\r\n3000      TPM3      2\r\n3001       NEB      2\r\n3002      NEM2      2\r\n3003     TNNT1      2\r\n3004       ANM      2\r\n3005     CLDN1      2\r\n3006     SEMP1      2\r\n3007    ZNF365      2\r\n3008       UAN      2\r\n3009      INVS      2\r\n3010       INV      2\r\n3011     NPHP2      2\r\n3012      NPH2      2\r\n3013     NPHP4      2\r\n3014     SLSN4      2\r\n3015     NPHP3      2\r\n3016      NPH3      2\r\n3017     CD151      2\r\n3018     PETA3      2\r\n3019      SFA1      2\r\n3020     NPHS1      2\r\n3021      NPHN      2\r\n3022      PDCN      2\r\n3023     NPHS2      2\r\n3024      SRN1      2\r\n3025     MTHFD      2\r\n3026     MTHFC      2\r\n3027      NME1      2\r\n3028      NM23      2\r\n3029      MXI1      2\r\n3030     HSPB8      2\r\n3031       H11      2\r\n3032     E2IG1      2\r\n3033     DHMN2      2\r\n3034    SPTLC1      2\r\n3035      LBC1      2\r\n3036      SPT1      2\r\n3037      HSN1      2\r\n3038      HSAN      2\r\n3039      NGFB      2\r\n3040     HSAN5      2\r\n3041      HSN2      2\r\n3042    FCGR3A      2\r\n3043      CD16      2\r\n3044     IGFR3      2\r\n3045      GFI1      2\r\n3046    ZNF163      2\r\n3047       WAS      2\r\n3048      IMD2      2\r\n3049       THC      2\r\n3050      RAC2      2\r\n3051     GPR51      2\r\n3052    GABBR2      2\r\n3053     SMPD1      2\r\n3054       NPD      2\r\n3055      NPC1      2\r\n3056       NPC      2\r\n3057      NPC2      2\r\n3058       HE1      2\r\n3059     GNAT1      2\r\n3060     CSNB1      2\r\n3061       NYX      2\r\n3062     PDE6B      2\r\n3063      PDEB      2\r\n3064     CSNB3      2\r\n3065   CACNA1F      2\r\n3066     CSNB2      2\r\n3067       RHO      2\r\n3068       RP4      2\r\n3069      OPN2      2\r\n3070        NP      2\r\n3071      POMC      2\r\n3072      MC4R      2\r\n3073    AKR1C2      2\r\n3074      DDH2      2\r\n3075       DD2      2\r\n3076     HAKRD      2\r\n3077     NTRK2      2\r\n3078      TRKB      2\r\n3079     NR0B2      2\r\n3080       SHP      2\r\n3081       LEP      2\r\n3082        OB      2\r\n3083      LEPR      2\r\n3084       OBR      2\r\n3085      SIM1      2\r\n3086      UCP3      2\r\n3087      MC3R      2\r\n3088   SLC6A14      2\r\n3089       OBX      2\r\n3090     ADRB3      2\r\n3091      CART      2\r\n3092      GHRL      2\r\n3093      UCP1      2\r\n3094      UCP2      2\r\n3095     PCSK1      2\r\n3096      NEC1      2\r\n3097       PC1      2\r\n3098       PC3      2\r\n3099       OA1      2\r\n3100      MATP      2\r\n3101      AIM1      2\r\n3102    PABPN1      2\r\n3103     PABP2      2\r\n3104      PAB2      2\r\n3105       SAG      2\r\n3106      RHOK      2\r\n3107        RK      2\r\n3108      GRK1      2\r\n3109   DCLRE1C      2\r\n3110   ARTEMIS      2\r\n3111     SCIDA      2\r\n3112      RAG1      2\r\n3113      RAG2      2\r\n3114      MID1      2\r\n3115      OGS1      2\r\n3116     BBBG1      2\r\n3117       FXY      2\r\n3118       OSX      2\r\n3119      PAX2      2\r\n3120      OFD1      2\r\n3121    CXorf5      2\r\n3122       OTC      2\r\n3123      IRF6      2\r\n3124       VWS      2\r\n3125       LPS      2\r\n3126       PIT      2\r\n3127       PPS      2\r\n3128      OFC6      2\r\n3129      UMPS      2\r\n3130      OPRT      2\r\n3131    SLC6A2      2\r\n3132      NAT1      2\r\n3133      NET1      2\r\n3134      FRZB      2\r\n3135     FRZB1      2\r\n3136     SRFP3      2\r\n3137      ASPN      2\r\n3138     PLAP1      2\r\n3139 TNFRSF11A      2\r\n3140      RANK      2\r\n3141      ODFR      2\r\n3142       OFE      2\r\n3143      MMP2      2\r\n3144     CLG4A      2\r\n3145      MONA      2\r\n3146     CLCN7      2\r\n3147      CLC7      2\r\n3148     OPTA2      2\r\n3149     OSTM1      2\r\n3150        GL      2\r\n3151    TCIRG1      2\r\n3152     TIRC7      2\r\n3153     OC116      2\r\n3154     OPTB1      2\r\n3155     CALCA      2\r\n3156     CALC1      2\r\n3157   SLC17A2      2\r\n3158      NPT2      2\r\n3159     CALCR      2\r\n3160       CRT      2\r\n3161       RIL      2\r\n3162     RRAS2      2\r\n3163      TC21      2\r\n3164      FSHR      2\r\n3165      ODG1      2\r\n3166     BMP15      2\r\n3167     GDF9B      2\r\n3168      ODG2      2\r\n3169     KRT17      2\r\n3170       PC2      2\r\n3171     PCHC1      2\r\n3172     KRT6B      2\r\n3173     KRT16      2\r\n3174     KRT6A      2\r\n3175 TNFRSF11B      2\r\n3176       OPG      2\r\n3177      OCIF      2\r\n3178    SQSTM1      2\r\n3179       P62      2\r\n3180      PDB3      2\r\n3181     ARMET      2\r\n3182       ARP      2\r\n3183    ACVR1B      2\r\n3184   ACVRLK4      2\r\n3185      ALK4      2\r\n3186     RBBP8      2\r\n3187       RIM      2\r\n3188     PRSS1      2\r\n3189      TRY1      2\r\n3190      SDHB      2\r\n3191      SDH1      2\r\n3192     SDHIP      2\r\n3193      SDHC      2\r\n3194      PGL3      2\r\n3195      ALX4      2\r\n3196      PFM2      2\r\n3197       FPP      2\r\n3198     NR4A2      2\r\n3199     NURR1      2\r\n3200       NOT      2\r\n3201     TINUR      2\r\n3202    SNCAIP      2\r\n3203       DJ1      2\r\n3204     PARK7      2\r\n3205     LRRK2      2\r\n3206     PARK8      2\r\n3207     PINK1      2\r\n3208     PARK6      2\r\n3209     UCHL1      2\r\n3210     PARK5      2\r\n3211    NDUFV2      2\r\n3212      PIGA      2\r\n3213       MR1      2\r\n3214   TAHCCP2      2\r\n3215  KIPP1184      2\r\n3216     BRP17      2\r\n3217      PNKD      2\r\n3218      FPD1      2\r\n3219       PDC      2\r\n3220      DYT8      2\r\n3221     SOX10      2\r\n3222       WS4      2\r\n3223      PLP1      2\r\n3224       PMD      2\r\n3225     GJA12      2\r\n3226      CX47      2\r\n3227    PMLDAR      2\r\n3228  TNFRSF1A      2\r\n3229     TNFR1      2\r\n3230     TNFAR      2\r\n3231       FPF      2\r\n3232   ARFGEF2      2\r\n3233      BIG2      2\r\n3234      PEX6      2\r\n3235    PXAAA1      2\r\n3236      PAF2      2\r\n3237     PEX12      2\r\n3238       AMH      2\r\n3239       MIF      2\r\n3240     AMHR2      2\r\n3241      AMHR      2\r\n3242      QDPR      2\r\n3243      DHPR      2\r\n3244       PTS      2\r\n3245   TAS2R38      2\r\n3246     T2R61      2\r\n3247       PTC      2\r\n3248     PHGDH      2\r\n3249     PRPS1      2\r\n3250      PHKB      2\r\n3251       PSP      2\r\n3252     GNAI2      2\r\n3253    GNAI2B      2\r\n3254       GIP      2\r\n3255      THRA      2\r\n3256     ERBA1      2\r\n3257     THRA1      2\r\n3258      GLI2      2\r\n3259    POU1F1      2\r\n3260      PIT1      2\r\n3261     PROP1      2\r\n3262     HESX1      2\r\n3263       RPX      2\r\n3264      LHX3      2\r\n3265     PRKCA      2\r\n3266      PKCA      2\r\n3267       PLI      2\r\n3268  SERPINF2      2\r\n3269    P2RY12      2\r\n3270     P2Y12      2\r\n3271     SFTPC      2\r\n3272     SFTP2      2\r\n3273      FCYT      2\r\n3274     PKHD1      2\r\n3275     ARPKD      2\r\n3276      PKD1      2\r\n3277      PKD2      2\r\n3278      PKD4      2\r\n3279     PKDTS      2\r\n3280    PRKCSH      2\r\n3281     G19P1      2\r\n3282      PCLD      2\r\n3283     SEC63      2\r\n3284     GPR56      2\r\n3285    TM7XN1      2\r\n3286      BFPP      2\r\n3287    COL4A1      2\r\n3288      HMBS      2\r\n3289      PBGD      2\r\n3290       UPS      2\r\n3291      UROS      2\r\n3292      UROD      2\r\n3293      PPOX      2\r\n3294       NDN      2\r\n3295     SNRPN      2\r\n3296     STOX1      2\r\n3297      PEE4      2\r\n3298     KLKB1      2\r\n3299      KLK3      2\r\n3300    DIAPH2      2\r\n3301       DIA      2\r\n3302      POF2      2\r\n3303   C10orf2      2\r\n3304   TWINKLE      2\r\n3305      PEO1      2\r\n3306   SLC25A4      2\r\n3307      ANT1      2\r\n3308        T1      2\r\n3309      PEO3      2\r\n3310      PEPD      2\r\n3311       PFC      2\r\n3312       PFD      2\r\n3313      PCCA      2\r\n3314      PCCB      2\r\n3315    RNASEL      2\r\n3316      RNS4      2\r\n3317     PRCA1      2\r\n3318      HPC1      2\r\n3319      MSR1      2\r\n3320     EPHB2      2\r\n3321     EPHT3      2\r\n3322       DRT      2\r\n3323       ERK      2\r\n3324     ATBF1      2\r\n3325     ELAC2      2\r\n3326      HPC2      2\r\n3327     PROS1      2\r\n3328      FECH      2\r\n3329       FCE      2\r\n3330   HSD17B3      2\r\n3331   EDH17B3      2\r\n3332    SCNN1A      2\r\n3333      WNK4      2\r\n3334   PRKWNK4      2\r\n3335     PHA2B      2\r\n3336      WNK1      2\r\n3337   PRKWNK1      2\r\n3338       KDP      2\r\n3339     PHA2C      2\r\n3340    SRD5A2      2\r\n3341   CYP27B1      2\r\n3342      PDDR      2\r\n3343      VDD1      2\r\n3344     ABCC6      2\r\n3345       ARA      2\r\n3346     ABC34      2\r\n3347      MLP1      2\r\n3348       PXE      2\r\n3349    PSORS6      2\r\n3350    CSF2RB      2\r\n3351     SFTPB      2\r\n3352     SFTB3      2\r\n3353    SFTPA1      2\r\n3354     SFTP1      2\r\n3355     BMPR2      2\r\n3356      PPH1      2\r\n3357      CTSK      2\r\n3358      NOS1      2\r\n3359   PSTPIP1      2\r\n3360    PSTPIP      2\r\n3361    CD2BP1      2\r\n3362     PAPAS      2\r\n3363        PC      2\r\n3364      PDHB      2\r\n3365    HOXA11      2\r\n3366     HOX1I      2\r\n3367    RECQL4      2\r\n3368       RTS      2\r\n3369     RECQ4      2\r\n3370    CX3CR1      2\r\n3371     GPR13      2\r\n3372       V28      2\r\n3373      PEX7      2\r\n3374     RCDP1      2\r\n3375      PHYH      2\r\n3376      PAHX      2\r\n3377     PXMP3      2\r\n3378      PAF1      2\r\n3379     PMP35      2\r\n3380      PEX2      2\r\n3381      TRC8      2\r\n3382      RCA1      2\r\n3383     HRCA1      2\r\n3384      OGG1      2\r\n3385      PRCC      2\r\n3386     RCCP1      2\r\n3387      TFE3      2\r\n3388    SLC5A2      2\r\n3389     SGLT2      2\r\n3390  ATP6V0A4      2\r\n3391   ATP6N1B      2\r\n3392      VPP2      2\r\n3393     RTA1C      2\r\n3394     RTADR      2\r\n3395       CA2      2\r\n3396    SLC4A4      2\r\n3397      NBC1      2\r\n3398      KNBC      2\r\n3399    SLC4A5      2\r\n3400    ATP6B1      2\r\n3401      VPP3      2\r\n3402     PQBP1      2\r\n3403     NPW38      0\r\n3404     MRX55      0\r\n3405     RENS1      0\r\n3406     MRXS8      0\r\n3407     OPRM1      0\r\n3408       NRL      0\r\n3409   D14S46E      0\r\n3410      RP27      0\r\n3411     PROM1      0\r\n3412    PROML1      0\r\n3413     AC133      0\r\n3414   C1QTNF5      0\r\n3415     CTRP5      0\r\n3416      LORD      0\r\n3417      LRAT      0\r\n3418    IMPDH1      0\r\n3419    PRPF31      0\r\n3420     PRP31      0\r\n3421     PRPF8      0\r\n3422     PRPC8      0\r\n3423      RP13      0\r\n3424     TULP1      0\r\n3425      RP14      0\r\n3426       CA4      0\r\n3427      RP17      0\r\n3428     HPRP3      0\r\n3429      RP18      0\r\n3430       RP2      0\r\n3431     CERKL      0\r\n3432     FSCN2      0\r\n3433      RFSN      0\r\n3434       RP9      0\r\n3435     USH2A      0\r\n3436       RGR      0\r\n3437     CNGB1      0\r\n3438    CNCG3L      0\r\n3439     CNCG2      0\r\n3440     CNGA1      0\r\n3441     CNCG1      0\r\n3442     PDE6A      0\r\n3443      PDEA      0\r\n3444      ROM1      0\r\n3445     ROSP1      0\r\n3446     MERTK      0\r\n3447      RBP4      0\r\n3448       RS1      0\r\n3449     XLRS1      0\r\n3450     CDKL5      0\r\n3451      STK9      0\r\n3452   SMARCB1      0\r\n3453      SNF5      0\r\n3454      INI1      0\r\n3455       RDT      0\r\n3456    FOXO1A      0\r\n3457      FKHR      0\r\n3458      PAX7      0\r\n3459   NFKBIL1      0\r\n3460     PADI4      0\r\n3461     PADI5      0\r\n3462       PAD      0\r\n3463   SLC22A4      0\r\n3464     OCTN1      0\r\n3465      AGPS      0\r\n3466    ADHAPS      0\r\n3467       RHD      0\r\n3468      RPIA      0\r\n3469       RPI      0\r\n3470    CYP2R1      0\r\n3471       VDR      0\r\n3472     ESCO2      0\r\n3473      WNT4      0\r\n3474    CREBBP      0\r\n3475      RSTS      0\r\n3476     TWIST      0\r\n3477      ACS3      0\r\n3478       SCS      0\r\n3479   SLC17A5      0\r\n3480     SIASD      0\r\n3481       SLD      0\r\n3482      HEXB      0\r\n3483      SGSH      0\r\n3484     MPS3A      0\r\n3485      SFMD      0\r\n3486     NAGLU      0\r\n3487     BTNL2      0\r\n3488  HLA-DR1B      0\r\n3489      SSX1      0\r\n3490      SSRC      0\r\n3491      SSX2      0\r\n3492  SMARCAL1      0\r\n3493      SIOD      0\r\n3494      EMX2      0\r\n3495     DISC1      0\r\n3496     TRAR4      0\r\n3497      COMT      0\r\n3498     RTN4R      0\r\n3499     NOGOR      0\r\n3500      SYN2      0\r\n3501      EPN4      0\r\n3502      EPNR      0\r\n3503  KIAA0171      0\r\n3504     SCZD1      0\r\n3505      JAK3      0\r\n3506      JAKL      0\r\n3507      SOST      0\r\n3508     GULOP      0\r\n3509      GULO      0\r\n3510       ATR      0\r\n3511      FRP1      0\r\n3512      SCKL      0\r\n3513        TH      0\r\n3514       TYH      0\r\n3515    SCN2A1      0\r\n3516     SCN2A      0\r\n3517     ZAP70      0\r\n3518       SRK      0\r\n3519       STD      0\r\n3520    PAPSS2      0\r\n3521    ATPSK2      0\r\n3522     IQCB1      0\r\n3523     NPHP5      0\r\n3524  KIAA0036      0\r\n3525       SPR      0\r\n3526    CASP12      0\r\n3527  CASP12P1      0\r\n3528     USP26      0\r\n3529      IL7R      0\r\n3530      CD3D      0\r\n3531       T3D      0\r\n3532      LHX4      0\r\n3533      SBDS      0\r\n3534       SDS      0\r\n3535      NEU1      0\r\n3536     SIAL1      0\r\n3537      GPC3      0\r\n3538      SDYS      0\r\n3539     SGBS1      0\r\n3540     ABCG5      0\r\n3541     ABCG8      0\r\n3542     NODAL      0\r\n3543   ALDH3A2      0\r\n3544    ALDH10      0\r\n3545       SLS      0\r\n3546     FALDH      0\r\n3547      NAT2      0\r\n3548      AAC2      0\r\n3549  ARHGEF10      0\r\n3550  KIAA0294      0\r\n3551      TBX4      0\r\n3552     DHCR7      0\r\n3553      SLOS      0\r\n3554      RAI1      0\r\n3555      SMCR      0\r\n3556     TIMP3      0\r\n3557       SFD      0\r\n3558      SACS      0\r\n3559    ARSACS      0\r\n3560     KIF5A      0\r\n3561      NKHC      0\r\n3562     SPG10      0\r\n3563     HSPD1      0\r\n3564     SPG13      0\r\n3565     HSP60      0\r\n3566     SPG3A      0\r\n3567      SPG4      0\r\n3568     SPAST      0\r\n3569     NIPA1      0\r\n3570      SPG6      0\r\n3571       PGN      0\r\n3572      SPG7      0\r\n3573      CMAR      0\r\n3574     CEBPE      0\r\n3575      CRP1      0\r\n3576     FOXP2      0\r\n3577     SPCH1      0\r\n3578    TNRC10      0\r\n3579    CAGH44      0\r\n3580      DAZL      0\r\n3581      DAZH      0\r\n3582    SPGYLA      0\r\n3583      ANK1      0\r\n3584      SPH2      0\r\n3585     EPB42      0\r\n3586      SMN1      0\r\n3587      SMA1      0\r\n3588      SMA2      0\r\n3589      SMA3      0\r\n3590      SMA4      0\r\n3591   IGHMBP2      0\r\n3592    SMUBP2      0\r\n3593     CATF1      0\r\n3594    SMARD1      0\r\n3595    ATXN10      0\r\n3596     SCA10      0\r\n3597     ATXN1      0\r\n3598      ATX1      0\r\n3599      SCA1      0\r\n3600   PPP2R2B      0\r\n3601     PRKCG      0\r\n3602      PKCC      0\r\n3603      PKCG      0\r\n3604     SCA14      0\r\n3605     ATXN2      0\r\n3606      ATX2      0\r\n3607      SCA2      0\r\n3608     SCA25      0\r\n3609     FGF14      0\r\n3610      FHF4      0\r\n3611     SCA27      0\r\n3612   PLEKHG4      0\r\n3613     ATXN7      0\r\n3614      SCA7      0\r\n3615     OPCA3      0\r\n3616      SCA8      0\r\n3617      TDP1      0\r\n3618     SHFM3      0\r\n3619       DAC      0\r\n3620      DLL3      0\r\n3621     SCDO1      0\r\n3622     MESP2      0\r\n3623      AGC1      0\r\n3624     CSPG1      0\r\n3625     MSK16      0\r\n3626      SEDK      0\r\n3627     CHST3      0\r\n3628      C6ST      0\r\n3629     C6ST1      0\r\n3630      SEDL      0\r\n3631      SEDT      0\r\n3632      ING1      0\r\n3633 TNFRSF10B      0\r\n3634       DR5      0\r\n3635   TRAILR2      0\r\n3636       NOG      0\r\n3637      SYM1      0\r\n3638     SYNS1      0\r\n3639     HMGCR      0\r\n3640    ZNF198      0\r\n3641      SCLL      0\r\n3642      RAMP      0\r\n3643       FIM      0\r\n3644     PDE4D      0\r\n3645     DPDE3      0\r\n3646     STRK1      0\r\n3647      LIFR      0\r\n3648      STWS      0\r\n3649       SWS      0\r\n3650      SJS2      0\r\n3651     SSADH      0\r\n3652        SI      0\r\n3653    TSPYL1      0\r\n3654     TSPYL      0\r\n3655     SIDDT      0\r\n3656      SUOX      0\r\n3657      SOD3      0\r\n3658     ABCA3      0\r\n3659      ABC3      0\r\n3660     FBLN1      0\r\n3661    TNFSF6      0\r\n3662   APT1LG1      0\r\n3663      FASL      0\r\n3664    DNASE1      0\r\n3665      DNL1      0\r\n3666     PDCD1      0\r\n3667     SLEB2      0\r\n3668       WHN      0\r\n3669      DAD1      0\r\n3670      WNT3      0\r\n3671      INT4      0\r\n3672     ZFPM2      0\r\n3673      FOG2      0\r\n3674       HBD      0\r\n3675      LCRB      0\r\n3676   SLC19A2      0\r\n3677     THTR1      0\r\n3678      THPO      0\r\n3679      MGDF      0\r\n3680     MPLLG      0\r\n3681  FLJ14813      0\r\n3682      THC2      0\r\n3683       MPL      0\r\n3684      TPOR      0\r\n3685      MPLV      0\r\n3686      HCF2      0\r\n3687       HC2      0\r\n3688  SERPIND1      0\r\n3689       HRG      0\r\n3690      PROC      0\r\n3691  ADAMTS13      0\r\n3692     VWFCP      0\r\n3693       TTP      0\r\n3694    MINPP1      0\r\n3695    HIPER1      0\r\n3696    GOLGA5      0\r\n3697      RFG5      0\r\n3698      PTC5      0\r\n3699     NCOA4      0\r\n3700      ELE1      0\r\n3701      PTC3      0\r\n3702      PCM1      0\r\n3703      PTC4      0\r\n3704     TIF1G      0\r\n3705      RFG7      0\r\n3706      PTC7      0\r\n3707    TRIM24      0\r\n3708      TIF1      0\r\n3709     TIF1A      0\r\n3710      PTC6      0\r\n3711      THRB      0\r\n3712     ERBA2      0\r\n3713      THR1      0\r\n3714      TRHR      0\r\n3715       TBG      0\r\n3716      MITF      0\r\n3717      WS2A      0\r\n3718   CACNA1C      0\r\n3719  CACNL1A1      0\r\n3720   CCHL1A1      0\r\n3721        TS      0\r\n3722    CYP2C9      0\r\n3723     SALL1      0\r\n3724     HSAL1      0\r\n3725       TBS      0\r\n3726    TALDO1      0\r\n3727      TCN2      0\r\n3728       TC2      0\r\n3729    THRAP2      0\r\n3730 PROSIT240      0\r\n3731  TRAP240L      0\r\n3732  KIAA1025      0\r\n3733     TCOF1      0\r\n3734      MFD1      0\r\n3735    HS1BP3      0\r\n3736  FLJ14249      0\r\n3737      ETM2      0\r\n3738     TRPS1      0\r\n3739     ERCC3      0\r\n3740       XPB      0\r\n3741    TGF2H5      0\r\n3742      TTDA      0\r\n3743      TFB5      0\r\n3744  C6orf175      0\r\n3745     TTDN1      0\r\n3746   C7orf11      0\r\n3747      ABHS      0\r\n3748     HADHB      0\r\n3749     SPG20      0\r\n3750       FAH      0\r\n3751       TAT      0\r\n3752       HPD      0\r\n3753      TBX3      0\r\n3754      TPH2      0\r\n3755      NTPH      0\r\n3756      APRT      0\r\n3757      SANS      0\r\n3758     USH1G      0\r\n3759     USH3A      0\r\n3760      USH3      0\r\n3761       TEK      0\r\n3762      TIE2      0\r\n3763      VMCM      0\r\n3764 SERPINA10      0\r\n3765       ZPI      0\r\n3766     CASQ2      0\r\n3767      OAS1      0\r\n3768      OIAS      0\r\n3769    VKORC1      0\r\n3770      VKOR      0\r\n3771    VKCFD2      0\r\n3772  FLJ00289      0\r\n3773      GGCX      0\r\n3774    ACADVL      0\r\n3775     VLCAD      0\r\n3776       VWF      0\r\n3777     F8VWF      0\r\n3778     SNAI2      0\r\n3779      SLUG      0\r\n3780      WS2D      0\r\n3781   RAB3GAP      0\r\n3782    WARBM1      0\r\n3783      P130      0\r\n3784  ADAMTS10      0\r\n3785    RECQL2      0\r\n3786     RECQ3      0\r\n3787       WRN      0\r\n3788       TKT      0\r\n3789     KRT13      0\r\n3790      KRT4      0\r\n3791      CYK4      0\r\n3792    POU6F2      0\r\n3793      WTSL      0\r\n3794       WT5      0\r\n3795     ATP7B      0\r\n3796       WND      0\r\n3797   EIF2AK3      0\r\n3798       PEK      0\r\n3799      PERK      0\r\n3800       WRS      0\r\n3801       XDH      0\r\n3802       XPA      0\r\n3803       XPC      0\r\n3804      XPCC      0\r\n3805      DDB2      0\r\n3806     ERCC4      0\r\n3807       XPF      0\r\n3808      POLH      0\r\n3809       XPV      0\r\n3810       XIC      0\r\n3811       XCE      0\r\n3812      XIST      0\r\n3813      SXI1      0\r\n3814     PEX14      0\r\n3815       PXF      0\r\n3816      HK33      0\r\n3817  D1S2223E      0\r\n3818     PEX19      0\r\n3819     ABCD3      0\r\n3820     PXMP1      0\r\n3821     PMP70      0\r\n3822     PEX16      0\r\n3823      PEX3      0\r\n\r\n\r\n\r\n# summary statistics for node attributes\r\n\r\nsummary(data.frame(name = network.stat %v% \"vertex.names\",\r\n    totdegree = sna::degree(network.stat)))\r\n\r\n\r\n     name             totdegree     \r\n Length:3823        Min.   : 0.000  \r\n Class :character   1st Qu.: 2.000  \r\n Mode  :character   Median : 4.000  \r\n                    Mean   : 6.951  \r\n                    3rd Qu.: 8.000  \r\n                    Max.   :82.000  \r\n\r\n## not getting names of nodes?????\r\n\r\n\r\n\r\n\r\n\r\n# plotting a histogram\r\n\r\n#plot a histogram: ggplot\r\n\r\nnetwork.nodes <- data.frame(name = network.stat %v% \"vertex.names\", degree = sort(sna::degree(network.stat), decreasing = T))\r\n\r\nggplot(network.nodes, aes(name, degree)) +\r\n  geom_col() +\r\n  labs(title = \"Gene Distribution\", x=\"Gene Name\") + coord_flip()\r\n\r\n\r\n\r\n\r\n\r\n\r\n#get network centralization score: statnet\r\n\r\n# centralization(network.stat, g = NULL, degree, mode = \"graph\", diag = FALSE)\r\n\r\n\r\n\r\n\r\n\r\n# summarizing the data after grouping the Gene type\r\n\r\nnetwork.nodes%>%\r\n  group_by(name)%>%\r\n  summarise_all(funs(mean, n()))\r\n\r\n\r\n# A tibble: 3,823 x 3\r\n   name    mean     n\r\n   <chr>  <dbl> <int>\r\n 1 A15        2     1\r\n 2 A2M       20     1\r\n 3 A4GALT    10     1\r\n 4 AAA       44     1\r\n 5 AAAS      44     1\r\n 6 AAC2       0     1\r\n 7 AACT      24     1\r\n 8 AANAT      6     1\r\n 9 AAS       46     1\r\n10 AASS       4     1\r\n# ... with 3,813 more rows\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/httpsrpubscomak64823895256/distill-preview.png",
    "last_modified": "2022-05-11T18:46:07-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsisha-mahajan12githubiofootballtransfersocialnetworkpostswelcometransfer-of-players-in-european-football/",
    "title": "Introduction to Football Networks",
    "description": "In this blog, We'll be referring to soccer as football -- since it's played with a foot.",
    "author": [
      {
        "name": "Isha Akshita Mahajan, Ankit Kumar",
        "url": {}
      }
    ],
    "date": "2022-05-11",
    "categories": [],
    "contents": "\nTransfer of players in European Football\nThis blog is an attempt to examine a social network of football transfers in major football leagues. The data was extracted using web scraping techniques from transfermarket.co.uk which is known to be a reliable source for data on players and their movement in various sports.\nUnlike American sports, where players transfer from one team to another either through contracts or through their agents. It is more like a trade. However, in the football transfer system, the players move from one team to another by the selling and buying process. The transaction that is made during the process is considered to be a transfer fee and is the amount that one team is paying to another while transferring the player. Usually 5 or 10 percent of this fee goes to the player themself.\nThese transactions happen during transfer windows which are similar to trade deadlines in the NBA. However, unlike a specific date, it is a window of time during which football clubs buy and sell players. These transfer windows in most European leagues are during the summer summer and winter.\nIn addition to transfers by paying money, players also move from one club to another on loans where they can temporally play for a team for which they dont have a contract. There is no transaction between the clubs however the club is still responsible for paying the player’s fee.\nWebscraping\nThe data was scraped using python and is attached to this blog. We extracted data from the year 2018-2021 which is 4 years and 8 transfer windows. We removed the free and loan transfers because they don’t show a transaction between the club.\n\n\n\n",
    "preview": {},
    "last_modified": "2022-05-11T18:46:18-04:00",
    "input_file": {}
  },
  {
    "path": "posts/httpsisha-mahajan12githubiofootballtransfersocialnetworkposts2022-05-08-network-degree/",
    "title": "Network Degree",
    "description": "Network Degree of Football Networks",
    "author": [
      {
        "name": "Isha Akshita Mahajan,Ankit Kumar",
        "url": {}
      }
    ],
    "date": "2022-05-11",
    "categories": [],
    "contents": "\nAssignment Description\nBriefly describe the dataset you are using: identify initial network format, describe and identify the nodes (including how many nodes are in the dataset), what constitutes a tie or edge (including how many ties, whether ties are directed/undirected and weighted/binary, and how to interpret the value of the tie if any), whether or not there are edge attributes that might be used to subset data or stack multiple networks (e.g., tie type, year, etc). Not every feature of the network needs to be described, but description should orient reader to the network data and provide any necessary context for the results provided.\nProvide at least two or three noteworthy results, including the relevant statistics and interpretation. For example, explaining which node(s) are most central and which are least central. Discuss (with any related evidence) whether or not the node(s) behavior is in line with or violates expectations based on the degree centrality measure. What do you make of network density and centralization measures?\nDensity\n\n\ngraph.density(ig, loops = FALSE)\n\n\n[1] 0.005841598\n\nThe network density of the football transfer network is 0.005 which indicates that the 0.5% of all possible ties in the network are made. In this case we would leave the loops value as false because it is not possible for a football team to transfer a player back to their own team.\nDegree\nThe degree measures the node centrality or a popularity of a node. It gives a count of the relationships that a node is involved in or the number of edges it has. Given that the goal of these blogs to keep all these important network properties in one place, I begin by creating a dataframe that I’ll keep on building as I create these blogs. I call this data frame transfer.nodes.\n\n\n#create degree column\ntransfer.nodes<-data.frame(name=V(ig)$name, degree=igraph::degree(ig))\n#create indegree and outdegree column\ntransfer.nodes<-transfer.nodes %>%\n           mutate(indegree=igraph::degree(ig, mode=\"in\", loops=FALSE),\n           outdegree=igraph::degree(ig, mode=\"out\", loops=FALSE))\n\n\n\n\n\n# clubs that have the highest relationships in the network\ndegree <- transfer.nodes %>% \n  arrange(desc(degree)) \nkable(head(degree))\n\n\n\n\n\nname\n\n\ndegree\n\n\nindegree\n\n\noutdegree\n\n\nAS Roma\n\n\nAS Roma\n\n\n78\n\n\n39\n\n\n39\n\n\nGenoa CFC\n\n\nGenoa CFC\n\n\n73\n\n\n46\n\n\n27\n\n\nAS Monaco\n\n\nAS Monaco\n\n\n72\n\n\n39\n\n\n33\n\n\nUS Sassuolo\n\n\nUS Sassuolo\n\n\n70\n\n\n35\n\n\n35\n\n\nInter Milan\n\n\nInter Milan\n\n\n68\n\n\n32\n\n\n36\n\n\nJuventus FC\n\n\nJuventus FC\n\n\n68\n\n\n27\n\n\n41\n\n\n# Clubs that recieved the most transfers.\nindegree <- transfer.nodes %>% \n  arrange(desc(indegree)) \nkable(head(indegree))\n\n\n\n\n\nname\n\n\ndegree\n\n\nindegree\n\n\noutdegree\n\n\nGenoa CFC\n\n\nGenoa CFC\n\n\n73\n\n\n46\n\n\n27\n\n\nAS Roma\n\n\nAS Roma\n\n\n78\n\n\n39\n\n\n39\n\n\nAS Monaco\n\n\nAS Monaco\n\n\n72\n\n\n39\n\n\n33\n\n\nACF Fiorentina\n\n\nACF Fiorentina\n\n\n66\n\n\n38\n\n\n28\n\n\nAC Milan\n\n\nAC Milan\n\n\n60\n\n\n38\n\n\n22\n\n\nParma Calcio 1913\n\n\nParma Calcio 1913\n\n\n48\n\n\n38\n\n\n10\n\n\n# Clubs that transferred the most.\noutdegree <- transfer.nodes %>% \narrange(desc(outdegree)) \nkable(head(outdegree))\n\n\n\n\n\nname\n\n\ndegree\n\n\nindegree\n\n\noutdegree\n\n\nJuventus FC\n\n\nJuventus FC\n\n\n68\n\n\n27\n\n\n41\n\n\nSporting CP\n\n\nSporting CP\n\n\n63\n\n\n24\n\n\n39\n\n\nAS Roma\n\n\nAS Roma\n\n\n78\n\n\n39\n\n\n39\n\n\nFC Barcelona\n\n\nFC Barcelona\n\n\n59\n\n\n21\n\n\n38\n\n\nSL Benfica\n\n\nSL Benfica\n\n\n63\n\n\n25\n\n\n38\n\n\nInter Milan\n\n\nInter Milan\n\n\n68\n\n\n32\n\n\n36\n\n\nAS ROMA has the highest degree in our football transfer network. Both the in degree and the out degrees hold a value of 39. This means that 39 transfer of players have left the club and 39 players have come in to the club.This makes me wonder if AS ROMA is a club which might be serving like a starting point for various players to move towards the major football leagues. But there might be better ways to explore that later in the analysis.\nGenoa FC has the indegree of 46 which means they’ve had 46 transfers to their club.\nJuventus FC has the highest ourdegree which means they’ve transferred 41 players out of the club.\n\n\n#V(ig)$name\nroma_movement <- incident(ig, 66, mode = c(\"all\"))\n\n\n\n\n\n#table(head_of(ig, E(ig)))\n\n\n\n\n\n# make a basic plot\nplot(ig, \n     vertex.label.color = \"black\", \n     edge.color = 'gray77',\n     vertex.size = 6,\n     edge.arrow.size = 0.1,\n     layout = layout_nicely(ig))\n\n\n\n\nDegree Distributions\n\n\n#create a histogram of Transfer Indegree\nhist(transfer.nodes$indegree, main=\"Football Transfers: In-degree Distribution\", xlab=\"Players Recieved\")\n\n\n\n\n\n\n#create a histogram of Transfer Indegree\nhist(transfer.nodes$outdegree, main=\"Football Transfers: Out-degree Distribution\", xlab=\"Players Transferred\")\n\n\n\n\nNetwork Degree Centralization\nAdd Interpretation, check if loops are supposed to be true or false\n\n\n#get network centralization score: igraph\ncentr_degree(ig, loops = FALSE, mode=\"in\")$centralization\n\n\n[1] 0.04733078\n\ncentr_degree(ig, loops = FALSE, mode=\"out\")$centralization\n\n\n[1] 0.04155044\n\n\n\n\n",
    "preview": "posts/httpsisha-mahajan12githubiofootballtransfersocialnetworkposts2022-05-08-network-degree/network-degree_files/figure-html5/unnamed-chunk-7-1.png",
    "last_modified": "2022-05-11T18:46:58-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsisha-mahajan12githubiofootballtransfersocialnetworkposts2022-05-08-exploring-european-football-transfer-networks/",
    "title": "Exploring European Football Transfer Networks",
    "description": "Exploring a network of football teams and the transactions they made from 2018-2021. \nAn Edgelist maybe?",
    "author": [
      {
        "name": "Isha Akshita Mahajan, Ankit Kumar",
        "url": {}
      }
    ],
    "date": "2022-05-11",
    "categories": [],
    "contents": "\nLoad Required Packages\n\n\nlibrary(igraph)\nlibrary(tidyverse)\nlibrary(corrr)\nlibrary(intergraph)\nlibrary(statnet)\nlibrary(network)\nlibrary(sna)\nlibrary(ggplot2)\nlibrary(kableExtra)\n\n\n\nLoad the data\nI begin by converting the data into an edgelist format. I select the club from and club to columns which are our nodes in this case. The relationship that I’m interested in is where from and where to has the majority of transfers taken place across various places. After selecting the from and to columns, I select the players, the transfer fee and the season in which the transfer took place. I also remove loan and free transfer as they don’t seem relevant at the moment.\n\n\n#load data from CSV\ntransfers <- read_csv(\"/Users/isha/Desktop/GitHub/transfernetworks.csv\")\n#select relevant data for edgelist format\ndata <- transfers %>% \n  select(club_from, club_to, name,fee) %>% \n  filter(fee != \"free transfer\") %>% \n  filter(fee != \"loan transfer\") %>% \n  filter (fee != 0)\ndata$fee <- as.numeric(data$fee) \ndata <- data %>% \nfilter(fee != is.na(fee))\nany(is.na(data$fee))\n\n\n[1] FALSE\n\nhead(data)\n\n\n# A tibble: 6 × 4\n  club_from         club_to             name                 fee\n  <chr>             <chr>               <chr>              <dbl>\n1 Aston Villa       Manchester City     Jack Grealish  117000000\n2 Inter Milan       Chelsea FC          Romelu Lukaku  113000000\n3 Borussia Dortmund Manchester United   Jadon Sancho    85000000\n4 ACF Fiorentina    Juventus FC         Dušan Vlahović  81000000\n5 Real Madrid       Manchester United   Raphaël Varane  40000000\n6 Inter Milan       Paris Saint-Germain Achraf Hakimi   66000000\n\nkable(head(data))\n\n\n\nclub_from\n\n\nclub_to\n\n\nname\n\n\nfee\n\n\nAston Villa\n\n\nManchester City\n\n\nJack Grealish\n\n\n1.17e+08\n\n\nInter Milan\n\n\nChelsea FC\n\n\nRomelu Lukaku\n\n\n1.13e+08\n\n\nBorussia Dortmund\n\n\nManchester United\n\n\nJadon Sancho\n\n\n8.50e+07\n\n\nACF Fiorentina\n\n\nJuventus FC\n\n\nDušan Vlahović\n\n\n8.10e+07\n\n\nReal Madrid\n\n\nManchester United\n\n\nRaphaël Varane\n\n\n4.00e+07\n\n\nInter Milan\n\n\nParis Saint-Germain\n\n\nAchraf Hakimi\n\n\n6.60e+07\n\n\nCreate Edgelist (Part 1)\nThe edgelist I created consists of 867 nodes and 4386 ties. The edge attributes are the players who are being transferred. The weight of the edges is the fee for which they were transferred. The edgelist is directed because the players are transferring from one team to another.\n\n\n#convert data into matrix format\ndata.mat <- as.matrix(data)\n#create igraph object from data\nig <- graph_from_data_frame(data.mat, directed = TRUE)\n# add edge attribute weight i.e transfer fee\nig <- set_edge_attr(ig, \"weight\", value = na.omit(data$fee))\n# add edge attribute season of transfer\n#ig<-  set_edge_attr(ig, \"season\", value = na.omit(data$season))\n# add node attribute i.e league the club belongs to\n#set_vertex_attr(ig,\"league\" ,value = node_attr)\n#delete edge attribute that was automatically being created in addition to weight\nig <- delete_edge_attr(ig, \"fee\")\n#check summary of the igraph object\nsummary(ig)\n\n\nIGRAPH eb768a3 DNW- 867 4386 -- \n+ attr: name (v/c), name (e/c), weight (e/n)\n\n#convert ig network into intergraph object to coerce with statnet\nnetwork <- intergraph::asNetwork(ig) \nnetwork\n\n\n Network attributes:\n  vertices = 867 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 4386 \n    missing edges= 0 \n    non-missing edges= 4386 \n\n Vertex attribute names: \n    vertex.names \n\n Edge attribute names not shown \n\n\n\n#plot intergraph object\nplot(network)\n\n\n\n\n\n\n#plot igraph object \nplot(ig)\n\n\n\n\nExploring Network Structures\n\n\n#count the number of nodes\nvcount(ig)\n\n\n[1] 867\n\n# count the number of edges\necount(ig)\n\n\n[1] 4386\n\nThe network consists of 867 nodes and 4386 edges. This means that there are 867 football clubs in our network and we are going to be explore the transfer of players that has taken place in the last four years i.e 8 transfer windows.\n\n\n# look at the dyad census\ndyad_census(ig)\n\n\n$mut\n[1] 201\n\n$asym\n[1] 3468\n\n$null\n[1] 371742\n\nThere are 201 mutual, 3468 asymmetrical and 371742 dyads\n\n\ntriad_census(ig)\n\n\n [1] 105140687   2584373    450247     12854     17067     27123\n [7]      4389      3716      1486       339       380       182\n[13]       194       306       134        28\n\ntriangles(ig)\n\n\n+ 8007/867 vertices, named, from eb768a3:\n   [1] SL Benfica                      \n   [2] Borussia Dortmund               \n   [3] Eintracht Frankfurt             \n   [4] SL Benfica                      \n   [5] Borussia Dortmund               \n   [6] PSV Eindhoven                   \n   [7] SL Benfica                      \n   [8] Borussia Dortmund               \n   [9] CA Boca Juniors                 \n  [10] SL Benfica                      \n+ ... omitted several vertices\n\n\n\nis_directed(ig)\n\n\n[1] TRUE\n\nis_weighted(ig)\n\n\n[1] TRUE\n\nis_bipartite(ig)\n\n\n[1] FALSE\n\nThe results suggest that the network is directed, i.e players are transferring from one club to another.\nThe network is weighted. The weight of the transfer is the fee for which the transfer was made.\nThe network is not bipartite which mean that they transfers are not in sets- there is a flow of transfers of players in the network.\nTransitivity\n\n\n#get global clustering cofficient: igraph\ntransitivity(ig, type=\"global\")\n\n\n[1] 0.1088854\n\n#get average local clustering coefficient: igraph\ntransitivity(ig, type=\"average\")\n\n\n[1] 0.1058294\n\nThe global transitivity of the graph is 0.1088854 which is the ratio of triangles connected to triangles\nthe average transitivity 0.1058294 is the transitivity of the local triad clusters, i.e. the ratio of local triangles to all connected triangles.\nPath Lengths\nThe average path length in the weighted network is 5689620.\n\n\naverage.path.length(ig)\n\n\n[1] 5689620\n\nThe shortest_paths function enables us to look at the shortest parts between two nodes. Let’s explore some shortest between football clubs of various leagues.\n\n\nshortest_paths(ig,\"Chelsea FC\", \"Liverpool FC\")$vpath[[1]]\n\n\n+ 6/867 vertices, named, from eb768a3:\n[1] Chelsea FC        Spartak Moscow    SC Freiburg      \n[4] 1.FC Union Berlin FC Schalke 04     Liverpool FC     \n\nshortest_paths(ig, \"FC Porto\", \"Juventus FC\")$vpath[[1]]\n\n\n+ 6/867 vertices, named, from eb768a3:\n[1] FC Porto       AS Roma        ACF Fiorentina Hellas Verona \n[5] SS Lazio       Juventus FC   \n\nshortest_paths(ig, \"Bayern Munich\", \"Aston Villa\")$vpath[[1]]\n\n\n+ 9/867 vertices, named, from eb768a3:\n[1] Bayern Munich       TSG 1899 Hoffenheim VfB Stuttgart      \n[4] SC Braga            Olympiacos Piraeus  Red Star Belgrade  \n[7] UD Las Palmas       LOSC Lille          Aston Villa        \n\n\n\ndistances(ig,\"Chelsea FC\", \"Real Madrid\")\n\n\n           Real Madrid\nChelsea FC       8e+05\n\ndistances(ig, \"Bayern Munich\", \"Chelsea FC\")\n\n\n              Chelsea FC\nBayern Munich    1050000\n\n\n\naverage.path.length(ig)\n\n\n[1] 5689620\n\nThe distance between Chelsea and FC Barcelona is 1.6 nodes.\nComponent Structure\n\n\nnames(igraph::components(ig))\n\n\n[1] \"membership\" \"csize\"      \"no\"        \n\nigraph::components(ig)$no\n\n\n[1] 20\n\nigraph::components(ig)$csize\n\n\n [1] 829   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2\n[17]   2   2   2   2\n\n#igraph::components(ig)$membership\n\n\n\nThere are 20 components in this network. The largest component consists of 829 nodes and the rest nineteen components comprise of two nodes each.\nNetwork Visualizations - an attempt\n\n\nplot(ig, vertex.label.color = \"black\")\n\n\n\n\n\n\nm1 <- layout_nicely(ig)\nw1 <- E(ig)$names\nplot(ig, \n        vertex.label.color = \"black\", \n        edge.color = 'black',\n        edge.width = w1,\n        layout = m1)\n\n\n\n\n\n\nlibrary(ggraph)\nggraph(ig, layout = \"with_kk\" )+\n  geom_edge_link(aes(alpha = weight))+\n  geom_node_point(aes(size = strength(ig)))\n\n\n\n\n\n\nlibrary(visNetwork)\ndata_2 <- toVisNetworkData(ig)\n\nvisNetwork(nodes = data_2$nodes, edges = data_2$edges, width = 300, height = 300) %>% \nvisIgraphLayout(layout = \"layout_with_kk\") %>% \nvisOptions(highlightNearest = TRUE) %>% \nvisOptions(nodesIdSelection = TRUE) %>% \nvisOptions(selectedBy = \"group\")\n\n\n\n{\"x\":{\"nodes\":{\"id\":[\"Aston Villa\",\"Inter Milan\",\"Borussia Dortmund\",\"ACF Fiorentina\",\"Real Madrid\",\"RB Leipzig\",\"FC Barcelona\",\"Brighton & Hove Albion\",\"Manchester City\",\"Stade Rennais FC\",\"FC Porto\",\"Eintracht Frankfurt\",\"Juventus FC\",\"Olympique Lyon\",\"Chelsea FC\",\"Sporting CP\",\"Atlético de Madrid\",\"Norwich City\",\"Udinese Calcio\",\"Tottenham Hotspur\",\"Bayer 04 Leverkusen\",\"Everton FC\",\"Red Bull Salzburg\",\"PSV Eindhoven\",\"CSKA Moscow\",\"Burnley FC\",\"Hertha BSC\",\"Sevilla FC\",\"SS Lazio\",\"Southampton FC\",\"Arsenal FC\",\"Manchester United\",\"Sheffield United\",\"LOSC Lille\",\"Borussia Mönchengladbach\",\"Brescia Calcio\",\"Hellas Verona\",\"Sport Club Internacional\",\"FC Schalke 04\",\"FC Barcelona B\",\"Real Betis Balompié\",\"Atalanta BC\",\"Zenit St. Petersburg\",\"Paris Saint-Germain\",\"Fulham FC\",\"AFC Bournemouth\",\"Dynamo Kyiv\",\"Chelsea FC U23\",\"Club Brugge KV\",\"VfB Stuttgart\",\"Ajax Amsterdam\",\"Clube de Regatas do Flamengo\",\"Bologna FC 1909\",\"Getafe CF\",\"CA River Plate\",\"FC Empoli\",\"CA Vélez Sarsfield\",\"VfL Wolfsburg\",\"GNK Dinamo Zagreb\",\"SL Benfica\",\"West Bromwich Albion\",\"Blackburn Rovers\",\"RC Strasbourg Alsace\",\"SCO Angers\",\"Leicester City\",\"AS Roma\",\"RSC Anderlecht\",\"KAA Gent\",\"RC Lens\",\"AZ Alkmaar\",\"Celtic FC\",\"Liverpool FC\",\"FC Dallas\",\"Standard Liège\",\"Wolverhampton Wanderers\",\"Montpellier HSC\",\"Rubin Kazan\",\"Sociedade Esportiva Palmeiras\",\"AS Monaco\",\"Grêmio Foot-Ball Porto Alegrense\",\"FC Nordsjaelland\",\"Stade Brestois 29\",\"FC Basel 1893\",\"SC Freiburg\",\"Reading FC\",\"Lokomotiv Moscow\",\"Stoke City\",\"Rangers FC\",\"Stade Reims\",\"Fluminense Football Club\",\"1. FC Köln\",\"Vitória Guimarães SC\",\"FK Rostov\",\"Vitória Guimarães SC B\",\"US Sassuolo\",\"FC Copenhagen\",\"PAOK Thessaloniki\",\"FC Nantes\",\"SC Braga\",\"Club Atlético Independiente\",\"Feyenoord Rotterdam\",\"Santos FC\",\"Red Bull Bragantino\",\"SV Werder Bremen\",\"FC Porto U19\",\"Pogon Szczecin\",\"1.FSV Mainz 05\",\"SK Slavia Prague\",\"UC Sampdoria\",\"Cagliari Calcio\",\"Fenerbahce SK\",\"Spartak Moscow\",\"Santos Laguna\",\"Club Atlético Lanús\",\"Sharjah Cultural Sports Club\",\"FC Metz\",\"FC Midtjylland\",\"FC Lorient\",\"Orlando City SC\",\"Guangzhou FC\",\"1.FC Union Berlin\",\"Atlanta United FC\",\"West Ham United\",\"Shanghai Port\",\"Olympique Marseille\",\"AC Milan\",\"Leicester City U23\",\"FC Girondins Bordeaux\",\"RCD Mallorca\",\"Real Valladolid CF\",\"New England Revolution\",\"Hatayspor\",\"KV Mechelen\",\"Olympiacos Piraeus\",\"RSC Charleroi\",\"Clube Atlético Mineiro\",\"Manchester City U23\",\"Club Atlético Talleres\",\"CD Cruz Azul\",\"Amiens SC\",\"Rapid Vienna\",\"FC Crotone\",\"FK Krasnodar\",\"Dynamo Moscow\",\"FC Toulouse\",\"Torino FC\",\"FC Augsburg\",\"Genoa CFC\",\"Hamburger SV\",\"Bröndby IF\",\"Watford FC\",\"Royale Union Saint Gilloise\",\"Atlas Guadalajara\",\"SC Heerenveen\",\"SPAL\",\"Atletico River Plate Montevideo\",\"CF América\",\"OGC Nice\",\"Parma Calcio 1913\",\"Delfino Pescara 1936\",\"Shakhtar Donetsk\",\"Trabzonspor\",\"Malmö FF\",\"New York City FC\",\"BSC Young Boys\",\"FC Famalicão\",\"CA Banfield\",\"D.C. United\",\"SK Sturm Graz\",\"IFK Norrköping\",\"Universitatea Craiova\",\"HNK Hajduk Split\",\"CF Monterrey\",\"CA Peñarol\",\"FC Utrecht\",\"FC Groningen\",\"Club Athletico Paranaense\",\"SM Caen\",\"Sporting Kansas City\",\"CF Pachuca\",\"SD Huesca\",\"Mazatlán FC\",\"Valencia CF\",\"CA Boca Juniors\",\"Los Angeles FC\",\"Oud-Heverlee Leuven\",\"Frosinone Calcio\",\"Club Estudiantes de La Plata\",\"São Paulo Futebol Clube\",\"Vissel Kobe\",\"Atlético Nacional\",\"Sport Club Corinthians Paulista\",\"Rakow Czestochowa\",\"Sparta Rotterdam\",\"FK Bodø/Glimt\",\"Ural Yekaterinburg\",\"Istanbul Basaksehir FK\",\"Cardiff City\",\"UD Almería\",\"Bayern Munich\",\"Tigres UANL\",\"Nîmes Olympique\",\"Villarreal CF\",\"Deportivo Alavés\",\"SSC Napoli\",\"CA Newell's Old Boys\",\"Huddersfield Town\",\"HNK Gorica\",\"Club Cerro Porteño\",\"CA Rosario Central\",\"Royal Antwerp FC\",\"SC Farense\",\"Cruzeiro Esporte Clube\",\"Vejle Boldklub\",\"KV Oostende\",\"Dijon FCO\",\"Fatih Karagümrük\",\"Swansea City\",\"Red Star Belgrade\",\"Hammarby IF\",\"Deportes Tolima\",\"FC Porto B\",\"Maccabi Petah Tikva\",\"NK Lokomotiva Zagreb\",\"Alanyaspor\",\"Sarpsborg 08 FF\",\"Ferencvárosi TC\",\"Twente Enschede FC\",\"UNAM Pumas\",\"Inter Miami CF\",\"Defensa y Justicia\",\"Juventus U23\",\"Middlesbrough FC\",\"CA Colon\",\"FC Erzgebirge Aue\",\"1.FC Nuremberg\",\"Hebei FC\",\"Club Libertad Asunción\",\"CD América de Cali\",\"Esporte Clube Bahia\",\"Charlotte FC\",\"Chicago Fire FC\",\"Hannover 96\",\"SpVgg Greuther Fürth\",\"Willem II Tilburg\",\"FC Lausanne-Sport\",\"FC Volendam\",\"IF Elfsborg\",\"GD Estoril Praia\",\"Kayserispor\",\"Spezia Calcio\",\"Liverpool FC U23\",\"Club Tijuana\",\"Hokkaido Consadole Sapporo\",\"BK Häcken\",\"CD Santa Clara\",\"Arsenal Tula\",\"CA San Lorenzo de Almagro\",\"Lech Poznan\",\"Moreirense FC\",\"Granada CF\",\"Derby County\",\"AA Argentinos Juniors\",\"Toronto FC\",\"TSG 1899 Hoffenheim\",\"Hibernian FC\",\"Club Nacional\",\"Raja Club Athletic\",\"Paradou AC\",\"Club Atlético Unión\",\"Legia Warszawa\",\"Danubio FC\",\"Independiente del Valle\",\"Beijing Guoan\",\"Shakhtar Donetsk U19\",\"Envigado FC\",\"FC Utrecht U21\",\"CSKA-Sofia\",\"Kawasaki Frontale\",\"Stabæk Fotball\",\"MTK Budapest\",\"Club de Regatas Vasco da Gama\",\"Akhmat Grozny\",\"Al-Shabab FC (Riyadh)\",\"Club Necaxa\",\"Millonarios FC\",\"Real Madrid Castilla\",\"Piast Gliwice\",\"Antalyaspor\",\"New York Red Bulls\",\"Colorado Rapids\",\"Rio Ave FC\",\"SL Benfica B\",\"Philadelphia Union\",\"Ludogorets Razgrad\",\"Dinamo Tbilisi\",\"Minnesota United FC\",\"Brentford FC\",\"Club Atlético Huracán\",\"FCSB\",\"Krylya Sovetov Samara\",\"Pordenone Calcio\",\"LDU Quito\",\"Göztepe\",\"Unión Española\",\"NK Osijek\",\"Club Alianza Lima\",\"FC Nordsjaelland U19\",\"Portimonense SC\",\"Slovan Bratislava\",\"Roma Primavera\",\"HNK Rijeka\",\"SC Paderborn 07\",\"Sint-Truidense VV\",\"CD Leganés\",\"VVV-Venlo\",\"Puebla FC\",\"FC Bayern Munich II\",\"Djurgårdens IF\",\"Al-Jazira (Abu Dhabi)\",\"SV Zulte Waregem\",\"Gil Vicente FC\",\"Associação Atlética Ponte Preta\",\"Boavista FC\",\"Los Angeles Galaxy\",\"Portland Timbers\",\"KRC Genk\",\"Nashville SC\",\"Borussia Dortmund II\",\"Aarhus GF\",\"Liverpool FC Montevideo\",\"Lechia Gdansk\",\"Altinordu FK\",\"Al-Ettifaq\",\"VfL Bochum\",\"Columbus Crew\",\"Elche CF\",\"Wisla Kraków\",\"Maccabi Tel Aviv\",\"AC Sparta Prague\",\"Al-Ittihad Jeddah\",\"MSK Zilina\",\"Sport Club do Recife\",\"AC Le Havre\",\"US Lecce\",\"Palermo FC\",\"FK Cukaricki\",\"Calcio Padova\",\"Molde FK\",\"AIK Solna\",\"AS Cittadella\",\"Vålerenga Fotball\",\"MOL Fehérvár FC\",\"Hércules CF\",\"Milan Primavera\",\"DAC Dunajska Streda\",\"Fortaleza Esporte Clube\",\"Associação Chapecoense de Futebol\",\"FC Sheriff Tiraspol\",\"Sivasspor\",\"Bursaspor\",\"AEK Athens\",\"Girona FC\",\"FC Viktoria Plzen\",\"Belenenses SAD\",\"LASK\",\"Botafogo de Futebol e Regatas\",\"Vancouver Whitecaps FC\",\"Club Atlético Platense\",\"FC Sochaux-Montbéliard\",\"FC Admira Wacker Mödling\",\"Club Atlético Atlanta\",\"Górnik Zabrze\",\"Atlético de Rafaela\",\"Club Atlético Tucuman\",\"FC St. Gallen 1879\",\"CSD Colo Colo\",\"Racing Club\",\"Galatasaray A.S.\",\"CD Feirense\",\"FC Dinamo 1948\",\"Montevideo Wanderers\",\"LKS Lodz\",\"Celta de Vigo\",\"Al Qadisiyah FC\",\"Esteghlal FC\",\"Konyaspor\",\"Benevento Calcio\",\"Kasimpasa\",\"Luton Town\",\"Arminia Bielefeld\",\"FK Orenburg\",\"Yeni Malatyaspor\",\"Atlético de San Luis\",\"Deportivo de La Coruña\",\"Ipswich Town\",\"Club Guaraní\",\"SD Eibar\",\"Wydad Casablanca\",\"NK Maribor\",\"Odense Boldklub\",\"Peterborough United\",\"Olimpia Asunción\",\"Ceará Sporting Club\",\"Deportes La Serena\",\"Grenoble Foot 38\",\"AE Larisa\",\"SK Dynamo Ceske Budejovice\",\"Valenciennes FC\",\"Pohang Steelers\",\"Oeste Futebol Clube (SP)\",\"Chamois Niortais FC\",\"IFK Göteborg\",\"Tombense Futebol Clube (MG)\",\"FC Slovan Liberec\",\"Austria Vienna\",\"Holstein Kiel\",\"FK Radnik Surdulica\",\"Shandong Taishan\",\"FC Lugano\",\"FK TSC Backa Topola\",\"Jagiellonia Bialystok\",\"Atlético Clube Goianiense\",\"FK Aktobe\",\"AS Saint-Étienne\",\"Dalian Professional\",\"Crystal Palace\",\"Real Sociedad\",\"Queens Park Rangers\",\"RCD Espanyol Barcelona\",\"Nottingham Forest\",\"US Salernitana 1919\",\"Birmingham City\",\"Juventus Primavera\",\"Clermont Foot 63\",\"FK Partizan Belgrade\",\"Ajax Amsterdam U21\",\"KV Kortrijk\",\"Fortuna Düsseldorf\",\"Levante UD\",\"FC Zürich\",\"Coritiba Foot Ball Club\",\"Kashiwa Reysol\",\"Wolfsberger AC\",\"1.FC Heidenheim 1846\",\"Três Passos Atlético Clube\",\"CD Tenerife\",\"Zaglebie Lubin\",\"FC Paris Saint-Germain B\",\"Real Zaragoza\",\"Jeonbuk Hyundai Motors\",\"FC Basel 1893 U18\",\"Club León FC\",\"CA Fénix\",\"Heracles Almelo\",\"FC Sochaux-Montbéliard U19\",\"Beitar Jerusalem\",\"Houston Dynamo FC\",\"Querétaro FC\",\"Bristol City\",\"Shanghai Shenhua\",\"FC Sion\",\"NEC Nijmegen\",\"FK Ufa\",\"ESTAC Troyes\",\"Wigan Athletic\",\"AS Monaco B\",\"Derby County U18\",\"Aberdeen FC\",\"Pyramids FC\",\"FC Luzern\",\"Olympique de Marseille B\",\"Motherwell FC\",\"CA Osasuna\",\"Juventud de Las Piedras\",\"Asteras Tripolis\",\"CD Godoy Cruz Antonio Tomba\",\"Amiens SC U19\",\"Persepolis FC\",\"Oxford United\",\"GDSC Alvarenga Futebol SAD\",\"Grasshopper Club Zurich\",\"Apollon Limassol\",\"Chongqing Liangjiang Athletic\",\"Guangzhou City\",\"Wuhan FC\",\"Shanghai Shenhua U19\",\"Genclerbirligi Ankara\",\"Helsingborgs IF\",\"Le Mans FC\",\"Valencia Mestalla\",\"SönderjyskE\",\"Zamalek SC\",\"Preston North End\",\"1.FC Magdeburg\",\"Deportivo Cali\",\"Hebei FC Reserves\",\"Yokohama FC\",\"Livingston FC\",\"Barnsley FC\",\"Charlton Athletic\",\"HNK Sibenik\",\"Al-Ahli Jeddah\",\"Junior FC\",\"Urawa Red Diamonds\",\"1.FC Kaiserslautern\",\"Aalborg BK\",\"Cherno More Varna\",\"Everton FC U23\",\"AC Horsens\",\"TP Mazembe\",\"NAC Breda\",\"Hull City\",\"Málaga CF\",\"LB Châteauroux\",\"FC Paços de Ferreira\",\"NK Istra 1961 U17\",\"SpVgg Unterhaching\",\"Barcelona SC Guayaquil\",\"Royal Excel Mouscron\",\"Pakhtakor Tashkent\",\"FC Cincinnati\",\"Meizhou Hakka\",\"Astra Giurgiu\",\"Paris FC Youth\",\"Beerschot V.A.\",\"El Ahly Cairo\",\"Zenit 2 St. Petersburg\",\"Serra Macaense Futebol Clube (RJ)\",\"Arsenal FC U18\",\"Heart of Midlothian FC\",\"FC Viitorul Constanta\",\"FC Astana\",\"Doncaster Rovers\",\"Budapest Honvéd FC\",\"Silkeborg IF\",\"FC Pro Vercelli 1892\",\"UD Las Palmas\",\"Fortuna Sittard\",\"APOEL Nicosia\",\"Instituto AC Córdoba\",\"Rayo Vallecano\",\"Cosenza Calcio\",\"Real Salt Lake City\",\"CFR Cluj\",\"Club Universidad de Chile\",\"PEC Zwolle\",\"Shakhter Soligorsk\",\"Hammarby IF U19\",\"Altay SK\",\"FC St. Pauli\",\"Spartaks Jurmala\",\"Desna Chernigiv\",\"Napoli Primavera\",\"Randers FC\",\"Würzburger Kickers\",\"Esporte Clube Juventude\",\"AC Ajaccio\",\"Aris Thessaloniki\",\"Hertha BSC U19\",\"PFK Tambov\",\"Bristol Rovers\",\"Cercle Brugge\",\"SK Sigma Olomouc B\",\"GD Chaves\",\"Lyngby BK\",\"CD Universidad Católica\",\"Esbjerg fB\",\"Levski Sofia\",\"CA River Plate II\",\"1.FC Slovacko\",\"Östersunds FK\",\"Wellington Phoenix\",\"Rosenborg BK\",\"FC Tokyo\",\"Club Deportivo Riestra\",\"Johor Darul Ta'zim\",\"Newcastle United\",\"Al-Duhail SC\",\"Empoli FC\",\"Shanghai Greenland Shenhua\",\"Leeds United\",\"AJ Auxerre\",\"EA Guingamp\",\"Deportivo Guadalajara\",\"FC Sion U21\",\"Paris FC\",\"Goiás Esporte Clube\",\"Universidad San Martín de Porres\",\"Columbus Crew SC\",\"Club de Gimnasia y Esgrima La Plata\",\"AS Monaco U19\",\"FC Barcelona U18\",\"Caykur Rizespor\",\"Cádiz CF\",\"Shanghai SIPG\",\"FK Mlada Boleslav\",\"Tiburones Rojos de Veracruz\",\"Sheffield Wednesday\",\"CS Emelec\",\"Al-Wasl Sports Club\",\"Al-Taawoun FC\",\"Chievo Verona\",\"FC Thun\",\"Sporting Gijón\",\"Monarcas Morelia\",\"West Bromwich Albion U18\",\"Coventry City\",\"SSD Palermo\",\"Club Atlético Tigre\",\"ADO Den Haag\",\"Shaanxi Chang'an Athletic\",\"Portsmouth FC\",\"Besiktas JK\",\"SG Dynamo Dresden\",\"Al-Hilal Riyadh\",\"Esperance Tunis\",\"Club Atlético Newell's Old Boys II\",\"Pescara Primavera\",\"Audax Italiano\",\"FC Nordsjaelland Youth\",\"Atlético de Madrid B\",\"SV Sandhausen\",\"Karpaty Lviv (-2021)\",\"FK Jablonec\",\"SSV Jahn Regensburg\",\"Sunderland AFC\",\"Parma Primavera\",\"Waasland-Beveren\",\"Empoli Primavera\",\"Lyngby BK Youth\",\"Albirex Niigata\",\"Montevideo City Torque\",\"Tianjin Tianhai (-2019)\",\"Chongqing Dangdai Lifan\",\"Hebei China Fortune\",\"Shanghai Shenhua Reserves\",\"Guangzhou Evergrande Taobao\",\"Bologna Primavera\",\"Changchun Yatai\",\"Tianjin Teda\",\"Tianjin Jinmen Tiger Reserves\",\"AC Perugia Calcio\",\"NK Domzale U17\",\"Vitória Setúbal FC\",\"Córdoba CF\",\"Zorya Lugansk\",\"Arsenal FC U23\",\"CD Atlético Huila\",\"KAS Eupen\",\"Osmanlispor FK\",\"Criciúma Esporte Clube\",\"Sporting CP U23\",\"AD São Caetano (SP)\",\"Dinamo Moscow\",\"Al-Faisaly Harmah\",\"Rotherham United\",\"Bnei Yehuda Tel Aviv\",\"CD Palestino\",\"Shenzhen FC\",\"Excelsior Rotterdam\",\"IF Brommapojkarna\",\"Hapoel Beer Sheva\",\"Team Vaud U18\",\"CD O'Higgins\",\"Gamba Osaka\",\"Venezia FC\",\"CD 1º de Agosto\",\"Júbilo Iwata\",\"PSV Eindhoven U21\",\"Albacete Balompié\",\"Leixões SC U23\",\"Red Star FC\",\"CD Tondela\",\"Eintracht Braunschweig\",\"Ismaily SC\",\"Al-Shorta SC\",\"Al-Nassr Riad\",\"Virtus Entella\",\"Cimarrones de Sonora\",\"Guayaquil City FC\",\"Shimizu S-Pulse\",\"Club Atlético Aldosivi\",\"Club Atlético Belgrano\",\"Zhejiang Energy Greentown\",\"Fulham FC U18\",\"Athletic Bilbao\",\"Jiangsu Suning\",\"US Palermo\",\"Millwall FC\",\"Ascoli Calcio\",\"FC Ingolstadt 04\",\"SK Dnipro-1\",\"Renaissance de Berkane\",\"Al-Rayyan SC\",\"Gyeongnam FC\",\"Deportivo Toluca\",\"CA Boston River\",\"Cracovia\",\"Al-Ain FC\",\"Real SC\",\"Sampdoria Primavera\",\"Wisla Plock\",\"Kashima Antlers\",\"SpVgg Unterhaching U19\",\"Mamelodi Sundowns FC\",\"Huachipato FC\",\"Tema Youth SC\",\"Chelsea FC U18\",\"Extremadura UD (-2022)\",\"Esporte Clube Vitória\",\"Venezia Primavera\",\"Guizhou Hengfeng\",\"Masr El Makasa\",\"Beijing Renhe\",\"Shijiazhuang Ever Bright Reserves\",\"Liaoning FC\",\"Montreal Impact\",\"Shanghai Shenxin\",\"Arminia Bielefeld U19\",\"Sportivo Luqueño\",\"Istanbulspor\",\"CD Lugo\",\"Yanbian Funde\",\"Panathinaikos Athens\",\"Sydney FC\",\"SCG Muangthong United\",\"Slaven Belupo Koprivnica\",\"Tottenham Hotspur U23\",\"FK Vozdovac\",\"Defensor Sporting Club\",\"Independiente Medellín\",\"Regal Bukarest U19\",\"MSV Duisburg\",\"FC Nantes U17\",\"RCD Mallorca U19\",\"Sevilla Atlético\",\"Asociación Atlética Argentinos Juniors U20\",\"AS Trencin\",\"Once Caldas\",\"NK Olimpija Ljubljana\",\"Maccabi Netanya\",\"Club Nacional Asunción\",\"Henan Jianye\",\"Maccabi Haifa\",\"Independiente Santa Fe\",\"Akhisarspor\",\"Stevenage FC\",\"Spezia Primavera\",\"Ironi Kiryat Shmona\",\"Etoile Sportive du Sahel\",\"FUS Rabat\",\"Yokohama F. Marinos\",\"Ulsan Hyundai\",\"Daejeon Citizen\",\"1.FK Pribram\",\"CA Rentistas\",\"Hapoel Raanana\",\"Genoa Under 17\",\"Club Africain Tunis\",\"Royal Excel Mouscron U21\",\"Jönköpings Södra IF\",\"Wadi Degla FC\",\"CF Monterrey II\",\"Enppi SC\",\"Lokomotiv Tashkent\",\"BATE Borisov\",\"Melbourne City FC\",\"FK Napredak Krusevac\",\"CA Central Córdoba (SdE)\",\"Qadsia SC\",\"Hapoel Haifa\",\"Dinamo Batumi\",\"Sporting CP U19\",\"Al-Wahda FC Abu Dhabi\",\"Al-Arabi SC\",\"Austin FC\",\"Wuhan Three Towns\",\"Adana Demirspor\",\"Vitesse Arnhem\",\"FC Sochi\",\"Lommel SK\",\"Nagoya Grampus\",\"San Jose Earthquakes\",\"FC Baniyas\",\"AC Monza\",\"Hellas Verona Primavera\",\"CF Montréal\",\"Al-Ittihad Kalba SC\",\"Cuiabá Esporte Clube (MT)\",\"Pisa Sporting Club\",\"Al-Hazem SC\",\"FC Shabab Al-Ahli Dubai\",\"FC Juárez\",\"US Cremonese\",\"Al-Raed\",\"Metalist Kharkiv\",\"FK Khimki\",\"Al-Fayha FC\",\"Seattle Sounders FC\",\"Brentford FC B\",\"Olympiacos Piraeus B\",\"Puskás Akadémia FC\",\"Slask Wroclaw\",\"Tobol Kostanay\",\"Tianjin Jinmen Tiger\",\"Al-Sadd SC\",\"Manchester United U18\",\"Liverpool FC U18\",\"MKE Ankaragücü\",\"UD Almería B\",\"Al-Ain\",\"Al-Nasr (Dubai)\",\"Shenzhen FC Reserves\",\"Al-Batin FC\",\"AC Pisa 1909\",\"Henan Songshan Longmen\",\"Damac FC\",\"Ajax U18\",\"Villarreal CF B\",\"AKA Red Bull Salzburg U18\",\"Lion City Sailors\",\"Zhejiang FC\",\"Tokushima Vortis\",\"Asociación Atlética Argentinos Juniors II\",\"Leeds United U23\",\"Fiorentina Primavera\",\"Torino Primavera\",\"Al-Khor SC\",\"Al-Gharafa SC\",\"FC Emmen\",\"Kairat Almaty\",\"Samsunspor\",\"Dundee United FC\",\"Real Sociedad B\",\"Lazio U19\",\"Shandong Luneng Taishan\",\"Qatar SC\",\"Shijiazhuang Ever Bright\",\"Ajax Amsterdam U17\",\"Spartak 2 Moscow\",\"West Ham United U23\",\"Dalian Professional Reserve\",\"Beijing Guoan Reserves\",\"Wuhan Zall\",\"Gaziantep FK\",\"Inter Milan Primavera\",\"LOSC Lille B\",\"Al-Wahda Mekka\",\"GNK Dinamo Zagreb II\",\"Sassuolo Primavera\",\"Dalian Yifang\",\"Guangzhou R&F\",\"Genoa Primavera\",\"Chicago Fire\",\"Zhejiang Greentown\",\"Juventus Under 17\",\"Manchester United Youth\",\"MOL Vidi FC\",\"Büyüksehir Belediye Erzurumspor\",\"Ajman Club\",\"Arka Gdynia\",\"Kuwait SC\",\"Brighton & Hove Albion U23\",\"CD Nacional\",\"KSC Lokeren (- 2020)\",\"SV Darmstadt 98\"],\"label\":[\"Aston Villa\",\"Inter Milan\",\"Borussia Dortmund\",\"ACF Fiorentina\",\"Real Madrid\",\"RB Leipzig\",\"FC Barcelona\",\"Brighton & Hove Albion\",\"Manchester City\",\"Stade Rennais FC\",\"FC Porto\",\"Eintracht Frankfurt\",\"Juventus FC\",\"Olympique Lyon\",\"Chelsea FC\",\"Sporting CP\",\"Atlético de Madrid\",\"Norwich City\",\"Udinese Calcio\",\"Tottenham Hotspur\",\"Bayer 04 Leverkusen\",\"Everton FC\",\"Red Bull Salzburg\",\"PSV Eindhoven\",\"CSKA Moscow\",\"Burnley FC\",\"Hertha BSC\",\"Sevilla FC\",\"SS Lazio\",\"Southampton FC\",\"Arsenal FC\",\"Manchester United\",\"Sheffield United\",\"LOSC Lille\",\"Borussia Mönchengladbach\",\"Brescia Calcio\",\"Hellas Verona\",\"Sport Club Internacional\",\"FC Schalke 04\",\"FC Barcelona B\",\"Real Betis Balompié\",\"Atalanta BC\",\"Zenit St. Petersburg\",\"Paris Saint-Germain\",\"Fulham FC\",\"AFC Bournemouth\",\"Dynamo Kyiv\",\"Chelsea FC U23\",\"Club Brugge KV\",\"VfB Stuttgart\",\"Ajax Amsterdam\",\"Clube de Regatas do Flamengo\",\"Bologna FC 1909\",\"Getafe CF\",\"CA River Plate\",\"FC Empoli\",\"CA Vélez Sarsfield\",\"VfL Wolfsburg\",\"GNK Dinamo Zagreb\",\"SL Benfica\",\"West Bromwich Albion\",\"Blackburn Rovers\",\"RC Strasbourg Alsace\",\"SCO Angers\",\"Leicester City\",\"AS Roma\",\"RSC Anderlecht\",\"KAA Gent\",\"RC Lens\",\"AZ Alkmaar\",\"Celtic FC\",\"Liverpool FC\",\"FC Dallas\",\"Standard Liège\",\"Wolverhampton Wanderers\",\"Montpellier HSC\",\"Rubin Kazan\",\"Sociedade Esportiva Palmeiras\",\"AS Monaco\",\"Grêmio Foot-Ball Porto Alegrense\",\"FC Nordsjaelland\",\"Stade Brestois 29\",\"FC Basel 1893\",\"SC Freiburg\",\"Reading FC\",\"Lokomotiv Moscow\",\"Stoke City\",\"Rangers FC\",\"Stade Reims\",\"Fluminense Football Club\",\"1. FC Köln\",\"Vitória Guimarães SC\",\"FK Rostov\",\"Vitória Guimarães SC B\",\"US Sassuolo\",\"FC Copenhagen\",\"PAOK Thessaloniki\",\"FC Nantes\",\"SC Braga\",\"Club Atlético Independiente\",\"Feyenoord Rotterdam\",\"Santos FC\",\"Red Bull Bragantino\",\"SV Werder Bremen\",\"FC Porto U19\",\"Pogon Szczecin\",\"1.FSV Mainz 05\",\"SK Slavia Prague\",\"UC Sampdoria\",\"Cagliari Calcio\",\"Fenerbahce SK\",\"Spartak Moscow\",\"Santos Laguna\",\"Club Atlético Lanús\",\"Sharjah Cultural Sports Club\",\"FC Metz\",\"FC Midtjylland\",\"FC Lorient\",\"Orlando City SC\",\"Guangzhou FC\",\"1.FC Union Berlin\",\"Atlanta United FC\",\"West Ham United\",\"Shanghai Port\",\"Olympique Marseille\",\"AC Milan\",\"Leicester City U23\",\"FC Girondins Bordeaux\",\"RCD Mallorca\",\"Real Valladolid CF\",\"New England Revolution\",\"Hatayspor\",\"KV Mechelen\",\"Olympiacos Piraeus\",\"RSC Charleroi\",\"Clube Atlético Mineiro\",\"Manchester City U23\",\"Club Atlético Talleres\",\"CD Cruz Azul\",\"Amiens SC\",\"Rapid Vienna\",\"FC Crotone\",\"FK Krasnodar\",\"Dynamo Moscow\",\"FC Toulouse\",\"Torino FC\",\"FC Augsburg\",\"Genoa CFC\",\"Hamburger SV\",\"Bröndby IF\",\"Watford FC\",\"Royale Union Saint Gilloise\",\"Atlas Guadalajara\",\"SC Heerenveen\",\"SPAL\",\"Atletico River Plate Montevideo\",\"CF América\",\"OGC Nice\",\"Parma Calcio 1913\",\"Delfino Pescara 1936\",\"Shakhtar Donetsk\",\"Trabzonspor\",\"Malmö FF\",\"New York City FC\",\"BSC Young Boys\",\"FC Famalicão\",\"CA Banfield\",\"D.C. United\",\"SK Sturm Graz\",\"IFK Norrköping\",\"Universitatea Craiova\",\"HNK Hajduk Split\",\"CF Monterrey\",\"CA Peñarol\",\"FC Utrecht\",\"FC Groningen\",\"Club Athletico Paranaense\",\"SM Caen\",\"Sporting Kansas City\",\"CF Pachuca\",\"SD Huesca\",\"Mazatlán FC\",\"Valencia CF\",\"CA Boca Juniors\",\"Los Angeles FC\",\"Oud-Heverlee Leuven\",\"Frosinone Calcio\",\"Club Estudiantes de La Plata\",\"São Paulo Futebol Clube\",\"Vissel Kobe\",\"Atlético Nacional\",\"Sport Club Corinthians Paulista\",\"Rakow Czestochowa\",\"Sparta Rotterdam\",\"FK Bodø/Glimt\",\"Ural Yekaterinburg\",\"Istanbul Basaksehir FK\",\"Cardiff City\",\"UD Almería\",\"Bayern Munich\",\"Tigres UANL\",\"Nîmes Olympique\",\"Villarreal CF\",\"Deportivo Alavés\",\"SSC Napoli\",\"CA Newell's Old Boys\",\"Huddersfield Town\",\"HNK Gorica\",\"Club Cerro Porteño\",\"CA Rosario Central\",\"Royal Antwerp FC\",\"SC Farense\",\"Cruzeiro Esporte Clube\",\"Vejle Boldklub\",\"KV Oostende\",\"Dijon FCO\",\"Fatih Karagümrük\",\"Swansea City\",\"Red Star Belgrade\",\"Hammarby IF\",\"Deportes Tolima\",\"FC Porto B\",\"Maccabi Petah Tikva\",\"NK Lokomotiva Zagreb\",\"Alanyaspor\",\"Sarpsborg 08 FF\",\"Ferencvárosi TC\",\"Twente Enschede FC\",\"UNAM Pumas\",\"Inter Miami CF\",\"Defensa y Justicia\",\"Juventus U23\",\"Middlesbrough FC\",\"CA Colon\",\"FC Erzgebirge Aue\",\"1.FC Nuremberg\",\"Hebei FC\",\"Club Libertad Asunción\",\"CD América de Cali\",\"Esporte Clube Bahia\",\"Charlotte FC\",\"Chicago Fire FC\",\"Hannover 96\",\"SpVgg Greuther Fürth\",\"Willem II Tilburg\",\"FC Lausanne-Sport\",\"FC Volendam\",\"IF Elfsborg\",\"GD Estoril Praia\",\"Kayserispor\",\"Spezia Calcio\",\"Liverpool FC U23\",\"Club Tijuana\",\"Hokkaido Consadole Sapporo\",\"BK Häcken\",\"CD Santa Clara\",\"Arsenal Tula\",\"CA San Lorenzo de Almagro\",\"Lech Poznan\",\"Moreirense FC\",\"Granada CF\",\"Derby County\",\"AA Argentinos Juniors\",\"Toronto FC\",\"TSG 1899 Hoffenheim\",\"Hibernian FC\",\"Club Nacional\",\"Raja Club Athletic\",\"Paradou AC\",\"Club Atlético Unión\",\"Legia Warszawa\",\"Danubio FC\",\"Independiente del Valle\",\"Beijing Guoan\",\"Shakhtar Donetsk U19\",\"Envigado FC\",\"FC Utrecht U21\",\"CSKA-Sofia\",\"Kawasaki Frontale\",\"Stabæk Fotball\",\"MTK Budapest\",\"Club de Regatas Vasco da Gama\",\"Akhmat Grozny\",\"Al-Shabab FC (Riyadh)\",\"Club Necaxa\",\"Millonarios FC\",\"Real Madrid Castilla\",\"Piast Gliwice\",\"Antalyaspor\",\"New York Red Bulls\",\"Colorado Rapids\",\"Rio Ave FC\",\"SL Benfica B\",\"Philadelphia Union\",\"Ludogorets Razgrad\",\"Dinamo Tbilisi\",\"Minnesota United FC\",\"Brentford FC\",\"Club Atlético Huracán\",\"FCSB\",\"Krylya Sovetov Samara\",\"Pordenone Calcio\",\"LDU Quito\",\"Göztepe\",\"Unión Española\",\"NK Osijek\",\"Club Alianza Lima\",\"FC Nordsjaelland U19\",\"Portimonense SC\",\"Slovan Bratislava\",\"Roma Primavera\",\"HNK Rijeka\",\"SC Paderborn 07\",\"Sint-Truidense VV\",\"CD Leganés\",\"VVV-Venlo\",\"Puebla FC\",\"FC Bayern Munich II\",\"Djurgårdens IF\",\"Al-Jazira (Abu Dhabi)\",\"SV Zulte Waregem\",\"Gil Vicente FC\",\"Associação Atlética Ponte Preta\",\"Boavista FC\",\"Los Angeles Galaxy\",\"Portland Timbers\",\"KRC Genk\",\"Nashville SC\",\"Borussia Dortmund II\",\"Aarhus GF\",\"Liverpool FC Montevideo\",\"Lechia Gdansk\",\"Altinordu FK\",\"Al-Ettifaq\",\"VfL Bochum\",\"Columbus Crew\",\"Elche CF\",\"Wisla Kraków\",\"Maccabi Tel Aviv\",\"AC Sparta Prague\",\"Al-Ittihad Jeddah\",\"MSK Zilina\",\"Sport Club do Recife\",\"AC Le Havre\",\"US Lecce\",\"Palermo FC\",\"FK Cukaricki\",\"Calcio Padova\",\"Molde FK\",\"AIK Solna\",\"AS Cittadella\",\"Vålerenga Fotball\",\"MOL Fehérvár FC\",\"Hércules CF\",\"Milan Primavera\",\"DAC Dunajska Streda\",\"Fortaleza Esporte Clube\",\"Associação Chapecoense de Futebol\",\"FC Sheriff Tiraspol\",\"Sivasspor\",\"Bursaspor\",\"AEK Athens\",\"Girona FC\",\"FC Viktoria Plzen\",\"Belenenses SAD\",\"LASK\",\"Botafogo de Futebol e Regatas\",\"Vancouver Whitecaps FC\",\"Club Atlético Platense\",\"FC Sochaux-Montbéliard\",\"FC Admira Wacker Mödling\",\"Club Atlético Atlanta\",\"Górnik Zabrze\",\"Atlético de Rafaela\",\"Club Atlético Tucuman\",\"FC St. Gallen 1879\",\"CSD Colo Colo\",\"Racing Club\",\"Galatasaray A.S.\",\"CD Feirense\",\"FC Dinamo 1948\",\"Montevideo Wanderers\",\"LKS Lodz\",\"Celta de Vigo\",\"Al Qadisiyah FC\",\"Esteghlal FC\",\"Konyaspor\",\"Benevento Calcio\",\"Kasimpasa\",\"Luton Town\",\"Arminia Bielefeld\",\"FK Orenburg\",\"Yeni Malatyaspor\",\"Atlético de San Luis\",\"Deportivo de La Coruña\",\"Ipswich Town\",\"Club Guaraní\",\"SD Eibar\",\"Wydad Casablanca\",\"NK Maribor\",\"Odense Boldklub\",\"Peterborough United\",\"Olimpia Asunción\",\"Ceará Sporting Club\",\"Deportes La Serena\",\"Grenoble Foot 38\",\"AE Larisa\",\"SK Dynamo Ceske Budejovice\",\"Valenciennes FC\",\"Pohang Steelers\",\"Oeste Futebol Clube (SP)\",\"Chamois Niortais FC\",\"IFK Göteborg\",\"Tombense Futebol Clube (MG)\",\"FC Slovan Liberec\",\"Austria Vienna\",\"Holstein Kiel\",\"FK Radnik Surdulica\",\"Shandong Taishan\",\"FC Lugano\",\"FK TSC Backa Topola\",\"Jagiellonia Bialystok\",\"Atlético Clube Goianiense\",\"FK Aktobe\",\"AS Saint-Étienne\",\"Dalian Professional\",\"Crystal Palace\",\"Real Sociedad\",\"Queens Park Rangers\",\"RCD Espanyol Barcelona\",\"Nottingham Forest\",\"US Salernitana 1919\",\"Birmingham City\",\"Juventus Primavera\",\"Clermont Foot 63\",\"FK Partizan Belgrade\",\"Ajax Amsterdam U21\",\"KV Kortrijk\",\"Fortuna Düsseldorf\",\"Levante UD\",\"FC Zürich\",\"Coritiba Foot Ball Club\",\"Kashiwa Reysol\",\"Wolfsberger AC\",\"1.FC Heidenheim 1846\",\"Três Passos Atlético Clube\",\"CD Tenerife\",\"Zaglebie Lubin\",\"FC Paris Saint-Germain B\",\"Real Zaragoza\",\"Jeonbuk Hyundai Motors\",\"FC Basel 1893 U18\",\"Club León FC\",\"CA Fénix\",\"Heracles Almelo\",\"FC Sochaux-Montbéliard U19\",\"Beitar Jerusalem\",\"Houston Dynamo FC\",\"Querétaro FC\",\"Bristol City\",\"Shanghai Shenhua\",\"FC Sion\",\"NEC Nijmegen\",\"FK Ufa\",\"ESTAC Troyes\",\"Wigan Athletic\",\"AS Monaco B\",\"Derby County U18\",\"Aberdeen FC\",\"Pyramids FC\",\"FC Luzern\",\"Olympique de Marseille B\",\"Motherwell FC\",\"CA Osasuna\",\"Juventud de Las Piedras\",\"Asteras Tripolis\",\"CD Godoy Cruz Antonio Tomba\",\"Amiens SC U19\",\"Persepolis FC\",\"Oxford United\",\"GDSC Alvarenga Futebol SAD\",\"Grasshopper Club Zurich\",\"Apollon Limassol\",\"Chongqing Liangjiang Athletic\",\"Guangzhou City\",\"Wuhan FC\",\"Shanghai Shenhua U19\",\"Genclerbirligi Ankara\",\"Helsingborgs IF\",\"Le Mans FC\",\"Valencia Mestalla\",\"SönderjyskE\",\"Zamalek SC\",\"Preston North End\",\"1.FC Magdeburg\",\"Deportivo Cali\",\"Hebei FC Reserves\",\"Yokohama FC\",\"Livingston FC\",\"Barnsley FC\",\"Charlton Athletic\",\"HNK Sibenik\",\"Al-Ahli Jeddah\",\"Junior FC\",\"Urawa Red Diamonds\",\"1.FC Kaiserslautern\",\"Aalborg BK\",\"Cherno More Varna\",\"Everton FC U23\",\"AC Horsens\",\"TP Mazembe\",\"NAC Breda\",\"Hull City\",\"Málaga CF\",\"LB Châteauroux\",\"FC Paços de Ferreira\",\"NK Istra 1961 U17\",\"SpVgg Unterhaching\",\"Barcelona SC Guayaquil\",\"Royal Excel Mouscron\",\"Pakhtakor Tashkent\",\"FC Cincinnati\",\"Meizhou Hakka\",\"Astra Giurgiu\",\"Paris FC Youth\",\"Beerschot V.A.\",\"El Ahly Cairo\",\"Zenit 2 St. Petersburg\",\"Serra Macaense Futebol Clube (RJ)\",\"Arsenal FC U18\",\"Heart of Midlothian FC\",\"FC Viitorul Constanta\",\"FC Astana\",\"Doncaster Rovers\",\"Budapest Honvéd FC\",\"Silkeborg IF\",\"FC Pro Vercelli 1892\",\"UD Las Palmas\",\"Fortuna Sittard\",\"APOEL Nicosia\",\"Instituto AC Córdoba\",\"Rayo Vallecano\",\"Cosenza Calcio\",\"Real Salt Lake City\",\"CFR Cluj\",\"Club Universidad de Chile\",\"PEC Zwolle\",\"Shakhter Soligorsk\",\"Hammarby IF U19\",\"Altay SK\",\"FC St. Pauli\",\"Spartaks Jurmala\",\"Desna Chernigiv\",\"Napoli Primavera\",\"Randers FC\",\"Würzburger Kickers\",\"Esporte Clube Juventude\",\"AC Ajaccio\",\"Aris Thessaloniki\",\"Hertha BSC U19\",\"PFK Tambov\",\"Bristol Rovers\",\"Cercle Brugge\",\"SK Sigma Olomouc B\",\"GD Chaves\",\"Lyngby BK\",\"CD Universidad Católica\",\"Esbjerg fB\",\"Levski Sofia\",\"CA River Plate II\",\"1.FC Slovacko\",\"Östersunds FK\",\"Wellington Phoenix\",\"Rosenborg BK\",\"FC Tokyo\",\"Club Deportivo Riestra\",\"Johor Darul Ta'zim\",\"Newcastle United\",\"Al-Duhail SC\",\"Empoli FC\",\"Shanghai Greenland Shenhua\",\"Leeds United\",\"AJ Auxerre\",\"EA Guingamp\",\"Deportivo Guadalajara\",\"FC Sion U21\",\"Paris FC\",\"Goiás Esporte Clube\",\"Universidad San Martín de Porres\",\"Columbus Crew SC\",\"Club de Gimnasia y Esgrima La Plata\",\"AS Monaco U19\",\"FC Barcelona U18\",\"Caykur Rizespor\",\"Cádiz CF\",\"Shanghai SIPG\",\"FK Mlada Boleslav\",\"Tiburones Rojos de Veracruz\",\"Sheffield Wednesday\",\"CS Emelec\",\"Al-Wasl Sports Club\",\"Al-Taawoun FC\",\"Chievo Verona\",\"FC Thun\",\"Sporting Gijón\",\"Monarcas Morelia\",\"West Bromwich Albion U18\",\"Coventry City\",\"SSD Palermo\",\"Club Atlético Tigre\",\"ADO Den Haag\",\"Shaanxi Chang'an Athletic\",\"Portsmouth FC\",\"Besiktas JK\",\"SG Dynamo Dresden\",\"Al-Hilal Riyadh\",\"Esperance Tunis\",\"Club Atlético Newell's Old Boys II\",\"Pescara Primavera\",\"Audax Italiano\",\"FC Nordsjaelland Youth\",\"Atlético de Madrid B\",\"SV Sandhausen\",\"Karpaty Lviv (-2021)\",\"FK Jablonec\",\"SSV Jahn Regensburg\",\"Sunderland AFC\",\"Parma Primavera\",\"Waasland-Beveren\",\"Empoli Primavera\",\"Lyngby BK Youth\",\"Albirex Niigata\",\"Montevideo City Torque\",\"Tianjin Tianhai (-2019)\",\"Chongqing Dangdai Lifan\",\"Hebei China Fortune\",\"Shanghai Shenhua Reserves\",\"Guangzhou Evergrande Taobao\",\"Bologna Primavera\",\"Changchun Yatai\",\"Tianjin Teda\",\"Tianjin Jinmen Tiger Reserves\",\"AC Perugia Calcio\",\"NK Domzale U17\",\"Vitória Setúbal FC\",\"Córdoba CF\",\"Zorya Lugansk\",\"Arsenal FC U23\",\"CD Atlético Huila\",\"KAS Eupen\",\"Osmanlispor FK\",\"Criciúma Esporte Clube\",\"Sporting CP U23\",\"AD São Caetano (SP)\",\"Dinamo Moscow\",\"Al-Faisaly Harmah\",\"Rotherham United\",\"Bnei Yehuda Tel Aviv\",\"CD Palestino\",\"Shenzhen FC\",\"Excelsior Rotterdam\",\"IF Brommapojkarna\",\"Hapoel Beer Sheva\",\"Team Vaud U18\",\"CD O'Higgins\",\"Gamba Osaka\",\"Venezia FC\",\"CD 1º de Agosto\",\"Júbilo Iwata\",\"PSV Eindhoven U21\",\"Albacete Balompié\",\"Leixões SC U23\",\"Red Star FC\",\"CD Tondela\",\"Eintracht Braunschweig\",\"Ismaily SC\",\"Al-Shorta SC\",\"Al-Nassr Riad\",\"Virtus Entella\",\"Cimarrones de Sonora\",\"Guayaquil City FC\",\"Shimizu S-Pulse\",\"Club Atlético Aldosivi\",\"Club Atlético Belgrano\",\"Zhejiang Energy Greentown\",\"Fulham FC U18\",\"Athletic Bilbao\",\"Jiangsu Suning\",\"US Palermo\",\"Millwall FC\",\"Ascoli Calcio\",\"FC Ingolstadt 04\",\"SK Dnipro-1\",\"Renaissance de Berkane\",\"Al-Rayyan SC\",\"Gyeongnam FC\",\"Deportivo Toluca\",\"CA Boston River\",\"Cracovia\",\"Al-Ain FC\",\"Real SC\",\"Sampdoria Primavera\",\"Wisla Plock\",\"Kashima Antlers\",\"SpVgg Unterhaching U19\",\"Mamelodi Sundowns FC\",\"Huachipato FC\",\"Tema Youth SC\",\"Chelsea FC U18\",\"Extremadura UD (-2022)\",\"Esporte Clube Vitória\",\"Venezia Primavera\",\"Guizhou Hengfeng\",\"Masr El Makasa\",\"Beijing Renhe\",\"Shijiazhuang Ever Bright Reserves\",\"Liaoning FC\",\"Montreal Impact\",\"Shanghai Shenxin\",\"Arminia Bielefeld U19\",\"Sportivo Luqueño\",\"Istanbulspor\",\"CD Lugo\",\"Yanbian Funde\",\"Panathinaikos Athens\",\"Sydney FC\",\"SCG Muangthong United\",\"Slaven Belupo Koprivnica\",\"Tottenham Hotspur U23\",\"FK Vozdovac\",\"Defensor Sporting Club\",\"Independiente Medellín\",\"Regal Bukarest U19\",\"MSV Duisburg\",\"FC Nantes U17\",\"RCD Mallorca U19\",\"Sevilla Atlético\",\"Asociación Atlética Argentinos Juniors U20\",\"AS Trencin\",\"Once Caldas\",\"NK Olimpija Ljubljana\",\"Maccabi Netanya\",\"Club Nacional Asunción\",\"Henan Jianye\",\"Maccabi Haifa\",\"Independiente Santa Fe\",\"Akhisarspor\",\"Stevenage FC\",\"Spezia Primavera\",\"Ironi Kiryat Shmona\",\"Etoile Sportive du Sahel\",\"FUS Rabat\",\"Yokohama F. Marinos\",\"Ulsan Hyundai\",\"Daejeon Citizen\",\"1.FK Pribram\",\"CA Rentistas\",\"Hapoel Raanana\",\"Genoa Under 17\",\"Club Africain Tunis\",\"Royal Excel Mouscron U21\",\"Jönköpings Södra IF\",\"Wadi Degla FC\",\"CF Monterrey II\",\"Enppi SC\",\"Lokomotiv Tashkent\",\"BATE Borisov\",\"Melbourne City FC\",\"FK Napredak Krusevac\",\"CA Central Córdoba (SdE)\",\"Qadsia SC\",\"Hapoel Haifa\",\"Dinamo Batumi\",\"Sporting CP U19\",\"Al-Wahda FC Abu Dhabi\",\"Al-Arabi SC\",\"Austin FC\",\"Wuhan Three Towns\",\"Adana Demirspor\",\"Vitesse Arnhem\",\"FC Sochi\",\"Lommel SK\",\"Nagoya Grampus\",\"San Jose Earthquakes\",\"FC Baniyas\",\"AC Monza\",\"Hellas Verona Primavera\",\"CF Montréal\",\"Al-Ittihad Kalba SC\",\"Cuiabá Esporte Clube (MT)\",\"Pisa Sporting Club\",\"Al-Hazem SC\",\"FC Shabab Al-Ahli Dubai\",\"FC Juárez\",\"US Cremonese\",\"Al-Raed\",\"Metalist Kharkiv\",\"FK Khimki\",\"Al-Fayha FC\",\"Seattle Sounders FC\",\"Brentford FC B\",\"Olympiacos Piraeus B\",\"Puskás Akadémia FC\",\"Slask Wroclaw\",\"Tobol Kostanay\",\"Tianjin Jinmen Tiger\",\"Al-Sadd SC\",\"Manchester United U18\",\"Liverpool FC U18\",\"MKE Ankaragücü\",\"UD Almería B\",\"Al-Ain\",\"Al-Nasr (Dubai)\",\"Shenzhen FC Reserves\",\"Al-Batin FC\",\"AC Pisa 1909\",\"Henan Songshan Longmen\",\"Damac FC\",\"Ajax U18\",\"Villarreal CF B\",\"AKA Red Bull Salzburg U18\",\"Lion City Sailors\",\"Zhejiang FC\",\"Tokushima Vortis\",\"Asociación Atlética Argentinos Juniors II\",\"Leeds United U23\",\"Fiorentina Primavera\",\"Torino Primavera\",\"Al-Khor SC\",\"Al-Gharafa SC\",\"FC Emmen\",\"Kairat Almaty\",\"Samsunspor\",\"Dundee United FC\",\"Real Sociedad B\",\"Lazio U19\",\"Shandong Luneng Taishan\",\"Qatar SC\",\"Shijiazhuang Ever Bright\",\"Ajax Amsterdam U17\",\"Spartak 2 Moscow\",\"West Ham United U23\",\"Dalian Professional Reserve\",\"Beijing Guoan Reserves\",\"Wuhan Zall\",\"Gaziantep FK\",\"Inter Milan Primavera\",\"LOSC Lille B\",\"Al-Wahda Mekka\",\"GNK Dinamo Zagreb II\",\"Sassuolo Primavera\",\"Dalian Yifang\",\"Guangzhou R&F\",\"Genoa Primavera\",\"Chicago Fire\",\"Zhejiang Greentown\",\"Juventus Under 17\",\"Manchester United Youth\",\"MOL Vidi FC\",\"Büyüksehir Belediye Erzurumspor\",\"Ajman Club\",\"Arka Gdynia\",\"Kuwait SC\",\"Brighton & Hove Albion U23\",\"CD Nacional\",\"KSC Lokeren (- 2020)\",\"SV Darmstadt 98\"],\"x\":[-0.19289572111073,-0.145076788942764,-0.169115924614609,0.0183213521200587,-0.0769127180239636,-0.110804926471673,0.0398130914599468,-0.134702139507829,0.0631204606376812,-0.0705453700000059,-0.200205359530833,-0.136332750111271,-0.00144023235417257,-0.121980276472153,0.0728139525613578,-0.0818592863815791,-0.152924912719497,-0.0545477382209567,-0.00509938425671752,-0.250107176160325,-0.0982339715731256,-0.17795782464744,0.0634904974111425,-0.185104817606912,0.065985212585967,0.0120779395367276,-0.176266232820922,-0.16519122761006,-0.105075800222154,0.0824567887359533,-0.180183296411073,-0.254164337932548,-0.290025673978158,-0.131457222290265,0.141147017712105,-0.00294226017988453,-0.216310879011863,-0.231443744386898,0.0459118357919166,0.15779067574113,-0.15632411525757,-0.048862749949144,-0.0775581901734163,0.117855358408086,-0.201180370011009,0.0527060108888959,-0.0804611560507208,-0.351403671261574,-0.0118740696392606,-0.137080902574006,-0.0921069173333093,-0.0120481102947703,0.0775476613041635,-0.23351662666612,0.0145032771249225,0.287488181564605,-0.11603233380924,0.114783700985707,-0.131585346773554,-0.070498758701073,-0.110747203498691,-0.350074329332275,-0.093702991981406,-0.00497400841269879,-0.171632555746106,-0.0396749934942964,0.10194892436007,0.066922431896161,-0.0606947555481174,0.0321325789697364,-0.0887896647659343,-0.0126657657160304,-0.313517725254777,0.0587915446145093,0.000527227895459337,0.08039491452975,-0.130666801070303,-0.183132810433338,-0.0930858562614689,-0.21144781197377,0.173071548720679,0.101318727339025,-0.120847223606127,0.0981448151061322,-0.313849169212649,0.040581000092732,-0.0878219731232942,-0.0403796907377363,0.0317543032150971,0.101799296659085,-0.000790545292631339,-0.0615347594331265,-0.183218124951229,-0.694864170938919,-0.0819531645745633,-0.171105870175641,0.0484640066206601,0.118009329250766,-0.189021763370851,-0.0506631611721362,-0.0454836359057879,-0.205779146946174,-0.295109431182984,-0.222447967445326,-0.631061328453707,-0.388293624772451,-0.0651744941269593,0.0114266281513977,-0.0882345898660477,-0.0318294136746583,0.0186524250743652,-0.0317626199940568,-0.182076495654994,-0.30616269232206,-0.274221415130833,-0.174709816344543,-0.0561075720211127,-0.203741011043217,0.0770824105260421,0.254128916999612,0.126258472605202,-0.234006074121799,0.0305345484839135,-0.379764287364602,-0.0889360801611305,-0.0937329579949623,-0.200499842312911,0.132109849487051,0.0973242099204648,-0.110852508610633,0.179767713214698,0.515501685503262,0.149753251694053,-0.0818333945777209,0.0730680955884355,-0.0799866030180122,-0.286919239702648,0.128387487507352,-0.222094671211204,-0.266044018721276,0.0670030330005049,-0.170043630279888,0.0394461111166449,0.17823185035465,-0.188065800863275,-0.127528380019386,-0.0460712681088121,0.0393588749068454,-0.227837996079753,-0.092273904985509,0.00608541845648114,-0.431806830859097,-0.16024021475109,-0.0346886305788298,0.0437979896400706,-0.221489567112932,-0.125169666791881,-0.153560247234735,-0.0488619930309516,0.0758980599040462,-0.0914708180799231,-0.0293709876606137,-0.387931231909924,-0.0700432156148572,-0.171220790308001,-0.34044308624259,-0.447108356996207,-0.344193965357319,0.197029368753063,-0.132829815786491,0.160923771993758,0.105384419446847,0.00250067878747329,0.109874245229157,0.265735263195849,0.121159021821871,0.0497589196444508,-0.127992301180971,0.140997610867436,-0.121171637188114,-0.212614601486056,-0.410067324600511,0.0369251012656748,-0.0354448088610105,0.15715411947877,0.202128289271788,-0.0613894713824531,-0.403932535899664,-0.141705926228881,-0.422363028005456,0.202830036390145,-0.0146420422550855,-0.31427421403173,0.250706523643521,-0.40933501590958,-0.27289161226606,0.176087339919471,-0.0175289136760588,0.0151875299355184,-0.0553390695964627,-0.366625644293878,0.04315730239307,-0.0432999759670154,0.10978621743666,0.0467570423680863,0.029705066689574,0.0236932149079485,-0.346299044791011,0.1740330813362,-0.202228972124619,0.158607964772922,0.419890211049156,0.147374732812315,0.373089206449475,-0.332229214262002,-0.0160160671147169,-0.468056246035807,-0.127236188704829,-0.130151626864409,-0.402557004163508,0.396460554183158,-0.33480664659148,-0.394420490359593,-0.368622969755262,-0.292204723462701,-0.528219102867095,-0.315448753639647,-0.487584252148214,-0.249717419676942,0.0678835105348228,-0.28427158224407,-0.0735201906854365,-0.038955302888885,0.201771945411157,-0.438453380790942,0.129940129923896,0.155542283974548,-0.0172356899860944,0.0296942580353521,-0.29104687668948,-0.32432522533129,0.214138268963278,-0.134130450828566,-0.238123669111629,0.0531144747630872,0.286402259426032,-0.317961489689579,0.328286990847455,0.244351208626383,0.156102867611693,-0.096697562141701,-0.175204688075444,-0.161054489896819,-0.563373480599909,0.202448920262161,0.228605183988762,0.259767709692917,0.0988257480479093,-0.121423671371345,0.0945386332607772,0.128633468632235,0.0789744371880183,0.0313904181093698,-0.0755805342488269,0.0295503388195171,-0.351764224428324,-0.0532195754079029,0.179998600775864,0.320262031015558,-0.0630184321878853,-0.283789299213076,-0.47037943369517,0.18779741227771,0.0444710681409122,-0.402554891723808,-0.439335658332227,-0.344289641199551,-0.389632485727432,0.182719627955519,-0.101968426605099,0.131543542465759,-0.127877868285002,0.0843181786885319,0.0907322137253399,-0.364050801518555,0.0199814628106223,-0.224450743473926,-0.0623038664644776,0.101864434518866,0.210416656687392,0.0449520215966865,-0.109213307634835,-0.257900044705072,0.240253676257781,-0.0238674670666124,0.148694329763457,-0.128939721740721,-0.0538040805404727,0.0769845327434648,0.0330631028363522,-0.208640434584464,-0.202877473285891,-0.363475934696585,0.139636026092515,-0.430780420070377,0.0615966198492257,-0.460015719229909,0.134494660826888,0.160104938947634,0.343058749739048,-0.0672942745816695,-0.188149957005603,0.298920814014953,-0.206568659248183,-0.215260911670909,-0.0471069732549246,0.0538763902021486,-0.403192013715522,-0.053941598915016,0.224697939743222,0.157372787765456,-0.163554774188392,-0.417186341849331,-0.19011210008727,-0.183089045049226,-0.412900167446955,-0.0899951100872873,-0.252170606946963,0.180274593739919,-0.414809838326473,0.28509130904201,-0.0817520825819908,0.00211129303080004,-0.362309042964009,0.0263034661939259,-0.320253027207525,-0.0537052051327271,0.0156485997613649,-0.243254094993822,-0.334993345999085,-0.239555487166496,-0.216289767323612,-0.324844347042714,0.179040654076748,-0.0107601703166603,-0.324137944039877,0.119011941724738,-0.00554394989336271,0.343745084777974,0.105683324726108,-0.0672152504371195,-0.118527016992483,-0.408866497318785,0.0245082247274475,-0.0346139136891904,0.292692414817311,-0.0744572741372868,0.301794464671761,0.0139907957355598,0.00344068803619213,-0.267586779337264,0.0664700491742927,-0.0582279394525737,-0.354227399030115,-0.271798173534276,-0.128204571718095,0.191216441338859,-0.058752714087278,0.00611871130472919,0.355910898818619,0.0174681271616732,-0.123446508609544,0.281774212818335,0.304887328337376,-0.185547354886319,-0.262396400589046,0.286233006662265,-0.0771807103875451,-0.183284628931066,-0.470910987340204,0.272817781692269,-0.139469163627885,-0.038426084848009,-0.0446771798946892,-0.0187730529631573,0.167994064306393,0.283530851845637,0.166863029185702,0.197080568416972,0.310672527885081,0.14518577999209,-0.112566704773722,0.0859300563979075,0.0588948679290184,0.142741821642029,0.0514474428075706,0.10110247083864,0.037649414162747,0.0553673240398578,0.0749298047320919,0.123926108126815,-0.0175455152167679,0.0349010081803007,-0.270695245660773,-0.105695131038871,-0.130653834096835,-0.0620003372658956,-0.134778733700931,0.0866438018054458,-0.377327491740283,0.00483263175804849,-0.0454004356398084,0.107136348996151,-0.05918032833496,-0.055758929299331,-0.216334031242238,-0.251910357050062,-0.254632574232852,-0.23949779490401,-0.0574729333467726,-0.418245499296422,-0.237620708006019,-0.207846262884855,-0.0494825260945279,0.0529038459771842,0.193564317094825,-0.243575432506213,-0.188010893772381,-0.0498934252661921,-0.244146125301365,0.0185664459328945,-0.227526851596366,-0.328437539711288,-0.20055680359496,0.360467270310421,0.132203712765736,-0.158789240227407,0.297010616688187,-0.216283802118152,0.139452727185244,-0.261307505413735,-0.341461583652114,-0.0692457365806813,-0.128492716108534,-0.146337927217397,0.222447190384212,0.146873243664094,0.321277251384142,0.430023715468483,0.207794210434511,-0.251185981856761,-0.497291968294295,0.270104994372057,-0.0828904222855715,0.256464912955142,-0.0729232283826864,0.397127096641977,0.175907351601102,0.0209279310535053,0.0776619343705309,0.272765992299236,-0.326268163233933,-0.0517077961869701,0.267238094574937,0.145520263267843,0.0647225625443764,-0.095122139247377,-0.0775849402072978,-0.240387181745399,0.0621164928412736,0.2809808007523,-0.0527797288050832,0.331155957358434,0.159715214671948,-0.51592609330272,0.188131949677269,0.0504991769944121,0.389675975273737,0.480588577835287,-0.191885968291681,0.20407113348612,0.187006922534121,-0.387433465354886,-0.0611624516057184,0.173575605051974,-0.086904483803152,-0.0636142833075112,-0.390814778745849,-0.621701905615152,-0.476764934619479,-0.393891198712829,0.473767908331668,-0.4667603347222,0.321633647746418,0.457179912167687,0.154407198349537,-0.0773593744451647,-0.0642779992868988,-0.648816167255291,-0.35001487372551,-0.271558879093373,-0.337429356892004,-0.247559107965425,-0.374797413449988,0.0222490151935266,-0.334745320624024,-0.272823501014605,-0.312517027558966,-0.241610379676035,-0.0818748155993145,0.348477473114007,-0.232774933181509,-0.0724676883608563,-0.0139766212147296,0.328913461944319,0.196553633636191,-0.0624283025545844,0.370603864149772,-0.458060007698261,0.0837112552704145,-0.0583289215467414,-0.0141065073804499,0.474491961817278,-0.331749882379592,0.391018066204117,0.359553448123085,0.233064693129838,-0.653759286762305,-0.242685109376874,-0.0764433186949033,-0.179750401941524,0.24489359403228,-0.268523772052202,0.379467459724407,-0.374118394952622,0.361103432712622,0.292907378726764,0.215222134102475,0.0955623513841428,-0.0703080682250335,0.116390750067948,-0.0398390834464277,-0.0597767999409142,-0.239090150186178,-0.596524431335082,-0.123718049420196,0.0733138112795109,0.284756981808466,-0.0637019709034531,0.145199288691398,-0.38657268424149,0.286891264579229,-0.480991037891031,-0.0783347720328093,-0.0602278591984208,-0.375919458909209,0.211091750110826,0.162645478316271,0.301332492316265,0.136494930829552,0.459867527608244,-0.0614479001954138,0.33011556130653,-0.556175719725808,-0.273620938517882,-0.551096422412354,-0.341122525110444,-0.284332733122283,-0.333303423293287,-0.64617364805793,-0.512420589183112,-0.33471621582127,-0.288799225816007,-0.520752384081639,-0.515140784032826,-0.0700298404092456,-0.495232759651023,-0.0460190055893124,-0.259619450045173,0.160253987333217,-0.434980784336288,0.151929433007524,-0.291754851591911,-0.155932421973817,-0.382675032175627,-0.0613438390834747,-0.429556277328372,-0.346738124318622,-0.582918636676255,-0.260121929679161,-0.434897029915864,-0.0695421566954773,-0.0811568855437221,-0.338903363693852,-0.327279241958066,-0.330660613991106,-0.514523515501217,-0.0576380742107979,-0.46400436489842,-0.480033322202586,-0.336712696315716,-0.181806400756094,-0.0369267641575983,-0.516136972909252,-0.0523291048583676,-0.500182791463325,-0.6085652068917,-0.530454180115757,-0.506365991502323,0.304992033239955,-0.309736653537095,-0.0608611204135876,-0.340828784644118,-0.0352118970701182,0.272300548680655,0.105730615133941,0.23753760329401,-0.459603993177024,-0.462716823452288,-0.674563380570454,-0.0735667255546445,-0.409214431150362,-0.455455136393288,-0.470535718851338,-0.657780261529241,-0.435094254148977,-0.324295539548497,-0.0550889707674117,0.313545908485338,-0.482480867870862,-0.231441030422129,-0.724595193696159,-0.366214128559867,0.255147777498494,-0.663493759622867,-0.019841789835945,-0.062108459443078,0.163685563280793,-0.534005165369439,-0.395387764799625,-0.384687459947224,-0.0824801948508468,0.265334384382111,0.195786422766235,-0.343678810740996,-0.496118874571657,0.368326623087697,0.13832983401274,0.21805127051749,0.314937373403308,-0.544930555835267,-0.445273275920073,-0.420889128320981,-0.510479913345984,0.175634167605634,-0.089230424791224,-0.611420473106146,0.262405623025334,-0.633925846637541,-0.318370816240491,-0.517484907729007,-0.531401020565372,-0.303148211217604,0.318806779695524,-0.684900468981242,0.248458381200126,-0.284497163327561,-0.0921596381560342,-0.462186152840661,-0.205620882702466,-0.161691436482736,0.370731194792024,-0.571367542541358,-0.43477702409316,-0.5177273944777,-0.742497066414179,-0.642624977726878,-0.280884977161846,0.381407659002405,-0.612741689856135,-0.747512022893854,0.407279875440327,-0.572819411028179,0.00516817241853174,-0.631529927703113,-0.67255775385479,0.351389817556629,-0.32673249325283,0.334164588458867,0.326929860867696,-0.538632541961153,0.297776544041432,0.451982549572797,-0.738632793517937,0.235613752611602,-0.591492990121321,-0.339258728672158,0.430646326285092,0.418103848093484,-0.420450968648513,-0.515541830191333,-0.555631581071298,0.387430763268915,-0.456725843417887,0.438917579985393,-0.496923318630613,-0.604042016222675,0.413966849462589,-0.726438139756377,-0.64677090185546,0.416300526296664,-0.083021827940553,-0.607861216544696,0.483905277997778,-0.638190245399971,1,0.412384423629833,-0.732556135342886,-0.777691233913715,0.373942756038259,0.432787866387627,0.31928871216688,-0.624404736617065,-0.679392482075736,0.218754093769887,-0.701358020441136,0.744720421150985,-0.600887076219018,-0.575834213744155,0.356378850814924,0.454488490196101,-0.717626408879258,-0.0781443434303227,0.444234530200849,-0.897924619607869,0.658513432442198,-0.721628483670294,0.258545597548441,-0.737128517845016,0.49272713248226,0.481143637828331,-0.692772385052672,-0.59885012539107,-0.201686698429935,0.691597890756507,0.454393919268014,0.243021547803692,0.419003987645069,-0.742813808256766,-0.633107458769272,-0.0887833075121929,0.369079603542935,0.196631127914649,0.346828483545403,-0.611574077177261,0.0834623266946186,0.441889378329567,0.410145656425356,-0.767493348049259,0.315089487146372,0.474200392399342,-0.0766760329026779,-0.626227958251757,0.296344793078215,0.498837995935764,-0.0864861181554696,0.113402550862922,0.192666664911377,0.355881978601655,-0.703546536936349,-0.219236492151979,0.570099102700213,0.351571036043456,-1,-0.31120319495137,0.463468294225055,-0.0634889714371747,0.174139811503921,-0.419488648552553,-0.418990017233347,-0.466217070559384,-0.305839426111661,0.248391811928402,-0.0736860419918111,-0.51519333432186,-0.185158664913458,0.110392172821165,0.260881353129807,-0.680334728350747,0.0195926512877629,-0.72183698693262,0.151851917230997,-0.53083000291236,-0.144160977529996,0.158588164645645,-0.155094045350623,0.156533462099384,-0.0547147544439234,-0.191908197906998,-0.210444318282498,-0.509116051876322,-0.0842112599655318,0.256927076439799,-0.571477310808622,-0.0889602253579315,-0.253717488922129,-0.112491703814243,-0.0505323555057257,-0.068827297720684,0.200222417719685,-0.555113509550804,0.0644006545577938,-0.024878403105317,0.441225338737852,-0.418908412042638,-0.086388801846109,0.211415836920907,-0.0812706607692822,-0.0611750961463231,0.43005277165306,-0.0551090132541734,-0.264171523578772,0.359664604990396,-0.0556893991553421,0.689655722175578,-0.0783214574921367,-0.0625540225447474,-0.0753989348422336,0.272989053503246,-0.110715366118239,0.124787001512347,-0.0289473928440384,-0.0469373865652386,-0.0600490017888347,-0.0649748037523684,-0.0695061729101772,-0.0739178975673875,-0.016486119894676,-0.0735260960287697,-0.0878708423442551,-0.0391441228514842,-0.0200078390001169,-0.446886902320281,-0.0620574342715704,-0.135008046441764,-0.191478598187566,-0.00321824606182974,-0.0762574138456044,-0.354996761836159,0.698471389644255,0.194536076972175,-0.0758368394864514,-0.232666244047125,-0.0837391394087937,-0.152084303831956,-0.0577258649679662,-0.069801053243872,0.184159250678106,-0.014464474279574,-0.0546641300882924,0.499473333755549,-0.232568208082747,-0.0624575434672404,-0.0528492004922633,-0.0864623463168911,-0.050590983619708,-0.204135814511113],\"y\":[0.00642008563644114,0.0169865078191171,-0.0972421392233843,0.092325925614327,0.190853231836099,-0.129816592484338,-0.00924504069974208,0.0684192887406974,0.062452145269537,-0.109905697442927,0.0147734350130342,0.1756140580399,-0.160544384049125,-0.0520923538428101,-0.0168057008056499,0.133766378471563,0.149051290172629,-0.2155103505168,-0.0883318672805976,0.0841737891155361,-0.168569184118151,-0.0818720258522073,-0.0749776139345593,-0.0360443964001168,0.128551014612557,-0.0964265296990829,-0.0721071470383501,0.0942632347108472,-0.143204804130194,-0.0478887233396709,0.0843502605111661,0.00366350435558926,0.106980033944088,0.0803916355957848,0.00617085758310032,-0.292215272963431,0.0300937070911482,-0.140358407106945,0.129308576734886,0.106067153775008,-0.0447146908257119,-0.0799942922373368,-0.1783777589258,0.031889129680182,-0.017494048020247,0.17366981825528,-0.245425885107355,-0.0322704833461411,-0.0704473185579462,0.156308136861777,0.112820277065573,0.0581185789990031,0.0340758466611091,-0.0532449926247499,-0.121243373871727,-0.0919330948533326,-0.260939860739281,0.06290820847687,-0.122420571271813,0.121951444133267,-0.115450029836099,-0.0958234929161803,-0.226493712517969,-0.258620267060022,-0.147608461151659,0.0663553061805726,-0.00285993505335136,-0.0452478264586195,-0.152172590073689,0.196185137732239,-0.162519677965169,-0.140633654586926,0.0918155791249742,-0.134234052030119,0.0392029487377272,0.160073177528769,-0.0369404397844076,0.0426946178436387,0.127865136329408,-0.0255700300188721,0.0882890031992256,-0.207418104055041,-0.0807546448008241,0.0859457958005343,0.107719967278745,0.138729423807916,0.285525225480183,-0.271116692389621,0.147080119931881,0.106941730670961,-0.151438139241842,-0.00767414336676253,-0.237001310421236,-0.389998248792862,-0.185135430050807,-0.0383313928697275,-0.0674438894794335,0.0468594589892948,-0.0569672971990025,-0.163314938182727,-0.140414005537673,-0.190372087069289,0.0334756856425122,-0.0285896876524854,-0.863474025185378,-0.0351437539934619,0.197789496230017,-0.150384275002538,0.107724390715562,0.10763998316445,0.0871505176764376,0.0555842940814235,0.235537155922718,-0.215409697566336,-0.23647645762928,-0.106822020718787,-0.171900023175003,-0.206751777977914,-0.281077721654346,0.514414217041627,-0.0248003353532252,-0.197426519038603,-0.000205633565220187,-0.0904971125365036,-0.150204296957687,0.117209166999112,-0.486636003123413,-0.0337236832521444,-0.220207488759453,-0.268429892940666,0.213005505862439,0.674437960556084,-0.233756640837766,-0.0291398481413881,-0.242652953264795,-0.173728780399,-0.129156958865196,-0.153441942078936,0.158537958819324,0.00225800288793954,-0.226431836504082,-0.251427693745321,-0.22939781153225,0.130907789739957,-0.111064728327356,-0.0727566394104648,-0.181561607513533,-0.0861123867909338,0.1107348494423,-0.0893262141428548,0.0260475749985141,-0.219731362676073,0.358497872228849,-0.289433838397069,-0.205056805771269,-0.602732952482594,-0.217203107100776,0.087089179886275,0.144094282056758,-0.298107172970646,-0.195100851775736,0.0892198166359643,0.0028723418401726,-0.344551817517807,0.198705632579959,-0.129456118132376,-0.110882096429616,-0.174296334112844,-0.28453512097267,-0.285634302384423,0.209459754026504,-0.142157598553559,0.00873273891154369,-0.231013534193903,0.0993045578767877,-0.21615983009858,-0.158087385725154,0.168530445061337,0.431268279947023,-0.321008255790471,0.187906993380715,-0.32934168491859,0.150468558985472,0.0200192790650211,0.164243963133118,0.235162143419433,0.304778250562371,-0.0574412177576537,-0.142717874550712,-0.212428855697757,-0.111475677526213,0.0791964115190398,-0.403098653723967,-0.0148806833814626,-0.0427630588249781,-0.422272428140779,-0.0489256465029196,-0.000286547979298168,-0.177922403526942,-0.0169562903561157,0.0211258172430777,-0.226677264993788,-0.12179224572067,0.220095791598832,0.0101612269093911,0.423868590497582,0.241860841486438,0.255394184142308,0.25454970342088,-0.238771463356849,-0.0319103636235998,0.467171140863057,0.0432382729764071,0.126930504172244,-0.0691217786577862,0.221717966599019,-0.269954334177736,0.188143520273583,0.145442093006731,-0.0943886911662132,0.00436588896375634,0.44507367939936,-0.349421874018414,0.138540556688549,0.0138803805068266,-0.37276334642989,-0.105013846985532,0.0787204977785245,-0.222970888814324,0.241138024586395,0.199455068186946,0.218100503324591,0.288605411477056,0.108873243928596,-0.287198150933399,0.146094341254491,0.359297771874059,0.40234204374258,-0.583587230846108,-0.178322598860818,0.0821622491177023,-0.000908433590314561,0.218371013929694,0.418156913595038,-0.345734836744847,0.148752701492821,-0.45492695365876,0.217992571575304,0.0485973720287978,-0.164239069360279,0.110928603296796,-0.323129114028144,-0.169807627806378,-0.217031397367033,0.470463108016972,-0.169175218553809,-0.0709037186323836,-0.0993517539742098,0.325687932139001,0.329921390612748,0.196639635802031,0.36260798241272,0.0781408396802603,0.329455058490899,-0.000187662150241907,-0.374442965752449,0.00512628150969285,0.542679505704721,0.245996251084289,0.00926699961135258,-0.00889574895448431,-0.399961121155136,0.116925961216031,-0.130650712346651,-0.400260187235103,0.178811205102448,-0.44255391861433,-0.0874541527169521,-0.268240451093311,0.355962104239102,0.611602456262176,-0.34653285878248,-0.243671840839329,-0.298571859012052,0.0953198826557149,0.436912287179609,-0.406285962160299,-0.0027065615591868,0.346486163068698,-0.203892458219022,-0.356389738137314,0.299064917118649,-0.331003733604613,-0.149680110650495,0.265766802249822,0.48588946940415,0.280571172922313,-0.00327549789764425,0.286733709196219,0.3874781204577,0.388113705128448,-0.69484200865313,-0.342192678597756,0.347447186450127,-0.425941052950257,-0.341220850183447,-0.458994282467179,0.521199967798818,-0.189934009522332,0.244061731276802,-0.515663091008628,0.187794867219284,0.0488447399211245,-0.156327618224754,-0.123008631651024,0.0150813213924526,0.498246042596054,-0.0382014116473763,-0.00185653873908209,0.468163422629293,-0.337033001287539,0.566481817406699,-0.142241208803825,0.248374920991933,0.324340870964332,-0.177131820245054,0.118555744745049,0.305187765326206,0.713806411600298,0.0038924534020619,0.215436806180492,-0.504937534649748,0.372649337927612,-0.269561758428171,0.570614522255925,-0.42743895011264,0.273039546490209,0.604340482750437,-0.425286623506534,-0.136163090865481,-0.110082767531463,0.356517074695983,-0.390863727399056,-0.186807998167144,0.208196573253351,-1,0.240081023647651,0.421064630789333,-0.0454347982733744,-0.49956304853177,-0.46053165551302,-0.473910601897025,-0.239949134868901,0.667600974102023,0.472394220077968,0.156326928684714,-0.469926429229137,-0.16213175363192,-0.615670394740272,0.44612535564747,0.278090815550864,0.121575530447706,0.000619207437604796,0.220913593664154,0.319546565553837,0.338122865219222,-0.171412639115986,0.332221480760942,0.702486618780354,0.0414511649547478,0.476640293081913,0.722845373444074,0.169074964078684,-0.39836600118117,-0.497440311448849,-0.35895260353352,0.0291017145372514,-0.0682752850079865,0.105318695432655,0.37377561185449,0.716164745006078,-0.481034562940646,0.729111602654327,0.172129881248161,-0.527046058917245,-0.484760555466184,0.0576325280090433,-0.0777256919100153,-0.233120595297625,-0.171701889008824,-0.290429093682852,0.641795607100226,-0.287486904347014,-0.509034360321271,-0.00969313698450669,0.485320141741799,-0.471040781184127,0.269665343848174,-0.662204498980911,0.432457278925731,-0.469032957980608,0.506097354605583,0.319418637742579,-0.44116298432315,0.613483827206222,-0.659875897155326,-0.00587025116846551,-0.629741522500382,-0.485669849700156,-0.733317647310043,-0.510931833012005,0.519566196453321,0.449305847290886,0.484854088112349,-0.586908945255926,-0.694232873704643,-0.417928955111361,-0.75655501833542,-0.546943884011686,0.00282243600084153,-0.749042502557146,0.385416475015903,-0.631092618568101,0.0202055293254302,-0.110373262572094,0.191617267686595,-0.155909213773018,0.23335325825157,0.000555706787943366,0.0409304231865069,0.171210817652423,-0.331943530873411,0.00470285983312957,0.434496614836625,-0.107574829246678,0.191943591398892,0.473453951963171,-0.110074789114413,-0.121811569082478,0.170138387618496,-0.242255203976093,-0.556181394810451,0.449799889145902,0.685505802599741,0.38597247664525,-0.427773493839344,0.351791825954825,-0.144226666078813,-0.20388443459991,-0.230274776954074,-0.493172888057784,-0.5723301365315,0.0898614322267406,0.7083203383327,0.0668249597656763,0.017320475748676,-0.181119321934745,-0.376376020244931,0.454694154240356,0.244276867841397,-0.432312644396368,0.116568683297178,0.00865548497564061,0.0809899297967533,-0.00619068010834234,0.289952847910301,0.488050590475921,0.0189645229085256,0.475259509856873,-0.226457855114401,0.199441486816312,0.00184608610727222,-0.348489965025198,0.125364982280278,-0.293387694006516,-0.474545115437648,0.286736924643854,0.604077099635643,-0.125263207023114,0.509753887962244,-0.512304989453996,-0.376966443982854,0.792470094181847,-0.000165450073464246,-0.687998110778532,0.00654983027946798,0.0302454117683022,-0.264122876579501,0.00462184000168442,0.417018410508317,0.520238903126212,-0.135796121247768,0.0420532665132958,-0.106147242272435,-0.255515900813857,-0.122720947641381,0.0123568444418913,-0.534557476926828,-0.127684290085277,0.203215778660381,0.386738294204403,-0.48250378708751,-0.0413122454918754,-0.218950637763458,-0.379907802509359,0.491329348973495,0.42779520624887,0.650425821931751,0.514374673811524,0.0289621656559516,-0.329653880944729,0.498588445079331,-0.431299094980147,0.317273809535225,-0.464363587302033,-0.343438424947235,0.00590777961660982,-0.282047810039338,-0.37309234199051,0.599960944821164,-7.88894730280321e-05,-0.349657955172432,-0.319651453267518,-0.564643158828509,-0.84997891683005,0.233857592633776,0.0191038943329673,0.280457062481946,-0.537644297183813,0.0326172050447251,0.541975155364887,0.144018409662295,-0.24999323216303,-0.48716457805113,0.4540103812254,-0.248363820264436,-0.433081446721214,-0.0123731485455761,-0.460102986961406,-0.0158009300142181,-0.452655214094143,0.0128667971054932,-0.0033170641247382,-0.384115010450855,0.372894677700093,0.44015620865953,0.304466275129236,-0.469048221248908,-0.00832281043007588,-0.324527942596606,0.00713072387406832,-0.400115157622665,0.503028401262977,0.010261849592349,0.0173214420715808,0.438649781521409,-0.43744423471051,-0.419098794290444,-0.171679787636681,-0.52763443439592,-0.396013692960013,0.0124749625914762,0.0558321846167398,0.124542405457884,0.372307248164838,0.309203490881276,0.37800026629047,0.388725843508413,0.623539462202758,0.352451814686127,0.418019618824825,0.355832170126358,0.611786323542048,0.372037980639988,0.447343918646174,0.0160835852419117,0.368938756680551,0.191040733414509,0.268991519047243,-0.112645130844624,0.0317362582159151,-0.0420625870138304,0.267561239102363,0.267938105002508,0.135613380726713,0.00792932311117656,0.315850199407521,0.299028743856472,0.346814086307959,0.365663898112897,0.335928599858695,0.0053192397030013,0.00791826881864455,0.241010354868252,0.19389964259794,0.27384601559297,0.355529271942519,0.00813459111460535,0.283618531076161,0.395602424165342,0.381542402376595,0.422325811052427,0.0958027374220143,0.389117579687552,-0.348852334827948,0.0423839569917954,0.313322175937035,-0.190885203669948,0.38276158557734,-0.0841748115708394,0.355969687749931,0.0101815624613633,0.308452470578154,-0.0584020488403495,-0.215128723803861,0.173169574822853,-0.281842076786941,0.3217242205018,0.298574511220409,0.346364463655948,0.000451874228980298,0.345624472135525,0.295501162204906,0.0397933678577813,0.181401799663365,0.32287872592182,-0.145090668837715,0.0165960360409751,-0.171793100338527,0.339811451503517,0.533433639068467,0.0917463250418544,0.507163992587949,0.0837779417778686,0.00638849091994631,0.0029072950568314,0.0148199519656449,0.00807945533440124,0.300399299548828,-0.0912947221572038,0.39471927369512,-0.00313648312483461,-0.297531042661518,-0.494873931627723,0.386252163333177,0.325584136616358,-0.208486152016149,0.397622942223903,-0.462380217513322,0.0612006679688135,0.321167619141925,0.488873756938168,0.501447176347852,0.377996796045119,-0.106888920943913,0.433162120642888,0.252150234519993,-0.425884161094839,0.139000415820713,0.100096011850216,0.134400403529126,-0.280729604376879,-0.117451350550117,-0.34939531067096,0.119566851255179,-0.329872090142746,0.0680950259109583,0.00233260329464136,0.450951477367613,0.620089127753028,0.484849185421084,-0.249820965211148,0.0466897635630983,0.0198406849029802,0.37388294197603,0.131601624033242,0.270531075880086,0.0425491726786482,-0.237654541192442,0.204900736144924,0.243939426016297,-0.175089104889682,0.140969301729434,-0.400705573145693,0.19625799569616,0.0824704978227733,0.0102168398835003,0.136756266597059,-0.196435188620888,0.0327172397587976,0.0901709360600849,0.00471258647065498,-0.102058186557835,0.0828657845976288,0.0312404421868622,0.0705473447994212,-0.155402811804771,-0.0383538042448485,-0.0663125712188137,0.163704642292594,-0.0646720770661534,0.218153602279294,0.0309984046128331,-0.150829515647087,-0.0370546874725478,0.00607577616762822,0.0044103989973856,-0.000162024964158958,-0.11236358531069,0.0257693258964224,0.135124268275513,0.017626468737914,0.343780765822037,0.0450327195762972,-0.0381678698245606,0.522323439341983,0.201703703517659,-0.0360061585620286,0.0510244014569048,0.228359799214366,0.103819316812914,0.236089552686064,0.0774904594092354,-0.0352541460335878,0.242747069224734,-0.0798350785966839,0.151293479841934,-0.190048066479798,-0.147071679747642,0.355467541105618,0.123691899021778,-0.117309795451392,0.0117317567908604,0.213433985914285,-0.441082039970441,0.496411688465261,-0.149033837928097,0.426535323150575,-0.0399440208750417,0.0813057479247312,-0.0161585553177693,-0.232099543560039,-0.213882733761095,0.472943551427371,0.480378849478528,0.258063637236353,0.368991830309148,0.234460316630945,-0.114716143695047,-0.276743392709908,0.0110256603024883,0.324873237171703,0.396837763641788,0.320929885003077,0.302380031591047,0.616159903025025,-0.014512254444665,0.312532159855454,-0.109041961453348,0.325280464464248,0.737435562675107,-0.00562447289220147,-0.242772331558499,0.49836092508453,0.355364119890664,-0.00137768000583383,0.578227301715221,0.461132739968371,0.332515849000246,-0.12633390185789,0.584625796049323,0.171567580867792,0.414399858431107,-0.746365211157041,-0.362482933649744,0.320467494110557,-0.427235046032615,0.446743285781152,-0.128972002060106,0.09441176489093,-0.144023330618896,-0.405393560570893,0.442842122516407,-0.45425589322396,-0.37878090400008,-0.35457758720276,0.447002644206051,0.494609765564842,-0.242863352740652,0.539949695488482,-0.256029871494695,0.509713688448619,-0.437954361003671,0.621597748058519,0.483970806865007,-0.434015367352694,0.459332083684757,0.00575612069063891,0.51197743237301,-0.443350144141075,-0.420391685867563,0.0132096862815791,0.463422376285127,-0.41859170874346,0.0151011079499965,-0.423255137505435,-0.471799674549169,0.0126992563681041,-0.0117009339373925,0.503547950949541,-0.74680089408017,0.530333115857526,-0.494555006405158,-0.841036991997059,-0.543706561708127,-0.431121551810484,0.571119353304277,-0.50729623250233,0.0372292930367972,0.731235571673419,0.0299541512009762,-0.603198674694713,0.842831676244789,-0.00310107066237597,-0.154298967152684,0.00235650790640363,-0.00334902440671592,-0.00203635243382305,0.68532771728948,0.446861115492423,0.645442922823434,-0.634799423225525,-0.604176073531501,0.0139943162646974,-0.000597696962139627,0.027395010210058,-0.428296300181444,-0.503035401157525,-0.0108116168565153,0.0967949944053101,-0.519605896956204,-0.670298499407386,-0.578789983288941,0.0369633657632054,0.476911183882104,-0.638478313258117,-0.498192700280554,0.0332706634823454,0.122394165670024,-0.0578290323380806,0.741095569363822,0.479415896564697,0.424985364378063,-0.00794622826280367,0.50954349026514,-0.53449228659318,-0.0105524557304504,1,-0.590564841025919,0.686922158610619,0.573249476422762,0.591886983148178,0.00324869949522277,0.00778918717777111,0.0262411500110724,0.667271792982679,0.599461260518374]},\"edges\":{\"from\":[\"Aston Villa\",\"Inter Milan\",\"Borussia Dortmund\",\"ACF Fiorentina\",\"Real Madrid\",\"Inter Milan\",\"RB Leipzig\",\"FC Barcelona\",\"Brighton & Hove Albion\",\"Manchester City\",\"Stade Rennais FC\",\"FC Porto\",\"Eintracht Frankfurt\",\"Juventus FC\",\"Olympique Lyon\",\"RB Leipzig\",\"Chelsea FC\",\"RB Leipzig\",\"Real Madrid\",\"Sporting CP\",\"Atlético de Madrid\",\"Norwich City\",\"Udinese Calcio\",\"Tottenham Hotspur\",\"Chelsea FC\",\"Bayer 04 Leverkusen\",\"Manchester City\",\"Juventus FC\",\"Everton FC\",\"Red Bull Salzburg\",\"PSV Eindhoven\",\"CSKA Moscow\",\"Burnley FC\",\"Everton FC\",\"Hertha BSC\",\"Sevilla FC\",\"Inter Milan\",\"Juventus FC\",\"SS Lazio\",\"Southampton FC\",\"Arsenal FC\",\"Manchester United\",\"Chelsea FC\",\"Sheffield United\",\"LOSC Lille\",\"Everton FC\",\"Juventus FC\",\"Borussia Mönchengladbach\",\"Brescia Calcio\",\"Hellas Verona\",\"FC Barcelona\",\"Sport Club Internacional\",\"FC Schalke 04\",\"Juventus FC\",\"FC Barcelona B\",\"LOSC Lille\",\"Real Betis Balompié\",\"Atalanta BC\",\"FC Schalke 04\",\"Zenit St. Petersburg\",\"Paris Saint-Germain\",\"Fulham FC\",\"AFC Bournemouth\",\"Dynamo Kyiv\",\"Chelsea FC U23\",\"Red Bull Salzburg\",\"Club Brugge KV\",\"VfB Stuttgart\",\"Olympique Lyon\",\"LOSC Lille\",\"Ajax Amsterdam\",\"FC Barcelona\",\"FC Porto\",\"Udinese Calcio\",\"Clube de Regatas do Flamengo\",\"Hertha BSC\",\"Bologna FC 1909\",\"Getafe CF\",\"CA River Plate\",\"FC Empoli\",\"FC Porto\",\"CA Vélez Sarsfield\",\"Atalanta BC\",\"VfL Wolfsburg\",\"Ajax Amsterdam\",\"Chelsea FC\",\"Arsenal FC\",\"GNK Dinamo Zagreb\",\"SL Benfica\",\"West Bromwich Albion\",\"Blackburn Rovers\",\"Southampton FC\",\"Atlético de Madrid\",\"RC Strasbourg Alsace\",\"SCO Angers\",\"SL Benfica\",\"Leicester City\",\"AS Roma\",\"RSC Anderlecht\",\"KAA Gent\",\"RC Lens\",\"AZ Alkmaar\",\"Celtic FC\",\"Liverpool FC\",\"CA River Plate\",\"Paris Saint-Germain\",\"AZ Alkmaar\",\"FC Dallas\",\"Standard Liège\",\"Wolverhampton Wanderers\",\"PSV Eindhoven\",\"Montpellier HSC\",\"Rubin Kazan\",\"Sociedade Esportiva Palmeiras\",\"RB Leipzig\",\"Celtic FC\",\"VfB Stuttgart\",\"FC Barcelona\",\"Tottenham Hotspur\",\"AS Monaco\",\"Grêmio Foot-Ball Porto Alegrense\",\"Montpellier HSC\",\"Olympique Lyon\",\"AZ Alkmaar\",\"Brighton & Hove Albion\",\"FC Nordsjaelland\",\"Stade Brestois 29\",\"FC Basel 1893\",\"SC Freiburg\",\"Manchester City\",\"SL Benfica\",\"Reading FC\",\"Ajax Amsterdam\",\"Borussia Dortmund\",\"FC Barcelona\",\"Grêmio Foot-Ball Porto Alegrense\",\"Lokomotiv Moscow\",\"Real Madrid\",\"Liverpool FC\",\"FC Porto\",\"LOSC Lille\",\"Hellas Verona\",\"Stoke City\",\"Rangers FC\",\"Stade Reims\",\"Fluminense Football Club\",\"Udinese Calcio\",\"Chelsea FC\",\"Sociedade Esportiva Palmeiras\",\"1. FC Köln\",\"Tottenham Hotspur\",\"GNK Dinamo Zagreb\",\"Vitória Guimarães SC\",\"FK Rostov\",\"AS Roma\",\"Vitória Guimarães SC B\",\"US Sassuolo\",\"Stade Brestois 29\",\"FC Copenhagen\",\"FC Copenhagen\",\"PAOK Thessaloniki\",\"FC Nantes\",\"SC Braga\",\"FC Barcelona\",\"Manchester City\",\"Club Atlético Independiente\",\"Liverpool FC\",\"Feyenoord Rotterdam\",\"Stade Rennais FC\",\"Leicester City\",\"PSV Eindhoven\",\"Santos FC\",\"Everton FC\",\"VfL Wolfsburg\",\"FC Empoli\",\"Arsenal FC\",\"Red Bull Bragantino\",\"SV Werder Bremen\",\"Borussia Dortmund\",\"FC Porto U19\",\"Olympique Lyon\",\"FC Porto U19\",\"Grêmio Foot-Ball Porto Alegrense\",\"Pogon Szczecin\",\"1.FSV Mainz 05\",\"SK Slavia Prague\",\"UC Sampdoria\",\"Cagliari Calcio\",\"Fenerbahce SK\",\"Spartak Moscow\",\"LOSC Lille\",\"Santos Laguna\",\"Club Atlético Lanús\",\"Sharjah Cultural Sports Club\",\"FC Metz\",\"Wolverhampton Wanderers\",\"Ajax Amsterdam\",\"FC Midtjylland\",\"FC Lorient\",\"FC Midtjylland\",\"Orlando City SC\",\"Guangzhou FC\",\"ACF Fiorentina\",\"Paris Saint-Germain\",\"Southampton FC\",\"SV Werder Bremen\",\"1.FC Union Berlin\",\"Spartak Moscow\",\"Red Bull Salzburg\",\"Atlanta United FC\",\"Tottenham Hotspur\",\"West Ham United\",\"Shanghai Port\",\"LOSC Lille\",\"Olympique Marseille\",\"AS Roma\",\"Chelsea FC\",\"AS Roma\",\"Chelsea FC\",\"SV Werder Bremen\",\"RB Leipzig\",\"AC Milan\",\"Burnley FC\",\"Leicester City U23\",\"FC Schalke 04\",\"FC Girondins Bordeaux\",\"RCD Mallorca\",\"FC Girondins Bordeaux\",\"ACF Fiorentina\",\"SC Braga\",\"Hellas Verona\",\"Real Valladolid CF\",\"New England Revolution\",\"Hatayspor\",\"ACF Fiorentina\",\"Atalanta BC\",\"KV Mechelen\",\"SL Benfica\",\"Olympiacos Piraeus\",\"Hellas Verona\",\"Clube de Regatas do Flamengo\",\"RSC Charleroi\",\"Clube Atlético Mineiro\",\"Manchester City U23\",\"KAA Gent\",\"Olympique Lyon\",\"Club Atlético Talleres\",\"Chelsea FC\",\"CD Cruz Azul\",\"Amiens SC\",\"1.FSV Mainz 05\",\"Amiens SC\",\"Lokomotiv Moscow\",\"Clube Atlético Mineiro\",\"Bayer 04 Leverkusen\",\"Manchester United\",\"Manchester United\",\"CSKA Moscow\",\"Rapid Vienna\",\"FC Crotone\",\"FK Krasnodar\",\"Clube de Regatas do Flamengo\",\"Dynamo Moscow\",\"FC Toulouse\",\"Torino FC\",\"PAOK Thessaloniki\",\"Rubin Kazan\",\"Zenit St. Petersburg\",\"SK Slavia Prague\",\"SV Werder Bremen\",\"ACF Fiorentina\",\"FK Krasnodar\",\"FC Augsburg\",\"Genoa CFC\",\"AS Roma\",\"FC Basel 1893\",\"Hamburger SV\",\"FC Copenhagen\",\"Bröndby IF\",\"FC Midtjylland\",\"Watford FC\",\"Bologna FC 1909\",\"SCO Angers\",\"CSKA Moscow\",\"Royale Union Saint Gilloise\",\"Atlas Guadalajara\",\"1. FC Köln\",\"1.FC Union Berlin\",\"SC Heerenveen\",\"SPAL\",\"Atletico River Plate Montevideo\",\"CF América\",\"AS Monaco\",\"Standard Liège\",\"SK Slavia Prague\",\"OGC Nice\",\"OGC Nice\",\"Parma Calcio 1913\",\"Delfino Pescara 1936\",\"Celtic FC\",\"Stade Rennais FC\",\"Shakhtar Donetsk\",\"Trabzonspor\",\"Malmö FF\",\"Hertha BSC\",\"New York City FC\",\"Atalanta BC\",\"VfB Stuttgart\",\"BSC Young Boys\",\"Sporting CP\",\"Lokomotiv Moscow\",\"FC Famalicão\",\"CA Banfield\",\"FC Dallas\",\"OGC Nice\",\"D.C. United\",\"Liverpool FC\",\"SK Sturm Graz\",\"OGC Nice\",\"IFK Norrköping\",\"FC Famalicão\",\"Universitatea Craiova\",\"AS Monaco\",\"Chelsea FC\",\"Bayer 04 Leverkusen\",\"HNK Hajduk Split\",\"CA River Plate\",\"CF Monterrey\",\"CA Peñarol\",\"FC Utrecht\",\"FC Groningen\",\"PSV Eindhoven\",\"Aston Villa\",\"Torino FC\",\"Club Athletico Paranaense\",\"SM Caen\",\"Sporting Kansas City\",\"Sport Club Internacional\",\"SC Braga\",\"Parma Calcio 1913\",\"CF Pachuca\",\"PAOK Thessaloniki\",\"OGC Nice\",\"SD Huesca\",\"Mazatlán FC\",\"Atalanta BC\",\"Valencia CF\",\"CA Boca Juniors\",\"Club Atlético Independiente\",\"AS Monaco\",\"Olympique Marseille\",\"Los Angeles FC\",\"Parma Calcio 1913\",\"SS Lazio\",\"Chelsea FC U23\",\"Southampton FC\",\"Brescia Calcio\",\"FC Augsburg\",\"FC Empoli\",\"Atalanta BC\",\"Oud-Heverlee Leuven\",\"Frosinone Calcio\",\"Club Estudiantes de La Plata\",\"São Paulo Futebol Clube\",\"Los Angeles FC\",\"FC Girondins Bordeaux\",\"Sevilla FC\",\"Atlas Guadalajara\",\"Vissel Kobe\",\"SC Braga\",\"Atlético Nacional\",\"Sport Club Corinthians Paulista\",\"SPAL\",\"Rakow Czestochowa\",\"FC Porto\",\"Standard Liège\",\"Ajax Amsterdam\",\"Rubin Kazan\",\"Fluminense Football Club\",\"AZ Alkmaar\",\"CSKA Moscow\",\"Grêmio Foot-Ball Porto Alegrense\",\"Sparta Rotterdam\",\"FK Bodø/Glimt\",\"BSC Young Boys\",\"Udinese Calcio\",\"SK Slavia Prague\",\"Ural Yekaterinburg\",\"Club Brugge KV\",\"Sport Club Corinthians Paulista\",\"Club Atlético Talleres\",\"CA Boca Juniors\",\"Sporting CP\",\"SC Braga\",\"Istanbul Basaksehir FK\",\"Cardiff City\",\"US Sassuolo\",\"Club Brugge KV\",\"SL Benfica\",\"UD Almería\",\"FC Groningen\",\"Bayern Munich\",\"LOSC Lille\",\"Borussia Dortmund\",\"FC Barcelona B\",\"Tigres UANL\",\"Nîmes Olympique\",\"Villarreal CF\",\"Olympique Lyon\",\"Deportivo Alavés\",\"Stade Rennais FC\",\"SSC Napoli\",\"Villarreal CF\",\"CA Newell's Old Boys\",\"Huddersfield Town\",\"HNK Gorica\",\"Club Cerro Porteño\",\"Hertha BSC\",\"CA Rosario Central\",\"Royal Antwerp FC\",\"Brighton & Hove Albion\",\"Brighton & Hove Albion\",\"FC Schalke 04\",\"Sporting CP\",\"US Sassuolo\",\"Olympiacos Piraeus\",\"SC Farense\",\"Stade Reims\",\"Sporting CP\",\"SL Benfica\",\"Sociedade Esportiva Palmeiras\",\"Cruzeiro Esporte Clube\",\"US Sassuolo\",\"Santos FC\",\"Clube Atlético Mineiro\",\"Vejle Boldklub\",\"KV Oostende\",\"IFK Norrköping\",\"FK Bodø/Glimt\",\"Dijon FCO\",\"Chelsea FC U23\",\"FC Schalke 04\",\"Atlético de Madrid\",\"Fatih Karagümrük\",\"Swansea City\",\"Club Cerro Porteño\",\"Stade Rennais FC\",\"Red Star Belgrade\",\"Spartak Moscow\",\"CSKA Moscow\",\"AFC Bournemouth\",\"Feyenoord Rotterdam\",\"Sport Club Internacional\",\"Hammarby IF\",\"Deportes Tolima\",\"Club Brugge KV\",\"CA Boca Juniors\",\"FC Porto B\",\"Maccabi Petah Tikva\",\"NK Lokomotiva Zagreb\",\"FK Krasnodar\",\"Bayer 04 Leverkusen\",\"Alanyaspor\",\"Wolverhampton Wanderers\",\"Red Star Belgrade\",\"Santos Laguna\",\"Sarpsborg 08 FF\",\"Ferencvárosi TC\",\"Twente Enschede FC\",\"Eintracht Frankfurt\",\"FC Nantes\",\"FC Crotone\",\"UNAM Pumas\",\"Sociedade Esportiva Palmeiras\",\"FC Barcelona B\",\"Getafe CF\",\"FC Basel 1893\",\"West Bromwich Albion\",\"LOSC Lille\",\"Inter Miami CF\",\"Defensa y Justicia\",\"SS Lazio\",\"Juventus U23\",\"Middlesbrough FC\",\"Atalanta BC\",\"KV Oostende\",\"Atlanta United FC\",\"AS Roma\",\"Olympique Marseille\",\"CA Boca Juniors\",\"Club Atlético Independiente\",\"CA Colon\",\"Inter Miami CF\",\"SV Werder Bremen\",\"FC Erzgebirge Aue\",\"SV Werder Bremen\",\"SD Huesca\",\"Atalanta BC\",\"Stade Reims\",\"Club Athletico Paranaense\",\"1.FC Nuremberg\",\"Atalanta BC\",\"Olympiacos Piraeus\",\"Dynamo Kyiv\",\"CSKA Moscow\",\"Udinese Calcio\",\"Hebei FC\",\"Club Libertad Asunción\",\"CD América de Cali\",\"Alanyaspor\",\"Esporte Clube Bahia\",\"Clube Atlético Mineiro\",\"Atlético de Madrid\",\"FC Dallas\",\"FC Dallas\",\"Charlotte FC\",\"1.FC Union Berlin\",\"FC Metz\",\"Bröndby IF\",\"Chicago Fire FC\",\"AC Milan\",\"Hannover 96\",\"SpVgg Greuther Fürth\",\"KAA Gent\",\"AS Monaco\",\"Genoa CFC\",\"Willem II Tilburg\",\"Aston Villa\",\"FC Lausanne-Sport\",\"Clube de Regatas do Flamengo\",\"Shakhtar Donetsk\",\"FC Volendam\",\"Fulham FC\",\"IF Elfsborg\",\"GD Estoril Praia\",\"SPAL\",\"Kayserispor\",\"Spezia Calcio\",\"Liverpool FC U23\",\"Club Tijuana\",\"Club Tijuana\",\"Hokkaido Consadole Sapporo\",\"BK Häcken\",\"FC Toulouse\",\"Olympique Marseille\",\"Torino FC\",\"ACF Fiorentina\",\"Club Athletico Paranaense\",\"Nîmes Olympique\",\"CD Santa Clara\",\"Arsenal Tula\",\"FC Crotone\",\"CA San Lorenzo de Almagro\",\"Lech Poznan\",\"Moreirense FC\",\"Granada CF\",\"Derby County\",\"1.FSV Mainz 05\",\"Stade Rennais FC\",\"Club Atlético Independiente\",\"AA Argentinos Juniors\",\"Santos FC\",\"Celtic FC\",\"SD Huesca\",\"Toronto FC\",\"CA River Plate\",\"1.FC Union Berlin\",\"VfB Stuttgart\",\"BSC Young Boys\",\"Sparta Rotterdam\",\"Eintracht Frankfurt\",\"Sporting CP\",\"TSG 1899 Hoffenheim\",\"Genoa CFC\",\"Genoa CFC\",\"Hibernian FC\",\"Club Nacional\",\"Raja Club Athletic\",\"Paradou AC\",\"RB Leipzig\",\"CA River Plate\",\"FK Rostov\",\"CA Peñarol\",\"Ajax Amsterdam\",\"CA San Lorenzo de Almagro\",\"Club Atlético Unión\",\"CA River Plate\",\"SPAL\",\"Club Estudiantes de La Plata\",\"Legia Warszawa\",\"Danubio FC\",\"Independiente del Valle\",\"Vitória Guimarães SC B\",\"FC Toulouse\",\"Beijing Guoan\",\"FC Schalke 04\",\"Legia Warszawa\",\"RB Leipzig\",\"Shakhtar Donetsk U19\",\"Envigado FC\",\"FC Utrecht U21\",\"CSKA-Sofia\",\"Kawasaki Frontale\",\"Stabæk Fotball\",\"IFK Norrköping\",\"FC Empoli\",\"MTK Budapest\",\"Club de Regatas Vasco da Gama\",\"Akhmat Grozny\",\"Al-Shabab FC (Riyadh)\",\"Club Necaxa\",\"Bröndby IF\",\"1.FC Nuremberg\",\"Shakhtar Donetsk\",\"Red Bull Salzburg\",\"RSC Charleroi\",\"Red Bull Bragantino\",\"Watford FC\",\"Millonarios FC\",\"RSC Anderlecht\",\"Sporting CP\",\"Real Madrid Castilla\",\"Piast Gliwice\",\"Southampton FC\",\"Antalyaspor\",\"New York Red Bulls\",\"Colorado Rapids\",\"D.C. United\",\"Brighton & Hove Albion\",\"CD Cruz Azul\",\"Cagliari Calcio\",\"Club Atlético Talleres\",\"AS Monaco\",\"Villarreal CF\",\"SL Benfica\",\"SC Braga\",\"Colorado Rapids\",\"Rio Ave FC\",\"AZ Alkmaar\",\"SL Benfica B\",\"Philadelphia Union\",\"SV Werder Bremen\",\"Dynamo Kyiv\",\"Sevilla FC\",\"Ludogorets Razgrad\",\"Club Atlético Talleres\",\"Dinamo Tbilisi\",\"FC Midtjylland\",\"Rapid Vienna\",\"US Sassuolo\",\"Philadelphia Union\",\"Minnesota United FC\",\"Borussia Dortmund\",\"Rapid Vienna\",\"Colorado Rapids\",\"SC Braga\",\"Club Atlético Independiente\",\"AA Argentinos Juniors\",\"SC Freiburg\",\"Club Atlético Independiente\",\"Sporting CP\",\"TSG 1899 Hoffenheim\",\"AFC Bournemouth\",\"Brentford FC\",\"Club Atlético Huracán\",\"Independiente del Valle\",\"CA Peñarol\",\"FCSB\",\"Krylya Sovetov Samara\",\"Club Atlético Talleres\",\"KV Oostende\",\"Pordenone Calcio\",\"Fatih Karagümrük\",\"Club Estudiantes de La Plata\",\"TSG 1899 Hoffenheim\",\"US Sassuolo\",\"UC Sampdoria\",\"LDU Quito\",\"Göztepe\",\"Nîmes Olympique\",\"Unión Española\",\"NK Osijek\",\"Moreirense FC\",\"ACF Fiorentina\",\"Cagliari Calcio\",\"Alanyaspor\",\"Clube Atlético Mineiro\",\"Club Alianza Lima\",\"Inter Milan\",\"LOSC Lille\",\"FC Nordsjaelland U19\",\"Portimonense SC\",\"Slovan Bratislava\",\"Willem II Tilburg\",\"Roma Primavera\",\"HNK Rijeka\",\"SC Paderborn 07\",\"Villarreal CF\",\"CD América de Cali\",\"AS Monaco\",\"Sint-Truidense VV\",\"CD Leganés\",\"VVV-Venlo\",\"AS Roma\",\"Puebla FC\",\"SC Paderborn 07\",\"FC Bayern Munich II\",\"Djurgårdens IF\",\"Borussia Dortmund\",\"Al-Jazira (Abu Dhabi)\",\"UNAM Pumas\",\"1. FC Köln\",\"Stade Rennais FC\",\"SV Zulte Waregem\",\"FC Famalicão\",\"Spezia Calcio\",\"Gil Vicente FC\",\"CA Boca Juniors\",\"Associação Atlética Ponte Preta\",\"Boavista FC\",\"Watford FC\",\"FC Nantes\",\"Fenerbahce SK\",\"Red Star Belgrade\",\"FC Copenhagen\",\"Red Bull Salzburg\",\"Millonarios FC\",\"Los Angeles Galaxy\",\"Stade Rennais FC\",\"Portland Timbers\",\"Eintracht Frankfurt\",\"Red Bull Salzburg\",\"São Paulo Futebol Clube\",\"Cardiff City\",\"RC Lens\",\"KRC Genk\",\"Amiens SC\",\"Nashville SC\",\"1. FC Köln\",\"Borussia Dortmund II\",\"GNK Dinamo Zagreb\",\"Aarhus GF\",\"Liverpool FC Montevideo\",\"Sport Club Internacional\",\"Lechia Gdansk\",\"West Bromwich Albion\",\"FC Midtjylland\",\"Hamburger SV\",\"Altinordu FK\",\"Rapid Vienna\",\"Al-Ettifaq\",\"VfL Bochum\",\"FC Schalke 04\",\"Liverpool FC Montevideo\",\"Vitória Guimarães SC\",\"Columbus Crew\",\"Dijon FCO\",\"1.FC Union Berlin\",\"Elche CF\",\"Lokomotiv Moscow\",\"Clube de Regatas do Flamengo\",\"Clube Atlético Mineiro\",\"Clube Atlético Mineiro\",\"Millonarios FC\",\"Wisla Kraków\",\"Maccabi Tel Aviv\",\"SC Heerenveen\",\"Istanbul Basaksehir FK\",\"FC Midtjylland\",\"LOSC Lille\",\"Chicago Fire FC\",\"Malmö FF\",\"AC Sparta Prague\",\"Sport Club Corinthians Paulista\",\"CSKA-Sofia\",\"Al-Ittihad Jeddah\",\"US Sassuolo\",\"Independiente del Valle\",\"Lokomotiv Moscow\",\"MSK Zilina\",\"CD Santa Clara\",\"Sport Club do Recife\",\"Liverpool FC Montevideo\",\"Fenerbahce SK\",\"KAA Gent\",\"AC Le Havre\",\"US Lecce\",\"Göztepe\",\"RC Strasbourg Alsace\",\"Ferencvárosi TC\",\"SSC Napoli\",\"Palermo FC\",\"UNAM Pumas\",\"FK Cukaricki\",\"Calcio Padova\",\"UC Sampdoria\",\"LOSC Lille\",\"Molde FK\",\"HNK Hajduk Split\",\"Pogon Szczecin\",\"AC Le Havre\",\"AIK Solna\",\"AS Cittadella\",\"Parma Calcio 1913\",\"Vålerenga Fotball\",\"MOL Fehérvár FC\",\"FC Midtjylland\",\"Atalanta BC\",\"Akhmat Grozny\",\"AC Le Havre\",\"LOSC Lille\",\"Parma Calcio 1913\",\"Molde FK\",\"Hércules CF\",\"FC Midtjylland\",\"Portimonense SC\",\"Sint-Truidense VV\",\"Hammarby IF\",\"Milan Primavera\",\"Colorado Rapids\",\"DAC Dunajska Streda\",\"Fortaleza Esporte Clube\",\"Swansea City\",\"Al-Ittihad Jeddah\",\"Inter Miami CF\",\"Associação Chapecoense de Futebol\",\"Olympiacos Piraeus\",\"Udinese Calcio\",\"FC Sheriff Tiraspol\",\"CA Boca Juniors\",\"Sport Club Internacional\",\"Sivasspor\",\"Club Atlético Lanús\",\"Bursaspor\",\"Clube Atlético Mineiro\",\"AEK Athens\",\"Tottenham Hotspur\",\"Girona FC\",\"FC Viktoria Plzen\",\"Belenenses SAD\",\"FC Lausanne-Sport\",\"HNK Gorica\",\"FC Copenhagen\",\"LASK\",\"Sport Club Corinthians Paulista\",\"Botafogo de Futebol e Regatas\",\"AC Sparta Prague\",\"PAOK Thessaloniki\",\"NK Lokomotiva Zagreb\",\"Vancouver Whitecaps FC\",\"FC Schalke 04\",\"Club Atlético Platense\",\"Santos FC\",\"CF Monterrey\",\"FC Sochaux-Montbéliard\",\"Hamburger SV\",\"FC Admira Wacker Mödling\",\"Fulham FC\",\"Club Atlético Atlanta\",\"Górnik Zabrze\",\"Atlético de Rafaela\",\"FC Metz\",\"Paradou AC\",\"Standard Liège\",\"Club Atlético Tucuman\",\"SS Lazio\",\"BK Häcken\",\"Rubin Kazan\",\"PSV Eindhoven\",\"SK Slavia Prague\",\"FC St. Gallen 1879\",\"CSD Colo Colo\",\"Racing Club\",\"Galatasaray A.S.\",\"TSG 1899 Hoffenheim\",\"FK Cukaricki\",\"CD Feirense\",\"CA San Lorenzo de Almagro\",\"FC Dinamo 1948\",\"Altinordu FK\",\"Wisla Kraków\",\"Montevideo Wanderers\",\"Raja Club Athletic\",\"Stoke City\",\"LKS Lodz\",\"Celta de Vigo\",\"FC Toulouse\",\"Al Qadisiyah FC\",\"FC Nordsjaelland\",\"Watford FC\",\"Al Qadisiyah FC\",\"LKS Lodz\",\"Esteghlal FC\",\"KRC Genk\",\"Juventus U23\",\"SL Benfica\",\"CA Vélez Sarsfield\",\"Ludogorets Razgrad\",\"FC Bayern Munich II\",\"São Paulo Futebol Clube\",\"KRC Genk\",\"Konyaspor\",\"Sport Club do Recife\",\"FC Basel 1893\",\"Benevento Calcio\",\"Spartak Moscow\",\"KAA Gent\",\"Kasimpasa\",\"Luton Town\",\"CA Boca Juniors\",\"Arminia Bielefeld\",\"FK Orenburg\",\"Yeni Malatyaspor\",\"Atlético de San Luis\",\"SSC Napoli\",\"Derby County\",\"AS Monaco\",\"Djurgårdens IF\",\"Djurgårdens IF\",\"AS Monaco\",\"Envigado FC\",\"Deportivo de La Coruña\",\"Clube Atlético Mineiro\",\"Ipswich Town\",\"1.FC Union Berlin\",\"Club Guaraní\",\"FC Schalke 04\",\"SD Eibar\",\"Sporting CP\",\"Krylya Sovetov Samara\",\"Kawasaki Frontale\",\"Sport Club Internacional\",\"Wydad Casablanca\",\"Celtic FC\",\"São Paulo Futebol Clube\",\"Sociedade Esportiva Palmeiras\",\"DAC Dunajska Streda\",\"Fenerbahce SK\",\"Los Angeles FC\",\"Villarreal CF\",\"FC Porto\",\"Club Atlético Unión\",\"NK Maribor\",\"Kawasaki Frontale\",\"Odense Boldklub\",\"Peterborough United\",\"Grêmio Foot-Ball Porto Alegrense\",\"Olimpia Asunción\",\"Vålerenga Fotball\",\"Grêmio Foot-Ball Porto Alegrense\",\"Spartak Moscow\",\"Dinamo Tbilisi\",\"Liverpool FC U23\",\"Ceará Sporting Club\",\"Chelsea FC U23\",\"Vålerenga Fotball\",\"AIK Solna\",\"UD Almería\",\"Grêmio Foot-Ball Porto Alegrense\",\"Deportes La Serena\",\"Grenoble Foot 38\",\"AE Larisa\",\"GD Estoril Praia\",\"Spartak Moscow\",\"SK Dynamo Ceske Budejovice\",\"Krylya Sovetov Samara\",\"Valenciennes FC\",\"LASK\",\"Sparta Rotterdam\",\"Pohang Steelers\",\"Oeste Futebol Clube (SP)\",\"Chamois Niortais FC\",\"Lokomotiv Moscow\",\"Red Bull Salzburg\",\"Girona FC\",\"VfL Wolfsburg\",\"IFK Göteborg\",\"Rio Ave FC\",\"Belenenses SAD\",\"Tombense Futebol Clube (MG)\",\"Sint-Truidense VV\",\"FC Slovan Liberec\",\"Sociedade Esportiva Palmeiras\",\"Austria Vienna\",\"Spartak Moscow\",\"LASK\",\"AEK Athens\",\"Holstein Kiel\",\"FK Radnik Surdulica\",\"Shandong Taishan\",\"Nashville SC\",\"Molde FK\",\"FC Lugano\",\"US Sassuolo\",\"FK TSC Backa Topola\",\"HNK Gorica\",\"Jagiellonia Bialystok\",\"Sporting Kansas City\",\"Dynamo Kyiv\",\"CF Monterrey\",\"Aarhus GF\",\"Atlético Clube Goianiense\",\"Aarhus GF\",\"Associação Chapecoense de Futebol\",\"Club Atlético Independiente\",\"Racing Club\",\"Sport Club Corinthians Paulista\",\"Red Star Belgrade\",\"Dynamo Kyiv\",\"FK Aktobe\",\"Spartak Moscow\",\"Bayer 04 Leverkusen\",\"Manchester City\",\"FC Barcelona\",\"SL Benfica\",\"RB Leipzig\",\"Juventus FC\",\"Inter Milan\",\"Real Madrid\",\"Leicester City\",\"Atlético de Madrid\",\"Cagliari Calcio\",\"Bayern Munich\",\"ACF Fiorentina\",\"AFC Bournemouth\",\"Valencia CF\",\"Wolverhampton Wanderers\",\"Ajax Amsterdam\",\"LOSC Lille\",\"Ajax Amsterdam\",\"FC Porto\",\"Real Betis Balompié\",\"FC Barcelona\",\"Valencia CF\",\"FC Porto\",\"Real Madrid\",\"Chelsea FC\",\"Atlético de Madrid\",\"AS Saint-Étienne\",\"Brescia Calcio\",\"Eintracht Frankfurt\",\"Arsenal FC\",\"SC Braga\",\"Real Madrid\",\"West Ham United\",\"Olympique Lyon\",\"Real Madrid\",\"SSC Napoli\",\"Grêmio Foot-Ball Porto Alegrense\",\"Bayer 04 Leverkusen\",\"FC Barcelona\",\"Norwich City\",\"KAA Gent\",\"Dalian Professional\",\"AS Roma\",\"LOSC Lille\",\"Liverpool FC U23\",\"RSC Anderlecht\",\"Chelsea FC\",\"Juventus FC\",\"US Sassuolo\",\"Red Bull Salzburg\",\"Chelsea FC\",\"Hellas Verona\",\"FC Schalke 04\",\"UD Almería\",\"Stade Rennais FC\",\"ACF Fiorentina\",\"FC Porto\",\"AC Milan\",\"Brentford FC\",\"AS Roma\",\"AFC Bournemouth\",\"SSC Napoli\",\"Atalanta BC\",\"Brentford FC\",\"SSC Napoli\",\"Atalanta BC\",\"AC Milan\",\"Ajax Amsterdam\",\"AFC Bournemouth\",\"Sporting CP\",\"Watford FC\",\"Crystal Palace\",\"Real Sociedad\",\"AC Milan\",\"Southampton FC\",\"Olympique Marseille\",\"Manchester United\",\"FC Schalke 04\",\"FC Barcelona\",\"SL Benfica\",\"Real Sociedad\",\"Valencia CF\",\"Real Madrid\",\"AS Roma\",\"Real Madrid\",\"Juventus FC\",\"Fenerbahce SK\",\"Inter Milan\",\"Stade Rennais FC\",\"Olympique Lyon\",\"Atalanta BC\",\"Sport Club Corinthians Paulista\",\"Club Brugge KV\",\"São Paulo Futebol Clube\",\"Lokomotiv Moscow\",\"FC Barcelona\",\"SL Benfica\",\"Queens Park Rangers\",\"Wolverhampton Wanderers\",\"Valencia CF\",\"Genoa CFC\",\"Arsenal FC\",\"SC Freiburg\",\"Chelsea FC\",\"Wolverhampton Wanderers\",\"Norwich City\",\"Huddersfield Town\",\"Watford FC\",\"SK Slavia Prague\",\"Atlanta United FC\",\"SC Braga\",\"SC Freiburg\",\"RCD Espanyol Barcelona\",\"Chelsea FC\",\"AS Monaco\",\"Liverpool FC\",\"Olympique Lyon\",\"Nottingham Forest\",\"Racing Club\",\"SSC Napoli\",\"US Sassuolo\",\"Amiens SC\",\"1. FC Köln\",\"Manchester City\",\"Real Madrid\",\"ACF Fiorentina\",\"Stade Brestois 29\",\"Ajax Amsterdam\",\"FC Augsburg\",\"Atalanta BC\",\"1.FSV Mainz 05\",\"Inter Milan\",\"OGC Nice\",\"ACF Fiorentina\",\"Villarreal CF\",\"Valencia CF\",\"Juventus FC\",\"FC Barcelona\",\"Genoa CFC\",\"West Ham United\",\"Stade Reims\",\"Hertha BSC\",\"SL Benfica\",\"Real Madrid\",\"Tottenham Hotspur\",\"FC Barcelona\",\"Olympiacos Piraeus\",\"FCSB\",\"US Salernitana 1919\",\"Swansea City\",\"Brentford FC\",\"SSC Napoli\",\"Watford FC\",\"Udinese Calcio\",\"Olympique Lyon\",\"Red Bull Salzburg\",\"Liverpool FC\",\"Real Valladolid CF\",\"Torino FC\",\"AZ Alkmaar\",\"SV Werder Bremen\",\"Sporting CP\",\"FC Metz\",\"Sociedade Esportiva Palmeiras\",\"Atlético de Madrid\",\"Eintracht Frankfurt\",\"Leicester City\",\"Juventus FC\",\"ACF Fiorentina\",\"Manchester United\",\"São Paulo Futebol Clube\",\"Brighton & Hove Albion\",\"SC Heerenveen\",\"Birmingham City\",\"KRC Genk\",\"US Sassuolo\",\"Torino FC\",\"Lech Poznan\",\"Celtic FC\",\"CA San Lorenzo de Almagro\",\"Dynamo Moscow\",\"RB Leipzig\",\"Club Brugge KV\",\"Manchester City U23\",\"CA River Plate\",\"Juventus Primavera\",\"SCO Angers\",\"Dijon FCO\",\"1.FSV Mainz 05\",\"Sevilla FC\",\"Juventus FC\",\"UC Sampdoria\",\"Istanbul Basaksehir FK\",\"Philadelphia Union\",\"Rio Ave FC\",\"Real Madrid\",\"Manchester United\",\"Southampton FC\",\"RB Leipzig\",\"Stade Rennais FC\",\"ACF Fiorentina\",\"Juventus FC\",\"AS Roma\",\"Liverpool FC U23\",\"Udinese Calcio\",\"Sporting CP\",\"FC Toulouse\",\"Brighton & Hove Albion\",\"Everton FC\",\"Brighton & Hove Albion\",\"FC Barcelona\",\"Universitatea Craiova\",\"Clermont Foot 63\",\"FC Nordsjaelland\",\"Villarreal CF\",\"FK Rostov\",\"FC Toulouse\",\"Olympique Marseille\",\"FC Porto\",\"Inter Milan\",\"RC Strasbourg Alsace\",\"CSKA Moscow\",\"Tombense Futebol Clube (MG)\",\"GNK Dinamo Zagreb\",\"CA Peñarol\",\"FK Partizan Belgrade\",\"Hertha BSC\",\"Spartak Moscow\",\"SSC Napoli\",\"AS Roma\",\"Inter Milan\",\"FC Barcelona B\",\"Club Athletico Paranaense\",\"Ajax Amsterdam U21\",\"Sport Club Internacional\",\"Atlético de Madrid\",\"KV Kortrijk\",\"SPAL\",\"Olympique Marseille\",\"Juventus U23\",\"Juventus U23\",\"Club de Regatas Vasco da Gama\",\"Sevilla FC\",\"Santos FC\",\"CA River Plate\",\"FC Girondins Bordeaux\",\"FC Porto\",\"RSC Anderlecht\",\"CA San Lorenzo de Almagro\",\"Real Sociedad\",\"FC Girondins Bordeaux\",\"Ajax Amsterdam\",\"Udinese Calcio\",\"ACF Fiorentina\",\"FC Girondins Bordeaux\",\"Watford FC\",\"CA River Plate\",\"Udinese Calcio\",\"TSG 1899 Hoffenheim\",\"Borussia Dortmund\",\"US Sassuolo\",\"VfL Wolfsburg\",\"Juventus FC\",\"Olympique Lyon\",\"TSG 1899 Hoffenheim\",\"BSC Young Boys\",\"SC Freiburg\",\"Hertha BSC\",\"PSV Eindhoven\",\"1.FC Union Berlin\",\"FC Famalicão\",\"Sevilla FC\",\"Sporting CP\",\"FC Famalicão\",\"Eintracht Frankfurt\",\"Fortuna Düsseldorf\",\"Torino FC\",\"Villarreal CF\",\"RSC Charleroi\",\"FC Nordsjaelland\",\"Club Atlético Talleres\",\"Atlético de Madrid\",\"FC Lorient\",\"Southampton FC\",\"West Bromwich Albion\",\"Santos FC\",\"Real Betis Balompié\",\"CA Vélez Sarsfield\",\"Levante UD\",\"Huddersfield Town\",\"Huddersfield Town\",\"Villarreal CF\",\"UC Sampdoria\",\"Southampton FC\",\"UC Sampdoria\",\"FK Krasnodar\",\"Dalian Professional\",\"Stoke City\",\"Zenit St. Petersburg\",\"FC Zürich\",\"Club Atlético Lanús\",\"Juventus U23\",\"Derby County\",\"FC Augsburg\",\"CA Boca Juniors\",\"Coritiba Foot Ball Club\",\"Clube de Regatas do Flamengo\",\"RSC Charleroi\",\"Sociedade Esportiva Palmeiras\",\"OGC Nice\",\"FC Basel 1893\",\"Olympiacos Piraeus\",\"SK Slavia Prague\",\"Kashiwa Reysol\",\"Grêmio Foot-Ball Porto Alegrense\",\"Sport Club Internacional\",\"Legia Warszawa\",\"FK Partizan Belgrade\",\"CA River Plate\",\"SSC Napoli\",\"Wolfsberger AC\",\"BSC Young Boys\",\"VfL Wolfsburg\",\"1.FC Heidenheim 1846\",\"Stade Rennais FC\",\"PAOK Thessaloniki\",\"AS Monaco\",\"Shakhtar Donetsk\",\"Torino FC\",\"CA Boca Juniors\",\"Chelsea FC\",\"FC Dallas\",\"Udinese Calcio\",\"Peterborough United\",\"West Ham United\",\"AFC Bournemouth\",\"Hannover 96\",\"Eintracht Frankfurt\",\"OGC Nice\",\"West Ham United\",\"Olympique Lyon\",\"Atlético de Madrid\",\"PSV Eindhoven\",\"Philadelphia Union\",\"Clube de Regatas do Flamengo\",\"FC Zürich\",\"Valenciennes FC\",\"Club Atlético Talleres\",\"Standard Liège\",\"Guangzhou FC\",\"CA Boca Juniors\",\"SSC Napoli\",\"Três Passos Atlético Clube\",\"AS Saint-Étienne\",\"AEK Athens\",\"CD Tenerife\",\"RSC Anderlecht\",\"Zaglebie Lubin\",\"FC Sochaux-Montbéliard\",\"Huddersfield Town\",\"FC Paris Saint-Germain B\",\"Real Zaragoza\",\"Portimonense SC\",\"Independiente del Valle\",\"UNAM Pumas\",\"CA Boca Juniors\",\"Genoa CFC\",\"Alanyaspor\",\"AS Roma\",\"UC Sampdoria\",\"US Lecce\",\"GNK Dinamo Zagreb\",\"SSC Napoli\",\"Olympiacos Piraeus\",\"Torino FC\",\"Bayern Munich\",\"SPAL\",\"FK Bodø/Glimt\",\"Tigres UANL\",\"Stade Reims\",\"Celta de Vigo\",\"Galatasaray A.S.\",\"Brighton & Hove Albion\",\"Watford FC\",\"CD Leganés\",\"CA Colon\",\"Jeonbuk Hyundai Motors\",\"Krylya Sovetov Samara\",\"Atlético Nacional\",\"AS Monaco\",\"Olympique Lyon\",\"KV Mechelen\",\"São Paulo Futebol Clube\",\"NK Osijek\",\"FC Basel 1893 U18\",\"Fenerbahce SK\",\"CF Pachuca\",\"Spartak Moscow\",\"Cagliari Calcio\",\"OGC Nice\",\"KRC Genk\",\"Club Atlético Talleres\",\"Club León FC\",\"TSG 1899 Hoffenheim\",\"Genoa CFC\",\"Burnley FC\",\"UC Sampdoria\",\"Brescia Calcio\",\"Olympique Marseille\",\"Zenit St. Petersburg\",\"Celtic FC\",\"Lech Poznan\",\"Club Nacional\",\"FC Utrecht\",\"FC Porto\",\"CA Fénix\",\"Genoa CFC\",\"SS Lazio\",\"Getafe CF\",\"VfB Stuttgart\",\"Parma Calcio 1913\",\"Heracles Almelo\",\"Borussia Dortmund\",\"AS Roma\",\"FC Groningen\",\"Dijon FCO\",\"Juventus Primavera\",\"Sport Club Corinthians Paulista\",\"CD Santa Clara\",\"Girona FC\",\"FC Lausanne-Sport\",\"FC Sochaux-Montbéliard U19\",\"Sociedade Esportiva Palmeiras\",\"Club Necaxa\",\"Real Betis Balompié\",\"Rio Ave FC\",\"Beitar Jerusalem\",\"Houston Dynamo FC\",\"PAOK Thessaloniki\",\"Querétaro FC\",\"FC St. Gallen 1879\",\"Swansea City\",\"HNK Rijeka\",\"Bristol City\",\"Atlas Guadalajara\",\"Club Atlético Independiente\",\"CD Cruz Azul\",\"Shanghai Shenhua\",\"Amiens SC\",\"Club Atlético Independiente\",\"Watford FC\",\"Manchester United\",\"CA Vélez Sarsfield\",\"SPAL\",\"UNAM Pumas\",\"CA Newell's Old Boys\",\"AS Monaco\",\"Stoke City\",\"PSV Eindhoven\",\"Racing Club\",\"Kayserispor\",\"1.FSV Mainz 05\",\"Sporting CP\",\"West Ham United\",\"Liverpool FC\",\"Derby County\",\"IFK Norrköping\",\"Mazatlán FC\",\"Deportivo Alavés\",\"FC Sion\",\"Botafogo de Futebol e Regatas\",\"FC Nordsjaelland\",\"Esporte Clube Bahia\",\"OGC Nice\",\"NEC Nijmegen\",\"São Paulo Futebol Clube\",\"Esporte Clube Bahia\",\"VfB Stuttgart\",\"Club Necaxa\",\"Santos Laguna\",\"1.FC Heidenheim 1846\",\"FK Ufa\",\"Atalanta BC\",\"NK Lokomotiva Zagreb\",\"ESTAC Troyes\",\"FK Rostov\",\"Pordenone Calcio\",\"AS Monaco\",\"Wigan Athletic\",\"AC Milan\",\"FK Ufa\",\"GNK Dinamo Zagreb\",\"Lech Poznan\",\"AC Milan\",\"FC St. Gallen 1879\",\"Stoke City\",\"Houston Dynamo FC\",\"Chicago Fire FC\",\"FK Ufa\",\"Queens Park Rangers\",\"Cagliari Calcio\",\"Olympiacos Piraeus\",\"SSC Napoli\",\"West Bromwich Albion\",\"Genoa CFC\",\"Atalanta BC\",\"AA Argentinos Juniors\",\"LOSC Lille\",\"Genoa CFC\",\"AS Monaco B\",\"Derby County U18\",\"Olimpia Asunción\",\"NK Osijek\",\"Aberdeen FC\",\"Bologna FC 1909\",\"Sociedade Esportiva Palmeiras\",\"PAOK Thessaloniki\",\"Club Tijuana\",\"Club Atlético Talleres\",\"Aston Villa\",\"Pyramids FC\",\"Elche CF\",\"Racing Club\",\"Galatasaray A.S.\",\"Girona FC\",\"OGC Nice\",\"Genoa CFC\",\"Club Atlético Huracán\",\"Tigres UANL\",\"Villarreal CF\",\"Pyramids FC\",\"US Sassuolo\",\"FC Luzern\",\"Olympique de Marseille B\",\"CA Colon\",\"Cagliari Calcio\",\"UC Sampdoria\",\"FC Basel 1893\",\"KRC Genk\",\"Fluminense Football Club\",\"Chelsea FC\",\"LOSC Lille\",\"Getafe CF\",\"Elche CF\",\"AS Saint-Étienne\",\"Real Madrid\",\"Motherwell FC\",\"Fluminense Football Club\",\"Motherwell FC\",\"CA Osasuna\",\"Elche CF\",\"Vitória Guimarães SC\",\"Stade Rennais FC\",\"Danubio FC\",\"US Sassuolo\",\"KRC Genk\",\"FK Rostov\",\"Independiente del Valle\",\"Amiens SC\",\"HNK Rijeka\",\"Sporting CP\",\"Aarhus GF\",\"Hamburger SV\",\"FC Dallas\",\"Juventud de Las Piedras\",\"Club Brugge KV\",\"Sociedade Esportiva Palmeiras\",\"US Lecce\",\"GNK Dinamo Zagreb\",\"Sporting CP\",\"Amiens SC\",\"Asteras Tripolis\",\"RSC Anderlecht\",\"CD Godoy Cruz Antonio Tomba\",\"Amiens SC U19\",\"FC Lugano\",\"Yeni Malatyaspor\",\"Club Brugge KV\",\"SC Braga\",\"Manchester City\",\"Persepolis FC\",\"Cardiff City\",\"Vitória Guimarães SC\",\"Pyramids FC\",\"Olympiacos Piraeus\",\"AA Argentinos Juniors\",\"Defensa y Justicia\",\"Birmingham City\",\"Oxford United\",\"Real Madrid\",\"GDSC Alvarenga Futebol SAD\",\"FC Girondins Bordeaux\",\"Grasshopper Club Zurich\",\"SS Lazio\",\"Apollon Limassol\",\"Fenerbahce SK\",\"IF Elfsborg\",\"Chongqing Liangjiang Athletic\",\"Guangzhou City\",\"Wuhan FC\",\"Shanghai Shenhua U19\",\"Hebei FC\",\"FC Luzern\",\"NEC Nijmegen\",\"Genclerbirligi Ankara\",\"Real Madrid Castilla\",\"Stabæk Fotball\",\"FC Barcelona B\",\"Helsingborgs IF\",\"Le Mans FC\",\"Girona FC\",\"Vancouver Whitecaps FC\",\"FC Barcelona B\",\"Altinordu FK\",\"Valencia Mestalla\",\"Clube de Regatas do Flamengo\",\"CD Cruz Azul\",\"Moreirense FC\",\"Helsingborgs IF\",\"Genclerbirligi Ankara\",\"Sociedade Esportiva Palmeiras\",\"Juventus U23\",\"PAOK Thessaloniki\",\"Rapid Vienna\",\"Club Tijuana\",\"Nîmes Olympique\",\"SönderjyskE\",\"Zamalek SC\",\"RSC Anderlecht\",\"Cagliari Calcio\",\"FC Nantes\",\"Club Atlético Independiente\",\"Club Atlético Independiente\",\"Deportivo Alavés\",\"New York City FC\",\"Atlanta United FC\",\"Club Atlético Independiente\",\"FK Rostov\",\"Club Atlético Talleres\",\"US Sassuolo\",\"CA Boca Juniors\",\"Beijing Guoan\",\"Cardiff City\",\"FC Porto B\",\"SSC Napoli\",\"Eintracht Frankfurt\",\"Olympique Lyon\",\"SL Benfica\",\"Preston North End\",\"1.FC Magdeburg\",\"CD Godoy Cruz Antonio Tomba\",\"Racing Club\",\"FC Basel 1893\",\"CA Banfield\",\"Santos FC\",\"SC Freiburg\",\"Arsenal FC\",\"KAA Gent\",\"SL Benfica\",\"CA River Plate\",\"FC Toulouse\",\"Queens Park Rangers\",\"Club Atlético Talleres\",\"Atalanta BC\",\"Botafogo de Futebol e Regatas\",\"Deportivo Cali\",\"Aberdeen FC\",\"Hebei FC Reserves\",\"Yokohama FC\",\"Wigan Athletic\",\"AS Monaco B\",\"Livingston FC\",\"Barnsley FC\",\"HNK Hajduk Split\",\"Beitar Jerusalem\",\"Charlton Athletic\",\"HNK Sibenik\",\"Leicester City\",\"CA Banfield\",\"RSC Anderlecht\",\"Red Star Belgrade\",\"Al-Ahli Jeddah\",\"SL Benfica B\",\"Dijon FCO\",\"FK Partizan Belgrade\",\"US Sassuolo\",\"Hebei FC Reserves\",\"Yeni Malatyaspor\",\"Junior FC\",\"Independiente del Valle\",\"CA Banfield\",\"Urawa Red Diamonds\",\"Everton FC\",\"FK Bodø/Glimt\",\"Sparta Rotterdam\",\"1.FC Kaiserslautern\",\"Manchester City U23\",\"Aalborg BK\",\"Cherno More Varna\",\"Juventus U23\",\"Everton FC U23\",\"Frosinone Calcio\",\"FC Toulouse\",\"Getafe CF\",\"Watford FC\",\"Real Madrid\",\"SC Paderborn 07\",\"AC Horsens\",\"FK Rostov\",\"Amiens SC\",\"Red Bull Salzburg\",\"Delfino Pescara 1936\",\"TP Mazembe\",\"NAC Breda\",\"Hull City\",\"AS Cittadella\",\"Dijon FCO\",\"Málaga CF\",\"Coritiba Foot Ball Club\",\"Brescia Calcio\",\"Chamois Niortais FC\",\"LB Châteauroux\",\"CD Santa Clara\",\"FC Paços de Ferreira\",\"NK Istra 1961 U17\",\"SpVgg Unterhaching\",\"Cruzeiro Esporte Clube\",\"SS Lazio\",\"FC Porto\",\"New York City FC\",\"Rio Ave FC\",\"FC Luzern\",\"Barcelona SC Guayaquil\",\"New York City FC\",\"Royal Excel Mouscron\",\"AS Roma\",\"GNK Dinamo Zagreb\",\"Pakhtakor Tashkent\",\"FC Cincinnati\",\"Zaglebie Lubin\",\"Deportivo Cali\",\"SK Slavia Prague\",\"Club Tijuana\",\"TSG 1899 Hoffenheim\",\"ACF Fiorentina\",\"Deportivo Cali\",\"CSKA-Sofia\",\"Olympiacos Piraeus\",\"CSKA-Sofia\",\"Shanghai Port\",\"Meizhou Hakka\",\"Sociedade Esportiva Palmeiras\",\"Astra Giurgiu\",\"Shandong Taishan\",\"US Lecce\",\"Atalanta BC\",\"Arsenal Tula\",\"NK Lokomotiva Zagreb\",\"Paris FC Youth\",\"Antalyaspor\",\"AS Monaco\",\"Cruzeiro Esporte Clube\",\"Deportivo Cali\",\"Stade Rennais FC\",\"Shandong Taishan\",\"Beerschot V.A.\",\"El Ahly Cairo\",\"Zenit 2 St. Petersburg\",\"CA San Lorenzo de Almagro\",\"SL Benfica B\",\"New York Red Bulls\",\"Atlético de Rafaela\",\"FC Basel 1893\",\"Serra Macaense Futebol Clube (RJ)\",\"LASK\",\"Juventus Primavera\",\"Sint-Truidense VV\",\"Lechia Gdansk\",\"Arsenal FC U18\",\"Heart of Midlothian FC\",\"FC Viitorul Constanta\",\"Club Atlético Talleres\",\"Konyaspor\",\"FK Cukaricki\",\"FC Astana\",\"HNK Hajduk Split\",\"SK Slavia Prague\",\"Raja Club Athletic\",\"Doncaster Rovers\",\"Botafogo de Futebol e Regatas\",\"Budapest Honvéd FC\",\"Reading FC\",\"Vitória Guimarães SC\",\"Silkeborg IF\",\"FC Pro Vercelli 1892\",\"HNK Gorica\",\"UD Las Palmas\",\"Fortuna Sittard\",\"APOEL Nicosia\",\"Instituto AC Córdoba\",\"FC Toulouse\",\"Amiens SC\",\"Rayo Vallecano\",\"SC Freiburg\",\"Red Star Belgrade\",\"SCO Angers\",\"RSC Anderlecht\",\"Cosenza Calcio\",\"Wigan Athletic\",\"Girona FC\",\"Real Salt Lake City\",\"Swansea City\",\"Mazatlán FC\",\"CSKA-Sofia\",\"CFR Cluj\",\"CA Rosario Central\",\"Club Atlético Unión\",\"Club Universidad de Chile\",\"Danubio FC\",\"Celtic FC\",\"Spezia Calcio\",\"GNK Dinamo Zagreb\",\"Shakhtar Donetsk\",\"PEC Zwolle\",\"Sint-Truidense VV\",\"Shakhter Soligorsk\",\"Boavista FC\",\"FK Rostov\",\"Hammarby IF U19\",\"Hokkaido Consadole Sapporo\",\"Altay SK\",\"Pyramids FC\",\"FC St. Pauli\",\"Spartaks Jurmala\",\"Clube de Regatas do Flamengo\",\"Desna Chernigiv\",\"Napoli Primavera\",\"Randers FC\",\"Würzburger Kickers\",\"ESTAC Troyes\",\"Esporte Clube Juventude\",\"Sociedade Esportiva Palmeiras\",\"HNK Rijeka\",\"Stabæk Fotball\",\"Sociedade Esportiva Palmeiras\",\"FC Viitorul Constanta\",\"Sociedade Esportiva Palmeiras\",\"Hebei FC\",\"AC Ajaccio\",\"Aris Thessaloniki\",\"FK Ufa\",\"Djurgårdens IF\",\"Chongqing Liangjiang Athletic\",\"Stade Rennais FC\",\"Club Athletico Paranaense\",\"Hellas Verona\",\"RSC Anderlecht\",\"Hertha BSC U19\",\"Red Star Belgrade\",\"NK Lokomotiva Zagreb\",\"PFK Tambov\",\"Rangers FC\",\"HNK Gorica\",\"SD Eibar\",\"SSC Napoli\",\"Pyramids FC\",\"Club Atlético Independiente\",\"Juventus FC\",\"Toronto FC\",\"CA Vélez Sarsfield\",\"Bristol Rovers\",\"Górnik Zabrze\",\"Liverpool FC U23\",\"CFR Cluj\",\"Clube Atlético Mineiro\",\"Deportes Tolima\",\"Wigan Athletic\",\"Cercle Brugge\",\"AA Argentinos Juniors\",\"FK Cukaricki\",\"Club Tijuana\",\"Red Star Belgrade\",\"Independiente del Valle\",\"Vejle Boldklub\",\"Juventus U23\",\"Juventus U23\",\"Akhmat Grozny\",\"SK Sigma Olomouc B\",\"GD Chaves\",\"Lyngby BK\",\"CD Universidad Católica\",\"Kawasaki Frontale\",\"AS Monaco\",\"Esbjerg fB\",\"West Bromwich Albion\",\"Wigan Athletic\",\"RSC Anderlecht\",\"Levski Sofia\",\"CA River Plate II\",\"FC Viitorul Constanta\",\"Bröndby IF\",\"HNK Gorica\",\"Beijing Guoan\",\"IFK Norrköping\",\"Fortuna Sittard\",\"Real Zaragoza\",\"1.FC Slovacko\",\"Östersunds FK\",\"NK Lokomotiva Zagreb\",\"Esporte Clube Bahia\",\"Wellington Phoenix\",\"Club Cerro Porteño\",\"Heracles Almelo\",\"MTK Budapest\",\"Wigan Athletic\",\"Brighton & Hove Albion\",\"Rosenborg BK\",\"SL Benfica\",\"Santos FC\",\"Olympique Lyon\",\"FC Dallas\",\"Pohang Steelers\",\"FC Tokyo\",\"Club Deportivo Riestra\",\"Ferencvárosi TC\",\"SC Paderborn 07\",\"Sint-Truidense VV\",\"Red Star Belgrade\",\"Sport Club Corinthians Paulista\",\"West Ham United\",\"Deportivo Alavés\",\"FK Partizan Belgrade\",\"KRC Genk\",\"Persepolis FC\",\"Dynamo Moscow\",\"Stade Rennais FC\",\"Dynamo Moscow\",\"KV Kortrijk\",\"CA San Lorenzo de Almagro\",\"Real Sociedad\",\"PSV Eindhoven\",\"AEK Athens\",\"Johor Darul Ta'zim\",\"Fluminense Football Club\",\"Altinordu FK\",\"Fortuna Düsseldorf\",\"Mazatlán FC\",\"Chelsea FC\",\"Atlético de Madrid\",\"SL Benfica\",\"Tottenham Hotspur\",\"FC Barcelona\",\"Leicester City\",\"Ajax Amsterdam\",\"Ajax Amsterdam\",\"Atlético de Madrid\",\"LOSC Lille\",\"Atlético de Madrid\",\"Manchester United\",\"Juventus FC\",\"Olympique Lyon\",\"Eintracht Frankfurt\",\"Sporting CP\",\"SL Benfica\",\"Olympique Lyon\",\"Crystal Palace\",\"FC Porto\",\"Eintracht Frankfurt\",\"Bayer 04 Leverkusen\",\"Paris Saint-Germain\",\"Real Betis Balompié\",\"Olympique Lyon\",\"Santos FC\",\"Real Madrid\",\"AS Monaco\",\"AS Roma\",\"Red Bull Salzburg\",\"UC Sampdoria\",\"TSG 1899 Hoffenheim\",\"Borussia Dortmund\",\"FC Barcelona\",\"Sevilla FC\",\"PSV Eindhoven\",\"Juventus FC\",\"Sevilla FC\",\"Celta de Vigo\",\"SL Benfica\",\"Borussia Mönchengladbach\",\"Manchester City\",\"FC Barcelona\",\"Cagliari Calcio\",\"VfB Stuttgart\",\"FC Barcelona\",\"Atalanta BC\",\"Borussia Dortmund\",\"Bayern Munich\",\"PSV Eindhoven\",\"Fulham FC\",\"West Ham United\",\"Tottenham Hotspur\",\"GNK Dinamo Zagreb\",\"Chelsea FC\",\"Newcastle United\",\"Atalanta BC\",\"TSG 1899 Hoffenheim\",\"AC Milan\",\"Genoa CFC\",\"Arsenal FC\",\"Atlético de Madrid\",\"Everton FC\",\"Stade Rennais FC\",\"Real Madrid\",\"Clube de Regatas do Flamengo\",\"AS Saint-Étienne\",\"US Sassuolo\",\"AS Roma\",\"Inter Milan\",\"Juventus FC\",\"AC Milan\",\"LOSC Lille\",\"Juventus FC\",\"RCD Espanyol Barcelona\",\"Villarreal CF\",\"FC Barcelona\",\"1.FSV Mainz 05\",\"AC Milan\",\"Inter Milan\",\"Celtic FC\",\"Valencia CF\",\"Udinese Calcio\",\"TSG 1899 Hoffenheim\",\"Liverpool FC\",\"RCD Espanyol Barcelona\",\"Olympique Lyon\",\"FC Girondins Bordeaux\",\"AS Monaco\",\"Club Brugge KV\",\"SCO Angers\",\"UC Sampdoria\",\"Atalanta BC\",\"LOSC Lille\",\"Real Betis Balompié\",\"OGC Nice\",\"CA River Plate\",\"Al-Duhail SC\",\"Arsenal FC\",\"Fulham FC\",\"UC Sampdoria\",\"Real Betis Balompié\",\"Everton FC\",\"KRC Genk\",\"Borussia Dortmund\",\"Inter Milan\",\"SL Benfica\",\"RSC Charleroi\",\"Hertha BSC\",\"AFC Bournemouth\",\"Bristol City\",\"Brentford FC\",\"AS Roma\",\"Hamburger SV\",\"Atalanta BC\",\"Genoa CFC\",\"Real Madrid\",\"Hull City\",\"SSC Napoli\",\"Sporting CP\",\"Celta de Vigo\",\"Ajax Amsterdam\",\"Juventus FC\",\"FC Porto\",\"Real Madrid\",\"Watford FC\",\"Borussia Dortmund\",\"Bayern Munich\",\"CD Leganés\",\"Club Athletico Paranaense\",\"Everton FC\",\"Red Bull Salzburg\",\"Atalanta BC\",\"Chelsea FC\",\"RCD Espanyol Barcelona\",\"Fluminense Football Club\",\"Manchester United\",\"ACF Fiorentina\",\"Wolverhampton Wanderers\",\"Liverpool FC\",\"Tottenham Hotspur\",\"ACF Fiorentina\",\"Olympiacos Piraeus\",\"US Sassuolo\",\"Swansea City\",\"Inter Milan\",\"West Bromwich Albion\",\"AZ Alkmaar\",\"Deportivo Alavés\",\"FC Girondins Bordeaux\",\"RB Leipzig\",\"Vitória Guimarães SC\",\"CD Leganés\",\"SPAL\",\"CA Boca Juniors\",\"Sevilla FC\",\"SPAL\",\"RSC Anderlecht\",\"Paris Saint-Germain\",\"Fluminense Football Club\",\"US Sassuolo\",\"SS Lazio\",\"Swansea City\",\"Trabzonspor\",\"UD Las Palmas\",\"Villarreal CF\",\"Paris Saint-Germain\",\"Red Bull Salzburg\",\"SSC Napoli\",\"Montpellier HSC\",\"FC Porto\",\"RB Leipzig\",\"TSG 1899 Hoffenheim\",\"Sporting CP\",\"US Sassuolo\",\"ACF Fiorentina\",\"Manchester City\",\"Birmingham City\",\"Juventus FC\",\"Huddersfield Town\",\"Club Brugge KV\",\"Fenerbahce SK\",\"KRC Genk\",\"PSV Eindhoven\",\"FC Augsburg\",\"RB Leipzig\",\"Manchester City\",\"AC Milan\",\"Standard Liège\",\"Southampton FC\",\"Paris Saint-Germain\",\"VfB Stuttgart\",\"Red Bull Salzburg\",\"RC Strasbourg Alsace\",\"Torino FC\",\"FC Nantes\",\"Olympique Marseille\",\"Real Madrid\",\"CF América\",\"Real Madrid\",\"RC Strasbourg Alsace\",\"CA Boca Juniors\",\"FC Nantes\",\"Genoa CFC\",\"Manchester City\",\"Inter Milan\",\"Alanyaspor\",\"SL Benfica\",\"AS Roma\",\"AS Monaco\",\"Real Madrid\",\"CA Boca Juniors\",\"FC Barcelona\",\"Southampton FC\",\"ACF Fiorentina\",\"Bristol City\",\"Udinese Calcio\",\"Hellas Verona\",\"AC Milan\",\"SD Eibar\",\"FC Schalke 04\",\"AS Saint-Étienne\",\"Feyenoord Rotterdam\",\"KRC Genk\",\"Everton FC\",\"Standard Liège\",\"Brentford FC\",\"Valencia CF\",\"Sevilla FC\",\"Hamburger SV\",\"AS Roma\",\"Paris Saint-Germain\",\"CA Peñarol\",\"FC Lorient\",\"FC Copenhagen\",\"VfL Wolfsburg\",\"US Sassuolo\",\"FC Barcelona\",\"Red Bull Salzburg\",\"PSV Eindhoven\",\"Montpellier HSC\",\"Paris Saint-Germain\",\"Red Bull Salzburg\",\"CA Vélez Sarsfield\",\"FC Toulouse\",\"Bologna FC 1909\",\"Empoli FC\",\"Valencia CF\",\"Red Bull Salzburg\",\"RB Leipzig\",\"Club Brugge KV\",\"Girona FC\",\"SK Slavia Prague\",\"Sporting CP\",\"Sevilla FC\",\"AC Le Havre\",\"Shanghai Greenland Shenhua\",\"KRC Genk\",\"Fortuna Düsseldorf\",\"Nîmes Olympique\",\"Borussia Dortmund\",\"Hannover 96\",\"West Ham United\",\"Rayo Vallecano\",\"Torino FC\",\"Montpellier HSC\",\"SC Braga\",\"Huddersfield Town\",\"AS Roma\",\"Liverpool FC\",\"Borussia Dortmund\",\"AC Milan\",\"Wolverhampton Wanderers\",\"Inter Milan\",\"Spartak Moscow\",\"FC Basel 1893\",\"AFC Bournemouth\",\"Leeds United\",\"Atlético de Madrid\",\"SC Braga\",\"CA Vélez Sarsfield\",\"Stade Reims\",\"CF Monterrey\",\"Spartak Moscow\",\"Clube de Regatas do Flamengo\",\"Ajax Amsterdam\",\"FC Copenhagen\",\"Sevilla FC\",\"CA Peñarol\",\"Hellas Verona\",\"BSC Young Boys\",\"VfB Stuttgart\",\"Genoa CFC\",\"FK Partizan Belgrade\",\"AJ Auxerre\",\"Paris Saint-Germain\",\"VfB Stuttgart\",\"Kasimpasa\",\"FK Partizan Belgrade\",\"VfB Stuttgart\",\"Rayo Vallecano\",\"AJ Auxerre\",\"Bristol City\",\"West Bromwich Albion\",\"Chelsea FC\",\"BSC Young Boys\",\"Getafe CF\",\"Cardiff City\",\"SD Eibar\",\"Real Valladolid CF\",\"FC Groningen\",\"Stade Rennais FC\",\"SL Benfica\",\"Paris Saint-Germain\",\"Juventus FC\",\"Olympique Marseille\",\"Wolverhampton Wanderers\",\"PSV Eindhoven\",\"SK Slavia Prague\",\"SD Eibar\",\"Club Brugge KV\",\"CF América\",\"Manchester United\",\"SSC Napoli\",\"Atlético de Madrid\",\"FC Barcelona\",\"FC Barcelona\",\"Real Betis Balompié\",\"Real Sociedad\",\"Málaga CF\",\"FC Barcelona\",\"Hertha BSC\",\"TSG 1899 Hoffenheim\",\"AS Monaco\",\"Chelsea FC\",\"Juventus FC\",\"RB Leipzig\",\"Inter Milan\",\"AC Milan\",\"Manchester City U23\",\"Spartak Moscow\",\"SL Benfica\",\"CF América\",\"Juventus FC\",\"LOSC Lille\",\"Chelsea FC\",\"LOSC Lille\",\"SCO Angers\",\"EA Guingamp\",\"Tottenham Hotspur\",\"Sport Club Internacional\",\"Red Bull Salzburg\",\"Sevilla FC\",\"Empoli FC\",\"Stade Reims\",\"Sint-Truidense VV\",\"TSG 1899 Hoffenheim\",\"Galatasaray A.S.\",\"FC Schalke 04\",\"SS Lazio\",\"Lokomotiv Moscow\",\"Cardiff City\",\"SS Lazio\",\"Nottingham Forest\",\"Burnley FC\",\"Deportivo Guadalajara\",\"Empoli FC\",\"Bayer 04 Leverkusen\",\"Udinese Calcio\",\"Hannover 96\",\"Chelsea FC\",\"Stoke City\",\"FC Sion U21\",\"RSC Anderlecht\",\"Arsenal FC\",\"FC Barcelona B\",\"Club Estudiantes de La Plata\",\"Spezia Calcio\",\"Sociedade Esportiva Palmeiras\",\"Villarreal CF\",\"Villarreal CF\",\"Real Sociedad\",\"Clube de Regatas do Flamengo\",\"FC Toulouse\",\"KRC Genk\",\"Stade Reims\",\"GNK Dinamo Zagreb\",\"Dijon FCO\",\"AS Monaco B\",\"Montpellier HSC\",\"Feyenoord Rotterdam\",\"Paris FC\",\"EA Guingamp\",\"Villarreal CF\",\"Villarreal CF\",\"Clube de Regatas do Flamengo\",\"Levante UD\",\"Sociedade Esportiva Palmeiras\",\"West Ham United\",\"Liverpool FC\",\"SC Heerenveen\",\"Hannover 96\",\"FC Nordsjaelland\",\"Arsenal FC\",\"Grêmio Foot-Ball Porto Alegrense\",\"Dijon FCO\",\"Middlesbrough FC\",\"SM Caen\",\"Brighton & Hove Albion\",\"Southampton FC\",\"FC Augsburg\",\"Al-Ahli Jeddah\",\"Swansea City\",\"UC Sampdoria\",\"Borussia Dortmund\",\"UC Sampdoria\",\"US Sassuolo\",\"Zenit St. Petersburg\",\"Arsenal FC\",\"Preston North End\",\"Empoli FC\",\"CF América\",\"São Paulo Futebol Clube\",\"Inter Milan\",\"Stade Rennais FC\",\"SC Braga\",\"Málaga CF\",\"Goiás Esporte Clube\",\"FK Krasnodar\",\"UC Sampdoria\",\"ACF Fiorentina\",\"Standard Liège\",\"Clube de Regatas do Flamengo\",\"Tigres UANL\",\"Junior FC\",\"Liverpool FC\",\"Club Necaxa\",\"Club Necaxa\",\"Universidad San Martín de Porres\",\"FC Basel 1893\",\"West Ham United\",\"Juventus FC\",\"Defensa y Justicia\",\"1.FC Nuremberg\",\"CA San Lorenzo de Almagro\",\"Juventus FC\",\"Defensa y Justicia\",\"Club Athletico Paranaense\",\"SV Zulte Waregem\",\"Genoa CFC\",\"Juventus U23\",\"VfL Wolfsburg\",\"Dijon FCO\",\"Middlesbrough FC\",\"RSC Anderlecht\",\"Villarreal CF\",\"Esporte Clube Bahia\",\"US Sassuolo\",\"Galatasaray A.S.\",\"TSG 1899 Hoffenheim\",\"FC Augsburg\",\"Olympique Lyon\",\"Columbus Crew SC\",\"Club de Gimnasia y Esgrima La Plata\",\"Luton Town\",\"Sport Club Internacional\",\"Southampton FC\",\"HNK Hajduk Split\",\"ESTAC Troyes\",\"FC Nantes\",\"FC Viktoria Plzen\",\"FC Schalke 04\",\"Club Tijuana\",\"Olimpia Asunción\",\"Club Nacional\",\"Querétaro FC\",\"Leeds United\",\"FK Krasnodar\",\"FC Girondins Bordeaux\",\"Chelsea FC U23\",\"1. FC Köln\",\"Parma Calcio 1913\",\"Villarreal CF\",\"West Bromwich Albion\",\"Club Brugge KV\",\"SD Huesca\",\"Rio Ave FC\",\"Olympique Marseille\",\"1.FC Heidenheim 1846\",\"Leeds United\",\"FC Midtjylland\",\"Villarreal CF\",\"AS Monaco U19\",\"FC Barcelona U18\",\"Sociedade Esportiva Palmeiras\",\"Slovan Bratislava\",\"FC Viktoria Plzen\",\"Club Athletico Paranaense\",\"Legia Warszawa\",\"Moreirense FC\",\"Valencia CF\",\"FC Viitorul Constanta\",\"Nîmes Olympique\",\"Racing Club\",\"Olympiacos Piraeus\",\"Hellas Verona\",\"Spartak Moscow\",\"Real Betis Balompié\",\"Borussia Dortmund\",\"Red Star Belgrade\",\"Club Atlético Independiente\",\"FC Barcelona\",\"Defensa y Justicia\",\"SSC Napoli\",\"FC Nantes\",\"Brighton & Hove Albion\",\"OGC Nice\",\"TSG 1899 Hoffenheim\",\"EA Guingamp\",\"AS Roma\",\"Crystal Palace\",\"Chelsea FC\",\"Queens Park Rangers\",\"Caykur Rizespor\",\"Cádiz CF\",\"Racing Club\",\"AS Monaco\",\"Shanghai SIPG\",\"Nîmes Olympique\",\"FK Mlada Boleslav\",\"Dijon FCO\",\"Sporting CP\",\"Jeonbuk Hyundai Motors\",\"CA Banfield\",\"Tiburones Rojos de Veracruz\",\"Sheffield Wednesday\",\"Amiens SC\",\"CS Emelec\",\"Jeonbuk Hyundai Motors\",\"Al-Wasl Sports Club\",\"SC Braga\",\"Al-Taawoun FC\",\"RSC Anderlecht\",\"Maccabi Tel Aviv\",\"Real Zaragoza\",\"FC Copenhagen\",\"Feyenoord Rotterdam\",\"SC Heerenveen\",\"Clube Atlético Mineiro\",\"Ajax Amsterdam\",\"Ajax Amsterdam\",\"Chelsea FC\",\"Sociedade Esportiva Palmeiras\",\"Elche CF\",\"Clube Atlético Mineiro\",\"Feyenoord Rotterdam\",\"Djurgårdens IF\",\"Birmingham City\",\"Chievo Verona\",\"Tottenham Hotspur\",\"FC Augsburg\",\"SSC Napoli\",\"SS Lazio\",\"Manchester City\",\"RC Strasbourg Alsace\",\"KAA Gent\",\"Bologna FC 1909\",\"PAOK Thessaloniki\",\"Everton FC\",\"FC Nantes\",\"FC Schalke 04\",\"CA San Lorenzo de Almagro\",\"Club Nacional\",\"Inter Milan\",\"FC Thun\",\"Huddersfield Town\",\"Paris Saint-Germain\",\"FC Toulouse\",\"Real Madrid Castilla\",\"Nîmes Olympique\",\"Sporting Gijón\",\"CA Boca Juniors\",\"Stoke City\",\"Queens Park Rangers\",\"Inter Milan\",\"Spartak Moscow\",\"Eintracht Frankfurt\",\"Borussia Dortmund\",\"FC Schalke 04\",\"Huddersfield Town\",\"AFC Bournemouth\",\"Burnley FC\",\"Middlesbrough FC\",\"Rapid Vienna\",\"Heracles Almelo\",\"Dynamo Kyiv\",\"Dynamo Kyiv\",\"Monarcas Morelia\",\"Puebla FC\",\"RC Lens\",\"Atlas Guadalajara\",\"Villarreal CF\",\"FC Sochaux-Montbéliard\",\"Galatasaray A.S.\",\"Juventus FC\",\"SK Slavia Prague\",\"Querétaro FC\",\"CA Vélez Sarsfield\",\"Standard Liège\",\"Legia Warszawa\",\"CA River Plate\",\"Sint-Truidense VV\",\"SK Slavia Prague\",\"FC Basel 1893\",\"Sporting CP\",\"SK Slavia Prague\",\"SM Caen\",\"FK Ufa\",\"Santos FC\",\"CD Godoy Cruz Antonio Tomba\",\"Cagliari Calcio\",\"VfB Stuttgart\",\"VfB Stuttgart\",\"Atlanta United FC\",\"Borussia Mönchengladbach\",\"Liverpool FC\",\"SPAL\",\"Krylya Sovetov Samara\",\"Olympiacos Piraeus\",\"Club Atlético Independiente\",\"Cagliari Calcio\",\"Luton Town\",\"Huddersfield Town\",\"Club Cerro Porteño\",\"West Bromwich Albion U18\",\"Genclerbirligi Ankara\",\"FK Krasnodar\",\"Pogon Szczecin\",\"Chievo Verona\",\"Coventry City\",\"Club Universidad de Chile\",\"Meizhou Hakka\",\"Club Athletico Paranaense\",\"Genoa CFC\",\"Olympiacos Piraeus\",\"Real Betis Balompié\",\"Red Star Belgrade\",\"KAA Gent\",\"FC Luzern\",\"Chievo Verona\",\"Inter Milan\",\"Juventus U23\",\"FC Dallas\",\"Al-Ahli Jeddah\",\"Deportivo de La Coruña\",\"FK Rostov\",\"Borussia Dortmund\",\"Milan Primavera\",\"IFK Norrköping\",\"Cruzeiro Esporte Clube\",\"AJ Auxerre\",\"RC Lens\",\"Paradou AC\",\"Zenit St. Petersburg\",\"Sociedade Esportiva Palmeiras\",\"Jagiellonia Bialystok\",\"Red Bull Salzburg\",\"Deportivo Alavés\",\"MSK Zilina\",\"NK Osijek\",\"Atlanta United FC\",\"Ajax Amsterdam U21\",\"Dynamo Kyiv\",\"SD Huesca\",\"Arsenal FC\",\"CA Rosario Central\",\"AS Roma\",\"Hamburger SV\",\"AS Roma\",\"Zenit St. Petersburg\",\"KRC Genk\",\"Rubin Kazan\",\"Aston Villa\",\"SM Caen\",\"Heracles Almelo\",\"SSD Palermo\",\"West Ham United\",\"Club Atlético Tigre\",\"Zenit St. Petersburg\",\"Newcastle United\",\"Club Cerro Porteño\",\"SM Caen\",\"Olympique Lyon\",\"CSKA Moscow\",\"Girona FC\",\"Clermont Foot 63\",\"FC Girondins Bordeaux\",\"Real Betis Balompié\",\"Real Madrid\",\"West Ham United\",\"AS Saint-Étienne\",\"Standard Liège\",\"ADO Den Haag\",\"Manchester United\",\"Galatasaray A.S.\",\"Nîmes Olympique\",\"Huddersfield Town\",\"Levante UD\",\"VfB Stuttgart\",\"Hull City\",\"Sport Club Corinthians Paulista\",\"FC Girondins Bordeaux\",\"Heracles Almelo\",\"Dynamo Kyiv\",\"FC Schalke 04\",\"Chievo Verona\",\"Club Atlético Independiente\",\"GDSC Alvarenga Futebol SAD\",\"Shaanxi Chang'an Athletic\",\"Portsmouth FC\",\"Nottingham Forest\",\"UC Sampdoria\",\"Hammarby IF\",\"Atlético Nacional\",\"Yeni Malatyaspor\",\"Celta de Vigo\",\"Chelsea FC U23\",\"Deportivo Cali\",\"Chievo Verona\",\"Empoli FC\",\"SK Slavia Prague\",\"CD Godoy Cruz Antonio Tomba\",\"CA Rosario Central\",\"Besiktas JK\",\"FC Groningen\",\"IFK Göteborg\",\"Bologna FC 1909\",\"FC Nordsjaelland\",\"Club Necaxa\",\"Club de Regatas Vasco da Gama\",\"SL Benfica\",\"LASK\",\"ACF Fiorentina\",\"Bayern Munich\",\"Club Tijuana\",\"Levante UD\",\"FC Zürich\",\"KAA Gent\",\"UC Sampdoria\",\"FC Porto\",\"Cagliari Calcio\",\"RC Lens\",\"CF Monterrey\",\"Liverpool FC U23\",\"Rapid Vienna\",\"CA San Lorenzo de Almagro\",\"Rubin Kazan\",\"SL Benfica\",\"KAA Gent\",\"Club de Regatas Vasco da Gama\",\"SC Freiburg\",\"FK Orenburg\",\"EA Guingamp\",\"RC Strasbourg Alsace\",\"Club Atlético Unión\",\"1.FC Nuremberg\",\"FK Ufa\",\"VfL Wolfsburg\",\"SG Dynamo Dresden\",\"Norwich City\",\"Standard Liège\",\"Sociedade Esportiva Palmeiras\",\"CA San Lorenzo de Almagro\",\"West Ham United\",\"Heracles Almelo\",\"RSC Anderlecht\",\"Atalanta BC\",\"SK Slavia Prague\",\"SC Braga\",\"Watford FC\",\"Wolverhampton Wanderers\",\"Barnsley FC\",\"Blackburn Rovers\",\"Deportivo de La Coruña\",\"Al Qadisiyah FC\",\"FC Groningen\",\"Al-Hilal Riyadh\",\"Brentford FC\",\"Esperance Tunis\",\"FC Utrecht\",\"Club Atlético Newell's Old Boys II\",\"Pescara Primavera\",\"Audax Italiano\",\"Udinese Calcio\",\"SS Lazio\",\"FC Nordsjaelland Youth\",\"Holstein Kiel\",\"UD Las Palmas\",\"CD Santa Clara\",\"RC Lens\",\"Nottingham Forest\",\"Red Bull Salzburg\",\"AS Roma\",\"Inter Milan\",\"Hellas Verona\",\"Belenenses SAD\",\"Sport Club Corinthians Paulista\",\"Sport Club Internacional\",\"Dijon FCO\",\"Cruzeiro Esporte Clube\",\"Zenit St. Petersburg\",\"Atlético de Madrid B\",\"Tigres UANL\",\"Al-Ahli Jeddah\",\"Sporting CP\",\"EA Guingamp\",\"FK Partizan Belgrade\",\"Boavista FC\",\"Rayo Vallecano\",\"SM Caen\",\"Sparta Rotterdam\",\"Málaga CF\",\"NK Lokomotiva Zagreb\",\"SK Sturm Graz\",\"Esperance Tunis\",\"SC Freiburg\",\"SV Sandhausen\",\"FK Cukaricki\",\"West Bromwich Albion\",\"Clube Atlético Mineiro\",\"Aalborg BK\",\"Defensa y Justicia\",\"Clube Atlético Mineiro\",\"Sporting CP\",\"Independiente del Valle\",\"FC Augsburg\",\"Kayserispor\",\"Real Zaragoza\",\"Karpaty Lviv (-2021)\",\"Chelsea FC U23\",\"Borussia Dortmund\",\"CD Tenerife\",\"PEC Zwolle\",\"OGC Nice\",\"Cardiff City\",\"CF Pachuca\",\"Club Atlético Talleres\",\"FC Toulouse\",\"FK Jablonec\",\"FC Lugano\",\"CD Cruz Azul\",\"SSV Jahn Regensburg\",\"Sunderland AFC\",\"SC Freiburg\",\"Ajax Amsterdam\",\"SL Benfica\",\"SPAL\",\"Girona FC\",\"SL Benfica\",\"1.FC Union Berlin\",\"FC Copenhagen\",\"Ludogorets Razgrad\",\"Bristol City\",\"VfB Stuttgart\",\"Genoa CFC\",\"Spartak Moscow\",\"Real Betis Balompié\",\"TSG 1899 Hoffenheim\",\"RB Leipzig\",\"Rubin Kazan\",\"CA Rosario Central\",\"Columbus Crew SC\",\"Cagliari Calcio\",\"Juventus U23\",\"Parma Calcio 1913\",\"Grêmio Foot-Ball Porto Alegrense\",\"Delfino Pescara 1936\",\"Parma Primavera\",\"Atlético de Madrid\",\"Delfino Pescara 1936\",\"Waasland-Beveren\",\"IFK Norrköping\",\"Atlas Guadalajara\",\"Zenit St. Petersburg\",\"FK Ufa\",\"Sevilla FC\",\"Leeds United\",\"Club Atlético Unión\",\"CD Universidad Católica\",\"Chievo Verona\",\"Empoli Primavera\",\"Lyngby BK Youth\",\"Chelsea FC U23\",\"Portsmouth FC\",\"Barnsley FC\",\"Bröndby IF\",\"Albirex Niigata\",\"Junior FC\",\"Montevideo City Torque\",\"FC Schalke 04\",\"FC Nordsjaelland\",\"CA Peñarol\",\"Tianjin Tianhai (-2019)\",\"Tianjin Tianhai (-2019)\",\"Chongqing Dangdai Lifan\",\"Hebei China Fortune\",\"Shanghai Shenhua Reserves\",\"Tianjin Tianhai (-2019)\",\"Guangzhou Evergrande Taobao\",\"Bologna Primavera\",\"Changchun Yatai\",\"West Ham United\",\"Tianjin Tianhai (-2019)\",\"Tianjin Teda\",\"Tianjin Jinmen Tiger Reserves\",\"Delfino Pescara 1936\",\"Shanghai Shenhua Reserves\",\"Chievo Verona\",\"AC Perugia Calcio\",\"FC Porto\",\"SC Paderborn 07\",\"VfL Wolfsburg\",\"SC Paderborn 07\",\"NK Domzale U17\",\"Ferencvárosi TC\",\"Vitória Setúbal FC\",\"Cruzeiro Esporte Clube\",\"VVV-Venlo\",\"FC Barcelona\",\"Córdoba CF\",\"Zorya Lugansk\",\"1.FC Heidenheim 1846\",\"Leeds United\",\"Krylya Sovetov Samara\",\"Parma Calcio 1913\",\"Arsenal FC U23\",\"CD Atlético Huila\",\"FK Bodø/Glimt\",\"FC St. Pauli\",\"SPAL\",\"Club Atlético Tigre\",\"AS Cittadella\",\"KAS Eupen\",\"FCSB\",\"Bologna FC 1909\",\"AS Monaco\",\"AS Roma\",\"Sevilla FC\",\"Legia Warszawa\",\"LDU Quito\",\"FC Admira Wacker Mödling\",\"VfB Stuttgart\",\"FK Partizan Belgrade\",\"VfL Wolfsburg\",\"FK Krasnodar\",\"CA San Lorenzo de Almagro\",\"CA San Lorenzo de Almagro\",\"FK Orenburg\",\"Málaga CF\",\"Osmanlispor FK\",\"Los Angeles FC\",\"Club Atlético Unión\",\"Shakhtar Donetsk\",\"EA Guingamp\",\"FC Porto\",\"Criciúma Esporte Clube\",\"CA Colon\",\"Bursaspor\",\"Sporting CP U23\",\"AS Roma\",\"Club Atlético Independiente\",\"Atalanta BC\",\"LASK\",\"FC Schalke 04\",\"Levante UD\",\"CD Leganés\",\"AD São Caetano (SP)\",\"CD Leganés\",\"Club Atlético Unión\",\"Dinamo Moscow\",\"Grasshopper Club Zurich\",\"Celta de Vigo\",\"Olympiacos Piraeus\",\"SC Braga\",\"SSC Napoli\",\"1. FC Köln\",\"US Sassuolo\",\"Al-Faisaly Harmah\",\"Al-Ettifaq\",\"Vitória Guimarães SC\",\"Associação Atlética Ponte Preta\",\"Club Nacional\",\"Rotherham United\",\"Juventus U23\",\"Villarreal CF\",\"Liverpool FC Montevideo\",\"Bnei Yehuda Tel Aviv\",\"Liverpool FC Montevideo\",\"UNAM Pumas\",\"Montevideo Wanderers\",\"Barnsley FC\",\"CD Palestino\",\"Manchester City U23\",\"Oxford United\",\"Antalyaspor\",\"Levski Sofia\",\"VfB Stuttgart\",\"CA Boca Juniors\",\"Club Atlético Tucuman\",\"Club Atlético Tucuman\",\"CA River Plate\",\"Shenzhen FC\",\"Club Atlético Tigre\",\"Waasland-Beveren\",\"FC Crotone\",\"Brentford FC\",\"Everton FC U23\",\"Oxford United\",\"Coventry City\",\"Charlton Athletic\",\"Arsenal FC\",\"Birmingham City\",\"São Paulo Futebol Clube\",\"UD Las Palmas\",\"Málaga CF\",\"Calcio Padova\",\"RSC Anderlecht\",\"Excelsior Rotterdam\",\"Piast Gliwice\",\"GNK Dinamo Zagreb\",\"Associação Atlética Ponte Preta\",\"Bologna FC 1909\",\"Inter Milan\",\"IF Brommapojkarna\",\"Stade Rennais FC\",\"Torino FC\",\"PEC Zwolle\",\"Olympique Lyon\",\"FC Bayern Munich II\",\"1.FSV Mainz 05\",\"Hapoel Beer Sheva\",\"Team Vaud U18\",\"Parma Calcio 1913\",\"UD Almería\",\"Aarhus GF\",\"1.FC Nuremberg\",\"Zenit St. Petersburg\",\"RC Lens\",\"CD O'Higgins\",\"Gamba Osaka\",\"Vålerenga Fotball\",\"OGC Nice\",\"Venezia FC\",\"CD 1º de Agosto\",\"Royale Union Saint Gilloise\",\"Piast Gliwice\",\"Stabæk Fotball\",\"Júbilo Iwata\",\"CSD Colo Colo\",\"LB Châteauroux\",\"Bologna FC 1909\",\"Danubio FC\",\"Getafe CF\",\"FK Ufa\",\"PSV Eindhoven U21\",\"Ajax Amsterdam\",\"AC Ajaccio\",\"RC Lens\",\"Montevideo Wanderers\",\"Grêmio Foot-Ball Porto Alegrense\",\"Rapid Vienna\",\"Albacete Balompié\",\"Watford FC\",\"Leixões SC U23\",\"Red Star FC\",\"NK Lokomotiva Zagreb\",\"FC Copenhagen\",\"CSKA-Sofia\",\"PEC Zwolle\",\"FC Viitorul Constanta\",\"Santos FC\",\"Club Necaxa\",\"AS Monaco\",\"Dijon FCO\",\"Levante UD\",\"FC Groningen\",\"Club Atlético Huracán\",\"New York Red Bulls\",\"Shakhtar Donetsk\",\"CD Leganés\",\"Real Betis Balompié\",\"FC Sochaux-Montbéliard\",\"FC Porto B\",\"SPAL\",\"Huddersfield Town\",\"TSG 1899 Hoffenheim\",\"Reading FC\",\"FC Metz\",\"Zenit St. Petersburg\",\"Willem II Tilburg\",\"CD Tondela\",\"KAA Gent\",\"Sport Club do Recife\",\"Dinamo Moscow\",\"Racing Club\",\"Esperance Tunis\",\"PAOK Thessaloniki\",\"ADO Den Haag\",\"Deportivo Alavés\",\"Eintracht Braunschweig\",\"Brighton & Hove Albion\",\"VfB Stuttgart\",\"HNK Rijeka\",\"SM Caen\",\"Birmingham City\",\"Zenit St. Petersburg\",\"Sint-Truidense VV\",\"Atlético de Rafaela\",\"Lechia Gdansk\",\"SS Lazio\",\"Celta de Vigo\",\"AS Roma\",\"Club Guaraní\",\"Ismaily SC\",\"Deportivo Cali\",\"FC Metz\",\"Sport Club Corinthians Paulista\",\"Shanghai Shenhua Reserves\",\"Juventus Primavera\",\"Zaglebie Lubin\",\"Udinese Calcio\",\"Real Salt Lake City\",\"FC Lugano\",\"Pescara Primavera\",\"Brighton & Hove Albion\",\"Al-Shorta SC\",\"Al-Nassr Riad\",\"Barcelona SC Guayaquil\",\"Hapoel Beer Sheva\",\"Virtus Entella\",\"CD Cruz Azul\",\"Sociedade Esportiva Palmeiras\",\"Cimarrones de Sonora\",\"Racing Club\",\"Guayaquil City FC\",\"Hapoel Beer Sheva\",\"Shimizu S-Pulse\",\"SL Benfica B\",\"FC Crotone\",\"AS Cittadella\",\"SM Caen\",\"CSKA Moscow\",\"Dynamo Kyiv\",\"Racing Club\",\"US Sassuolo\",\"Millonarios FC\",\"Club Atlético Aldosivi\",\"CF América\",\"Tigres UANL\",\"GD Estoril Praia\",\"Motherwell FC\",\"Club Atlético Belgrano\",\"FC St. Gallen 1879\",\"Sporting CP\",\"Clube de Regatas do Flamengo\",\"Atlanta United FC\",\"FK Cukaricki\",\"Club Atlético Lanús\",\"Udinese Calcio\",\"Zhejiang Energy Greentown\",\"Instituto AC Córdoba\",\"Club Atlético Huracán\",\"Red Star Belgrade\",\"Hannover 96\",\"Manchester City\",\"HNK Rijeka\",\"Queens Park Rangers\",\"Fulham FC U18\",\"Doncaster Rovers\",\"HNK Gorica\",\"Atlético Nacional\",\"Olimpia Asunción\",\"Hellas Verona\",\"Bröndby IF\",\"KRC Genk\",\"FK Cukaricki\",\"US Sassuolo\",\"AS Monaco\",\"Real Madrid\",\"Athletic Bilbao\",\"AS Monaco\",\"Leicester City\",\"RB Leipzig\",\"Chelsea FC\",\"Borussia Dortmund\",\"AS Roma\",\"Shakhtar Donetsk\",\"SSC Napoli\",\"Bayern Munich\",\"Juventus FC\",\"Chelsea FC\",\"Juventus FC\",\"Clube de Regatas do Flamengo\",\"AS Monaco\",\"FC Girondins Bordeaux\",\"AS Roma\",\"UC Sampdoria\",\"FC Barcelona\",\"Valencia CF\",\"Paris Saint-Germain\",\"Zenit St. Petersburg\",\"FC Barcelona\",\"Chelsea FC\",\"Chelsea FC\",\"Watford FC\",\"Clube de Regatas do Flamengo\",\"SS Lazio\",\"FC Schalke 04\",\"Juventus FC\",\"Sevilla FC\",\"AC Milan\",\"Genoa CFC\",\"Portimonense SC\",\"Sporting CP\",\"Bayern Munich\",\"Grêmio Foot-Ball Porto Alegrense\",\"FC Barcelona\",\"Real Betis Balompié\",\"Real Sociedad\",\"OGC Nice\",\"CSKA Moscow\",\"UC Sampdoria\",\"Sevilla FC\",\"Inter Milan\",\"SSC Napoli\",\"AS Monaco\",\"Paris Saint-Germain\",\"Chelsea FC\",\"1. FC Köln\",\"1.FSV Mainz 05\",\"Levante UD\",\"AS Roma\",\"Racing Club\",\"FC Toulouse\",\"Bayer 04 Leverkusen\",\"Norwich City\",\"Borussia Mönchengladbach\",\"Bologna FC 1909\",\"Villarreal CF\",\"SL Benfica\",\"Club de Regatas Vasco da Gama\",\"Sporting CP\",\"SL Benfica\",\"Chelsea FC\",\"Amiens SC\",\"Atlético de Madrid\",\"Atalanta BC\",\"Olympique Marseille\",\"Paris Saint-Germain\",\"Newcastle United\",\"Paris Saint-Germain\",\"Atlanta United FC\",\"Spartak Moscow\",\"OGC Nice\",\"Borussia Dortmund\",\"ACF Fiorentina\",\"FC Porto\",\"FC Porto\",\"Celtic FC\",\"Olympique Lyon\",\"SL Benfica\",\"US Sassuolo\",\"AC Milan\",\"Valencia CF\",\"Villarreal CF\",\"Liverpool FC\",\"SC Freiburg\",\"Atlético de Madrid\",\"FC Barcelona\",\"SV Werder Bremen\",\"Tianjin Tianhai (-2019)\",\"Olympique Lyon\",\"Olympique Lyon\",\"Juventus FC\",\"Tianjin Tianhai (-2019)\",\"Middlesbrough FC\",\"Bayer 04 Leverkusen\",\"Red Bull Salzburg\",\"SSC Napoli\",\"Borussia Dortmund\",\"Atlético de Madrid\",\"CA River Plate\",\"UC Sampdoria\",\"Red Bull Salzburg\",\"AZ Alkmaar\",\"Genoa CFC\",\"SCO Angers\",\"Sporting CP\",\"FC Basel 1893\",\"Manchester United\",\"Stoke City\",\"PSV Eindhoven\",\"FC Toulouse\",\"Hannover 96\",\"Tottenham Hotspur\",\"Paris Saint-Germain\",\"Leicester City\",\"Sevilla FC\",\"Ajax Amsterdam\",\"Manchester City\",\"FC Nantes\",\"RSC Anderlecht\",\"Middlesbrough FC\",\"Swansea City\",\"Leicester City\",\"Montpellier HSC\",\"Bayern Munich\",\"Genoa CFC\",\"Aston Villa\",\"CA Boca Juniors\",\"US Sassuolo\",\"SL Benfica\",\"FC Sion\",\"Olympique Lyon\",\"CD Leganés\",\"CA Boca Juniors\",\"Grêmio Foot-Ball Porto Alegrense\",\"Southampton FC\",\"Stade Rennais FC\",\"Everton FC\",\"Inter Milan\",\"West Bromwich Albion\",\"Juventus FC\",\"Chelsea FC\",\"Manchester United\",\"Celta de Vigo\",\"West Bromwich Albion\",\"SL Benfica\",\"FC Barcelona\",\"FC Barcelona\",\"Swansea City\",\"Valencia CF\",\"Juventus FC\",\"Stoke City\",\"Southampton FC\",\"Borussia Dortmund\",\"Jiangsu Suning\",\"Deportivo Guadalajara\",\"GNK Dinamo Zagreb\",\"AC Milan\",\"LOSC Lille\",\"Atlético de Madrid\",\"Liverpool FC\",\"RC Strasbourg Alsace\",\"AS Monaco\",\"CF América\",\"Club Atlético Independiente\",\"FC Barcelona\",\"FK Krasnodar\",\"Brentford FC\",\"Wolverhampton Wanderers\",\"Kasimpasa\",\"Real Betis Balompié\",\"West Bromwich Albion\",\"Torino FC\",\"Derby County\",\"AC Milan\",\"Hertha BSC\",\"FC Porto\",\"CA River Plate\",\"Newcastle United\",\"CSKA Moscow\",\"LOSC Lille\",\"FC Barcelona\",\"Fenerbahce SK\",\"Red Star Belgrade\",\"Clube Atlético Mineiro\",\"Rubin Kazan\",\"West Ham United\",\"Fenerbahce SK\",\"Celta de Vigo\",\"Bayern Munich\",\"RCD Espanyol Barcelona\",\"Liverpool FC\",\"FC Barcelona\",\"FC Barcelona\",\"Southampton FC\",\"AS Monaco\",\"AFC Bournemouth\",\"Norwich City\",\"Santos Laguna\",\"Bristol City\",\"Sheffield United\",\"Manchester City\",\"AA Argentinos Juniors\",\"Huddersfield Town\",\"AC Milan\",\"1.FSV Mainz 05\",\"LOSC Lille\",\"Galatasaray A.S.\",\"Levante UD\",\"Olympique Lyon\",\"Genoa CFC\",\"1.FSV Mainz 05\",\"Club Necaxa\",\"Deportivo Guadalajara\",\"Red Bull Salzburg\",\"AZ Alkmaar\",\"Paris Saint-Germain\",\"Santos Laguna\",\"US Sassuolo\",\"SC Braga\",\"Real Madrid\",\"VfB Stuttgart\",\"RB Leipzig\",\"Celta de Vigo\",\"Torino FC\",\"Valencia CF\",\"CA Vélez Sarsfield\",\"AS Monaco\",\"Chelsea FC U23\",\"Vancouver Whitecaps FC\",\"Olympique Lyon\",\"Manchester City\",\"Leicester City\",\"PAOK Thessaloniki\",\"Shakhtar Donetsk\",\"AC Sparta Prague\",\"CD Leganés\",\"Manchester City\",\"Everton FC\",\"Eintracht Frankfurt\",\"Red Bull Salzburg\",\"Borussia Dortmund\",\"Sunderland AFC\",\"AC Milan\",\"AS Monaco\",\"Eintracht Frankfurt\",\"ACF Fiorentina\",\"Manchester City\",\"Olympique Lyon\",\"SSC Napoli\",\"Newcastle United\",\"Stoke City\",\"AS Roma\",\"Everton FC\",\"FC Augsburg\",\"TSG 1899 Hoffenheim\",\"Hannover 96\",\"TSG 1899 Hoffenheim\",\"AS Roma\",\"Inter Milan\",\"Sociedade Esportiva Palmeiras\",\"FC Barcelona\",\"Club Necaxa\",\"Cruzeiro Esporte Clube\",\"Empoli FC\",\"Stade Reims\",\"AS Roma\",\"US Palermo\",\"FC Copenhagen\",\"CA Boca Juniors\",\"Manchester City U23\",\"Galatasaray A.S.\",\"São Paulo Futebol Clube\",\"Olympique Marseille\",\"Changchun Yatai\",\"FC Schalke 04\",\"FC Porto\",\"Atalanta BC\",\"ACF Fiorentina\",\"SC Braga\",\"Sevilla FC\",\"Zorya Lugansk\",\"Villarreal CF\",\"Watford FC\",\"KAA Gent\",\"BSC Young Boys\",\"Udinese Calcio\",\"KV Mechelen\",\"Club Brugge KV\",\"LOSC Lille\",\"KRC Genk\",\"KAA Gent\",\"Swansea City\",\"Bristol City\",\"Olympique Lyon\",\"FC Lorient\",\"São Paulo Futebol Clube\",\"Club Atlético Huracán\",\"Sporting CP\",\"Rayo Vallecano\",\"Molde FK\",\"FC Midtjylland\",\"AA Argentinos Juniors\",\"Burnley FC\",\"Universitatea Craiova\",\"ACF Fiorentina\",\"São Paulo Futebol Clube\",\"Valencia CF\",\"Swansea City\",\"Swansea City\",\"Juventus FC\",\"AS Saint-Étienne\",\"Borussia Dortmund\",\"Montpellier HSC\",\"Bayern Munich\",\"Eintracht Frankfurt\",\"Chelsea FC\",\"AS Roma\",\"Sevilla FC\",\"US Sassuolo\",\"FC Toulouse\",\"AS Monaco\",\"Inter Milan\",\"SSC Napoli\",\"Celtic FC\",\"Middlesbrough FC\",\"UNAM Pumas\",\"Millwall FC\",\"Ascoli Calcio\",\"Real Betis Balompié\",\"Atlético de Madrid B\",\"CD Cruz Azul\",\"FC Ingolstadt 04\",\"RSC Anderlecht\",\"GNK Dinamo Zagreb\",\"Trabzonspor\",\"CF Pachuca\",\"Borussia Mönchengladbach\",\"Arsenal FC\",\"1. FC Köln\",\"Real Madrid\",\"Juventus FC\",\"Villarreal CF\",\"Zenit St. Petersburg\",\"Bologna FC 1909\",\"Manchester United\",\"Brentford FC\",\"CD Feirense\",\"Rio Ave FC\",\"SL Benfica\",\"Leeds United\",\"Santos Laguna\",\"Inter Milan\",\"US Sassuolo\",\"Sporting CP\",\"Al-Jazira (Abu Dhabi)\",\"Fluminense Football Club\",\"BSC Young Boys\",\"Portimonense SC\",\"Empoli FC\",\"SM Caen\",\"Stoke City\",\"Swansea City\",\"Chievo Verona\",\"Inter Milan\",\"Sunderland AFC\",\"Deportivo Guadalajara\",\"Bologna FC 1909\",\"SM Caen\",\"AFC Bournemouth\",\"LOSC Lille\",\"Juventus FC\",\"AS Monaco\",\"Huddersfield Town\",\"Everton FC\",\"Real Betis Balompié\",\"West Ham United\",\"Newcastle United\",\"AFC Bournemouth\",\"Club León FC\",\"Bristol City\",\"Sport Club Corinthians Paulista\",\"Vitória Guimarães SC\",\"FC Copenhagen\",\"SK Dnipro-1\",\"KAA Gent\",\"UC Sampdoria\",\"Trabzonspor\",\"Monarcas Morelia\",\"AS Cittadella\",\"HNK Hajduk Split\",\"FC Zürich\",\"Monarcas Morelia\",\"Delfino Pescara 1936\",\"GNK Dinamo Zagreb\",\"1. FC Köln\",\"FC Utrecht\",\"RSC Anderlecht\",\"Deportivo de La Coruña\",\"Hamburger SV\",\"RC Lens\",\"Inter Milan\",\"FC Basel 1893\",\"FC Metz\",\"AS Saint-Étienne\",\"Renaissance de Berkane\",\"US Palermo\",\"FC Girondins Bordeaux\",\"Besiktas JK\",\"LOSC Lille\",\"Málaga CF\",\"Galatasaray A.S.\",\"Al-Rayyan SC\",\"Club Athletico Paranaense\",\"Maccabi Petah Tikva\",\"RSC Charleroi\",\"FC Barcelona\",\"RCD Espanyol Barcelona\",\"SL Benfica\",\"Sport Club Corinthians Paulista\",\"ESTAC Troyes\",\"Stade Rennais FC\",\"Newcastle United\",\"Red Bull Salzburg\",\"SL Benfica\",\"SC Heerenveen\",\"KAA Gent\",\"Willem II Tilburg\",\"Empoli FC\",\"Standard Liège\",\"Toronto FC\",\"SL Benfica\",\"Hebei China Fortune\",\"UD Las Palmas\",\"Real Madrid\",\"Hamburger SV\",\"TSG 1899 Hoffenheim\",\"VfL Wolfsburg\",\"Crystal Palace\",\"Atalanta BC\",\"Hannover 96\",\"Atlas Guadalajara\",\"HNK Rijeka\",\"Clube Atlético Mineiro\",\"FC Basel 1893\",\"Sunderland AFC\",\"West Bromwich Albion\",\"Ipswich Town\",\"Standard Liège\",\"Manchester City U23\",\"Sociedade Esportiva Palmeiras\",\"SC Heerenveen\",\"AJ Auxerre\",\"Celta de Vigo\",\"Pyramids FC\",\"Santos FC\",\"Brentford FC\",\"Paris Saint-Germain\",\"Alanyaspor\",\"CA Colon\",\"Atalanta BC\",\"CF América\",\"Gyeongnam FC\",\"Deportivo Toluca\",\"Jeonbuk Hyundai Motors\",\"Deportivo Cali\",\"FC Lorient\",\"Clube de Regatas do Flamengo\",\"UNAM Pumas\",\"Junior FC\",\"Santos Laguna\",\"KRC Genk\",\"Nottingham Forest\",\"US Sassuolo\",\"Clube de Regatas do Flamengo\",\"FC Ingolstadt 04\",\"Hamburger SV\",\"Portimonense SC\",\"FC Barcelona B\",\"Clube Atlético Mineiro\",\"FC Sion\",\"AS Roma\",\"São Paulo Futebol Clube\",\"Stoke City\",\"Goiás Esporte Clube\",\"Rayo Vallecano\",\"Inter Milan\",\"Inter Milan\",\"Paris Saint-Germain\",\"AC Perugia Calcio\",\"Club Athletico Paranaense\",\"Juventus FC\",\"KAS Eupen\",\"Málaga CF\",\"Club Atlético Lanús\",\"FC Nordsjaelland\",\"Juventus FC\",\"RSC Charleroi\",\"Stade Brestois 29\",\"Pyramids FC\",\"Valencia CF\",\"Deportivo Alavés\",\"Chievo Verona\",\"Dynamo Kyiv\",\"Club Brugge KV\",\"Cádiz CF\",\"Club Atlético Lanús\",\"Celta de Vigo\",\"Dijon FCO\",\"Al-Hilal Riyadh\",\"FC Porto\",\"Sport Club Corinthians Paulista\",\"Deportivo Alavés\",\"PSV Eindhoven\",\"Besiktas JK\",\"ESTAC Troyes\",\"SM Caen\",\"Guangzhou Evergrande Taobao\",\"Ludogorets Razgrad\",\"Delfino Pescara 1936\",\"1.FSV Mainz 05\",\"Club Tijuana\",\"Torino FC\",\"LOSC Lille\",\"Besiktas JK\",\"Galatasaray A.S.\",\"Dinamo Moscow\",\"Real Betis Balompié\",\"Celta de Vigo\",\"Swansea City\",\"Liverpool FC\",\"FK Krasnodar\",\"West Ham United\",\"SSC Napoli\",\"KAA Gent\",\"Watford FC\",\"Grêmio Foot-Ball Porto Alegrense\",\"Querétaro FC\",\"Sociedade Esportiva Palmeiras\",\"CA Boston River\",\"Everton FC\",\"1. FC Köln\",\"Besiktas JK\",\"ACF Fiorentina\",\"Cracovia\",\"Hertha BSC\",\"FC Midtjylland\",\"Inter Milan\",\"Malmö FF\",\"Swansea City\",\"Fulham FC\",\"Brentford FC\",\"FC Midtjylland\",\"Deportivo de La Coruña\",\"APOEL Nicosia\",\"Istanbul Basaksehir FK\",\"AIK Solna\",\"FK Rostov\",\"Newcastle United\",\"FK Rostov\",\"Hannover 96\",\"OGC Nice\",\"New York Red Bulls\",\"Hamburger SV\",\"Feyenoord Rotterdam\",\"Jiangsu Suning\",\"Club Atlético Unión\",\"Borussia Dortmund\",\"Aston Villa\",\"Hapoel Beer Sheva\",\"CD Universidad Católica\",\"Al-Ain FC\",\"CS Emelec\",\"Club Atlético Belgrano\",\"Red Star Belgrade\",\"Fluminense Football Club\",\"Sunderland AFC\",\"Górnik Zabrze\",\"Atalanta BC\",\"AC Sparta Prague\",\"Sociedade Esportiva Palmeiras\",\"Club Athletico Paranaense\",\"Preston North End\",\"Vitória Guimarães SC\",\"Bologna FC 1909\",\"Real SC\",\"Club Athletico Paranaense\",\"Queens Park Rangers\",\"Ipswich Town\",\"Racing Club\",\"OGC Nice\",\"EA Guingamp\",\"Deportivo de La Coruña\",\"Sporting Gijón\",\"SD Eibar\",\"Östersunds FK\",\"LOSC Lille\",\"IFK Norrköping\",\"FK Ufa\",\"FC Midtjylland\",\"Botafogo de Futebol e Regatas\",\"Sint-Truidense VV\",\"GD Chaves\",\"Sampdoria Primavera\",\"Villarreal CF\",\"CSKA-Sofia\",\"Elche CF\",\"AS Saint-Étienne\",\"AS Roma\",\"Club Atlético Tigre\",\"Rapid Vienna\",\"Besiktas JK\",\"AC Milan\",\"CA Colon\",\"Olympiacos Piraeus\",\"SCO Angers\",\"Sevilla FC\",\"Udinese Calcio\",\"FC Girondins Bordeaux\",\"Club Atlético Independiente\",\"SV Werder Bremen\",\"Grêmio Foot-Ball Porto Alegrense\",\"CA San Lorenzo de Almagro\",\"FC Nantes\",\"SK Sturm Graz\",\"Olympiacos Piraeus\",\"Deportivo de La Coruña\",\"CD Godoy Cruz Antonio Tomba\",\"TSG 1899 Hoffenheim\",\"FC Girondins Bordeaux\",\"Sevilla FC\",\"Chelsea FC\",\"SL Benfica\",\"Vitória Guimarães SC\",\"Deportivo de La Coruña\",\"Chievo Verona\",\"Brighton & Hove Albion\",\"Brighton & Hove Albion\",\"MSK Zilina\",\"HNK Hajduk Split\",\"Akhmat Grozny\",\"HNK Rijeka\",\"Al-Hilal Riyadh\",\"GNK Dinamo Zagreb\",\"KAA Gent\",\"Wisla Plock\",\"FC Crotone\",\"Red Star Belgrade\",\"Wigan Athletic\",\"Club Necaxa\",\"Sociedade Esportiva Palmeiras\",\"Club Necaxa\",\"Akhmat Grozny\",\"Real Madrid\",\"Bröndby IF\",\"Feyenoord Rotterdam\",\"KAA Gent\",\"Cruzeiro Esporte Clube\",\"Orlando City SC\",\"Atlas Guadalajara\",\"GD Chaves\",\"Atlético Nacional\",\"Atlético Nacional\",\"CA Peñarol\",\"Sporting CP\",\"GD Estoril Praia\",\"Hellas Verona\",\"1.FC Union Berlin\",\"Club Atlético Talleres\",\"Standard Liège\",\"KRC Genk\",\"ESTAC Troyes\",\"Deportivo de La Coruña\",\"Kashima Antlers\",\"Sport Club Internacional\",\"Granada CF\",\"Dynamo Kyiv\",\"Inter Milan\",\"FC Metz\",\"Osmanlispor FK\",\"Montpellier HSC\",\"ADO Den Haag\",\"RSC Anderlecht\",\"FC Porto\",\"Clube Atlético Mineiro\",\"Shanghai SIPG\",\"UD Las Palmas\",\"CD Godoy Cruz Antonio Tomba\",\"Liverpool FC\",\"Rio Ave FC\",\"Club Atlético Huracán\",\"Trabzonspor\",\"Deportivo de La Coruña\",\"LOSC Lille\",\"PSV Eindhoven\",\"CA Boca Juniors\",\"Wolverhampton Wanderers\",\"Reading FC\",\"CSD Colo Colo\",\"SG Dynamo Dresden\",\"Brighton & Hove Albion\",\"CSKA-Sofia\",\"Peterborough United\",\"Wolverhampton Wanderers\",\"Manchester City\",\"Wigan Athletic\",\"SpVgg Unterhaching U19\",\"Bursaspor\",\"US Salernitana 1919\",\"FK Partizan Belgrade\",\"AEK Athens\",\"Mamelodi Sundowns FC\",\"KAA Gent\",\"CSD Colo Colo\",\"Deportivo Toluca\",\"Brentford FC\",\"Hibernian FC\",\"Montevideo Wanderers\",\"US Salernitana 1919\",\"Los Angeles Galaxy\",\"Huachipato FC\",\"SD Eibar\",\"US Sassuolo\",\"KV Mechelen\",\"Hamburger SV\",\"KAA Gent\",\"Manchester City\",\"Tema Youth SC\",\"Ludogorets Razgrad\",\"Djurgårdens IF\",\"Sport Club Internacional\",\"Chievo Verona\",\"HNK Hajduk Split\",\"Twente Enschede FC\",\"AS Cittadella\",\"Portimonense SC\",\"Chelsea FC U18\",\"FC Porto\",\"KV Kortrijk\",\"Rapid Vienna\",\"FC Lorient\",\"FC Astana\",\"Heracles Almelo\",\"Benevento Calcio\",\"CA San Lorenzo de Almagro\",\"FC Ingolstadt 04\",\"Sporting Gijón\",\"Esporte Clube Bahia\",\"Hebei China Fortune\",\"Botafogo de Futebol e Regatas\",\"Grasshopper Club Zurich\",\"Extremadura UD (-2022)\",\"Córdoba CF\",\"Esporte Clube Vitória\",\"Inter Milan\",\"Venezia Primavera\",\"NK Maribor\",\"Bröndby IF\",\"West Bromwich Albion\",\"PEC Zwolle\",\"HNK Rijeka\",\"Altinordu FK\",\"Olympiacos Piraeus\",\"Cagliari Calcio\",\"Hannover 96\",\"AS Saint-Étienne\",\"Brighton & Hove Albion\",\"CA Boston River\",\"Club Estudiantes de La Plata\",\"1. FC Köln\",\"FK Ufa\",\"FC St. Pauli\",\"1.FSV Mainz 05\",\"Arsenal FC U23\",\"Torino FC\",\"Arsenal FC\",\"Atalanta BC\",\"UD Almería\",\"Clube de Regatas do Flamengo\",\"US Sassuolo\",\"Juventus FC\",\"RSC Anderlecht\",\"FK Rostov\",\"Galatasaray A.S.\",\"Olympiacos Piraeus\",\"SS Lazio\",\"Sporting CP\",\"FC Schalke 04\",\"Wisla Kraków\",\"Querétaro FC\",\"Sporting CP\",\"Osmanlispor FK\",\"Tigres UANL\",\"Watford FC\",\"Chelsea FC\",\"Chievo Verona\",\"Watford FC\",\"SPAL\",\"CD Cruz Azul\",\"PAOK Thessaloniki\",\"Sporting CP\",\"TSG 1899 Hoffenheim\",\"FC Viitorul Constanta\",\"CSKA-Sofia\",\"Charlton Athletic\",\"Guizhou Hengfeng\",\"NEC Nijmegen\",\"Bristol City\",\"Rangers FC\",\"CD Tenerife\",\"Celta de Vigo\",\"Changchun Yatai\",\"Inter Milan\",\"Sporting CP\",\"Bursaspor\",\"Sport Club do Recife\",\"CA Rosario Central\",\"Bursaspor\",\"Club de Gimnasia y Esgrima La Plata\",\"Masr El Makasa\",\"FC Nantes\",\"NK Osijek\",\"Club Atlético Belgrano\",\"Universitatea Craiova\",\"Zamalek SC\",\"Masr El Makasa\",\"HNK Gorica\",\"FC Zürich\",\"Beijing Renhe\",\"CF Monterrey\",\"Guangzhou Evergrande Taobao\",\"Olimpia Asunción\",\"Tianjin Tianhai (-2019)\",\"Shijiazhuang Ever Bright Reserves\",\"Liaoning FC\",\"FC Metz\",\"Montreal Impact\",\"Shanghai Shenxin\",\"Hebei China Fortune\",\"Cruzeiro Esporte Clube\",\"Beijing Guoan\",\"Hebei China Fortune\",\"Tianjin Tianhai (-2019)\",\"Tianjin Tianhai (-2019)\",\"Changchun Yatai\",\"Grêmio Foot-Ball Porto Alegrense\",\"Fenerbahce SK\",\"Moreirense FC\",\"FC Porto\",\"Juventus FC\",\"PEC Zwolle\",\"Arminia Bielefeld U19\",\"FK Cukaricki\",\"NK Lokomotiva Zagreb\",\"Juventus FC\",\"Valenciennes FC\",\"Holstein Kiel\",\"Sportivo Luqueño\",\"Istanbulspor\",\"Maccabi Tel Aviv\",\"Jagiellonia Bialystok\",\"FC Groningen\",\"Deportivo Cali\",\"GNK Dinamo Zagreb\",\"CD Lugo\",\"Yanbian Funde\",\"Juventus FC\",\"KV Oostende\",\"FCSB\",\"NK Osijek\",\"CFR Cluj\",\"Panathinaikos Athens\",\"Rapid Vienna\",\"Fluminense Football Club\",\"Benevento Calcio\",\"Antalyaspor\",\"Derby County\",\"FC Metz\",\"Olympiacos Piraeus\",\"UNAM Pumas\",\"Real Madrid\",\"VfB Stuttgart\",\"Chamois Niortais FC\",\"1. FC Köln\",\"Stade Reims\",\"Gamba Osaka\",\"Udinese Calcio\",\"Sheffield Wednesday\",\"Standard Liège\",\"Getafe CF\",\"RSC Charleroi\",\"Delfino Pescara 1936\",\"Getafe CF\",\"FK Partizan Belgrade\",\"Feyenoord Rotterdam\",\"HNK Rijeka\",\"Club Atlético Belgrano\",\"Sydney FC\",\"Middlesbrough FC\",\"Feyenoord Rotterdam\",\"AS Saint-Étienne\",\"Atalanta BC\",\"FK Krasnodar\",\"Cruzeiro Esporte Clube\",\"HNK Hajduk Split\",\"Spartak Moscow\",\"Orlando City SC\",\"SK Sturm Graz\",\"UD Las Palmas\",\"Wolverhampton Wanderers\",\"Standard Liège\",\"Red Star Belgrade\",\"UD Las Palmas\",\"Genoa CFC\",\"Club Atlético Independiente\",\"PSV Eindhoven\",\"Sporting CP\",\"Nottingham Forest\",\"Udinese Calcio\",\"Atalanta BC\",\"SV Werder Bremen\",\"Eintracht Frankfurt\",\"KAA Gent\",\"Club Atlético Independiente\",\"AS Roma\",\"Guizhou Hengfeng\",\"Guizhou Hengfeng\",\"NK Osijek\",\"Galatasaray A.S.\",\"SCG Muangthong United\",\"Olimpia Asunción\",\"Associação Chapecoense de Futebol\",\"Reading FC\",\"Cruzeiro Esporte Clube\",\"Liaoning FC\",\"FC Viitorul Constanta\",\"Sporting CP\",\"Sunderland AFC\",\"Club Athletico Paranaense\",\"Watford FC\",\"Slaven Belupo Koprivnica\",\"Monarcas Morelia\",\"Trabzonspor\",\"Tottenham Hotspur U23\",\"Östersunds FK\",\"FK Vozdovac\",\"Esporte Clube Bahia\",\"FK Partizan Belgrade\",\"DAC Dunajska Streda\",\"Red Star Belgrade\",\"Associação Chapecoense de Futebol\",\"Konyaspor\",\"Arsenal FC\",\"Esbjerg fB\",\"KV Kortrijk\",\"Club Brugge KV\",\"RSC Anderlecht\",\"FC Copenhagen\",\"Defensor Sporting Club\",\"Changchun Yatai\",\"Zamalek SC\",\"Independiente Medellín\",\"Regal Bukarest U19\",\"Olympique Lyon\",\"Olimpia Asunción\",\"Valencia CF\",\"Pogon Szczecin\",\"MSV Duisburg\",\"Clermont Foot 63\",\"Stade Brestois 29\",\"FC Nantes U17\",\"FC Erzgebirge Aue\",\"Club Nacional\",\"FC Luzern\",\"RCD Espanyol Barcelona\",\"RCD Mallorca U19\",\"Universitatea Craiova\",\"Olympique Lyon\",\"FC Dallas\",\"Sevilla Atlético\",\"Portimonense SC\",\"CD Tondela\",\"Asociación Atlética Argentinos Juniors U20\",\"Montpellier HSC\",\"AS Trencin\",\"Once Caldas\",\"Clube de Regatas do Flamengo\",\"Middlesbrough FC\",\"Djurgårdens IF\",\"Olympique Marseille\",\"Yeni Malatyaspor\",\"Clermont Foot 63\",\"NK Osijek\",\"NK Olimpija Ljubljana\",\"Maccabi Netanya\",\"Independiente del Valle\",\"Club Nacional Asunción\",\"FC Schalke 04\",\"Hammarby IF\",\"Sivasspor\",\"CA Newell's Old Boys\",\"Córdoba CF\",\"Zaglebie Lubin\",\"Karpaty Lviv (-2021)\",\"Odense Boldklub\",\"Amiens SC U19\",\"Benevento Calcio\",\"UC Sampdoria\",\"Empoli FC\",\"CA Peñarol\",\"Club Necaxa\",\"Empoli FC\",\"1.FSV Mainz 05\",\"AS Roma\",\"KV Mechelen\",\"FC Schalke 04\",\"GNK Dinamo Zagreb\",\"Girona FC\",\"Málaga CF\",\"FC Toulouse\",\"UD Las Palmas\",\"SSC Napoli\",\"Henan Jianye\",\"Hamburger SV\",\"Club Estudiantes de La Plata\",\"Sint-Truidense VV\",\"Celtic FC\",\"GD Estoril Praia\",\"Fluminense Football Club\",\"Arsenal FC\",\"Deportivo de La Coruña\",\"Genoa CFC\",\"Genoa CFC\",\"Torino FC\",\"Arsenal Tula\",\"Cruzeiro Esporte Clube\",\"Levski Sofia\",\"Racing Club\",\"FC Lausanne-Sport\",\"Jeonbuk Hyundai Motors\",\"Newcastle United\",\"Club Atlético Independiente\",\"Górnik Zabrze\",\"Eintracht Frankfurt\",\"LOSC Lille\",\"Portland Timbers\",\"Club Brugge KV\",\"Club Atlético Newell's Old Boys II\",\"Sport Club do Recife\",\"Colorado Rapids\",\"PAOK Thessaloniki\",\"AC Milan\",\"Maccabi Haifa\",\"ESTAC Troyes\",\"Karpaty Lviv (-2021)\",\"Independiente Santa Fe\",\"Atlético de Madrid\",\"Akhisarspor\",\"SD Huesca\",\"Kasimpasa\",\"VVV-Venlo\",\"Esteghlal FC\",\"SC Braga\",\"CA San Lorenzo de Almagro\",\"Red Bull Salzburg\",\"Sporting CP\",\"Chievo Verona\",\"AA Argentinos Juniors\",\"Santos FC\",\"Club Atlético Huracán\",\"CA River Plate\",\"Columbus Crew SC\",\"AZ Alkmaar\",\"Atlético Nacional\",\"Udinese Calcio\",\"Gyeongnam FC\",\"CA Banfield\",\"CA Osasuna\",\"Aston Villa\",\"BSC Young Boys\",\"Inter Milan\",\"Yeni Malatyaspor\",\"Brighton & Hove Albion\",\"Boavista FC\",\"SC Braga\",\"CF Monterrey\",\"Chelsea FC\",\"UC Sampdoria\",\"Club Athletico Paranaense\",\"Osmanlispor FK\",\"Red Star Belgrade\",\"Racing Club\",\"UC Sampdoria\",\"Stevenage FC\",\"SpVgg Greuther Fürth\",\"Wolverhampton Wanderers\",\"Stoke City\",\"OGC Nice\",\"West Ham United\",\"Spezia Primavera\",\"CA Osasuna\",\"Ironi Kiryat Shmona\",\"Brighton & Hove Albion\",\"Charlton Athletic\",\"HNK Rijeka\",\"Benevento Calcio\",\"Independiente Santa Fe\",\"Etoile Sportive du Sahel\",\"IFK Norrköping\",\"Trabzonspor\",\"FUS Rabat\",\"FC Nordsjaelland\",\"Barnsley FC\",\"Yokohama F. Marinos\",\"Ulsan Hyundai\",\"Universitatea Craiova\",\"Daejeon Citizen\",\"Venezia FC\",\"1.FK Pribram\",\"FC Thun\",\"CF Monterrey\",\"CA Rentistas\",\"Genoa CFC\",\"Rubin Kazan\",\"FC Augsburg\",\"Kayserispor\",\"MSK Zilina\",\"Hapoel Raanana\",\"Altinordu FK\",\"Genoa Under 17\",\"Club Africain Tunis\",\"Royal Excel Mouscron U21\",\"Vitória Guimarães SC\",\"Jönköpings Södra IF\",\"Arsenal FC U23\",\"Atlético Clube Goianiense\",\"Portimonense SC\",\"Wadi Degla FC\",\"CD Santa Clara\",\"CF Monterrey II\",\"Wisla Plock\",\"Enppi SC\",\"Lokomotiv Tashkent\",\"Jagiellonia Bialystok\",\"Sunderland AFC\",\"Deportivo de La Coruña\",\"Djurgårdens IF\",\"Club Brugge KV\",\"NEC Nijmegen\",\"Ipswich Town\",\"Rubin Kazan\",\"Cagliari Calcio\",\"Standard Liège\",\"CA River Plate\",\"SV Werder Bremen\",\"ACF Fiorentina\",\"BATE Borisov\",\"GD Estoril Praia\",\"SK Sturm Graz\",\"Vitória Guimarães SC\",\"KV Kortrijk\",\"Valencia CF\",\"Hapoel Beer Sheva\",\"Brentford FC\",\"Benevento Calcio\",\"Akhmat Grozny\",\"Amiens SC\",\"Club Tijuana\",\"Brighton & Hove Albion\",\"Udinese Calcio\",\"Club Atlético Talleres\",\"Melbourne City FC\",\"Sporting Kansas City\",\"Esporte Clube Bahia\",\"El Ahly Cairo\",\"CF Monterrey\",\"Delfino Pescara 1936\",\"KV Mechelen\",\"Yeni Malatyaspor\",\"Alanyaspor\",\"AZ Alkmaar\",\"Budapest Honvéd FC\",\"Eintracht Braunschweig\",\"CA Boca Juniors\",\"Ismaily SC\",\"FC St. Gallen 1879\",\"APOEL Nicosia\",\"Racing Club\",\"Barnsley FC\",\"Esteghlal FC\",\"SL Benfica\",\"Borussia Dortmund\",\"Wolverhampton Wanderers\",\"Bursaspor\",\"HNK Hajduk Split\",\"Karpaty Lviv (-2021)\",\"FK Partizan Belgrade\",\"Torino FC\",\"Apollon Limassol\",\"KRC Genk\",\"TSG 1899 Hoffenheim\",\"Feyenoord Rotterdam\",\"GD Estoril Praia\",\"FK Napredak Krusevac\",\"SL Benfica\",\"FC Lorient\",\"Club Atlético Tucuman\",\"Associação Chapecoense de Futebol\",\"Huddersfield Town\",\"CA Central Córdoba (SdE)\",\"Granada CF\",\"PAOK Thessaloniki\",\"Bologna FC 1909\",\"1. FC Köln\",\"Venezia FC\",\"Olympiacos Piraeus\",\"Watford FC\",\"Qadsia SC\",\"Bologna FC 1909\",\"Sporting CP\",\"FC Utrecht\",\"Cagliari Calcio\",\"Club Atlético Independiente\",\"ESTAC Troyes\",\"FC Metz\",\"AC Sparta Prague\",\"FC Utrecht\",\"US Sassuolo\",\"Racing Club\",\"VfB Stuttgart\",\"Norwich City\",\"Hapoel Haifa\",\"Olympiacos Piraeus\",\"UC Sampdoria\",\"ACF Fiorentina\"],\"to\":[\"Manchester City\",\"Chelsea FC\",\"Manchester United\",\"Juventus FC\",\"Manchester United\",\"Paris Saint-Germain\",\"Bayern Munich\",\"Atlético de Madrid\",\"Arsenal FC\",\"FC Barcelona\",\"Real Madrid\",\"Liverpool FC\",\"RB Leipzig\",\"Manchester United\",\"Newcastle United\",\"Bayern Munich\",\"AS Roma\",\"Liverpool FC\",\"Arsenal FC\",\"Paris Saint-Germain\",\"Chelsea FC\",\"Aston Villa\",\"Atlético de Madrid\",\"Olympique Lyon\",\"West Ham United\",\"Aston Villa\",\"RB Leipzig\",\"Atalanta BC\",\"Juventus FC\",\"Leicester City\",\"Borussia Dortmund\",\"West Ham United\",\"Newcastle United\",\"Aston Villa\",\"Atlético de Madrid\",\"Tottenham Hotspur\",\"SSC Napoli\",\"Tottenham Hotspur\",\"Inter Milan\",\"Aston Villa\",\"Newcastle United\",\"Leeds United\",\"AC Milan\",\"Arsenal FC\",\"Leicester City\",\"Al-Rayyan SC\",\"Atalanta BC\",\"Juventus FC\",\"AC Milan\",\"AS Roma\",\"Tottenham Hotspur\",\"Zenit St. Petersburg\",\"Juventus FC\",\"Tottenham Hotspur\",\"RB Leipzig\",\"AC Milan\",\"FC Barcelona\",\"AS Roma\",\"Norwich City\",\"Bayer 04 Leverkusen\",\"Sporting CP\",\"SSC Napoli\",\"Villarreal CF\",\"Everton FC\",\"Crystal Palace\",\"Brighton & Hove Albion\",\"Bayer 04 Leverkusen\",\"ACF Fiorentina\",\"Crystal Palace\",\"ACF Fiorentina\",\"Club Brugge KV\",\"Wolverhampton Wanderers\",\"Sevilla FC\",\"Atalanta BC\",\"Olympique Marseille\",\"FK Krasnodar\",\"Arsenal FC\",\"Brighton & Hove Albion\",\"Manchester City\",\"US Sassuolo\",\"Paris Saint-Germain\",\"Atlanta United FC\",\"Bologna FC 1909\",\"Burnley FC\",\"Shakhtar Donetsk\",\"AC Milan\",\"ACF Fiorentina\",\"RB Leipzig\",\"Shakhtar Donetsk\",\"Al-Hilal Riyadh\",\"Southampton FC\",\"Leicester City\",\"Newcastle United\",\"RB Leipzig\",\"Wolverhampton Wanderers\",\"PSV Eindhoven\",\"Torino FC\",\"Olympique Marseille\",\"Arsenal FC\",\"SL Benfica\",\"Stade Rennais FC\",\"AS Monaco\",\"Crystal Palace\",\"Fulham FC\",\"Sevilla FC\",\"West Ham United\",\"Atalanta BC\",\"FC Augsburg\",\"Inter Milan\",\"Sevilla FC\",\"Inter Milan\",\"OGC Nice\",\"Dinamo Batumi\",\"Botafogo de Futebol e Regatas\",\"Real Sociedad\",\"Brentford FC\",\"Borussia Dortmund\",\"Leeds United\",\"Villarreal CF\",\"RB Leipzig\",\"FC Porto\",\"Stade Rennais FC\",\"Burnley FC\",\"OGC Nice\",\"Newcastle United\",\"Stade Rennais FC\",\"Olympique Lyon\",\"ACF Fiorentina\",\"Stade Rennais FC\",\"Leeds United\",\"VfL Wolfsburg\",\"Crystal Palace\",\"Cagliari Calcio\",\"Sevilla FC\",\"Getafe CF\",\"US Sassuolo\",\"FK Krasnodar\",\"AC Milan\",\"FC Porto\",\"AS Roma\",\"CSKA Moscow\",\"SS Lazio\",\"Burnley FC\",\"Everton FC\",\"Villarreal CF\",\"Manchester City U23\",\"Hellas Verona\",\"Olympique Lyon\",\"AS Roma\",\"VfL Wolfsburg\",\"Al-Duhail SC\",\"Stade Rennais FC\",\"Sporting CP\",\"Norwich City\",\"AC Milan\",\"FC Porto B\",\"Shakhtar Donetsk\",\"Southampton FC\",\"Ajax Amsterdam\",\"VfL Wolfsburg\",\"Norwich City\",\"Watford FC\",\"FC Porto\",\"OGC Nice\",\"VfL Wolfsburg\",\"FC Dallas\",\"Olympique Lyon\",\"Ajax Amsterdam\",\"Club Brugge KV\",\"Besiktas JK\",\"Juventus FC\",\"Juventus FC\",\"Sharjah Cultural Sports Club\",\"Torino FC\",\"Torino FC\",\"AS Roma\",\"Zenit St. Petersburg\",\"Norwich City\",\"Olympique Marseille\",\"Vitória Guimarães SC B\",\"AS Monaco\",\"Sporting CP U19\",\"AS Monaco\",\"Brighton & Hove Albion\",\"Crystal Palace\",\"Brighton & Hove Albion\",\"Getafe CF\",\"Hellas Verona\",\"Watford FC\",\"Olympique Marseille\",\"Atlanta United FC\",\"CF América\",\"Parma Calcio 1913\",\"Al-Ittihad Jeddah\",\"Tottenham Hotspur\",\"AS Roma\",\"Shakhtar Donetsk\",\"Brentford FC\",\"Brentford FC\",\"Stade Reims\",\"West Bromwich Albion\",\"Al-Nassr Riad\",\"FC Nantes\",\"Bayer 04 Leverkusen\",\"OGC Nice\",\"Sevilla FC\",\"Borussia Mönchengladbach\",\"West Ham United\",\"Fenerbahce SK\",\"CA River Plate\",\"Watford FC\",\"SS Lazio\",\"Bologna FC 1909\",\"Atlético de Madrid\",\"US Sassuolo\",\"Olympique Marseille\",\"Clube de Regatas do Flamengo\",\"Getafe CF\",\"Besiktas JK\",\"Norwich City\",\"Borussia Mönchengladbach\",\"Eintracht Frankfurt\",\"Norwich City\",\"Club Brugge KV\",\"Hertha BSC\",\"AC Milan\",\"CA Osasuna\",\"SS Lazio\",\"Olympique Marseille\",\"Al-Wahda FC Abu Dhabi\",\"Udinese Calcio\",\"Valencia CF\",\"Club Brugge KV\",\"Al-Arabi SC\",\"RSC Anderlecht\",\"Parma Calcio 1913\",\"VfL Wolfsburg\",\"Arsenal FC\",\"Wolverhampton Wanderers\",\"Atalanta BC\",\"Fulham FC\",\"Spartak Moscow\",\"FK Krasnodar\",\"Hellas Verona\",\"FC Augsburg\",\"Chicago Fire FC\",\"Bayer 04 Leverkusen\",\"Atalanta BC\",\"Al-Nassr Riad\",\"RC Lens\",\"VfB Stuttgart\",\"RC Lens\",\"Clube de Regatas do Flamengo\",\"Real Salt Lake City\",\"Everton FC\",\"Clube de Regatas do Flamengo\",\"SSC Napoli\",\"SD Huesca\",\"FC Barcelona\",\"US Salernitana 1919\",\"Sport Club Internacional\",\"Al-Hilal Riyadh\",\"VfL Wolfsburg\",\"Bayer 04 Leverkusen\",\"Southampton FC\",\"Norwich City\",\"Dynamo Moscow\",\"Austin FC\",\"Torino FC\",\"SC Freiburg\",\"Real Betis Balompié\",\"RCD Espanyol Barcelona\",\"Hertha BSC\",\"AS Roma\",\"Hellas Verona\",\"LOSC Lille\",\"LOSC Lille\",\"Galatasaray A.S.\",\"Eintracht Frankfurt\",\"Rubin Kazan\",\"Crystal Palace\",\"Club Brugge KV\",\"OGC Nice\",\"Lokomotiv Moscow\",\"Brighton & Hove Albion\",\"Tigres UANL\",\"AS Monaco\",\"Bayer 04 Leverkusen\",\"PSV Eindhoven\",\"Bologna FC 1909\",\"Granada CF\",\"Tigres UANL\",\"Olympiacos Piraeus\",\"SC Freiburg\",\"Wuhan Three Towns\",\"Hertha BSC\",\"Norwich City\",\"Inter Milan\",\"Cagliari Calcio\",\"AFC Bournemouth\",\"Udinese Calcio\",\"Sport Club Internacional\",\"Genoa CFC\",\"FC Girondins Bordeaux\",\"FC Augsburg\",\"PAOK Thessaloniki\",\"Cagliari Calcio\",\"Hertha BSC\",\"Venezia FC\",\"SS Lazio\",\"Dynamo Moscow\",\"Galatasaray A.S.\",\"Middlesbrough FC\",\"AS Roma\",\"Parma Calcio 1913\",\"VfL Wolfsburg\",\"1.FC Union Berlin\",\"Genoa CFC\",\"Club Brugge KV\",\"Rubin Kazan\",\"Sporting CP\",\"Galatasaray A.S.\",\"AC Milan\",\"Spartak Moscow\",\"FC Porto\",\"Hamburger SV\",\"CSKA Moscow\",\"Nashville SC\",\"Orlando City SC\",\"Lokomotiv Moscow\",\"LOSC Lille\",\"OGC Nice\",\"Fenerbahce SK\",\"SL Benfica\",\"Dynamo Kyiv\",\"Lokomotiv Moscow\",\"Venezia FC\",\"Shakhtar Donetsk\",\"Sporting CP\",\"Trabzonspor\",\"CF Monterrey\",\"Charlotte FC\",\"Watford FC\",\"Celta de Vigo\",\"CF Monterrey\",\"Eintracht Frankfurt\",\"Atlético de Madrid\",\"Real Valladolid CF\",\"Sport Club Internacional\",\"AC Milan\",\"SL Benfica\",\"Colorado Rapids\",\"Atalanta BC\",\"RCD Mallorca\",\"Southampton FC\",\"Norwich City\",\"UC Sampdoria\",\"RC Lens\",\"UC Sampdoria\",\"Genoa CFC\",\"Venezia FC\",\"Juventus FC\",\"Manchester City U23\",\"Red Bull Bragantino\",\"Sociedade Esportiva Palmeiras\",\"Watford FC\",\"Clube Atlético Mineiro\",\"Chicago Fire FC\",\"Celtic FC\",\"UD Almería\",\"Wolverhampton Wanderers\",\"US Salernitana 1919\",\"ACF Fiorentina\",\"Red Bull Salzburg\",\"Boavista FC\",\"Royal Antwerp FC\",\"Brighton & Hove Albion\",\"Celtic FC\",\"ESTAC Troyes\",\"Stade Brestois 29\",\"Lokomotiv Moscow\",\"US Sassuolo\",\"Watford FC\",\"FK Krasnodar\",\"Genoa CFC\",\"Watford FC\",\"Lokomotiv Moscow\",\"Zenit St. Petersburg\",\"Red Bull Salzburg\",\"New York City FC\",\"Chicago Fire FC\",\"Red Bull Salzburg\",\"Granada CF\",\"FC Girondins Bordeaux\",\"Trabzonspor\",\"AFC Bournemouth\",\"Hellas Verona\",\"Watford FC\",\"Celta de Vigo\",\"Villarreal CF\",\"Stade Reims\",\"Venezia FC\",\"Clube de Regatas do Flamengo\",\"US Sassuolo\",\"UD Almería\",\"Deportivo Toluca\",\"ESTAC Troyes\",\"UD Almería\",\"OGC Nice\",\"NK Osijek\",\"BSC Young Boys\",\"Olympiacos Piraeus\",\"CA Vélez Sarsfield\",\"Racing Club\",\"Rangers FC\",\"NK Osijek\",\"Cádiz CF\",\"Borussia Mönchengladbach\",\"Cádiz CF\",\"Hellas Verona\",\"Feyenoord Rotterdam\",\"Olympiacos Piraeus\",\"ACF Fiorentina\",\"VfB Stuttgart\",\"UC Sampdoria\",\"FC Porto\",\"Vancouver Whitecaps FC\",\"Standard Liège\",\"CD Tondela\",\"Sharjah Cultural Sports Club\",\"Grêmio Foot-Ball Porto Alegrense\",\"Club Athletico Paranaense\",\"SPAL\",\"Olympique Marseille\",\"FC Midtjylland\",\"VfB Stuttgart\",\"Club Brugge KV\",\"FC Copenhagen\",\"RC Lens\",\"ESTAC Troyes\",\"KRC Genk\",\"RCD Mallorca\",\"CF Pachuca\",\"Al-Ahli Jeddah\",\"Burnley FC\",\"Grêmio Foot-Ball Porto Alegrense\",\"Stade Brestois 29\",\"Ferencvárosi TC\",\"Feyenoord Rotterdam\",\"Venezia FC\",\"Real Sociedad\",\"Venezia FC\",\"São Paulo Futebol Clube\",\"FC Copenhagen\",\"Grêmio Foot-Ball Porto Alegrense\",\"Adana Demirspor\",\"Elche CF\",\"Vitória Guimarães SC B\",\"Celtic FC\",\"Red Bull Salzburg\",\"RSC Anderlecht\",\"Lokomotiv Moscow\",\"Galatasaray A.S.\",\"Club Brugge KV\",\"AC Milan\",\"CF América\",\"FC Lorient\",\"Granada CF\",\"PSV Eindhoven\",\"Los Angeles Galaxy\",\"Genoa CFC\",\"US Salernitana 1919\",\"Genoa CFC\",\"Junior FC\",\"Olympique Marseille\",\"RCD Mallorca\",\"1.FSV Mainz 05\",\"Al-Ittihad Jeddah\",\"Bologna FC 1909\",\"CA Boca Juniors\",\"CA River Plate\",\"Genoa CFC\",\"Vitesse Arnhem\",\"Millwall FC\",\"Genoa CFC\",\"KAA Gent\",\"Arminia Bielefeld\",\"Inter Milan\",\"Urawa Red Diamonds\",\"Defensa y Justicia\",\"Defensa y Justicia\",\"Racing Club\",\"New York Red Bulls\",\"Royal Antwerp FC\",\"Arminia Bielefeld\",\"Royal Antwerp FC\",\"Brentford FC\",\"Spezia Calcio\",\"ESTAC Troyes\",\"Fortaleza Esporte Clube\",\"SC Braga\",\"Spezia Calcio\",\"Konyaspor\",\"UC Sampdoria\",\"Rubin Kazan\",\"Juventus U23\",\"Shanghai Port\",\"Houston Dynamo FC\",\"CF Monterrey\",\"Wuhan Three Towns\",\"Red Bull Bragantino\",\"Ferencvárosi TC\",\"Besiktas JK\",\"Venezia FC\",\"Venezia FC\",\"Middlesbrough FC\",\"VfL Wolfsburg\",\"FC Sochi\",\"Genoa CFC\",\"FC Lugano\",\"Dynamo Moscow\",\"SV Werder Bremen\",\"1.FSV Mainz 05\",\"1.FC Heidenheim 1846\",\"Lokomotiv Moscow\",\"FC Copenhagen\",\"KRC Genk\",\"Royal Antwerp FC\",\"FC Lorient\",\"Red Bull Bragantino\",\"Club Brugge KV\",\"VfL Wolfsburg\",\"Aris Thessaloniki\",\"KAA Gent\",\"Wolverhampton Wanderers\",\"Torino FC\",\"Stade Rennais FC\",\"US Sassuolo\",\"FC Copenhagen\",\"CF América\",\"CD Cruz Azul\",\"Kawasaki Frontale\",\"Feyenoord Rotterdam\",\"Spezia Calcio\",\"CA Boca Juniors\",\"Elche CF\",\"Hellas Verona\",\"Clube de Regatas do Flamengo\",\"Stade Rennais FC\",\"Al-Shabab FC (Riyadh)\",\"Spartak Moscow\",\"AC Milan\",\"CA Boca Juniors\",\"1.FC Union Berlin\",\"PAOK Thessaloniki\",\"Valencia CF\",\"Charlotte FC\",\"Olympiacos Piraeus\",\"RC Strasbourg Alsace\",\"Panathinaikos Athens\",\"CA River Plate\",\"Clube de Regatas do Flamengo\",\"KV Oostende\",\"Getafe CF\",\"Nottingham Forest\",\"Ferencvárosi TC\",\"1.FSV Mainz 05\",\"RCD Mallorca\",\"Spartak Moscow\",\"US Sassuolo\",\"AEK Athens\",\"Belenenses SAD\",\"Sint-Truidense VV\",\"Spezia Calcio\",\"Arminia Bielefeld\",\"Al-Faisaly Harmah\",\"Red Bull Bragantino\",\"Sharjah Cultural Sports Club\",\"RSC Charleroi\",\"Red Bull Bragantino\",\"Club Atlético Independiente\",\"Zenit St. Petersburg\",\"Sociedade Esportiva Palmeiras\",\"Hertha BSC\",\"CA River Plate\",\"Orlando City SC\",\"Club Atlético Talleres\",\"US Lecce\",\"Portland Timbers\",\"New York Red Bulls\",\"Montevideo City Torque\",\"Red Bull Bragantino\",\"FC Porto B\",\"Spezia Calcio\",\"Fenerbahce SK\",\"RSC Anderlecht\",\"Celtic FC\",\"Udinese Calcio\",\"Lokomotiv Moscow\",\"Watford FC\",\"Bologna FC 1909\",\"FK Rostov\",\"Brighton & Hove Albion\",\"Club Brugge KV\",\"Beijing Guoan\",\"Spezia Calcio\",\"Lommel SK\",\"Lommel SK\",\"FK Krasnodar\",\"Al-Hilal Riyadh\",\"CF América\",\"Philadelphia Union\",\"Arminia Bielefeld\",\"FC Copenhagen\",\"PSV Eindhoven\",\"Royal Antwerp FC\",\"Clube de Regatas do Flamengo\",\"West Ham United\",\"Los Angeles FC\",\"RCD Espanyol Barcelona\",\"GNK Dinamo Zagreb\",\"Rayo Vallecano\",\"Nagoya Grampus\",\"Swansea City\",\"FC Copenhagen\",\"RB Leipzig\",\"Royal Antwerp FC\",\"FC Dallas\",\"El Ahly Cairo\",\"CA Boca Juniors\",\"Ludogorets Razgrad\",\"CA Rosario Central\",\"SL Benfica\",\"SC Braga\",\"HNK Hajduk Split\",\"FC Copenhagen\",\"Los Angeles FC\",\"Vitória Guimarães SC\",\"Genoa CFC\",\"Millonarios FC\",\"Chicago Fire FC\",\"1.FC Union Berlin\",\"ESTAC Troyes\",\"RCD Espanyol Barcelona\",\"Piast Gliwice\",\"Club Estudiantes de La Plata\",\"Valencia CF\",\"Oud-Heverlee Leuven\",\"Orlando City SC\",\"Spezia Calcio\",\"San Jose Earthquakes\",\"Los Angeles Galaxy\",\"Eintracht Frankfurt\",\"D.C. United\",\"Charlotte FC\",\"Alanyaspor\",\"Grêmio Foot-Ball Porto Alegrense\",\"Club Atlético Independiente\",\"1.FC Union Berlin\",\"Fortaleza Esporte Clube\",\"CD Santa Clara\",\"Club Brugge KV\",\"Stoke City\",\"Galatasaray A.S.\",\"CA Boca Juniors\",\"Royal Antwerp FC\",\"Club Athletico Paranaense\",\"Galatasaray A.S.\",\"Zenit St. Petersburg\",\"FC Baniyas\",\"Royal Antwerp FC\",\"AC Monza\",\"Kayserispor\",\"Racing Club\",\"Hertha BSC\",\"AC Monza\",\"1. FC Köln\",\"Charlotte FC\",\"FC Cincinnati\",\"Vancouver Whitecaps FC\",\"Sport Club Internacional\",\"GNK Dinamo Zagreb\",\"ESTAC Troyes\",\"AC Sparta Prague\",\"Al-Ahli Jeddah\",\"Trabzonspor\",\"New England Revolution\",\"Manchester City U23\",\"UC Sampdoria\",\"ESTAC Troyes\",\"Bayer 04 Leverkusen\",\"FC Porto\",\"RCD Mallorca\",\"AZ Alkmaar\",\"Hellas Verona\",\"Ferencvárosi TC\",\"VfB Stuttgart\",\"Al-Nassr Riad\",\"Portland Timbers\",\"ESTAC Troyes\",\"Spartak Moscow\",\"Getafe CF\",\"Celtic FC\",\"Hellas Verona Primavera\",\"CD Cruz Azul\",\"1.FC Union Berlin\",\"Red Star Belgrade\",\"FC Midtjylland\",\"RSC Anderlecht\",\"Botafogo de Futebol e Regatas\",\"Tigres UANL\",\"Royal Antwerp FC\",\"Stade Brestois 29\",\"KAA Gent\",\"Beijing Guoan\",\"FC Empoli\",\"Zenit St. Petersburg\",\"Club Tijuana\",\"Sport Club Corinthians Paulista\",\"Botafogo de Futebol e Regatas\",\"Stoke City\",\"Red Bull Bragantino\",\"Kayserispor\",\"Granada CF\",\"Royal Antwerp FC\",\"RSC Anderlecht\",\"RC Lens\",\"New England Revolution\",\"Galatasaray A.S.\",\"San Jose Earthquakes\",\"1.FC Union Berlin\",\"Arminia Bielefeld\",\"Botafogo de Futebol e Regatas\",\"Hamburger SV\",\"AEK Athens\",\"Stade Brestois 29\",\"US Lecce\",\"CF Montréal\",\"CF América\",\"SC Paderborn 07\",\"Kayserispor\",\"AC Sparta Prague\",\"Club Nacional\",\"Celta de Vigo\",\"Rangers FC\",\"Ipswich Town\",\"Urawa Red Diamonds\",\"1.FC Union Berlin\",\"Arminia Bielefeld\",\"Venezia FC\",\"Yeni Malatyaspor\",\"Al-Ittihad Kalba SC\",\"Besiktas JK\",\"AS Saint-Étienne\",\"AS Saint-Étienne\",\"Colorado Rapids\",\"Esperance Tunis\",\"Trabzonspor\",\"Cádiz CF\",\"CSKA Moscow\",\"Cuiabá Esporte Clube (MT)\",\"Fluminense Football Club\",\"Charlotte FC\",\"Inter Miami CF\",\"Al-Taawoun FC\",\"Pisa Sporting Club\",\"Stade Reims\",\"Besiktas JK\",\"Adana Demirspor\",\"RSC Charleroi\",\"RC Lens\",\"SC Heerenveen\",\"Yeni Malatyaspor\",\"Al-Wasl Sports Club\",\"Al-Hazem SC\",\"CSD Colo Colo\",\"Spezia Calcio\",\"Vancouver Whitecaps FC\",\"Sociedade Esportiva Palmeiras\",\"Spezia Calcio\",\"FC Porto\",\"FC Shabab Al-Ahli Dubai\",\"Club León FC\",\"Royal Antwerp FC\",\"FC Toulouse\",\"Besiktas JK\",\"FC Empoli\",\"Shanghai Port\",\"Getafe CF\",\"Legia Warszawa\",\"FC Empoli\",\"Pisa Sporting Club\",\"CD Cruz Azul\",\"SS Lazio\",\"US Sassuolo\",\"FC Empoli\",\"FC Girondins Bordeaux\",\"FC Girondins Bordeaux\",\"Parma Calcio 1913\",\"Parma Calcio 1913\",\"Parma Calcio 1913\",\"FC Groningen\",\"Genoa CFC\",\"US Salernitana 1919\",\"Leeds United\",\"Wolverhampton Wanderers\",\"Aarhus GF\",\"FC Empoli\",\"Lokomotiv Moscow\",\"Parma Calcio 1913\",\"FC Girondins Bordeaux\",\"US Salernitana 1919\",\"FC Girondins Bordeaux\",\"FC Barcelona B\",\"Aarhus GF\",\"Shimizu S-Pulse\",\"Kashima Antlers\",\"KRC Genk\",\"AZ Alkmaar\",\"Arsenal FC\",\"Dynamo Kyiv\",\"Sport Club Internacional\",\"AFC Bournemouth\",\"Al-Hilal Riyadh\",\"CA River Plate\",\"SC Braga\",\"Al-Ain FC\",\"Istanbul Basaksehir FK\",\"Fluminense Football Club\",\"CA Colon\",\"Club de Regatas Vasco da Gama\",\"Sport Club Internacional\",\"CA Boca Juniors\",\"Fenerbahce SK\",\"Spezia Calcio\",\"FC Crotone\",\"Celtic FC\",\"Elche CF\",\"Lech Poznan\",\"FC Sochi\",\"Royale Union Saint Gilloise\",\"Göztepe\",\"Dynamo Moscow\",\"Feyenoord Rotterdam\",\"Club Necaxa\",\"Fortaleza Esporte Clube\",\"Urawa Red Diamonds\",\"Ferencvárosi TC\",\"Beijing Guoan\",\"Los Angeles FC\",\"Ludogorets Razgrad\",\"Ludogorets Razgrad\",\"Al-Hazem SC\",\"FC Juárez\",\"Arminia Bielefeld\",\"SpVgg Greuther Fürth\",\"Rapid Vienna\",\"Queens Park Rangers\",\"Club Necaxa\",\"Toronto FC\",\"Racing Club\",\"KV Oostende\",\"KV Kortrijk\",\"Fortuna Düsseldorf\",\"CD Godoy Cruz Antonio Tomba\",\"Venezia FC\",\"FC Groningen\",\"Arsenal Tula\",\"SpVgg Greuther Fürth\",\"Boavista FC\",\"Hamburger SV\",\"Altay SK\",\"AA Argentinos Juniors\",\"Adana Demirspor\",\"Hannover 96\",\"Maccabi Tel Aviv\",\"Charlotte FC\",\"Club Atlético Tigre\",\"Rakow Czestochowa\",\"Trabzonspor\",\"Columbus Crew\",\"Orlando City SC\",\"Al-Ain FC\",\"Nottingham Forest\",\"Charlotte FC\",\"RCD Espanyol Barcelona\",\"RC Lens\",\"Al-Hilal Riyadh\",\"AZ Alkmaar\",\"Udinese Calcio\",\"Al-Hilal Riyadh\",\"Charlotte FC\",\"FC Shabab Al-Ahli Dubai\",\"1.FC Nuremberg\",\"VfB Stuttgart\",\"Vitória Guimarães SC\",\"Minnesota United FC\",\"Charlotte FC\",\"1.FC Union Berlin\",\"Club Cerro Porteño\",\"Oud-Heverlee Leuven\",\"Istanbul Basaksehir FK\",\"US Salernitana 1919\",\"Valencia CF\",\"AC Monza\",\"Akhmat Grozny\",\"APOEL Nicosia\",\"Trabzonspor\",\"Ludogorets Razgrad\",\"Club Atlético Huracán\",\"FC St. Pauli\",\"FC Sochi\",\"Wuhan Three Towns\",\"Real Salt Lake City\",\"US Cremonese\",\"Wigan Athletic\",\"VfB Stuttgart\",\"AZ Alkmaar\",\"AZ Alkmaar\",\"VfB Stuttgart\",\"Chicago Fire FC\",\"KRC Genk\",\"Yokohama FC\",\"Swansea City\",\"FC Schalke 04\",\"CA Vélez Sarsfield\",\"Istanbul Basaksehir FK\",\"Piast Gliwice\",\"Al-Raed\",\"Spartak Moscow\",\"Fortuna Düsseldorf\",\"Charlotte FC\",\"Pyramids FC\",\"KAA Gent\",\"Metalist Kharkiv\",\"FC Midtjylland\",\"1.FC Union Berlin\",\"FK Khimki\",\"Houston Dynamo FC\",\"RCD Espanyol Barcelona\",\"Al-Fayha FC\",\"Atlas Guadalajara\",\"Austin FC\",\"Celtic FC\",\"Hertha BSC\",\"AFC Bournemouth\",\"Seattle Sounders FC\",\"Nottingham Forest\",\"Standard Liège\",\"Altay SK\",\"Rubin Kazan\",\"Dynamo Moscow\",\"FC Basel 1893\",\"Yokohama FC\",\"Brentford FC B\",\"Standard Liège\",\"Aarhus GF\",\"SD Eibar\",\"Altay SK\",\"Club Athletico Paranaense\",\"FC Famalicão\",\"Olympiacos Piraeus B\",\"Fenerbahce SK\",\"Rubin Kazan\",\"Ferencvárosi TC\",\"Spartak Moscow\",\"RC Strasbourg Alsace\",\"FC Copenhagen\",\"Royal Antwerp FC\",\"Jeonbuk Hyundai Motors\",\"Clube Atlético Mineiro\",\"AC Le Havre\",\"Rubin Kazan\",\"AEK Athens\",\"Deportivo Alavés\",\"Fortuna Düsseldorf\",\"Royal Antwerp FC\",\"Kayserispor\",\"Grasshopper Club Zurich\",\"Fluminense Football Club\",\"Club León FC\",\"SK Slavia Prague\",\"Portimonense SC\",\"Arminia Bielefeld\",\"Club Athletico Paranaense\",\"FC Schalke 04\",\"Spezia Calcio\",\"Hamburger SV\",\"Aalborg BK\",\"Hebei FC\",\"Charlotte FC\",\"Feyenoord Rotterdam\",\"FK Partizan Belgrade\",\"Cagliari Calcio\",\"Budapest Honvéd FC\",\"Ludogorets Razgrad\",\"Puskás Akadémia FC\",\"Charlotte FC\",\"Sporting Gijón\",\"Atlético Nacional\",\"Slask Wroclaw\",\"Ceará Sporting Club\",\"Slask Wroclaw\",\"SK Dnipro-1\",\"Defensa y Justicia\",\"Club Atlético Talleres\",\"Ceará Sporting Club\",\"UD Almería\",\"MOL Fehérvár FC\",\"Tobol Kostanay\",\"Krylya Sovetov Samara\",\"Chelsea FC\",\"Bayern Munich\",\"Juventus FC\",\"Manchester City\",\"Chelsea FC\",\"FC Barcelona\",\"Paris Saint-Germain\",\"Inter Milan\",\"Chelsea FC\",\"Arsenal FC\",\"Inter Milan\",\"Liverpool FC\",\"Juventus FC\",\"Manchester City\",\"Manchester City\",\"Liverpool FC\",\"Manchester United\",\"SSC Napoli\",\"Chelsea FC\",\"Wolverhampton Wanderers\",\"Tottenham Hotspur\",\"Wolverhampton Wanderers\",\"Leeds United\",\"Manchester United\",\"Arsenal FC\",\"Atlético de Madrid\",\"Juventus FC\",\"Leicester City\",\"AC Milan\",\"AC Milan\",\"Hertha BSC\",\"FC Barcelona\",\"Tottenham Hotspur\",\"Ajax Amsterdam\",\"Atlético de Madrid\",\"Villarreal CF\",\"Everton FC\",\"SL Benfica\",\"AS Monaco\",\"Atlético de Madrid\",\"Everton FC\",\"LOSC Lille\",\"Atlético de Madrid\",\"Bayer 04 Leverkusen\",\"Arsenal FC\",\"Sheffield United\",\"Stade Rennais FC\",\"SSC Napoli\",\"Borussia Dortmund\",\"Inter Milan\",\"RB Leipzig\",\"Atalanta BC\",\"AS Roma\",\"Liverpool FC\",\"SL Benfica\",\"Chelsea FC\",\"AS Roma\",\"Paris Saint-Germain\",\"Eintracht Frankfurt\",\"West Ham United\",\"Leicester City\",\"Newcastle United\",\"Torino FC\",\"AS Roma\",\"West Ham United\",\"Olympique Marseille\",\"Manchester United\",\"Sevilla FC\",\"FC Barcelona\",\"Sheffield United\",\"Zenit St. Petersburg\",\"Everton FC\",\"RB Leipzig\",\"Leeds United\",\"Olympique Lyon\",\"Tottenham Hotspur\",\"Aston Villa\",\"AS Roma\",\"Juventus FC\",\"Sevilla FC\",\"Tottenham Hotspur\",\"Wolverhampton Wanderers\",\"Villarreal CF\",\"Getafe CF\",\"RB Leipzig\",\"Eintracht Frankfurt\",\"Bayern Munich\",\"SS Lazio\",\"Genoa CFC\",\"Leeds United\",\"Aston Villa\",\"Leicester City\",\"SL Benfica\",\"AS Monaco\",\"Ajax Amsterdam\",\"Atalanta BC\",\"Getafe CF\",\"AS Monaco\",\"Crystal Palace\",\"Leeds United\",\"Atlético de Madrid\",\"ACF Fiorentina\",\"Aston Villa\",\"Leeds United\",\"AC Milan\",\"Tottenham Hotspur\",\"Newcastle United\",\"West Bromwich Albion\",\"Villarreal CF\",\"West Ham United\",\"Al-Nassr Riad\",\"Sporting CP\",\"SL Benfica\",\"Bayern Munich\",\"FC Porto\",\"UC Sampdoria\",\"Cardiff City\",\"Fulham FC\",\"Aston Villa\",\"Clube Atlético Mineiro\",\"Cagliari Calcio\",\"ACF Fiorentina\",\"Stade Rennais FC\",\"Hertha BSC\",\"SL Benfica\",\"Sevilla FC\",\"Cagliari Calcio\",\"Southampton FC\",\"Spartak Moscow\",\"PSV Eindhoven\",\"Sevilla FC\",\"Crystal Palace\",\"Borussia Mönchengladbach\",\"Parma Calcio 1913\",\"Clube de Regatas do Flamengo\",\"Olympique Lyon\",\"Villarreal CF\",\"Atalanta BC\",\"SL Benfica\",\"Inter Milan\",\"West Bromwich Albion\",\"AS Monaco\",\"Arminia Bielefeld\",\"Galatasaray A.S.\",\"AC Milan\",\"Southampton FC\",\"AS Roma\",\"Liverpool FC\",\"Parma Calcio 1913\",\"SS Lazio\",\"Tottenham Hotspur\",\"Aston Villa\",\"Parma Calcio 1913\",\"Udinese Calcio\",\"Juventus FC\",\"Stade Rennais FC\",\"RB Leipzig\",\"Zenit St. Petersburg\",\"Southampton FC\",\"Athletic Bilbao\",\"Sevilla FC\",\"Ajax Amsterdam\",\"Sevilla FC\",\"RC Strasbourg Alsace\",\"Al-Duhail SC\",\"Bayer 04 Leverkusen\",\"FC Schalke 04\",\"Bayer 04 Leverkusen\",\"Stade Rennais FC\",\"Cagliari Calcio\",\"AC Milan\",\"FC Cincinnati\",\"Fulham FC\",\"CSKA Moscow\",\"Borussia Dortmund\",\"Atalanta BC\",\"ACF Fiorentina\",\"SPAL\",\"Brighton & Hove Albion\",\"Bayer 04 Leverkusen\",\"CSKA Moscow\",\"VfL Wolfsburg\",\"Borussia Mönchengladbach\",\"1. FC Köln\",\"Juventus U23\",\"ACF Fiorentina\",\"Manchester City U23\",\"SC Freiburg\",\"Stade Rennais FC\",\"VfL Wolfsburg\",\"Real Sociedad\",\"Genoa CFC\",\"Torino FC\",\"Fenerbahce SK\",\"Red Bull Salzburg\",\"FC Porto\",\"AS Roma\",\"West Ham United\",\"Fulham FC\",\"Fulham FC\",\"Al-Ahli Jeddah\",\"Hellas Verona\",\"Cagliari Calcio\",\"Paris Saint-Germain\",\"Wolverhampton Wanderers\",\"RC Lens\",\"West Bromwich Albion\",\"PSV Eindhoven\",\"Shanghai Port\",\"OGC Nice\",\"Celtic FC\",\"Paris Saint-Germain\",\"Parma Calcio 1913\",\"FC Lorient\",\"Ajax Amsterdam\",\"Getafe CF\",\"Genoa CFC\",\"Borussia Mönchengladbach\",\"Bayern Munich\",\"Tianjin Jinmen Tiger\",\"Stade Rennais FC\",\"Olympiacos Piraeus\",\"Benevento Calcio\",\"FC Porto\",\"Dynamo Moscow\",\"Manchester United\",\"Manchester City\",\"Sevilla FC\",\"SC Freiburg\",\"Parma Calcio 1913\",\"US Sassuolo\",\"Parma Calcio 1913\",\"SC Braga\",\"OGC Nice\",\"LOSC Lille\",\"CSKA Moscow\",\"AS Monaco\",\"FC Lorient\",\"SS Lazio\",\"Juventus U23\",\"Olympique de Marseille B\",\"Genoa CFC\",\"New York City FC\",\"Paris Saint-Germain\",\"Toronto FC\",\"Shenzhen FC\",\"Lokomotiv Moscow\",\"Lokomotiv Moscow\",\"AC Milan\",\"FC Basel 1893\",\"Villarreal CF\",\"Lokomotiv Moscow\",\"Brighton & Hove Albion\",\"Hellas Verona\",\"Olympique Marseille\",\"SCO Angers\",\"Granada CF\",\"Atlanta United FC\",\"Hellas Verona\",\"VfB Stuttgart\",\"Olympique Marseille\",\"Genoa CFC\",\"FC Augsburg\",\"Atalanta BC\",\"OGC Nice\",\"SV Werder Bremen\",\"OGC Nice\",\"Hertha BSC\",\"1. FC Köln\",\"Atalanta BC\",\"1. FC Köln\",\"Sporting CP\",\"AC Milan\",\"Al-Hilal Riyadh\",\"FC Porto\",\"TSG 1899 Hoffenheim\",\"US Sassuolo\",\"Fulham FC\",\"SD Huesca\",\"Parma Calcio 1913\",\"UC Sampdoria\",\"Manchester City\",\"Besiktas JK\",\"Leeds United\",\"Fulham FC\",\"Sheffield United\",\"SL Benfica\",\"Torino FC\",\"UD Almería\",\"FC Nantes\",\"Stade Brestois 29\",\"Fulham FC\",\"Olympique Marseille\",\"Benevento Calcio\",\"SS Lazio\",\"Hellas Verona\",\"Feyenoord Rotterdam\",\"CSKA Moscow\",\"Trabzonspor\",\"Parma Calcio 1913\",\"Parma Calcio 1913\",\"Atlanta United FC\",\"Montpellier HSC\",\"Sheffield United\",\"Fortuna Düsseldorf\",\"Red Bull Bragantino\",\"Manchester City U23\",\"Arsenal FC\",\"KAA Gent\",\"FC Basel 1893\",\"RC Lens\",\"Montpellier HSC\",\"Al-Sadd SC\",\"West Ham United\",\"Al-Duhail SC\",\"Manchester City\",\"Red Bull Bragantino\",\"Brighton & Hove Albion\",\"UD Almería\",\"Clube Atlético Mineiro\",\"Parma Calcio 1913\",\"Real Valladolid CF\",\"Dijon FCO\",\"Fenerbahce SK\",\"KAA Gent\",\"Minnesota United FC\",\"Norwich City\",\"Galatasaray A.S.\",\"Atalanta BC\",\"Benevento Calcio\",\"Real Valladolid CF\",\"Spartak Moscow\",\"AS Roma\",\"Parma Calcio 1913\",\"Brentford FC\",\"Celtic FC\",\"Nottingham Forest\",\"VfB Stuttgart\",\"Club Brugge KV\",\"Stade Brestois 29\",\"Norwich City\",\"Fulham FC\",\"Hellas Verona\",\"Spezia Calcio\",\"KRC Genk\",\"Vissel Kobe\",\"Hellas Verona\",\"Los Angeles Galaxy\",\"Austin FC\",\"Torino FC\",\"Hebei FC\",\"Elche CF\",\"US Sassuolo\",\"Olympique Marseille\",\"Stade Brestois 29\",\"Celtic FC\",\"Granada CF\",\"Rangers FC\",\"VfL Wolfsburg\",\"VfL Wolfsburg\",\"Pyramids FC\",\"Nottingham Forest\",\"Elche CF\",\"Sporting CP\",\"Brighton & Hove Albion\",\"Tigres UANL\",\"Minnesota United FC\",\"Benevento Calcio\",\"Trabzonspor\",\"Inter Milan\",\"Torino FC\",\"Red Star Belgrade\",\"Torino FC\",\"Eintracht Frankfurt\",\"AS Saint-Étienne\",\"AC Milan\",\"TSG 1899 Hoffenheim\",\"Parma Calcio 1913\",\"AC Milan\",\"AS Saint-Étienne\",\"OGC Nice\",\"FC Midtjylland\",\"Al-Nassr Riad\",\"Burnley FC\",\"West Ham United\",\"SD Huesca\",\"CA River Plate\",\"Shandong Taishan\",\"Spartak Moscow\",\"KRC Genk\",\"FC Metz\",\"Red Bull Salzburg\",\"Manchester City\",\"FC Barcelona B\",\"AC Monza\",\"Juventus Primavera\",\"Dalian Professional\",\"Club León FC\",\"ACF Fiorentina\",\"US Sassuolo\",\"Hellas Verona\",\"Rangers FC\",\"RC Lens\",\"CF América\",\"Eintracht Frankfurt\",\"Hellas Verona\",\"Norwich City\",\"Atalanta BC\",\"UC Sampdoria\",\"Hertha BSC\",\"Elche CF\",\"New York Red Bulls\",\"Derby County\",\"Montevideo City Torque\",\"Ajax Amsterdam\",\"Parma Calcio 1913\",\"FC Famalicão\",\"Juventus FC\",\"Stade Reims\",\"UD Almería\",\"Stade Reims\",\"AC Monza\",\"KRC Genk\",\"SV Werder Bremen\",\"Granada CF\",\"Hertha BSC\",\"Stade Rennais FC\",\"FC Basel 1893\",\"AC Monza\",\"FC Porto\",\"Sevilla FC\",\"Brighton & Hove Albion\",\"Manchester United U18\",\"Al-Ittihad Jeddah\",\"Deportivo Toluca\",\"Sporting CP\",\"Sporting CP\",\"Sporting Kansas City\",\"Club Tijuana\",\"1. FC Köln\",\"Club Tijuana\",\"Rangers FC\",\"Dijon FCO\",\"PAOK Thessaloniki\",\"Nîmes Olympique\",\"FC Cincinnati\",\"Atlanta United FC\",\"FC Paços de Ferreira\",\"Al-Shabab FC (Riyadh)\",\"Dijon FCO\",\"Austin FC\",\"Villarreal CF\",\"Bayer 04 Leverkusen\",\"RCD Mallorca\",\"Udinese Calcio\",\"Portland Timbers\",\"Racing Club\",\"Sport Club Corinthians Paulista\",\"Galatasaray A.S.\",\"Spartak Moscow\",\"Celta de Vigo\",\"Besiktas JK\",\"SC Freiburg\",\"Besiktas JK\",\"West Bromwich Albion\",\"Reading FC\",\"Sheffield United\",\"FK Rostov\",\"Club Libertad Asunción\",\"SC Freiburg\",\"KRC Genk\",\"Vancouver Whitecaps FC\",\"FC Cincinnati\",\"Inter Miami CF\",\"Udinese Calcio\",\"Willem II Tilburg\",\"Red Bull Bragantino\",\"Red Bull Bragantino\",\"Amiens SC\",\"Atlético de San Luis\",\"KRC Genk\",\"KAA Gent\",\"Dynamo Moscow\",\"SPAL\",\"Atlético de Madrid\",\"FC Metz\",\"FK Krasnodar\",\"AC Monza\",\"Benevento Calcio\",\"Fulham FC\",\"Sociedade Esportiva Palmeiras\",\"Dynamo Moscow\",\"SD Eibar\",\"FC Augsburg\",\"Torino FC\",\"BSC Young Boys\",\"Crystal Palace\",\"Boavista FC\",\"CF Montréal\",\"AEK Athens\",\"Fenerbahce SK\",\"Spezia Calcio\",\"Fortuna Düsseldorf\",\"FC Crotone\",\"Al-Ittihad Jeddah\",\"FC Copenhagen\",\"Genoa CFC\",\"Atlético de San Luis\",\"Bologna FC 1909\",\"Spezia Calcio\",\"Dijon FCO\",\"Liverpool FC U18\",\"Atlanta United FC\",\"Shanghai Port\",\"Nottingham Forest\",\"Genoa CFC\",\"Trabzonspor\",\"Middlesbrough FC\",\"Shanghai Shenhua\",\"Nîmes Olympique\",\"Birmingham City\",\"Clube Atlético Mineiro\",\"São Paulo Futebol Clube\",\"Club Tijuana\",\"West Bromwich Albion\",\"SD Huesca\",\"Nîmes Olympique\",\"Parma Calcio 1913\",\"Olimpia Asunción\",\"Clube Atlético Mineiro\",\"Al-Sadd SC\",\"Royal Antwerp FC\",\"Hellas Verona\",\"MKE Ankaragücü\",\"LOSC Lille\",\"Racing Club\",\"Valencia CF\",\"Spezia Calcio\",\"Hertha BSC\",\"FC Basel 1893\",\"SL Benfica\",\"Clube Atlético Mineiro\",\"Clube Atlético Mineiro\",\"CA Osasuna\",\"CA Osasuna\",\"FC Metz\",\"Real Valladolid CF\",\"Celtic FC\",\"SL Benfica\",\"Celtic FC\",\"CD Leganés\",\"CA Osasuna\",\"Olympiacos Piraeus\",\"FC Lorient\",\"UD Almería B\",\"Cagliari Calcio\",\"FC Basel 1893\",\"FK Krasnodar\",\"KRC Genk\",\"Santos Laguna\",\"GNK Dinamo Zagreb\",\"SC Braga\",\"RSC Anderlecht\",\"Istanbul Basaksehir FK\",\"Boavista FC\",\"CF América\",\"Oud-Heverlee Leuven\",\"Grêmio Foot-Ball Porto Alegrense\",\"FC Crotone\",\"Caykur Rizespor\",\"GNK Dinamo Zagreb\",\"Ceará Sporting Club\",\"US Sassuolo\",\"RCD Espanyol Barcelona\",\"UD Las Palmas\",\"Juventus Primavera\",\"Juventus U23\",\"Shenzhen FC\",\"Santos FC\",\"Olympiacos Piraeus\",\"Fulham FC\",\"Royal Antwerp FC\",\"Sheffield Wednesday\",\"Alanyaspor\",\"RSC Charleroi\",\"Racing Club\",\"Atlanta United FC\",\"Racing Club\",\"Cádiz CF\",\"Queens Park Rangers\",\"Granada CF\",\"Guangzhou City\",\"Nîmes Olympique\",\"Empoli FC\",\"Al-Ain\",\"CFR Cluj\",\"Genoa CFC\",\"AZ Alkmaar\",\"Shenzhen FC\",\"Al-Nasr (Dubai)\",\"Shenzhen FC Reserves\",\"Shenzhen FC Reserves\",\"Shenzhen FC\",\"Inter Milan\",\"AS Monaco\",\"Trabzonspor\",\"Celta de Vigo\",\"UC Sampdoria\",\"Villarreal CF\",\"FK Rostov\",\"FC Lorient\",\"Cádiz CF\",\"Rubin Kazan\",\"Villarreal CF\",\"Istanbul Basaksehir FK\",\"UD Almería\",\"Lommel SK\",\"Al-Shabab FC (Riyadh)\",\"Al-Batin FC\",\"FK Rostov\",\"Trabzonspor\",\"Changchun Yatai\",\"FC Lugano\",\"Fenerbahce SK\",\"PAOK Thessaloniki\",\"Puebla FC\",\"Cercle Brugge\",\"SK Slavia Prague\",\"Galatasaray A.S.\",\"KAA Gent\",\"Benevento Calcio\",\"Al-Nasr (Dubai)\",\"Club Libertad Asunción\",\"Real Salt Lake City\",\"Hannover 96\",\"FC Cincinnati\",\"San Jose Earthquakes\",\"São Paulo Futebol Clube\",\"Zenit St. Petersburg\",\"Club Estudiantes de La Plata\",\"AC Pisa 1909\",\"CA Rosario Central\",\"Henan Songshan Longmen\",\"Birmingham City\",\"RC Strasbourg Alsace\",\"UC Sampdoria\",\"CA Osasuna\",\"Wolverhampton Wanderers\",\"Damac FC\",\"Liverpool FC\",\"1.FC Union Berlin\",\"Parma Calcio 1913\",\"CA Vélez Sarsfield\",\"Fenerbahce SK\",\"Portland Timbers\",\"Kashima Antlers\",\"VfB Stuttgart\",\"VfB Stuttgart\",\"Blackburn Rovers\",\"Nashville SC\",\"Feyenoord Rotterdam\",\"Nîmes Olympique\",\"Swansea City\",\"Yeni Malatyaspor\",\"FC Crotone\",\"Seattle Sounders FC\",\"Vancouver Whitecaps FC\",\"Birmingham City\",\"Shenzhen FC Reserves\",\"Lommel SK\",\"Cardiff City\",\"Feyenoord Rotterdam\",\"Queens Park Rangers\",\"Stoke City\",\"Spezia Calcio\",\"AEK Athens\",\"Queens Park Rangers\",\"GNK Dinamo Zagreb\",\"Trabzonspor\",\"CA River Plate\",\"Cercle Brugge\",\"Aris Thessaloniki\",\"Al-Nassr Riad\",\"Stade Brestois 29\",\"Al-Faisaly Harmah\",\"Al-Raed\",\"FC Lugano\",\"Shenzhen FC Reserves\",\"Istanbul Basaksehir FK\",\"Red Bull Bragantino\",\"Clube Atlético Mineiro\",\"Club Estudiantes de La Plata\",\"Shandong Taishan\",\"Norwich City\",\"Urawa Red Diamonds\",\"Eintracht Frankfurt\",\"Bayer 04 Leverkusen\",\"FC Metz\",\"Rubin Kazan\",\"AC Sparta Prague\",\"AC Pisa 1909\",\"Stade Reims\",\"Club León FC\",\"FC Lorient\",\"Cádiz CF\",\"Granada CF\",\"Levante UD\",\"1.FSV Mainz 05\",\"Ajax U18\",\"CSKA Moscow\",\"FC Lorient\",\"KAS Eupen\",\"Cercle Brugge\",\"Standard Liège\",\"Brighton & Hove Albion\",\"Cercle Brugge\",\"Pordenone Calcio\",\"Arsenal FC\",\"RCD Espanyol Barcelona\",\"FC Shabab Al-Ahli Dubai\",\"Virtus Entella\",\"Dijon FCO\",\"Villarreal CF B\",\"Shimizu S-Pulse\",\"Olympiacos Piraeus\",\"AKA Red Bull Salzburg U18\",\"Red Bull Salzburg\",\"São Paulo Futebol Clube\",\"Genoa CFC\",\"Real Valladolid CF\",\"Borussia Mönchengladbach\",\"Lion City Sailors\",\"Beerschot V.A.\",\"Shanghai Shenhua\",\"Austin FC\",\"Royal Antwerp FC\",\"Hellas Verona\",\"Brescia Calcio\",\"Al-Nassr Riad\",\"New York Red Bulls\",\"NK Osijek\",\"Club Atlético Independiente\",\"Puskás Akadémia FC\",\"Inter Miami CF\",\"Standard Liège\",\"Benevento Calcio\",\"Club Tijuana\",\"FK Rostov\",\"CA Boca Juniors\",\"Panathinaikos Athens\",\"Tianjin Jinmen Tiger\",\"Zhejiang FC\",\"Clube Atlético Mineiro\",\"Kayserispor\",\"Guangzhou City\",\"Empoli FC\",\"SPAL\",\"Dynamo Moscow\",\"Ferencvárosi TC\",\"Chelsea FC U18\",\"Fenerbahce SK\",\"RCD Mallorca\",\"Tokushima Vortis\",\"CA River Plate\",\"OGC Nice\",\"Tianjin Jinmen Tiger\",\"KAA Gent\",\"Al-Ettifaq\",\"Arsenal Tula\",\"Club Libertad Asunción\",\"Los Angeles Galaxy\",\"Houston Dynamo FC\",\"Asociación Atlética Argentinos Juniors II\",\"Bröndby IF\",\"Club Athletico Paranaense\",\"Barnsley FC\",\"Sampdoria Primavera\",\"VfB Stuttgart\",\"US Sassuolo\",\"Leeds United U23\",\"Bologna FC 1909\",\"Fiorentina Primavera\",\"Minnesota United FC\",\"Istanbul Basaksehir FK\",\"Malmö FF\",\"Ludogorets Razgrad\",\"Legia Warszawa\",\"1.FC Union Berlin\",\"El Ahly Cairo\",\"Preston North End\",\"Kashiwa Reysol\",\"Philadelphia Union\",\"Jeonbuk Hyundai Motors\",\"Feyenoord Rotterdam\",\"West Ham United\",\"Juventus U23\",\"GNK Dinamo Zagreb\",\"Fenerbahce SK\",\"Feyenoord Rotterdam\",\"Oud-Heverlee Leuven\",\"Houston Dynamo FC\",\"RC Lens\",\"BSC Young Boys\",\"KAS Eupen\",\"Olympiacos Piraeus\",\"FC Crotone\",\"FC Metz\",\"Royal Antwerp FC\",\"US Cremonese\",\"Sheffield Wednesday\",\"Atalanta BC\",\"Los Angeles FC\",\"Fortuna Düsseldorf\",\"Club Libertad Asunción\",\"Oud-Heverlee Leuven\",\"Caykur Rizespor\",\"Defensa y Justicia\",\"CA San Lorenzo de Almagro\",\"FC Crotone\",\"Nashville SC\",\"KRC Genk\",\"UC Sampdoria\",\"Chievo Verona\",\"Ferencvárosi TC\",\"Coventry City\",\"Hebei FC\",\"Lokomotiv Moscow\",\"SL Benfica\",\"Rubin Kazan\",\"Milan Primavera\",\"Beerschot V.A.\",\"Olympique Lyon\",\"Istanbul Basaksehir FK\",\"SC Heerenveen\",\"Genoa CFC\",\"Lommel SK\",\"Sint-Truidense VV\",\"Torino Primavera\",\"Preston North End\",\"FC Midtjylland\",\"FC Bayern Munich II\",\"Sociedade Esportiva Palmeiras\",\"Orlando City SC\",\"SC Heerenveen\",\"CSKA Moscow\",\"Red Bull Bragantino\",\"Columbus Crew\",\"Kashiwa Reysol\",\"Henan Songshan Longmen\",\"Cagliari Calcio\",\"Al-Khor SC\",\"Spartak Moscow\",\"Lech Poznan\",\"Shenzhen FC\",\"TSG 1899 Hoffenheim\",\"Oeste Futebol Clube (SP)\",\"US Lecce\",\"Toronto FC\",\"RB Leipzig\",\"Caykur Rizespor\",\"GNK Dinamo Zagreb\",\"Arsenal Tula\",\"Aberdeen FC\",\"Göztepe\",\"Alanyaspor\",\"Chievo Verona\",\"Al-Gharafa SC\",\"Defensa y Justicia\",\"AC Pisa 1909\",\"Columbus Crew\",\"FC Cincinnati\",\"Peterborough United\",\"SC Heerenveen\",\"Barnsley FC\",\"Al Qadisiyah FC\",\"Club Athletico Paranaense\",\"CA San Lorenzo de Almagro\",\"Swansea City\",\"KAS Eupen\",\"Club Atlético Talleres\",\"Akhmat Grozny\",\"CA San Lorenzo de Almagro\",\"Ural Yekaterinburg\",\"Club Atlético Talleres\",\"New York City FC\",\"FC Barcelona B\",\"UC Sampdoria\",\"AEK Athens\",\"SK Slavia Prague\",\"UD Almería\",\"FC Augsburg\",\"Grêmio Foot-Ball Porto Alegrense\",\"Royal Antwerp FC\",\"Vitória Guimarães SC\",\"Norwich City\",\"Birmingham City\",\"Leeds United\",\"KAS Eupen\",\"D.C. United\",\"Defensa y Justicia\",\"Akhmat Grozny\",\"FC Emmen\",\"Ludogorets Razgrad\",\"Hebei FC\",\"GNK Dinamo Zagreb\",\"Amiens SC\",\"Cádiz CF\",\"Vitória Guimarães SC\",\"Lommel SK\",\"GNK Dinamo Zagreb\",\"Trabzonspor\",\"Sint-Truidense VV\",\"Grêmio Foot-Ball Porto Alegrense\",\"Orlando City SC\",\"FC Dallas\",\"West Bromwich Albion\",\"West Bromwich Albion\",\"Nîmes Olympique\",\"FC Famalicão\",\"Clube Atlético Mineiro\",\"AC Milan\",\"Grêmio Foot-Ball Porto Alegrense\",\"Jeonbuk Hyundai Motors\",\"FK Rostov\",\"Johor Darul Ta'zim\",\"Budapest Honvéd FC\",\"Kairat Almaty\",\"KAA Gent\",\"Samsunspor\",\"Club Athletico Paranaense\",\"RSC Anderlecht\",\"Dundee United FC\",\"Al-Raed\",\"APOEL Nicosia\",\"Al-Arabi SC\",\"Beijing Guoan\",\"Vitória Guimarães SC\",\"FK Krasnodar\",\"Cercle Brugge\",\"AA Argentinos Juniors\",\"CA Osasuna\",\"Willem II Tilburg\",\"Spezia Calcio\",\"Club Atlético Independiente\",\"Trabzonspor\",\"Besiktas JK\",\"New York City FC\",\"Club Atlético Independiente\",\"Real Madrid\",\"FC Barcelona\",\"Atlético de Madrid\",\"Inter Milan\",\"Bayern Munich\",\"Manchester United\",\"FC Barcelona\",\"Juventus FC\",\"Bayern Munich\",\"Arsenal FC\",\"Manchester City\",\"Inter Milan\",\"Manchester City\",\"Tottenham Hotspur\",\"Real Madrid\",\"Manchester United\",\"Eintracht Frankfurt\",\"Real Betis Balompié\",\"Manchester United\",\"Real Madrid\",\"West Ham United\",\"Borussia Dortmund\",\"Real Betis Balompié\",\"Tottenham Hotspur\",\"Real Madrid\",\"Real Madrid\",\"Chelsea FC\",\"Leicester City\",\"SSC Napoli\",\"Borussia Dortmund\",\"Atalanta BC\",\"Newcastle United\",\"Villarreal CF\",\"Zenit St. Petersburg\",\"AS Monaco\",\"SSC Napoli\",\"Everton FC\",\"Paris Saint-Germain\",\"Valencia CF\",\"Wolverhampton Wanderers\",\"Borussia Dortmund\",\"Juventus FC\",\"Borussia Dortmund\",\"Inter Milan\",\"Bayern Munich\",\"Valencia CF\",\"Juventus FC\",\"Paris Saint-Germain\",\"Borussia Dortmund\",\"Tottenham Hotspur\",\"Tottenham Hotspur\",\"Shanghai SIPG\",\"Atlético de Madrid\",\"RB Leipzig\",\"AS Monaco\",\"Leicester City\",\"AC Milan\",\"Bayer 04 Leverkusen\",\"Hertha BSC\",\"Juventus FC\",\"Everton FC\",\"AS Monaco\",\"Paris Saint-Germain\",\"Watford FC\",\"Atlético de Madrid\",\"Real Madrid\",\"Arsenal FC\",\"Inter Milan\",\"Shanghai Greenland Shenhua\",\"Bayern Munich\",\"Borussia Dortmund\",\"Sevilla FC\",\"AC Milan\",\"AS Roma\",\"Real Betis Balompié\",\"West Ham United\",\"Everton FC\",\"Everton FC\",\"Wolverhampton Wanderers\",\"SSC Napoli\",\"Arsenal FC\",\"FC Barcelona\",\"SSC Napoli\",\"Borussia Dortmund\",\"Southampton FC\",\"Atlético de Madrid\",\"Hertha BSC\",\"Sevilla FC\",\"Sevilla FC\",\"Aston Villa\",\"Olympique Lyon\",\"Olympique Lyon\",\"AS Roma\",\"Olympique Lyon\",\"FC Barcelona\",\"Newcastle United\",\"Bayer 04 Leverkusen\",\"FC Porto\",\"AS Roma\",\"Galatasaray A.S.\",\"Leicester City\",\"AS Roma\",\"CSKA Moscow\",\"Sheffield United\",\"SL Benfica\",\"Clube de Regatas do Flamengo\",\"RCD Espanyol Barcelona\",\"LOSC Lille\",\"Inter Milan\",\"Aston Villa\",\"Brighton & Hove Albion\",\"Brighton & Hove Albion\",\"Juventus FC\",\"Eintracht Frankfurt\",\"AS Roma\",\"ACF Fiorentina\",\"AC Milan\",\"West Ham United\",\"AS Roma\",\"Stade Rennais FC\",\"SSC Napoli\",\"OGC Nice\",\"UC Sampdoria\",\"Atlético de Madrid\",\"SL Benfica\",\"Hertha BSC\",\"Dinamo Moscow\",\"LOSC Lille\",\"Sevilla FC\",\"Olympique Lyon\",\"RB Leipzig\",\"TSG 1899 Hoffenheim\",\"SPAL\",\"Arsenal FC\",\"1.FSV Mainz 05\",\"Watford FC\",\"AS Roma\",\"Cagliari Calcio\",\"ACF Fiorentina\",\"Hertha BSC\",\"Newcastle United\",\"AS Roma\",\"Wolverhampton Wanderers\",\"Juventus FC\",\"Sheffield United\",\"Newcastle United\",\"Dalian Professional\",\"Spartak Moscow\",\"AS Monaco\",\"AS Monaco\",\"Hertha BSC\",\"Bayer 04 Leverkusen\",\"FC Barcelona\",\"SSC Napoli\",\"Cagliari Calcio\",\"Ajax Amsterdam\",\"SS Lazio\",\"Wolverhampton Wanderers\",\"Lokomotiv Moscow\",\"ACF Fiorentina\",\"Inter Milan\",\"Wolverhampton Wanderers\",\"Manchester United\",\"LOSC Lille\",\"FC Barcelona\",\"Olympique Lyon\",\"Real Madrid\",\"Sevilla FC\",\"SL Benfica\",\"AS Monaco\",\"Sevilla FC\",\"SSC Napoli\",\"Bayer 04 Leverkusen\",\"Eintracht Frankfurt\",\"ACF Fiorentina\",\"FC Nantes\",\"Aston Villa\",\"Southampton FC\",\"Genoa CFC\",\"AFC Bournemouth\",\"AFC Bournemouth\",\"SSC Napoli\",\"Brighton & Hove Albion\",\"Manchester City\",\"Eintracht Frankfurt\",\"AS Monaco\",\"RB Leipzig\",\"Atalanta BC\",\"Southampton FC\",\"Aston Villa\",\"Bayer 04 Leverkusen\",\"FC Schalke 04\",\"VfL Wolfsburg\",\"AS Monaco\",\"Stade Rennais FC\",\"Sevilla FC\",\"Sevilla FC\",\"Paris Saint-Germain\",\"Ajax Amsterdam\",\"Paris Saint-Germain\",\"AS Monaco\",\"Olympique Marseille\",\"Olympique Marseille\",\"Inter Milan\",\"Everton FC\",\"Genoa CFC\",\"US Sassuolo\",\"Tottenham Hotspur\",\"RB Leipzig\",\"Everton FC\",\"Real Sociedad\",\"Los Angeles Galaxy\",\"Celta de Vigo\",\"Galatasaray A.S.\",\"Clube de Regatas do Flamengo\",\"AFC Bournemouth\",\"UC Sampdoria\",\"SSC Napoli\",\"US Sassuolo\",\"Sevilla FC\",\"Borussia Mönchengladbach\",\"FK Krasnodar\",\"FK Krasnodar\",\"Atalanta BC\",\"AS Monaco\",\"Ajax Amsterdam\",\"Aston Villa\",\"UC Sampdoria\",\"Atalanta BC\",\"Zenit St. Petersburg\",\"Clube de Regatas do Flamengo\",\"RB Leipzig\",\"UD Almería\",\"OGC Nice\",\"TSG 1899 Hoffenheim\",\"RSC Charleroi\",\"ACF Fiorentina\",\"Celta de Vigo\",\"Borussia Mönchengladbach\",\"Sevilla FC\",\"Huddersfield Town\",\"OGC Nice\",\"Liverpool FC\",\"Bologna FC 1909\",\"Montpellier HSC\",\"ACF Fiorentina\",\"AC Milan\",\"Torino FC\",\"RB Leipzig\",\"PSV Eindhoven\",\"Aston Villa\",\"Manchester City\",\"Spartak Moscow\",\"Valencia CF\",\"TSG 1899 Hoffenheim\",\"Olympique Lyon\",\"Manchester United\",\"Aston Villa\",\"FC Schalke 04\",\"Montpellier HSC\",\"TSG 1899 Hoffenheim\",\"TSG 1899 Hoffenheim\",\"Sevilla FC\",\"Real Betis Balompié\",\"Besiktas JK\",\"1. FC Köln\",\"Shenzhen FC\",\"Brighton & Hove Albion\",\"US Sassuolo\",\"AFC Bournemouth\",\"Spartak Moscow\",\"Torino FC\",\"Fulham FC\",\"Standard Liège\",\"Beijing Guoan\",\"Red Bull Salzburg\",\"Sheffield United\",\"Tottenham Hotspur\",\"Sporting CP\",\"SS Lazio\",\"RCD Espanyol Barcelona\",\"FC Girondins Bordeaux\",\"Inter Miami CF\",\"FC Porto\",\"AC Milan\",\"Sevilla FC\",\"SS Lazio\",\"Red Bull Salzburg\",\"Los Angeles FC\",\"ACF Fiorentina\",\"Eintracht Frankfurt\",\"Hertha BSC\",\"Inter Milan\",\"AS Monaco\",\"AS Monaco\",\"AS Monaco\",\"PSV Eindhoven\",\"Aston Villa\",\"AS Monaco\",\"Hertha BSC\",\"RCD Espanyol Barcelona\",\"AS Monaco\",\"Burnley FC\",\"Burnley FC\",\"Torino FC\",\"VfL Wolfsburg\",\"RCD Espanyol Barcelona\",\"Fulham FC\",\"Villarreal CF\",\"RCD Espanyol Barcelona\",\"PSV Eindhoven\",\"LOSC Lille\",\"CA Boca Juniors\",\"Eintracht Frankfurt\",\"US Sassuolo\",\"Fenerbahce SK\",\"Fulham FC\",\"Cagliari Calcio\",\"West Ham United\",\"FC Barcelona\",\"Hellas Verona\",\"Real Betis Balompié\",\"Parma Calcio 1913\",\"OGC Nice\",\"AS Roma\",\"SD Eibar\",\"FC Schalke 04\",\"Crystal Palace\",\"Montpellier HSC\",\"SS Lazio\",\"AS Roma\",\"SV Werder Bremen\",\"SV Werder Bremen\",\"Galatasaray A.S.\",\"RB Leipzig\",\"Genoa CFC\",\"Galatasaray A.S.\",\"Genoa CFC\",\"PSV Eindhoven\",\"Deportivo Guadalajara\",\"Beijing Guoan\",\"Al-Hilal Riyadh\",\"FC Porto\",\"Cagliari Calcio\",\"Aston Villa\",\"Bristol City\",\"Olympique Lyon\",\"Stade Rennais FC\",\"Borussia Mönchengladbach\",\"CF Monterrey\",\"Tigres UANL\",\"VfL Wolfsburg\",\"Los Angeles Galaxy\",\"SSC Napoli\",\"Stade Rennais FC\",\"Bologna FC 1909\",\"SC Freiburg\",\"Club Brugge KV\",\"TSG 1899 Hoffenheim\",\"ACF Fiorentina\",\"Celta de Vigo\",\"West Bromwich Albion\",\"Wolverhampton Wanderers\",\"UD Almería\",\"Aston Villa\",\"Sporting Kansas City\",\"AC Milan\",\"Eintracht Frankfurt\",\"Watford FC\",\"Udinese Calcio\",\"Inter Milan\",\"Trabzonspor\",\"Juventus Primavera\",\"1. FC Köln\",\"Derby County\",\"Juventus U23\",\"Inter Miami CF\",\"Club Brugge KV\",\"RB Leipzig\",\"Bologna FC 1909\",\"Bologna FC 1909\",\"Real Betis Balompié\",\"Olympique Lyon\",\"Celtic FC\",\"Celta de Vigo\",\"Aston Villa\",\"Birmingham City\",\"FC Toulouse\",\"Bristol City\",\"AS Monaco\",\"1.FSV Mainz 05\",\"VfB Stuttgart\",\"FC Nantes\",\"Bologna FC 1909\",\"Bologna FC 1909\",\"Olympique Lyon\",\"Getafe CF\",\"RB Leipzig\",\"1.FSV Mainz 05\",\"Club Brugge KV\",\"RSC Anderlecht\",\"SV Werder Bremen\",\"Bologna FC 1909\",\"FC Girondins Bordeaux\",\"Sport Club Corinthians Paulista\",\"Sporting CP\",\"CD Leganés\",\"RC Strasbourg Alsace\",\"Fulham FC\",\"West Bromwich Albion\",\"Southampton FC\",\"CA River Plate\",\"Crystal Palace\",\"Parma Calcio 1913\",\"Hertha BSC\",\"Celta de Vigo\",\"US Lecce\",\"UC Sampdoria\",\"Real Sociedad\",\"Sheffield United\",\"US Sassuolo\",\"FC Porto\",\"SL Benfica B\",\"Reading FC\",\"FC Augsburg\",\"FC Porto\",\"Villarreal CF\",\"Clube de Regatas do Flamengo\",\"Rubin Kazan\",\"Fortuna Düsseldorf\",\"Sociedade Esportiva Palmeiras\",\"Galatasaray A.S.\",\"Al-Hilal Riyadh\",\"Columbus Crew SC\",\"FC Porto\",\"Rangers FC\",\"Deportivo Guadalajara\",\"Deportivo Guadalajara\",\"CF Monterrey\",\"West Ham United\",\"US Sassuolo\",\"Genoa CFC\",\"Ajax Amsterdam\",\"Hertha BSC\",\"Feyenoord Rotterdam\",\"Genoa CFC\",\"Ajax Amsterdam\",\"Clube de Regatas do Flamengo\",\"KRC Genk\",\"US Sassuolo\",\"Al-Duhail SC\",\"RSC Anderlecht\",\"Al-Ettifaq\",\"Cardiff City\",\"AC Milan\",\"Besiktas JK\",\"Udinese Calcio\",\"ACF Fiorentina\",\"PSV Eindhoven\",\"SV Werder Bremen\",\"FC Schalke 04\",\"Celta de Vigo\",\"Manchester City\",\"CA Boca Juniors\",\"Leicester City\",\"FC Augsburg\",\"Blackburn Rovers\",\"LOSC Lille\",\"Brentford FC\",\"Al-Ahli Jeddah\",\"KRC Genk\",\"Shakhtar Donetsk\",\"New England Revolution\",\"CF América\",\"Sociedade Esportiva Palmeiras\",\"CD Cruz Azul\",\"Brentford FC\",\"Santos FC\",\"Genoa CFC\",\"FC Metz\",\"Amiens SC\",\"Inter Milan\",\"Valencia CF\",\"Watford FC\",\"Bologna FC 1909\",\"Getafe CF\",\"LOSC Lille\",\"Dinamo Moscow\",\"Cardiff City\",\"RSC Anderlecht\",\"KRC Genk\",\"Al-Shabab FC (Riyadh)\",\"Real Sociedad B\",\"Lazio U19\",\"Red Bull Bragantino\",\"Sporting CP\",\"Club Brugge KV\",\"Sociedade Esportiva Palmeiras\",\"Dinamo Moscow\",\"SL Benfica\",\"Levante UD\",\"KRC Genk\",\"AS Saint-Étienne\",\"CD Cruz Azul\",\"Stade Reims\",\"SPAL\",\"Al-Gharafa SC\",\"AS Saint-Étienne\",\"Real Zaragoza\",\"Al-Ahli Jeddah\",\"Inter Miami CF\",\"AS Saint-Étienne\",\"CA San Lorenzo de Almagro\",\"Cagliari Calcio\",\"Standard Liège\",\"Galatasaray A.S.\",\"Atalanta BC\",\"VfB Stuttgart\",\"Besiktas JK\",\"UD Almería\",\"Trabzonspor\",\"Fulham FC\",\"Sheffield United\",\"Fenerbahce SK\",\"Valencia CF\",\"FC Porto\",\"1.FSV Mainz 05\",\"Guangzhou Evergrande Taobao\",\"SCO Angers\",\"Dinamo Moscow\",\"SC Freiburg\",\"West Bromwich Albion\",\"Shanghai SIPG\",\"Inter Miami CF\",\"CD Cruz Azul\",\"Reading FC\",\"Newcastle United\",\"CD Cruz Azul\",\"Shanghai Greenland Shenhua\",\"Al-Ain FC\",\"SS Lazio\",\"Al-Nassr Riad\",\"Jiangsu Suning\",\"Stade Reims\",\"FC Copenhagen\",\"Brescia Calcio\",\"Dalian Professional\",\"Ajax Amsterdam\",\"Red Bull Bragantino\",\"Bayer 04 Leverkusen\",\"Red Bull Salzburg\",\"CD Leganés\",\"Shandong Luneng Taishan\",\"AS Roma\",\"Red Bull Bragantino\",\"Dalian Professional\",\"Dalian Professional\",\"Aston Villa\",\"UC Sampdoria\",\"Besiktas JK\",\"SC Freiburg\",\"Villarreal CF\",\"SPAL\",\"Sporting Gijón\",\"Stade Rennais FC\",\"FC Metz\",\"Standard Liège\",\"FC Toulouse\",\"Crystal Palace\",\"Torino FC\",\"Norwich City\",\"CA Osasuna\",\"Cagliari Calcio\",\"Torino FC\",\"BSC Young Boys\",\"Fenerbahce SK\",\"Sporting CP\",\"Amiens SC\",\"Udinese Calcio\",\"SCO Angers\",\"Villarreal CF\",\"UC Sampdoria\",\"Burnley FC\",\"Sheffield Wednesday\",\"US Sassuolo\",\"Sociedade Esportiva Palmeiras\",\"Newcastle United\",\"SV Werder Bremen\",\"Newcastle United\",\"El Ahly Cairo\",\"AC Milan\",\"Bristol City\",\"West Ham United\",\"US Sassuolo\",\"Atalanta BC\",\"Olimpia Asunción\",\"Olimpia Asunción\",\"D.C. United\",\"Vancouver Whitecaps FC\",\"Real Sociedad\",\"UNAM Pumas\",\"Olympiacos Piraeus\",\"Inter Milan\",\"Sevilla FC\",\"Empoli FC\",\"KAA Gent\",\"São Paulo Futebol Clube\",\"Chicago Fire FC\",\"FC Nantes\",\"Portland Timbers\",\"Club Atlético Independiente\",\"Al-Rayyan SC\",\"Club Brugge KV\",\"Club Brugge KV\",\"1.FC Nuremberg\",\"PAOK Thessaloniki\",\"Getafe CF\",\"Dinamo Moscow\",\"Clube Atlético Mineiro\",\"Club Estudiantes de La Plata\",\"US Lecce\",\"Girona FC\",\"Hannover 96\",\"D.C. United\",\"SV Werder Bremen\",\"1.FSV Mainz 05\",\"Parma Calcio 1913\",\"Spartak Moscow\",\"RCD Mallorca\",\"Club de Regatas Vasco da Gama\",\"HNK Hajduk Split\",\"AFC Bournemouth\",\"Stoke City\",\"CD Cruz Azul\",\"Manchester City U23\",\"AS Roma\",\"Dinamo Moscow\",\"New England Revolution\",\"Bologna FC 1909\",\"Norwich City\",\"Sport Club Corinthians Paulista\",\"Shenzhen FC\",\"Atlético de Madrid\",\"Juventus U23\",\"Empoli FC\",\"Levante UD\",\"Eintracht Frankfurt\",\"1. FC Köln\",\"FC Augsburg\",\"Genoa CFC\",\"Parma Calcio 1913\",\"FC Sion\",\"FC Augsburg\",\"SK Slavia Prague\",\"SD Eibar\",\"Spartak Moscow\",\"Eintracht Frankfurt\",\"LOSC Lille\",\"Spartak Moscow\",\"Club Atlético Independiente\",\"Nîmes Olympique\",\"EA Guingamp\",\"OGC Nice\",\"FC Sochi\",\"Shakhtar Donetsk\",\"Celtic FC\",\"KAA Gent\",\"Jiangsu Suning\",\"Feyenoord Rotterdam\",\"Atalanta BC\",\"Club Libertad Asunción\",\"Stade Reims\",\"Shandong Luneng Taishan\",\"Levante UD\",\"SSC Napoli\",\"Olympiacos Piraeus\",\"FC Porto\",\"Bayern Munich\",\"Spartak Moscow\",\"FC Sochi\",\"Royal Antwerp FC\",\"FK Krasnodar\",\"Al-Gharafa SC\",\"Istanbul Basaksehir FK\",\"Al-Nasr (Dubai)\",\"Amiens SC\",\"Deportivo Alavés\",\"CA Vélez Sarsfield\",\"Lokomotiv Moscow\",\"Deportivo Alavés\",\"Racing Club\",\"Nottingham Forest\",\"Montpellier HSC\",\"Arsenal Tula\",\"Deportivo Alavés\",\"Brescia Calcio\",\"AS Saint-Étienne\",\"SD Eibar\",\"Levante UD\",\"FC Augsburg\",\"Chicago Fire FC\",\"Al-Wahda FC Abu Dhabi\",\"Qatar SC\",\"Inter Milan\",\"Ajax Amsterdam\",\"FC Lorient\",\"Red Star Belgrade\",\"RC Strasbourg Alsace\",\"Stade Reims\",\"West Bromwich Albion\",\"Esporte Clube Bahia\",\"UD Almería\",\"FC Utrecht\",\"Sport Club Corinthians Paulista\",\"Dijon FCO\",\"Hellas Verona\",\"CA Newell's Old Boys\",\"Trabzonspor\",\"Shijiazhuang Ever Bright\",\"Brighton & Hove Albion\",\"Sheffield United\",\"Juventus U23\",\"Club Brugge KV\",\"KRC Genk\",\"Al-Ahli Jeddah\",\"Brentford FC\",\"Bristol City\",\"UNAM Pumas\",\"Hellas Verona\",\"Chievo Verona\",\"Brescia Calcio\",\"CA River Plate\",\"Al-Ittihad Jeddah\",\"Bologna FC 1909\",\"UC Sampdoria\",\"KRC Genk\",\"UC Sampdoria\",\"FC Copenhagen\",\"Deportivo Guadalajara\",\"Clube Atlético Mineiro\",\"Hellas Verona\",\"VfL Wolfsburg\",\"Brentford FC\",\"SV Werder Bremen\",\"Club Necaxa\",\"CA Osasuna\",\"KRC Genk\",\"PAOK Thessaloniki\",\"Juventus U23\",\"SC Braga\",\"Juventus U23\",\"Dijon FCO\",\"UNAM Pumas\",\"Clube Atlético Mineiro\",\"Celtic FC\",\"Racing Club\",\"Zenit St. Petersburg\",\"CA Boca Juniors\",\"Montpellier HSC\",\"FC Midtjylland\",\"FC Augsburg\",\"Rubin Kazan\",\"RCD Mallorca\",\"Nottingham Forest\",\"Seattle Sounders FC\",\"Hamburger SV\",\"CSKA Moscow\",\"FC Augsburg\",\"Nîmes Olympique\",\"AEK Athens\",\"CF América\",\"Club Athletico Paranaense\",\"CSD Colo Colo\",\"Norwich City\",\"Swansea City\",\"KRC Genk\",\"SPAL\",\"SG Dynamo Dresden\",\"Rubin Kazan\",\"Standard Liège\",\"Aston Villa\",\"Brentford FC\",\"Brentford FC\",\"SD Eibar\",\"Al-Ittihad Jeddah\",\"FC Barcelona B\",\"Red Star Belgrade\",\"West Bromwich Albion\",\"Al-Rayyan SC\",\"Standard Liège\",\"FC Sion\",\"Parma Primavera\",\"Atlas Guadalajara\",\"Granada CF\",\"Parma Calcio 1913\",\"Ajax Amsterdam U17\",\"Hamburger SV\",\"SD Eibar\",\"FK Krasnodar\",\"FC Metz\",\"Olympiacos Piraeus\",\"SPAL\",\"Spartak 2 Moscow\",\"US Sassuolo\",\"SPAL\",\"LOSC Lille\",\"PAOK Thessaloniki\",\"Sporting CP\",\"FC Midtjylland\",\"São Paulo Futebol Clube\",\"FC Sochi\",\"SD Eibar\",\"Rayo Vallecano\",\"Club Necaxa\",\"Granada CF\",\"FC Nantes\",\"Sharjah Cultural Sports Club\",\"West Ham United U23\",\"Amiens SC\",\"SCO Angers\",\"Brentford FC\",\"Club Brugge KV\",\"GNK Dinamo Zagreb\",\"Stade Reims\",\"Al-Ahli Jeddah\",\"1.FC Heidenheim 1846\",\"VfB Stuttgart\",\"Manchester City U23\",\"Getafe CF\",\"Red Bull Bragantino\",\"FC Copenhagen\",\"Chicago Fire FC\",\"Portland Timbers\",\"CD Leganés\",\"Deportivo Toluca\",\"1.FC Union Berlin\",\"Fenerbahce SK\",\"Real Madrid\",\"CA River Plate\",\"Bristol City\",\"US Sassuolo\",\"Valencia CF\",\"FK Krasnodar\",\"PSV Eindhoven\",\"Dijon FCO\",\"Club Atlético Independiente\",\"CA San Lorenzo de Almagro\",\"Gamba Osaka\",\"AC Sparta Prague\",\"Shimizu S-Pulse\",\"UNAM Pumas\",\"TSG 1899 Hoffenheim\",\"RC Strasbourg Alsace\",\"BSC Young Boys\",\"Genoa CFC\",\"Sharjah Cultural Sports Club\",\"ACF Fiorentina\",\"Al-Arabi SC\",\"Ajax Amsterdam\",\"FC Augsburg\",\"Genoa CFC\",\"Kairat Almaty\",\"Cardiff City\",\"Fortuna Düsseldorf\",\"Dinamo Moscow\",\"Clube de Regatas do Flamengo\",\"UD Almería\",\"Norwich City\",\"Eintracht Frankfurt\",\"FK Krasnodar\",\"AA Argentinos Juniors\",\"Inter Miami CF\",\"SK Sturm Graz\",\"Parma Calcio 1913\",\"Juventus U23\",\"Red Bull Bragantino\",\"Juventus U23\",\"Pescara Primavera\",\"Kayserispor\",\"Parma Calcio 1913\",\"Fortuna Düsseldorf\",\"Brescia Calcio\",\"Santos Laguna\",\"CF Monterrey\",\"Lokomotiv Moscow\",\"Clube Atlético Mineiro\",\"Burnley FC\",\"CA Rosario Central\",\"Los Angeles FC\",\"Bologna FC 1909\",\"Juventus U23\",\"Red Bull Salzburg\",\"Hertha BSC\",\"Wigan Athletic\",\"Wigan Athletic\",\"Nashville SC\",\"Urawa Red Diamonds\",\"Sport Club Corinthians Paulista\",\"UNAM Pumas\",\"Fortuna Düsseldorf\",\"FC Copenhagen\",\"Clube Atlético Mineiro\",\"Shenzhen FC\",\"Shenzhen FC\",\"Shanghai Greenland Shenhua\",\"Dalian Professional Reserve\",\"Dalian Professional Reserve\",\"Shanghai Greenland Shenhua\",\"Dalian Professional\",\"Juventus U23\",\"Shanghai SIPG\",\"IFK Norrköping\",\"Dalian Professional\",\"Beijing Guoan\",\"Beijing Guoan Reserves\",\"Parma Calcio 1913\",\"Shenzhen FC Reserves\",\"UC Sampdoria\",\"Hellas Verona\",\"Olympiacos Piraeus\",\"FC Schalke 04\",\"SC Freiburg\",\"VfB Stuttgart\",\"Red Bull Salzburg\",\"Santos Laguna\",\"SL Benfica\",\"Lokomotiv Moscow\",\"Al-Ittihad Kalba SC\",\"CA Osasuna\",\"Rayo Vallecano\",\"Dynamo Kyiv\",\"1.FC Nuremberg\",\"Girona FC\",\"FC Toulouse\",\"Empoli FC\",\"Hamburger SV\",\"Genoa CFC\",\"AZ Alkmaar\",\"KRC Genk\",\"Benevento Calcio\",\"CA San Lorenzo de Almagro\",\"Atalanta BC\",\"RSC Anderlecht\",\"US Lecce\",\"Amiens SC\",\"Stade Brestois 29\",\"FK Partizan Belgrade\",\"Wuhan Zall\",\"Al-Wahda FC Abu Dhabi\",\"Atlético de San Luis\",\"VfB Stuttgart\",\"Hamburger SV\",\"Olympiacos Piraeus\",\"Vitesse Arnhem\",\"Colorado Rapids\",\"CA Vélez Sarsfield\",\"Racing Club\",\"Rubin Kazan\",\"CD Leganés\",\"Caykur Rizespor\",\"Nashville SC\",\"CA San Lorenzo de Almagro\",\"Rubin Kazan\",\"Nîmes Olympique\",\"Zenit St. Petersburg\",\"Fluminense Football Club\",\"Al-Shabab FC (Riyadh)\",\"AC Le Havre\",\"Dijon FCO\",\"AEK Athens\",\"Al-Wasl Sports Club\",\"Cagliari Calcio\",\"Rapid Vienna\",\"Fortuna Düsseldorf\",\"Nottingham Forest\",\"Girona FC\",\"Sport Club Internacional\",\"CA Osasuna\",\"CA Rosario Central\",\"Gaziantep FK\",\"Empoli FC\",\"CA Osasuna\",\"CA Boca Juniors\",\"Sivasspor\",\"Hellas Verona\",\"Hannover 96\",\"Hamburger SV\",\"Al-Ittihad Jeddah\",\"Al-Ittihad Jeddah\",\"Besiktas JK\",\"Club Athletico Paranaense\",\"Inter Milan Primavera\",\"Cardiff City\",\"Delfino Pescara 1936\",\"San Jose Earthquakes\",\"CF América\",\"Celtic FC\",\"New York City FC\",\"Deportivo Guadalajara\",\"Los Angeles FC\",\"Stoke City\",\"CD Cruz Azul\",\"Racing Club\",\"Brentford FC\",\"Al-Ettifaq\",\"FC Shabab Al-Ahli Dubai\",\"FC Sion\",\"Club Atlético Talleres\",\"CA Colon\",\"Racing Club\",\"Club Atlético Lanús\",\"D.C. United\",\"Deportivo Alavés\",\"Standard Liège\",\"RCD Mallorca\",\"Bristol City\",\"Wigan Athletic\",\"Cardiff City\",\"Preston North End\",\"Middlesbrough FC\",\"Nottingham Forest\",\"Cardiff City\",\"Portimonense SC\",\"Red Star Belgrade\",\"FC Copenhagen\",\"Hellas Verona\",\"RSC Charleroi\",\"Bologna FC 1909\",\"SS Lazio\",\"Hellas Verona\",\"Olympique Lyon\",\"Rangers FC\",\"Albacete Balompié\",\"Amiens SC\",\"CA Osasuna\",\"Sport Club Corinthians Paulista\",\"1. FC Köln\",\"BSC Young Boys\",\"SC Freiburg\",\"1.FC Union Berlin\",\"Beitar Jerusalem\",\"Red Bull Salzburg\",\"Delfino Pescara 1936\",\"Deportivo Alavés\",\"FC Copenhagen\",\"Hamburger SV\",\"FC Sochi\",\"RC Strasbourg Alsace\",\"Club Necaxa\",\"FC Girondins Bordeaux\",\"SC Heerenveen\",\"Stade Brestois 29\",\"Cagliari Calcio\",\"LOSC Lille B\",\"Al-Wahda Mekka\",\"Brentford FC\",\"Ferencvárosi TC\",\"Dynamo Kyiv\",\"Al-Nasr (Dubai)\",\"Nîmes Olympique\",\"Bristol City\",\"Minnesota United FC\",\"CA Osasuna\",\"Zenit St. Petersburg\",\"AZ Alkmaar\",\"AZ Alkmaar\",\"SM Caen\",\"Stade Brestois 29\",\"Puebla FC\",\"Al-Faisaly Harmah\",\"El Ahly Cairo\",\"FC Barcelona B\",\"Udinese Calcio\",\"LOSC Lille\",\"RC Strasbourg Alsace\",\"GNK Dinamo Zagreb\",\"FC Astana\",\"Vancouver Whitecaps FC\",\"Liverpool FC\",\"Standard Liège\",\"Club Athletico Paranaense\",\"CF América\",\"FC Lorient\",\"RC Lens\",\"RCD Espanyol Barcelona\",\"Hebei China Fortune\",\"CA Rosario Central\",\"RSC Anderlecht\",\"MOL Fehérvár FC\",\"Grêmio Foot-Ball Porto Alegrense\",\"CA Osasuna\",\"Deportivo Alavés\",\"CD Leganés\",\"Dijon FCO\",\"SG Dynamo Dresden\",\"HNK Rijeka\",\"Millwall FC\",\"Legia Warszawa\",\"FC Sochi\",\"Birmingham City\",\"Red Star Belgrade\",\"Bröndby IF\",\"São Paulo Futebol Clube\",\"Nottingham Forest\",\"Deportivo Cali\",\"Al-Ittihad Jeddah\",\"Kayserispor\",\"Pyramids FC\",\"Hannover 96\",\"1.FC Union Berlin\",\"Nottingham Forest\",\"Amiens SC\",\"Jagiellonia Bialystok\",\"RC Lens\",\"UD Almería\",\"Ural Yekaterinburg\",\"VfB Stuttgart\",\"GNK Dinamo Zagreb II\",\"US Sassuolo\",\"US Salernitana 1919\",\"Galatasaray A.S.\",\"Spezia Calcio\",\"Clube Atlético Mineiro\",\"Zamalek SC\",\"CD Cruz Azul\",\"Philadelphia Union\",\"Orlando City SC\",\"Shenzhen FC Reserves\",\"Sassuolo Primavera\",\"Legia Warszawa\",\"Vancouver Whitecaps FC\",\"Clube Atlético Mineiro\",\"Juventus Primavera\",\"Parma Calcio 1913\",\"Brescia Calcio\",\"Al-Duhail SC\",\"Qatar SC\",\"Santos Laguna\",\"Celtic FC\",\"Juventus U23\",\"Deportivo Guadalajara\",\"Yokohama F. Marinos\",\"CF Monterrey\",\"Club Tijuana\",\"Querétaro FC\",\"Standard Liège\",\"Rapid Vienna\",\"New York City FC\",\"Brescia Calcio\",\"Virtus Entella\",\"Cercle Brugge\",\"Krylya Sovetov Samara\",\"MKE Ankaragücü\",\"CA San Lorenzo de Almagro\",\"SC Heerenveen\",\"CA Vélez Sarsfield\",\"Club Atlético Independiente\",\"Club Tijuana\",\"Deportivo Toluca\",\"Moreirense FC\",\"Hull City\",\"CD Godoy Cruz Antonio Tomba\",\"Stade Reims\",\"Rio Ave FC\",\"AS Saint-Étienne\",\"Columbus Crew SC\",\"Jagiellonia Bialystok\",\"CA Rosario Central\",\"Spezia Calcio\",\"Dalian Professional\",\"VfB Stuttgart\",\"FC Basel 1893\",\"ACF Fiorentina\",\"FC Augsburg\",\"Clube de Regatas do Flamengo\",\"Luton Town\",\"West Bromwich Albion\",\"Liverpool FC U23\",\"Portsmouth FC\",\"Konyaspor\",\"CD Cruz Azul\",\"FC Juárez\",\"Sint-Truidense VV\",\"Göztepe\",\"SV Zulte Waregem\",\"Chicago Fire FC\",\"Spezia Calcio\",\"Paris Saint-Germain\",\"Juventus FC\",\"Chelsea FC\",\"Atlético de Madrid\",\"Manchester City\",\"Liverpool FC\",\"Real Madrid\",\"Chelsea FC\",\"Liverpool FC\",\"Manchester United\",\"Chelsea FC\",\"Juventus FC\",\"AC Milan\",\"Atlético de Madrid\",\"Chelsea FC\",\"Real Madrid\",\"Liverpool FC\",\"FC Barcelona\",\"Inter Milan\",\"AS Roma\",\"Guangzhou Evergrande Taobao\",\"Juventus FC\",\"Valencia CF\",\"Paris Saint-Germain\",\"Guangzhou Evergrande Taobao\",\"AC Milan\",\"Valencia CF\",\"Everton FC\",\"AC Milan\",\"West Ham United\",\"Paris Saint-Germain\",\"AC Milan\",\"FC Barcelona\",\"Juventus FC\",\"AC Milan\",\"Al-Duhail SC\",\"Atlético de Madrid\",\"FC Barcelona\",\"FC Barcelona\",\"Everton FC\",\"SSC Napoli\",\"Real Madrid\",\"Fulham FC\",\"AS Monaco\",\"Arsenal FC\",\"AS Roma\",\"Valencia CF\",\"Dalian Yifang\",\"Inter Milan\",\"Real Betis Balompié\",\"Crystal Palace\",\"Tianjin Tianhai (-2019)\",\"Borussia Dortmund\",\"AFC Bournemouth\",\"Olympique Marseille\",\"Inter Milan\",\"West Ham United\",\"Arsenal FC\",\"Leicester City\",\"Southampton FC\",\"SSC Napoli\",\"Atlético de Madrid\",\"Guangzhou Evergrande Taobao\",\"Bayer 04 Leverkusen\",\"Real Betis Balompié\",\"Atalanta BC\",\"AS Monaco\",\"Olympique Lyon\",\"Inter Milan\",\"AS Roma\",\"Fulham FC\",\"AS Roma\",\"Fulham FC\",\"Athletic Bilbao\",\"Newcastle United\",\"Sevilla FC\",\"Borussia Mönchengladbach\",\"West Ham United\",\"AC Milan\",\"Manchester United\",\"Leicester City\",\"Olympique Lyon\",\"Real Madrid\",\"Guangzhou Evergrande Taobao\",\"Inter Milan\",\"Sevilla FC\",\"Torino FC\",\"AC Milan\",\"AFC Bournemouth\",\"Leicester City\",\"Wolverhampton Wanderers\",\"Everton FC\",\"Borussia Dortmund\",\"Borussia Dortmund\",\"AS Monaco\",\"AS Monaco\",\"Udinese Calcio\",\"Borussia Dortmund\",\"Wolverhampton Wanderers\",\"AS Monaco\",\"RB Leipzig\",\"UC Sampdoria\",\"Arsenal FC\",\"Valencia CF\",\"Atlanta United FC\",\"Atalanta BC\",\"Olympique Marseille\",\"Brighton & Hove Albion\",\"AC Milan\",\"Villarreal CF\",\"Wolverhampton Wanderers\",\"Southampton FC\",\"Ajax Amsterdam\",\"Liverpool FC\",\"Atlético de Madrid\",\"ACF Fiorentina\",\"FC Schalke 04\",\"Guangzhou R&F\",\"Lokomotiv Moscow\",\"Fenerbahce SK\",\"SS Lazio\",\"AS Roma\",\"Real Madrid\",\"Cardiff City\",\"Wolverhampton Wanderers\",\"Burnley FC\",\"Fulham FC\",\"Al-Nassr Riad\",\"RB Leipzig\",\"FC Schalke 04\",\"Juventus FC\",\"Olympique Marseille\",\"Borussia Dortmund\",\"AS Roma\",\"Nottingham Forest\",\"RB Leipzig\",\"Valencia CF\",\"AFC Bournemouth\",\"Zenit St. Petersburg\",\"Shakhtar Donetsk\",\"Ajax Amsterdam\",\"Sevilla FC\",\"SV Werder Bremen\",\"Valencia CF\",\"AS Monaco\",\"Al-Duhail SC\",\"Everton FC\",\"Shandong Luneng Taishan\",\"Valencia CF\",\"Leicester City\",\"Wolverhampton Wanderers\",\"Everton FC\",\"Borussia Dortmund\",\"Fenerbahce SK\",\"FC Barcelona\",\"ACF Fiorentina\",\"Galatasaray A.S.\",\"Inter Milan\",\"Fulham FC\",\"Villarreal CF\",\"CF Monterrey\",\"Leicester City\",\"Atlético de Madrid\",\"Sevilla FC\",\"Wolverhampton Wanderers\",\"Leicester City\",\"AS Monaco\",\"Leicester City\",\"Real Betis Balompié\",\"CF Monterrey\",\"Watford FC\",\"Lokomotiv Moscow\",\"AFC Bournemouth\",\"Stoke City\",\"Galatasaray A.S.\",\"ACF Fiorentina\",\"Newcastle United\",\"Besiktas JK\",\"Burnley FC\",\"Torino FC\",\"Bayer 04 Leverkusen\",\"Wolverhampton Wanderers\",\"RB Leipzig\",\"Real Sociedad\",\"Clube de Regatas do Flamengo\",\"SSC Napoli\",\"US Sassuolo\",\"Al-Ahli Jeddah\",\"Olympique Marseille\",\"FC Barcelona\",\"Zenit St. Petersburg\",\"Crystal Palace\",\"Al-Nassr Riad\",\"Atlético de Madrid\",\"Paris Saint-Germain\",\"1.FSV Mainz 05\",\"Besiktas JK\",\"Arsenal FC\",\"Sevilla FC\",\"UC Sampdoria\",\"Torino FC\",\"Wolverhampton Wanderers\",\"Cardiff City\",\"CD Cruz Azul\",\"Cardiff City\",\"AFC Bournemouth\",\"Southampton FC\",\"VfB Stuttgart\",\"Stoke City\",\"Genoa CFC\",\"FC Schalke 04\",\"AS Monaco\",\"VfB Stuttgart\",\"Dalian Yifang\",\"RCD Espanyol Barcelona\",\"Torino FC\",\"Newcastle United\",\"CF Pachuca\",\"CD Cruz Azul\",\"Hertha BSC\",\"VfL Wolfsburg\",\"Celtic FC\",\"Al-Ahli Jeddah\",\"SS Lazio\",\"OGC Nice\",\"FC Schalke 04\",\"VfL Wolfsburg\",\"Brighton & Hove Albion\",\"RCD Espanyol Barcelona\",\"AS Monaco\",\"Getafe CF\",\"Villarreal CF\",\"Huddersfield Town\",\"US Sassuolo\",\"Bayern Munich\",\"OGC Nice\",\"Olympique Lyon\",\"Villarreal CF\",\"Al-Ittihad Jeddah\",\"Zenit St. Petersburg\",\"Al-Ahli Jeddah\",\"SL Benfica\",\"VfB Stuttgart\",\"Villarreal CF\",\"Tigres UANL\",\"SS Lazio\",\"Newcastle United\",\"AS Saint-Étienne\",\"Villarreal CF\",\"Wolverhampton Wanderers\",\"Borussia Dortmund\",\"Eintracht Frankfurt\",\"Burnley FC\",\"Torino FC\",\"Parma Calcio 1913\",\"West Bromwich Albion\",\"Hannover 96\",\"UC Sampdoria\",\"Galatasaray A.S.\",\"Eintracht Frankfurt\",\"VfB Stuttgart\",\"Eintracht Frankfurt\",\"Hannover 96\",\"ACF Fiorentina\",\"AS Roma\",\"Shandong Luneng Taishan\",\"Sevilla FC\",\"Portland Timbers\",\"Clube de Regatas do Flamengo\",\"ACF Fiorentina\",\"Stade Rennais FC\",\"Bologna FC 1909\",\"Empoli FC\",\"AS Roma\",\"Ajax Amsterdam\",\"FC Schalke 04\",\"Al-Ittihad Jeddah\",\"Clube de Regatas do Flamengo\",\"AS Saint-Étienne\",\"Shanghai Greenland Shenhua\",\"Lokomotiv Moscow\",\"CA River Plate\",\"SPAL\",\"UC Sampdoria\",\"Levante UD\",\"Tigres UANL\",\"Real Madrid\",\"CF América\",\"Al-Nassr Riad\",\"FC Girondins Bordeaux\",\"TSG 1899 Hoffenheim\",\"FC Basel 1893\",\"Ajax Amsterdam\",\"FC Nantes\",\"Brighton & Hove Albion\",\"Toronto FC\",\"Spartak Moscow\",\"West Ham United\",\"Middlesbrough FC\",\"1.FSV Mainz 05\",\"Arsenal FC\",\"FK Krasnodar\",\"Udinese Calcio\",\"Valencia CF\",\"Celta de Vigo\",\"Red Bull Salzburg\",\"RSC Anderlecht\",\"Brighton & Hove Albion\",\"Stoke City\",\"New York City FC\",\"US Sassuolo\",\"FC Porto\",\"Brighton & Hove Albion\",\"Stoke City\",\"Newcastle United\",\"Torino FC\",\"Shenzhen FC\",\"VfB Stuttgart\",\"VfL Wolfsburg\",\"Tianjin Teda\",\"Real Madrid\",\"Atalanta BC\",\"São Paulo Futebol Clube\",\"ACF Fiorentina\",\"FC Barcelona\",\"FC Barcelona\",\"Eintracht Frankfurt\",\"Clube de Regatas do Flamengo\",\"Sevilla FC\",\"Southampton FC\",\"Leeds United\",\"SL Benfica\",\"Middlesbrough FC\",\"Juventus FC\",\"SS Lazio\",\"1.FSV Mainz 05\",\"CA Boca Juniors\",\"VfL Wolfsburg\",\"Udinese Calcio\",\"AS Roma\",\"Celta de Vigo\",\"PSV Eindhoven\",\"TSG 1899 Hoffenheim\",\"West Ham United\",\"SC Freiburg\",\"Levante UD\",\"Cagliari Calcio\",\"Torino FC\",\"Atalanta BC\",\"US Sassuolo\",\"West Bromwich Albion\",\"Stoke City\",\"Stoke City\",\"AS Monaco\",\"CF América\",\"UC Sampdoria\",\"Celta de Vigo\",\"Atalanta BC\",\"Bologna FC 1909\",\"Olympiacos Piraeus\",\"Al-Ittihad Jeddah\",\"Spartak Moscow\",\"Al-Ittihad Jeddah\",\"FC Porto\",\"ACF Fiorentina\",\"Inter Milan\",\"Huddersfield Town\",\"Sevilla FC\",\"Cagliari Calcio\",\"Jiangsu Suning\",\"AC Milan\",\"Eintracht Frankfurt\",\"Watford FC\",\"Aston Villa\",\"FC Toulouse\",\"Dijon FCO\",\"Genoa CFC\",\"Newcastle United\",\"El Ahly Cairo\",\"ACF Fiorentina\",\"Genoa CFC\",\"FC Augsburg\",\"West Bromwich Albion\",\"Nottingham Forest\",\"CD Cruz Azul\",\"Fulham FC\",\"Shakhtar Donetsk\",\"Sporting CP\",\"Bologna FC 1909\",\"Dynamo Kyiv\",\"Aston Villa\",\"Fortuna Düsseldorf\",\"Parma Calcio 1913\",\"Seattle Sounders FC\",\"Genoa CFC\",\"Manchester City\",\"Levante UD\",\"Santos Laguna\",\"Inter Milan\",\"VfB Stuttgart\",\"TSG 1899 Hoffenheim\",\"Ajax Amsterdam\",\"FK Krasnodar\",\"Brighton & Hove Albion\",\"Hannover 96\",\"Roma Primavera\",\"Genoa CFC\",\"Sevilla FC\",\"1.FSV Mainz 05\",\"AS Monaco\",\"Hebei China Fortune\",\"Sharjah Cultural Sports Club\",\"Deportivo de La Coruña\",\"Fulham FC\",\"FC Schalke 04\",\"CD Leganés\",\"Al-Hilal Riyadh\",\"Al-Nassr Riad\",\"São Paulo Futebol Clube\",\"Shakhtar Donetsk\",\"Pyramids FC\",\"Real Betis Balompié\",\"Wuhan Zall\",\"Los Angeles FC\",\"Pyramids FC\",\"OGC Nice\",\"FC Toulouse\",\"FC Porto\",\"FC Basel 1893\",\"Al-Hilal Riyadh\",\"Stade Reims\",\"Levante UD\",\"Dynamo Kyiv\",\"Fenerbahce SK\",\"Galatasaray A.S.\",\"Al-Hilal Riyadh\",\"RCD Espanyol Barcelona\",\"Rayo Vallecano\",\"LOSC Lille\",\"Rayo Vallecano\",\"Eintracht Frankfurt\",\"SC Freiburg\",\"RSC Anderlecht\",\"KAA Gent\",\"Frosinone Calcio\",\"Sport Club Corinthians Paulista\",\"CD Cruz Azul\",\"Cagliari Calcio\",\"Torino FC\",\"Borussia Mönchengladbach\",\"Middlesbrough FC\",\"Stoke City\",\"Derby County\",\"TSG 1899 Hoffenheim\",\"PSV Eindhoven\",\"Shakhtar Donetsk\",\"PSV Eindhoven\",\"Eintracht Frankfurt\",\"Sevilla FC\",\"Sociedade Esportiva Palmeiras\",\"Clube de Regatas do Flamengo\",\"Beijing Guoan\",\"FC Girondins Bordeaux\",\"Galatasaray A.S.\",\"SL Benfica\",\"SPAL\",\"Club Atlético Independiente\",\"Hebei China Fortune\",\"Deportivo Guadalajara\",\"Beijing Guoan\",\"CF América\",\"FC Porto\",\"Henan Jianye\",\"CF Monterrey\",\"Clube Atlético Mineiro\",\"CA Boca Juniors\",\"UC Sampdoria\",\"Blackburn Rovers\",\"Benevento Calcio\",\"Udinese Calcio\",\"Huddersfield Town\",\"SC Freiburg\",\"Urawa Red Diamonds\",\"CD Leganés\",\"Al-Wahda Mekka\",\"Inter Milan\",\"Atalanta BC\",\"Al-Nassr Riad\",\"Girona FC\",\"Pyramids FC\",\"Girona FC\",\"US Sassuolo\",\"Atalanta BC\",\"LOSC Lille\",\"Juventus FC\",\"Dynamo Kyiv\",\"US Sassuolo\",\"FC Barcelona B\",\"Getafe CF\",\"CA Boca Juniors\",\"Celta de Vigo\",\"Genoa CFC\",\"Club Brugge KV\",\"Olympique Lyon\",\"Cruzeiro Esporte Clube\",\"Al-Ahli Jeddah\",\"Valencia CF\",\"Genoa CFC\",\"São Paulo Futebol Clube\",\"Sporting CP\",\"Rayo Vallecano\",\"CD Cruz Azul\",\"Deportivo Alavés\",\"FC Toulouse\",\"Wolverhampton Wanderers\",\"Villarreal CF\",\"West Ham United\",\"Athletic Bilbao\",\"TSG 1899 Hoffenheim\",\"Fenerbahce SK\",\"AS Monaco\",\"RSC Anderlecht\",\"Sporting CP\",\"1.FC Nuremberg\",\"ACF Fiorentina\",\"Huddersfield Town\",\"Racing Club\",\"Chievo Verona\",\"Aston Villa\",\"Fulham FC\",\"Al-Nassr Riad\",\"Spartak Moscow\",\"Atlético de Madrid\",\"Club Atlético Independiente\",\"Rayo Vallecano\",\"Hertha BSC\",\"Santos FC\",\"ACF Fiorentina\",\"UC Sampdoria\",\"1.FC Nuremberg\",\"Udinese Calcio\",\"Fenerbahce SK\",\"Deportivo Guadalajara\",\"Dynamo Kyiv\",\"FC Barcelona B\",\"Guangzhou Evergrande Taobao\",\"SV Werder Bremen\",\"Guangzhou R&F\",\"Sporting CP\",\"Genoa CFC\",\"Hannover 96\",\"Borussia Mönchengladbach\",\"AS Roma\",\"Bologna FC 1909\",\"West Bromwich Albion\",\"Brighton & Hove Albion\",\"Sheffield United\",\"1. FC Köln\",\"Real Betis Balompié\",\"SC Freiburg\",\"Al-Ittihad Jeddah\",\"FK Krasnodar\",\"FK Krasnodar\",\"RC Strasbourg Alsace\",\"PAOK Thessaloniki\",\"VfL Wolfsburg\",\"KAA Gent\",\"RB Leipzig\",\"UC Sampdoria\",\"Club Brugge KV\",\"Red Star Belgrade\",\"Olympiacos Piraeus\",\"SV Werder Bremen\",\"Atalanta BC\",\"Guangzhou R&F\",\"Pyramids FC\",\"El Ahly Cairo\",\"Santos Laguna\",\"Genoa CFC\",\"Al-Ittihad Jeddah\",\"Atalanta BC\",\"Besiktas JK\",\"ACF Fiorentina\",\"SPAL\",\"Newcastle United\",\"FC Porto\",\"Al-Wahda Mekka\",\"Cardiff City\",\"Stade Reims\",\"AS Roma\",\"SSC Napoli\",\"Pyramids FC\",\"Cardiff City\",\"Bristol City\",\"Udinese Calcio\",\"Fulham FC\",\"Stade Rennais FC\",\"Newcastle United\",\"SD Eibar\",\"Getafe CF\",\"Amiens SC\",\"RC Strasbourg Alsace\",\"CSKA Moscow\",\"CSKA Moscow\",\"Dynamo Kyiv\",\"Sociedade Esportiva Palmeiras\",\"KRC Genk\",\"Galatasaray A.S.\",\"Juventus U23\",\"CF Monterrey\",\"Cagliari Calcio\",\"Dijon FCO\",\"Shenzhen FC\",\"Club Tijuana\",\"Genoa CFC\",\"1. FC Köln\",\"Club Brugge KV\",\"Sociedade Esportiva Palmeiras\",\"Santos Laguna\",\"SC Braga\",\"SM Caen\",\"Getafe CF\",\"FC Nantes\",\"Montpellier HSC\",\"Deportivo Toluca\",\"1. FC Köln\",\"Al-Ittihad Jeddah\",\"Al-Ahli Jeddah\",\"Chievo Verona\",\"RSC Anderlecht\",\"Standard Liège\",\"Göztepe\",\"Racing Club\",\"Fulham FC\",\"Red Star Belgrade\",\"SL Benfica\",\"Torino FC\",\"RCD Espanyol Barcelona\",\"Konyaspor\",\"CD Leganés\",\"Alanyaspor\",\"Chievo Verona\",\"Reading FC\",\"ACF Fiorentina\",\"FC Girondins Bordeaux\",\"Sporting CP\",\"New York City FC\",\"Club Atlético Independiente\",\"Nottingham Forest\",\"RSC Anderlecht\",\"Atalanta BC\",\"ACF Fiorentina\",\"Al-Hilal Riyadh\",\"Brighton & Hove Albion\",\"Deportivo Guadalajara\",\"Pyramids FC\",\"CD Cruz Azul\",\"PAOK Thessaloniki\",\"Eintracht Frankfurt\",\"ACF Fiorentina\",\"1.FSV Mainz 05\",\"Stade Reims\",\"Sociedade Esportiva Palmeiras\",\"CD Cruz Azul\",\"Club Necaxa\",\"CD Cruz Azul\",\"Santos FC\",\"CA Boca Juniors\",\"Celta de Vigo\",\"Alanyaspor\",\"Shakhtar Donetsk\",\"SPAL\",\"FC Schalke 04\",\"CA Boca Juniors\",\"FC Metz\",\"Club Brugge KV\",\"Stade Reims\",\"Olympiacos Piraeus\",\"FC Toulouse\",\"Al-Ittihad Jeddah\",\"Standard Liège\",\"Getafe CF\",\"Galatasaray A.S.\",\"FC Toulouse\",\"SD Huesca\",\"Huddersfield Town\",\"AZ Alkmaar\",\"Kasimpasa\",\"ESTAC Troyes\",\"Sociedade Esportiva Palmeiras\",\"RCD Espanyol Barcelona\",\"AEK Athens\",\"Club Atlético Huracán\",\"Cagliari Calcio\",\"SC Braga\",\"Santos Laguna\",\"Besiktas JK\",\"CD Leganés\",\"Lokomotiv Moscow\",\"Hertha BSC\",\"Celta de Vigo\",\"Stoke City\",\"Cardiff City\",\"Atlas Guadalajara\",\"1. FC Köln\",\"Rangers FC\",\"Henan Jianye\",\"Derby County\",\"Leeds United\",\"Swansea City\",\"Sunderland AFC\",\"Red Bull Salzburg\",\"Udinese Calcio\",\"SS Lazio\",\"ACF Fiorentina\",\"RSC Anderlecht\",\"Brighton & Hove Albion\",\"SK Slavia Prague\",\"Al-Ahli Jeddah\",\"Sporting CP\",\"Derby County\",\"Aston Villa\",\"Sport Club Corinthians Paulista\",\"SS Lazio\",\"Shenzhen FC\",\"Santos FC\",\"Athletic Bilbao\",\"Benevento Calcio\",\"RSC Anderlecht\",\"FC Augsburg\",\"RC Strasbourg Alsace\",\"Shakhtar Donetsk\",\"KRC Genk\",\"KAA Gent\",\"SV Werder Bremen\",\"Al-Wahda Mekka\",\"Standard Liège\",\"Club Brugge KV\",\"FC Augsburg\",\"Atalanta BC\",\"FC Porto\",\"AS Monaco B\",\"Eintracht Frankfurt\",\"OGC Nice\",\"KAA Gent\",\"Nîmes Olympique\",\"Deportivo Alavés\",\"FC Metz\",\"US Sassuolo\",\"Clube de Regatas do Flamengo\",\"Aston Villa\",\"Chievo Verona\",\"Sociedade Esportiva Palmeiras\",\"São Paulo Futebol Clube\",\"Clube Atlético Mineiro\",\"Stade Rennais FC\",\"SD Huesca\",\"Real Valladolid CF\",\"TSG 1899 Hoffenheim\",\"Delfino Pescara 1936\",\"Genoa Primavera\",\"Brighton & Hove Albion\",\"Eintracht Frankfurt\",\"Watford FC\",\"PSV Eindhoven\",\"Hannover 96\",\"Fenerbahce SK\",\"Sporting Gijón\",\"Empoli FC\",\"SV Werder Bremen\",\"FC Porto\",\"Sheffield United\",\"Getafe CF\",\"Amiens SC\",\"Hertha BSC\",\"FK Krasnodar\",\"Fortuna Düsseldorf\",\"SD Eibar\",\"SCO Angers\",\"SPAL\",\"Frosinone Calcio\",\"FC Girondins Bordeaux\",\"Rayo Vallecano\",\"Santos FC\",\"Frosinone Calcio\",\"UC Sampdoria\",\"Bayer 04 Leverkusen\",\"Spartak Moscow\",\"RC Strasbourg Alsace\",\"Red Star Belgrade\",\"Juventus FC\",\"1.FC Nuremberg\",\"1. FC Köln\",\"Legia Warszawa\",\"São Paulo Futebol Clube\",\"Chicago Fire\",\"Caykur Rizespor\",\"Rayo Vallecano\",\"Fortuna Düsseldorf\",\"FC Nantes\",\"Cagliari Calcio\",\"Udinese Calcio\",\"Frosinone Calcio\",\"Grêmio Foot-Ball Porto Alegrense\",\"FC Astana\",\"Eintracht Frankfurt\",\"FC St. Pauli\",\"Brighton & Hove Albion\",\"Changchun Yatai\",\"Brentford FC\",\"Kashiwa Reysol\",\"Club Brugge KV\",\"CSKA Moscow\",\"Wigan Athletic\",\"FC Dallas\",\"SV Zulte Waregem\",\"Chongqing Dangdai Lifan\",\"US Palermo\",\"CD Leganés\",\"Fenerbahce SK\",\"Grêmio Foot-Ball Porto Alegrense\",\"Racing Club\",\"PSV Eindhoven\",\"Al-Ettifaq\",\"Al-Ain FC\",\"SM Caen\",\"FC Copenhagen\",\"CA River Plate\",\"SK Slavia Prague\",\"Pyramids FC\",\"Pyramids FC\",\"GNK Dinamo Zagreb\",\"Fenerbahce SK\",\"Beijing Guoan\",\"Deportivo Guadalajara\",\"Guangzhou R&F\",\"CF Pachuca\",\"Dalian Yifang\",\"Shenzhen FC Reserves\",\"Changchun Yatai\",\"Montpellier HSC\",\"Olimpia Asunción\",\"Henan Jianye\",\"Guangzhou R&F\",\"Parma Calcio 1913\",\"Guangzhou Evergrande Taobao\",\"Guangzhou Evergrande Taobao\",\"Guangzhou Evergrande Taobao\",\"Guangzhou Evergrande Taobao\",\"Guangzhou Evergrande Taobao\",\"Club Tijuana\",\"Al-Wahda Mekka\",\"SL Benfica\",\"Portimonense SC\",\"AC Perugia Calcio\",\"Manchester City\",\"VfB Stuttgart\",\"Udinese Calcio\",\"GNK Dinamo Zagreb\",\"AC Perugia Calcio\",\"EA Guingamp\",\"FC Midtjylland\",\"Bologna FC 1909\",\"LOSC Lille\",\"FK Rostov\",\"PAOK Thessaloniki\",\"Huddersfield Town\",\"KRC Genk\",\"KRC Genk\",\"CD Leganés\",\"Shenzhen FC\",\"Benevento Calcio\",\"Changchun Yatai\",\"Al-Shabab FC (Riyadh)\",\"Kasimpasa\",\"Guizhou Hengfeng\",\"SL Benfica\",\"FC Ingolstadt 04\",\"Sport Club Corinthians Paulista\",\"Genoa CFC\",\"Benevento Calcio\",\"Bristol City\",\"RSC Anderlecht\",\"KAA Gent\",\"Racing Club\",\"SC Freiburg\",\"Red Bull Salzburg\",\"Montpellier HSC\",\"Istanbul Basaksehir FK\",\"Brentford FC\",\"FC Groningen\",\"Sport Club Internacional\",\"Bristol City\",\"Fortuna Düsseldorf\",\"Norwich City\",\"Club Brugge KV\",\"FC Crotone\",\"SM Caen\",\"Al-Taawoun FC\",\"AZ Alkmaar\",\"Sporting CP\",\"Racing Club\",\"Changchun Yatai\",\"Real Betis Balompié\",\"FC Utrecht\",\"SCO Angers\",\"Bologna FC 1909\",\"Rubin Kazan\",\"Deportivo Toluca\",\"Akhmat Grozny\",\"Cruzeiro Esporte Clube\",\"Columbus Crew SC\",\"Rapid Vienna\",\"Deportivo de La Coruña\",\"Olympiacos Piraeus\",\"Real Valladolid CF\",\"AEK Athens\",\"Zhejiang Greentown\",\"Udinese Calcio\",\"Al-Rayyan SC\",\"Besiktas JK\",\"1.FC Union Berlin\",\"SV Werder Bremen\",\"Cádiz CF\",\"US Lecce\",\"1.FC Nuremberg\",\"Hannover 96\",\"Waasland-Beveren\",\"Club Athletico Paranaense\",\"AEK Athens\",\"Tianjin Teda\",\"Guangzhou R&F\",\"Rangers FC\",\"Standard Liège\",\"Hokkaido Consadole Sapporo\",\"Club Atlético Huracán\",\"Genoa CFC\",\"Sporting CP\",\"Cercle Brugge\",\"Jiangsu Suning\",\"Universitatea Craiova\",\"Nottingham Forest\",\"Swansea City\",\"Al-Ittihad Jeddah\",\"CA Boca Juniors\",\"Rangers FC\",\"Portland Timbers\",\"Club Tijuana\",\"Borussia Mönchengladbach\",\"Watford FC\",\"Watford FC\",\"FC Midtjylland\",\"SPAL\",\"Celtic FC\",\"Valencia CF\",\"Pyramids FC\",\"US Sassuolo\",\"PAOK Thessaloniki\",\"Brighton & Hove Albion\",\"KAA Gent\",\"FC Midtjylland\",\"FC Toulouse\",\"Minnesota United FC\",\"Club Atlético Independiente\",\"Grêmio Foot-Ball Porto Alegrense\",\"Pyramids FC\",\"Club León FC\",\"Juventus Under 17\",\"FC Basel 1893\",\"Monarcas Morelia\",\"SD Eibar\",\"KRC Genk\",\"SC Freiburg\",\"RC Strasbourg Alsace\",\"RC Strasbourg Alsace\",\"Chelsea FC U18\",\"Hertha BSC\",\"Levante UD\",\"FC Basel 1893\",\"Watford FC\",\"Fiorentina Primavera\",\"KRC Genk\",\"Stade Rennais FC\",\"Ludogorets Razgrad\",\"Karpaty Lviv (-2021)\",\"FC Porto\",\"FC Porto\",\"Atlético de Madrid\",\"SM Caen\",\"Vitesse Arnhem\",\"Feyenoord Rotterdam\",\"Al-Ittihad Jeddah\",\"FC Nantes\",\"AC Le Havre\",\"Santos Laguna\",\"Pyramids FC\",\"AS Saint-Étienne\",\"Rangers FC\",\"1.FSV Mainz 05\",\"Hapoel Beer Sheva\",\"Real Valladolid CF\",\"CF Monterrey\",\"AS Monaco\",\"KRC Genk\",\"Istanbul Basaksehir FK\",\"CA San Lorenzo de Almagro\",\"Real Valladolid CF\",\"Genoa CFC\",\"Celtic FC\",\"New York Red Bulls\",\"Manchester United Youth\",\"Parma Calcio 1913\",\"Sporting CP\",\"Brescia Calcio\",\"FC Copenhagen\",\"CF Monterrey\",\"ACF Fiorentina\",\"FC Copenhagen\",\"Genoa CFC\",\"Club Brugge KV\",\"Levante UD\",\"MOL Vidi FC\",\"UD Las Palmas\",\"CD Leganés\",\"Al-Shabab FC (Riyadh)\",\"Deportivo Alavés\",\"Parma Calcio 1913\",\"AC Sparta Prague\",\"Hannover 96\",\"CA Vélez Sarsfield\",\"KAA Gent\",\"FC Midtjylland\",\"Sporting CP\",\"Sport Club Corinthians Paulista\",\"Hannover 96\",\"Al-Wahda Mekka\",\"Brescia Calcio\",\"Inter Milan Primavera\",\"Empoli FC\",\"Red Star Belgrade\",\"Nagoya Grampus\",\"Büyüksehir Belediye Erzurumspor\",\"Deportivo Toluca\",\"FC Zürich\",\"Holstein Kiel\",\"Bursaspor\",\"Club Tijuana\",\"Amiens SC\",\"Fortuna Düsseldorf\",\"FC Metz\",\"FC Cincinnati\",\"KV Oostende\",\"Defensa y Justicia\",\"São Paulo Futebol Clube\",\"Club Atlético Talleres\",\"Alanyaspor\",\"Standard Liège\",\"Levski Sofia\",\"FC Nantes\",\"CA River Plate\",\"CA Colon\",\"Kayserispor\",\"Galatasaray A.S.\",\"Göztepe\",\"Büyüksehir Belediye Erzurumspor\",\"PEC Zwolle\",\"Ajman Club\",\"Olympiacos Piraeus\",\"Club Atlético Lanús\",\"Arminia Bielefeld\",\"Deportivo de La Coruña\",\"US Salernitana 1919\",\"CA Boca Juniors\",\"São Paulo Futebol Clube\",\"Club Atlético Lanús\",\"Club Atlético Huracán\",\"Atlanta United FC\",\"Arka Gdynia\",\"CA San Lorenzo de Almagro\",\"LDU Quito\",\"Guangzhou Evergrande Taobao\",\"Atlanta United FC\",\"Real Madrid\",\"Deportivo de La Coruña\",\"FC Cincinnati\",\"Parma Calcio 1913\",\"Zamalek SC\",\"Rangers FC\",\"FC Sion\",\"Lech Poznan\",\"CA Vélez Sarsfield\",\"CD Leganés\",\"Cruzeiro Esporte Clube\",\"CSD Colo Colo\",\"Caykur Rizespor\",\"UD Las Palmas\",\"Club Atlético Unión\",\"FC Crotone\",\"Watford FC\",\"Hamburger SV\",\"Norwich City\",\"Manchester United\",\"Brentford FC\",\"Hull City\",\"Inter Milan Primavera\",\"Deportivo de La Coruña\",\"Hapoel Beer Sheva\",\"FK Rostov\",\"Huddersfield Town\",\"FC Astana\",\"UC Sampdoria\",\"Club León FC\",\"Kuwait SC\",\"AC Sparta Prague\",\"Vitesse Arnhem\",\"Dijon FCO\",\"Dijon FCO\",\"Preston North End\",\"Urawa Red Diamonds\",\"GNK Dinamo Zagreb\",\"Liaoning FC\",\"Vancouver Whitecaps FC\",\"Parma Calcio 1913\",\"SK Slavia Prague\",\"BSC Young Boys\",\"Club León FC\",\"Clube Atlético Mineiro\",\"Frosinone Calcio\",\"Lokomotiv Moscow\",\"Norwich City\",\"Sharjah Cultural Sports Club\",\"Empoli FC\",\"BSC Young Boys\",\"Fenerbahce SK\",\"Inter Milan Primavera\",\"Udinese Calcio\",\"Fiorentina Primavera\",\"West Ham United\",\"Brighton & Hove Albion U23\",\"Juventus U23\",\"Ludogorets Razgrad\",\"FC Porto\",\"El Ahly Cairo\",\"FC Porto\",\"CD Cruz Azul\",\"Akhmat Grozny\",\"El Ahly Cairo\",\"CD Nacional\",\"Chicago Fire\",\"FC Girondins Bordeaux\",\"New England Revolution\",\"Rapid Vienna\",\"FC Astana\",\"Fenerbahce SK\",\"Wigan Athletic\",\"Levante UD\",\"Frosinone Calcio\",\"KRC Genk\",\"Deportivo Toluca\",\"SC Freiburg\",\"Chievo Verona\",\"Red Star Belgrade\",\"SC Braga\",\"FC Ingolstadt 04\",\"Zhejiang Greentown\",\"RSC Anderlecht\",\"RSC Anderlecht\",\"Trabzonspor\",\"FC Ingolstadt 04\",\"Frosinone Calcio\",\"Montpellier HSC\",\"SCO Angers\",\"SD Huesca\",\"Millwall FC\",\"Grêmio Foot-Ball Porto Alegrense\",\"AA Argentinos Juniors\",\"Manchester City\",\"Minnesota United FC\",\"Racing Club\",\"Al-Ahli Jeddah\",\"Santos FC\",\"HNK Rijeka\",\"KAA Gent\",\"Fenerbahce SK\",\"US Sassuolo\",\"FC Utrecht\",\"Ferencvárosi TC\",\"1.FC Union Berlin\",\"CA San Lorenzo de Almagro\",\"Zamalek SC\",\"Ural Yekaterinburg\",\"Red Star Belgrade\",\"Club Necaxa\",\"Rapid Vienna\",\"Trabzonspor\",\"Malmö FF\",\"Norwich City\",\"SM Caen\",\"Göztepe\",\"Rio Ave FC\",\"Club Atlético Lanús\",\"KSC Lokeren (- 2020)\",\"AEK Athens\",\"Guizhou Hengfeng\",\"CD Tenerife\",\"Sociedade Esportiva Palmeiras\",\"Kayserispor\",\"Bursaspor\",\"Red Star Belgrade\",\"Lech Poznan\",\"Trabzonspor\",\"CA Colon\",\"Al-Shabab FC (Riyadh)\",\"Nottingham Forest\",\"Club Atlético Belgrano\",\"FC Nantes\",\"GNK Dinamo Zagreb\",\"US Lecce\",\"VfL Bochum\",\"AC Perugia Calcio\",\"Al-Shabab FC (Riyadh)\",\"Udinese Calcio\",\"Red Star Belgrade\",\"UC Sampdoria\",\"Al-Taawoun FC\",\"Odense Boldklub\",\"Standard Liège\",\"CA Vélez Sarsfield\",\"AJ Auxerre\",\"CA San Lorenzo de Almagro\",\"Alanyaspor\",\"SG Dynamo Dresden\",\"Hellas Verona\",\"Club Universidad de Chile\",\"SC Braga\",\"SV Darmstadt 98\",\"Hapoel Beer Sheva\",\"Aris Thessaloniki\",\"Calcio Padova\",\"US Lecce\"],\"name\":[\"Jack Grealish\",\"Romelu Lukaku\",\"Jadon Sancho\",\"Dušan Vlahović\",\"Raphaël Varane\",\"Achraf Hakimi\",\"Dayot Upamecano\",\"Antoine Griezmann\",\"Ben White\",\"Ferran Torres\",\"Eduardo Camavinga\",\"Luis Díaz\",\"André Silva\",\"Cristiano Ronaldo\",\"Bruno Guimarães\",\"Marcel Sabitzer\",\"Tammy Abraham\",\"Ibrahima Konaté\",\"Martin Ødegaard\",\"Nuno Mendes\",\"Saúl Ñíguez\",\"Emiliano Buendía\",\"Rodrigo de Paul\",\"Tanguy Ndombélé\",\"Kurt Zouma\",\"Leon Bailey\",\"Angeliño\",\"Cristian Romero\",\"Moise Kean\",\"Patson Daka\",\"Donyell Malen\",\"Nikola Vlasic\",\"Chris Wood\",\"Lucas Digne\",\"Matheus Cunha\",\"Bryan Gil\",\"Matteo Politano\",\"Dejan Kulusevski\",\"Joaquín Correa\",\"Danny Ings\",\"Joe Willock\",\"Daniel James\",\"Fikayo Tomori\",\"Aaron Ramsdale\",\"Boubakary Soumaré\",\"James Rodríguez\",\"Merih Demiral\",\"Denis Zakaria\",\"Sandro Tonali\",\"Marash Kumbulla\",\"Emerson Royal\",\"Yuri Alberto\",\"Weston McKennie\",\"Rodrigo Bentancur\",\"Ilaix Moriba\",\"Mike Maignan\",\"Emerson Royal\",\"Roger Ibañez\",\"Ozan Kabak\",\"Sardar Azmoun\",\"Pablo Sarabia\",\"André Zambo Anguissa\",\"Arnaut Danjuma\",\"Vitaliy Mykolenko\",\"Marc Guéhi\",\"Enock Mwepu\",\"Odilon Kossounou\",\"Nicolás González\",\"Joachim Andersen\",\"Jonathan Ikoné\",\"Noa Lang\",\"Francisco Trincão\",\"Tecatito\",\"Juan Musso\",\"Gerson\",\"Jhon Córdoba\",\"Takehiro Tomiyasu\",\"Marc Cucurella\",\"Julián Álvarez\",\"Hamed Junior Traorè\",\"Danilo Pereira\",\"Thiago Almada\",\"Musa Barrow\",\"Wout Weghorst\",\"David Neres\",\"Tiemoué Bakayoko\",\"Lucas Torreira\",\"Josko Gvardiol\",\"Pedrinho\",\"Matheus Pereira\",\"Adam Armstrong\",\"Jannik Vestergaard\",\"Kieran Trippier\",\"Mohamed Simakan\",\"Rayan Aït-Nouri\",\"Carlos Vinícius\",\"Dennis Praet\",\"Cengiz Ünder\",\"Albert Sambi Lokonga\",\"Roman Yaremchuk\",\"Loïc Badé\",\"Myron Boadu\",\"Odsonne Edouard\",\"Harry Wilson\",\"Gonzalo Montiel\",\"Alphonse Areola\",\"Teun Koopmeiners\",\"Ricardo Pepi\",\"Zinho Vanheusden\",\"Rafa Mir\",\"Denzel Dumfries\",\"Andy Delort\",\"Khvicha Kvaratskhelia\",\"Patrick de Paula\",\"Alexander Sörloth\",\"Kristoffer Ajer\",\"Gregor Kobel\",\"Junior Firpo\",\"Juan Foyth\",\"Benjamin Henrichs\",\"Pepê\",\"Gaëtan Laborde\",\"Maxwel Cornet\",\"Calvin Stengs\",\"Dan Burn\",\"Kamaldeen Sulemana\",\"Romain Faivre\",\"Arthur Cabral\",\"Baptiste Santamaria\",\"Jack Harrison\",\"Luca Waldschmidt\",\"Michael Olise\",\"Razvan Marin\",\"Thomas Delaney\",\"Carles Aleñá\",\"Matheus Henrique\",\"Grzegorz Krychowiak\",\"Brahim Díaz\",\"Marko Grujic\",\"Sérgio Oliveira\",\"Yusuf Yazici\",\"Mattia Zaccagni\",\"Nathan Collins\",\"Nathan Patterson\",\"Boulaye Dia\",\"Kayky\",\"Antonin Barak\",\"Emerson\",\"Matías Viña\",\"Sebastiaan Bornauw\",\"Toby Alderweireld\",\"Lovro Majer\",\"Marcus Edwards\",\"Mathias Normann\",\"Alessandro Florenzi\",\"Romain Correia\",\"Marlon\",\"Romain Perraud\",\"Mohamed Daramy\",\"Jonas Wind\",\"Christos Tzolis\",\"Imrân Louza\",\"Galeno\",\"Jean-Clair Todibo\",\"Lukas Nmecha\",\"Alan Velasco\",\"Xherdan Shaqiri\",\"Steven Berghuis\",\"Faitout Maouassa\",\"Rachid Ghezzal\",\"Mohamed Ihattaren\",\"Kaio Jorge\",\"Bernard\",\"Josip Brekalo\",\"Samuele Ricci\",\"Ainsley Maitland-Niles\",\"Claudinho\",\"Milot Rashica\",\"Leonardo Balerdi\",\"Chico\",\"Jean Lucas\",\"Marco Cruz\",\"Vanderson\",\"Kacper Kozlowski\",\"Jean-Philippe Mateta\",\"Abdallah Sima\",\"Jakub Jankto\",\"Giovanni Simeone\",\"Ozan Tufan\",\"Samuel Gigot\",\"Luiz Araújo\",\"Diego Valdés\",\"Lautaro Valenti\",\"Igor Coronado\",\"Pape Sarr\",\"Rui Patrício\",\"Lassina Traoré\",\"Frank Onyeka\",\"Yoane Wissa\",\"Jens Cajuste\",\"Daryl Dike\",\"Talisca\",\"Alban Lafont\",\"Mitchel Bakker\",\"Mario Lemina\",\"Ludwig Augustinsson\",\"Marvin Friedrich\",\"Alex Kral\",\"Mergim Berisha\",\"Esequiel Barco\",\"Moussa Sissoko\",\"Felipe Anderson\",\"Marko Arnautovic\",\"Reinildo Mandava\",\"Maxime López\",\"Pau López\",\"Kenedy\",\"Borja Mayoral\",\"Michy Batshuayi\",\"Josh Sargent\",\"Hannes Wolf\",\"Jens Petter Hauge\",\"Ben Gibson\",\"Kamal Sowah\",\"Suat Serdar\",\"Yacine Adli\",\"Ante Budimir\",\"Toma Basic\",\"Pol Lirola\",\"Fábio Martins\",\"Marco Silvestri\",\"Marcos André\",\"Tajon Buchanan\",\"Aaron Boupendza\",\"Christian Kouamé\",\"Andreas Cornelius\",\"Aster Vranckx\",\"Nuno Tavares\",\"José Sá\",\"Matteo Lovato\",\"Rodrigo Muniz\",\"Shamar Nicholson\",\"Júnior Alonso\",\"Ivan Ilić\",\"Niklas Dorsch\",\"Xherdan Shaqiri\",\"Piero Hincapié\",\"Davide Zappacosta\",\"Jonathan Rodríguez\",\"Gaël Kakuta\",\"Florian Müller\",\"Gaël Kakuta\",\"Pablo\",\"Jefferson Savarino\",\"Demarai Gray\",\"Andreas Pereira\",\"Axel Tuanzebe\",\"Adolfo Gaich\",\"Yusuf Demir\",\"Simy\",\"Wanderson\",\"Michael\",\"Maximilian Philipp\",\"Amine Adli\",\"Lyanco\",\"Dimitrios Giannoulis\",\"Denis Makarov\",\"Sebastián Driussi\",\"David Zima\",\"Maximilian Eggestein\",\"Germán Pezzella\",\"Tonny Vilhena\",\"Marco Richter\",\"Eldor Shomurodov\",\"Mert Cetin\",\"Edon Zhegrova\",\"Amadou Onana\",\"Victor Nelsson\",\"Jesper Lindström\",\"Anders Dreyer\",\"Will Hughes\",\"Andreas Skov Olsen\",\"Billal Brahimi\",\"Konstantin Maradishvili\",\"Deniz Undav\",\"Jesús Angulo\",\"Ismail Jakobs\",\"Robert Andrich\",\"Joey Veerman\",\"Kevin Bonifazi\",\"Matías Arezo\",\"Sebastián Córdova\",\"Henry Onyekuru\",\"Hugo Siquet\",\"Nicolae Stanciu\",\"Myziane Maolida\",\"Pierre Lees-Melou\",\"Matteo Darmian\",\"Gabriele Zappa\",\"Ryan Christie\",\"Brandon Soppy\",\"Alan Patrick\",\"Caleb Ekuban\",\"Anel Ahmedhodzic\",\"Arne Maier\",\"Alexandru Mitrita\",\"Matteo Lovato\",\"Marc Oliver Kempf\",\"Jean-Pierre Nsame\",\"Jovane Cabral\",\"Fedor Smolov\",\"Gustavo Assunção\",\"Martín Payero\",\"Bryan Reynolds\",\"Wylan Cyprien\",\"Kevin Paredes\",\"Taiwo Awoniyi\",\"Kelvin Yeboah\",\"Stanley Nsoki\",\"Sead Haksabanovic\",\"Manuel Ugarte\",\"Alexandru Cicaldau\",\"Fodé Ballo-Touré\",\"Victor Moses\",\"Wendell\",\"Mario Vuskovic\",\"Jorge Carrascal\",\"Aké Loba\",\"Facundo Torres\",\"Gyrano Kerk\",\"Gabriel Gudmundsson\",\"Pablo Rosario\",\"Ally Samatta\",\"Soualiho Meïté\",\"Vitinho\",\"Alexis Beka Beka\",\"Gianluca Busio\",\"Vinícius Tobias\",\"Ricardo Esgaio\",\"Andreas Cornelius\",\"Érick Aguirre\",\"Karol Swiderski\",\"Hassane Kamara\",\"Javi Galán\",\"Sebastián Vegas\",\"Sam Lammers\",\"Daniel Wass\",\"Lucas Olaza\",\"Fabricio Bustos\",\"Pietro Pellegri\",\"Nemanja Radonjic\",\"Mark-Anthony Kaye\",\"Valentin Mihaila\",\"Vedat Muriqi\",\"Tino Livramento\",\"Angus Gunn\",\"Ernesto Torregrossa\",\"Kevin Danso\",\"Antonino La Gumina\",\"Lennart Czyborra\",\"Thomas Henry\",\"Federico Gatti\",\"Darío Sarmiento\",\"Helinho\",\"Eduard Atuesta\",\"Samuel Kalu\",\"Guilherme Arana\",\"Jairo Torres\",\"Kyogo Furuhashi\",\"Samú Costa\",\"Yerson Mosquera\",\"Éderson\",\"Igor\",\"Kamil Piatkowski\",\"Chidozie Awaziem\",\"Michel-Ange Balikwisha\",\"Kjell Scherpen\",\"Carl Starfelt\",\"Metinho\",\"Marco Bizot\",\"Nair Tiknizyan\",\"Ruan Tressoldi\",\"Maduka Okoye\",\"Erik Botheim\",\"Silvan Hefti\",\"Samir\",\"Jan Kuchta\",\"Arsen Adamov\",\"Ignace Van der Brempt\",\"Gabriel Pereira\",\"Federico Navarro\",\"Nicolás Capaldo\",\"Luís Maximiano\",\"Fransérgio\",\"Edin Visca\",\"Kieffer Moore\",\"Giangiacomo Magnani\",\"Emmanuel Dennis\",\"Franco Cervi\",\"Manu Morlanes\",\"Azor Matusiwa\",\"Michaël Cuisance\",\"Thiago Maia\",\"Jeremy Toljan\",\"Sergio Akieme\",\"Leonardo Fernández\",\"Renaud Ripart\",\"Manu Morlanes\",\"Melvin Bard\",\"Ramón Miérez\",\"Jordan Siebatcheu\",\"Konstantinos Manolas\",\"Santiago Cáseres\",\"Aníbal Moreno\",\"Juninho Bacuna\",\"Kristijan Lovric\",\"Santiago Arzamendia\",\"Luca Netz\",\"Jeremías Ledesma\",\"Martin Hongla\",\"Alireza Jahanbakhsh\",\"Michal Karbownik\",\"Matija Nastasić\",\"Tiago Tomás\",\"Francesco Caputo\",\"Rúben Semedo\",\"Ryan Gauld\",\"Mathieu Cafaro\",\"Eduardo Quaresma\",\"Caio Lucas\",\"Miguel Borja\",\"Vitor Roque\",\"Federico Di Francesco\",\"Luan Peres\",\"Marrony\",\"Wahid Faghir\",\"Jack Hendry\",\"Ísak Bergmann Jóhannesson\",\"Patrick Berg\",\"Mama Baldé\",\"Iké Ugbo\",\"Matthew Hoppe\",\"Nicolás Ibáñez\",\"Alassane Ndao\",\"Connor Roberts\",\"Mathías Villasanti\",\"Romain Del Castillo\",\"Zeljko Gavric\",\"Guus Til\",\"Arnór Sigurdsson\",\"Diego Rico\",\"Ridgeciano Haps\",\"Patrick\",\"Akinkunmi Amoo\",\"Jaminton Campaz\",\"Simon Deli\",\"Iván Marcone\",\"Rafa Pereira\",\"Liel Abada\",\"Roko Simic\",\"Kristoffer Olsson\",\"Tin Jedvaj\",\"Berkan Kutlu\",\"Owen Otasowie\",\"Marko Lazetić\",\"Juan Otero\",\"Ibrahima Koné\",\"Myrto Uzuni\",\"Joël Drommel\",\"Dejan Joveljic\",\"Abdoulaye Touré\",\"Simy\",\"Johan Vásquez\",\"Miguel Borja\",\"Konrad de la Fuente\",\"Amath Ndiaye\",\"Silvan Widmer\",\"Ahmed Hegazy\",\"Adama Soumaoro\",\"Nicolás Figal\",\"Braian Romero\",\"Felipe Caicedo\",\"Nikolai Baden Frederiksen\",\"George Saville\",\"Roberto Piccoli\",\"Andrew Hjulsager\",\"George Bello\",\"Edin Dzeko\",\"Hiroki Sakai\",\"Walter Bou\",\"Braian Romero\",\"Tomás Chancalay\",\"Lewis Morgan\",\"Johannes Eggestein\",\"Florian Krüger\",\"Johannes Eggestein\",\"Álvaro Fernández\",\"Arkadiusz Reca\",\"Xavier Chavalerin\",\"Renato Kayzer\",\"Iuri Medeiros\",\"Ebrima Colley\",\"Ahmed Hassan\",\"Vladyslav Supryaga\",\"Konstantin Kuchaev\",\"Mattia Compagnon\",\"Paulinho\",\"Sebastián Ferreira\",\"Duvan Vergara\",\"Davidson\",\"Eric Ramires\",\"Marquinhos\",\"Francisco Montero\",\"Tanner Tessmann\",\"Tanner Tessmann\",\"Riley McGree\",\"Max Kruse\",\"Victorien Angban\",\"Morten Frendrup\",\"Ignacio Aliseda\",\"Diego Laxalt\",\"Marvin Ducksch\",\"Anton Stach\",\"Tim Kleindienst\",\"Wilson Isidor\",\"Lukas Lerager\",\"Mike Trésor\",\"Björn Engels\",\"Moritz Jenz\",\"Natan\",\"Eduard Sobol\",\"Micky van de Ven\",\"Aboubakar Kamara\",\"Joseph Okumu\",\"Chiquinho\",\"Demba Seck\",\"Dogan Alemdar\",\"Martin Erlic\",\"Kamil Grabara\",\"Mauro Laínez\",\"Ignacio Rivero\",\"Chanathip Songkrasin\",\"Patrik Wålemark\",\"Kelvin Amian\",\"Darío Benedetto\",\"Lucas Boyé\",\"Federico Ceccherini\",\"Santos\",\"Birger Meling\",\"Carlos Júnior\",\"Daniil Khlusevich\",\"Junior Messias\",\"Juan Ramírez\",\"Tymoteusz Puchacz\",\"Filipe Soares\",\"Dimitri Foulquier\",\"Kamil Józwiak\",\"Pierre Kunde\",\"Gerzino Nyamsi\",\"Sebastián Palacios\",\"Elías Gómez\",\"Marinho\",\"Jack Hendry\",\"Sandro Ramírez\",\"Richie Laryea\",\"Carlos Auzqui\",\"Marcus Ingvartsen\",\"Pablo Maffeo\",\"Christopher Martins Pereira\",\"Abdou Harroui\",\"Steven Zuber\",\"Rafael Camacho\",\"João Klauss\",\"Kevin Agudelo\",\"Lennart Czyborra\",\"Martin Boyle\",\"Emiliano Martínez\",\"Ben Malango\",\"Adem Zorgane\",\"Luan Cândido\",\"Alex Vigo\",\"Dmitri Chistyakov\",\"Joaquín Piquerez\",\"Jurgen Ekkelenkamp\",\"Andrés Herrera\",\"Gastón González\",\"Federico Girotti\",\"Gabriel Strefezza\",\"David Ayala\",\"Luquinhas\",\"Nicolás Siri\",\"José Hurtado\",\"João Mendes\",\"Janis Antiste\",\"Min-jae Kim\",\"Benito Raman\",\"Josip Juranovic\",\"Lazar Samardzic\",\"Mark Mampassi\",\"Yaser Asprilla\",\"Denso Kasius\",\"Ali Sowe\",\"Kaoru Mitoma\",\"Antonio Nusa\",\"Samuel Adegbenro\",\"Dimitrios Nikolaou\",\"Zalán Vancsa\",\"Arthur Sales\",\"Vladimir Iljin\",\"Odion Ighalo\",\"Alejandro Zendejas\",\"Mikael Uhre\",\"Robin Hack\",\"Davit Khocholava\",\"André Ramalho\",\"Dorian Dessoleil\",\"Fabrício Bruno\",\"Craig Dawson\",\"Cristian Arango\",\"Landry Dimata\",\"Josip Misic\",\"Fran García\",\"Jakub Swierczok\",\"Michael Obafemi\",\"Paul Mukairu\",\"Caden Clark\",\"Sam Vines\",\"Paul Arriola\",\"Percy Tau\",\"Guillermo Pol Fernández\",\"Kiril Despodov\",\"Juan Komar\",\"Gil Dias\",\"Mario González\",\"Filip Krovinovic\",\"Luther Singh\",\"Kellyn Acosta\",\"Toni Borevkovic\",\"Albert Gudmundsson\",\"Cristian Arango\",\"Kacper Przybylko\",\"Kevin Möhwald\",\"Gerson Rodrigues\",\"Sergi Gómez\",\"Jakub Swierczok\",\"Leonardo Godoy\",\"Giorgi Mamardashvili\",\"Sory Kaba\",\"Ercan Kara\",\"Martin Erlic\",\"Jamiro Monteiro\",\"Chase Gasper\",\"Ansgar Knauff\",\"Taxiarchis Fountas\",\"Andre Shinyashiki\",\"João Novais\",\"Martín Benítez\",\"Damián Batallini\",\"Dominique Heintz\",\"Silvio Romero\",\"Luiz Phellype\",\"Sargis Adamyan\",\"Sam Surridge\",\"Halil Dervisoglu\",\"Norberto Briasco\",\"William Pacho\",\"Agustín Canobbio\",\"Olimpiu Morutan\",\"Ivan Sergeev\",\"Nicolás Giménez\",\"Jelle Bataille\",\"Patrick Ciurria\",\"Andrea Bertolacci\",\"Facundo Mura\",\"Ishak Belfodil\",\"Luca Mazzitelli\",\"Julian Chabot\",\"Jordy Alcívar\",\"Obinna Nwobodo\",\"Andrés Cubas\",\"Carlos Palacios\",\"Petar Bockaj\",\"Abdu Conté\",\"David Hancko\",\"Filip Bradaric\",\"Manolis Siopis\",\"Dylan Borrero\",\"Kluiverth Aguilar\",\"Antonio Candreva\",\"Rominigue Kouamé\",\"Zidan Sertdemir\",\"Bruno Costa\",\"Dominik Greif\",\"Vangelis Pavlidis\",\"Matteo Cancellieri\",\"Stjepan Loncar\",\"Chris Führich\",\"Ramiro Funes Mori\",\"Santiago Moreno\",\"Giulian Biancone\",\"Maximiliano Caufriez\",\"Jonathan Silva\",\"Georgios Giakoumakis\",\"Aboudramane Diaby\",\"Christian Tabó\",\"Sven Michel\",\"Nemanja Motika\",\"Edward Chilufya\",\"Sergio Gómez\",\"Victor Sá\",\"Juan Pablo Vigón\",\"Birger Verstraete\",\"Lilian Brassier\",\"Gianni Bruno\",\"Anderson Silva\",\"Ardian Ismajli\",\"Stanislav Kritsyuk\",\"Lisandro López\",\"Ivan\",\"Gustavo Sauer\",\"Ben Wilmot\",\"Lucas Evangelista\",\"Mame Thiam\",\"Njegos Petrovic\",\"Viktor Fischer\",\"Majeed Ashimeru\",\"Wuilker Fariñez\",\"Sebastian Lletget\",\"Sacha Boey\",\"Jeremy Ebobisse\",\"Frederik Rönnow\",\"Masaya Okugawa\",\"Tchê Tchê\",\"Robert Glatzel\",\"Clément Michelin\",\"Jere Uronen\",\"Alexis Blin\",\"Alistair Johnston\",\"Jorge Meré\",\"Chris Führich\",\"Mario Gavranovic\",\"Casper Höjer\",\"Ignacio Ramírez\",\"Thiago Galhardo\",\"Mateusz Zukowski\",\"Rekeem Harper\",\"Alexander Scholz\",\"Rick van Drongelen\",\"Burak Ince\",\"Maximilian Ullmann\",\"Oussama Haddadi\",\"Robert Zulj\",\"Can Bozdogan\",\"Ignacio Ramírez\",\"Falaye Sacko\",\"Gyasi Zardes\",\"Moussa Konaté\",\"Tymoteusz Puchacz\",\"Lucas Pérez\",\"Maksim Mukhin\",\"João Lucas\",\"Nathan\",\"Alan Franco\",\"Emerson Rodríguez\",\"Aschraf El Mahdioui\",\"Yonatan Cohen\",\"Mitchell van Bergen\",\"Mert Günok\",\"David Akintola\",\"Hervé Koffi\",\"Przemyslaw Frankowski\",\"Amin Sarr\",\"Benjamin Tetteh\",\"Ramiro\",\"Tiago Rodrigues\",\"Leonardo Gil\",\"Mehdi Bourabia\",\"Pedro Vite\",\"Murilo Cerqueira\",\"Jakub Kiwior\",\"Fábio Cardoso\",\"Gustavo\",\"Federico Martínez\",\"Michael Frey\",\"Brecht Dejaegere\",\"Umut Meras\",\"Liam Henderson\",\"Cherif Ndiaye\",\"Stefan Mitrovic\",\"Igor Kharatin\",\"Sebastiano Luperto\",\"Lorenzo Lucca\",\"Erik Lira\",\"Dimitrije Kamenovic\",\"Luca Moro\",\"Lorenzo Tonelli\",\"Jean Onana\",\"Stian Gregersen\",\"Stanko Juric\",\"Adrian Benedyczak\",\"Woyo Coulibaly\",\"Paulos Abraham\",\"Alberto Paleari\",\"Riccardo Gagliolo\",\"Kristoffer Klaesson\",\"Bendegúz Bolla\",\"Mikael Anderson\",\"Nicolas Haas\",\"Maksim Nenakhov\",\"Woyo Coulibaly\",\"Jean Onana\",\"Riccardo Gagliolo\",\"Stian Gregersen\",\"Ez Abde\",\"Mikael Anderson\",\"Shuichi Gonda\",\"Yuma Suzuki\",\"Aziz Ouattara\",\"Milos Kerkez\",\"Auston Trusty\",\"Eric Ramírez\",\"David\",\"Jamal Lowe\",\"Abdulelah Al-Malki\",\"Leandro González Pírez\",\"Lucas Mineiro\",\"Yassine Meriah\",\"Stefano Okaka\",\"Cris Silva\",\"Ramón Ábila\",\"Carlos Palacios\",\"Pedro Henrique\",\"Nicolás Orsini\",\"Burak Kapacak\",\"Léo Sena\",\"Ionut Nedelcearu\",\"Joe Hart\",\"Johan Mojica\",\"Adriel Ba Loua\",\"Mateo Cassierra\",\"Cameron Puertas\",\"Cherif Ndiaye\",\"Guillermo Varela\",\"Gernot Trauner\",\"Ángelo Araos\",\"Marcelo Benevenuto\",\"David Moberg Karlsson\",\"Anderson Esiti\",\"Marko Dabro\",\"Maxime Crépeau\",\"Bernard Tekpetey\",\"Matías Tissera\",\"Alison\",\"Hugo González\",\"Bryan Lasme\",\"Jeremy Dudziak\",\"Emanuel Aiwu\",\"Stefan Johansen\",\"Milton Giménez\",\"Jesús Jiménez\",\"Enzo Copetti\",\"Thierry Ambrose\",\"Abdelkahar Kadri\",\"Nicolas Gavory\",\"Guillermo Ortiz\",\"Sofian Kiyine\",\"Daleho Irandust\",\"Danil Stepanov\",\"Nick Viergever\",\"Petar Musa\",\"Miro Muheim\",\"Martín Rodríguez\",\"Nicolás Reniero\",\"Yunus Akgün\",\"Maximilian Beier\",\"Djordje Jovanovic\",\"Kerwin Vargas\",\"Alexis Castro\",\"Deian Sorescu\",\"Enis Destan\",\"Yaw Yeboah\",\"César Araújo\",\"Soufiane Rahimi\",\"Sam Surridge\",\"Jan Sobocinski\",\"Álvaro Vadillo\",\"Deiver Machado\",\"Khalifah Al-Dawsari\",\"Peter Vindahl\",\"Isaac Success\",\"Khalifah Al-Dawsari\",\"Jan Sobocinski\",\"Mehdi Ghayedi\",\"Mats Möller Daehli\",\"Naouirou Ahamada\",\"Alfa Semedo\",\"Luis Amarilla\",\"Kristijan Kahlina\",\"Leon Dajaku\",\"Jean\",\"Casper De Norre\",\"Serdar Gürler\",\"Mikael\",\"Eray Cömert\",\"Luca Caldirola\",\"Artem Timofeev\",\"Giorgi Kvilitaia\",\"Yusuf Erdogan\",\"Simon Sluga\",\"Franco Cristaldo\",\"Marcel Hartel\",\"Sergey Terekhov\",\"Wallace\",\"Anderson Julio\",\"Gianluca Gaetano\",\"Graeme Shinnie\",\"Enzo Millot\",\"Aslak Fonn Witry\",\"Aslak Fonn Witry\",\"Enzo Millot\",\"Jhon Durán\",\"Mujaid Sadick\",\"Gabriel\",\"Flynn Downes\",\"Marius Bülter\",\"José Florentín\",\"Ahmed Kutucu\",\"Damian Kadzior\",\"Eduardo Henrique\",\"Nikita Chernov\",\"Ao Tanaka\",\"Vinicius Mello\",\"Walid El Karti\",\"Vakoun Issouf Bayo\",\"Paulinho Bóia\",\"Juninho\",\"András Schäfer\",\"Kemal Ademi\",\"Corey Baird\",\"Miguelón\",\"Fernando Andrade\",\"Franco Troyansky\",\"Zan Kolmanic\",\"Reo Hatate\",\"Oliver Christensen\",\"Siriki Dembélé\",\"Léo Chú\",\"Braian Ojeda\",\"Aron Dönnum\",\"César Pinares\",\"Aleksandr Lomovitskiy\",\"Luka Gagnidze\",\"Liam Millar\",\"Saulo Mineiro\",\"Myles Peart-Harris\",\"Aron Dönnum\",\"Eric Kahl\",\"Yanis Rahmani\",\"César Pinares\",\"Lucas Fasson\",\"Charles Pickel\",\"Dimitrios Pinakas\",\"Miguel Crespo\",\"Aleksandr Lomovitskiy\",\"Fortune Bassey\",\"Danil Prutsev\",\"Ismaël Doukouré\",\"Mamoudou Karamoko\",\"Emanuel Emegha\",\"Min-kyu Song\",\"Fábio\",\"Pape Ibnou Ba\",\"Vitali Lisakovich\",\"Cican Stankovic\",\"Mamadou Sylla\",\"Felix Klaus\",\"Alhassan Yusuf\",\"Carlos Mané\",\"Tomás Ribeiro\",\"Caio Paulista\",\"Santiago Colombatto\",\"Taras Kacharaba\",\"Pedrão\",\"Patrick Wimmer\",\"Pedro Rocha\",\"Reinhold Ranftl\",\"Daniele Verde\",\"Jonas Meffert\",\"Milan Makaric\",\"Leonardo\",\"Daniel Ríos\",\"Fredrik Aursnes\",\"Filip Holender\",\"Edoardo Goldaniga\",\"Nenad Lukic\",\"Kristijan Kahlina\",\"Jakov Puljic\",\"Jaylin Lindsey\",\"Eric Ramírez\",\"Dorlan Pabón\",\"Patrick Olsen\",\"Zé Roberto\",\"Patrick Olsen\",\"Busanello\",\"Francisco Pizzini\",\"Héctor Fértoli\",\"Richard\",\"Srdjan Babic\",\"Bogdan Lednev\",\"Igor Sergeev\",\"Maksim Glushenkov\",\"Kai Havertz\",\"Leroy Sané\",\"Arthur\",\"Rúben Dias\",\"Timo Werner\",\"Miralem Pjanic\",\"Mauro Icardi\",\"Achraf Hakimi\",\"Ben Chilwell\",\"Thomas Partey\",\"Nicolò Barella\",\"Thiago\",\"Federico Chiesa\",\"Nathan Aké\",\"Ferran Torres\",\"Diogo Jota\",\"Donny van de Beek\",\"Victor Osimhen\",\"Hakim Ziyech\",\"Fábio Silva\",\"Giovani Lo Celso\",\"Nélson Semedo\",\"Rodrigo\",\"Alex Telles\",\"Martin Ødegaard\",\"Álvaro Morata\",\"Álvaro Morata\",\"Wesley Fofana\",\"Sandro Tonali\",\"Ante Rebic\",\"Mattéo Guendouzi\",\"Francisco Trincão\",\"Sergio Reguilón\",\"Sébastien Haller\",\"Moussa Dembélé\",\"Takefusa Kubo\",\"Allan\",\"Éverton\",\"Kevin Volland\",\"Luis Suárez\",\"Ben Godfrey\",\"Jonathan David\",\"Yannick Carrasco\",\"Patrik Schick\",\"Gabriel\",\"Rhian Brewster\",\"Jérémy Doku\",\"Tiemoué Bakayoko\",\"Emre Can\",\"Stefano Sensi\",\"Dominik Szoboszlai\",\"Mario Pasalic\",\"Marash Kumbulla\",\"Ozan Kabak\",\"Darwin Núñez\",\"Edouard Mendy\",\"Jordan Veretout\",\"Danilo Pereira\",\"André Silva\",\"Saïd Benrahma\",\"Cengiz Ünder\",\"Callum Wilson\",\"Simone Verdi\",\"Gianluca Mancini\",\"Saïd Benrahma\",\"Arkadiusz Milik\",\"Amad Diallo\",\"Suso\",\"Sergiño Dest\",\"Aaron Ramsdale\",\"Wendel\",\"Abdoulaye Doucouré\",\"Alexander Sörloth\",\"Diego Llorente\",\"Lucas Paquetá\",\"Pierre-Emile Höjbjerg\",\"Morgan Sanson\",\"Chris Smalling\",\"Weston McKennie\",\"Ivan Rakitic\",\"Carlos Vinícius\",\"Willian José\",\"Dani Parejo\",\"Takefusa Kubo\",\"Justin Kluivert\",\"Luka Jovic\",\"Douglas Costa\",\"Vedat Muriqi\",\"Andrea Pinamonti\",\"Raphinha\",\"Bertrand Traoré\",\"Timothy Castagne\",\"Pedrinho\",\"Krépin Diatta\",\"Antony\",\"Aleksey Miranchuk\",\"Marc Cucurella\",\"Florentino\",\"Eberechi Eze\",\"Hélder Costa\",\"Geoffrey Kondogbia\",\"Christian Kouamé\",\"Emiliano Martínez\",\"Robin Koch\",\"Fikayo Tomori\",\"Matt Doherty\",\"Jamal Lewis\",\"Karlan Grant\",\"Pervis Estupiñán\",\"Tomas Soucek\",\"Gonzalo Martínez\",\"Paulinho\",\"Luca Waldschmidt\",\"Marc Roca\",\"Malang Sarr\",\"Keita Baldé\",\"Harry Wilson\",\"Joachim Andersen\",\"Matty Cash\",\"Matías Zaracho\",\"Marko Rog\",\"Alfred Duncan\",\"Serhou Guirassy\",\"Jhon Córdoba\",\"Nicolás Otamendi\",\"Óscar Rodríguez\",\"Giovanni Simeone\",\"Ibrahima Diallo\",\"Quincy Promes\",\"Philipp Max\",\"Papu Gómez\",\"Jean-Philippe Mateta\",\"Valentino Lazaro\",\"Wylan Cyprien\",\"Pedro\",\"Karl Toko Ekambi\",\"Francis Coquelin\",\"Cristian Romero\",\"Jean-Clair Todibo\",\"Andrea Pinamonti\",\"Grady Diangana\",\"Axel Disasi\",\"Arne Maier\",\"Gedson Fernandes\",\"Brahim Díaz\",\"Kyle Walker-Peters\",\"Carles Pérez\",\"Konstantinos Tsimikas\",\"Dennis Man\",\"Jean-Daniel Akpa Akpro\",\"Joe Rodon\",\"Ollie Watkins\",\"Roberto Inglese\",\"Gerard Deulofeu\",\"Rolando Mandragora\",\"Martin Terrier\",\"Hee-chan Hwang\",\"Dejan Lovren\",\"Mohammed Salisu\",\"Álex Berenguer\",\"Oussama Idrissi\",\"Davy Klaassen\",\"Marcos Acuña\",\"Habib Diallo\",\"Dudu\",\"Santiago Arias\",\"Gonçalo Paciência\",\"Demarai Gray\",\"Daniele Rugani\",\"Alfred Duncan\",\"Diogo Dalot\",\"Brenner\",\"Anthony Knockaert\",\"Chidera Ejuke\",\"Jude Bellingham\",\"Joakim Maehle\",\"Pol Lirola\",\"Kevin Bonifazi\",\"Jakub Moder\",\"Jeremie Frimpong\",\"Adolfo Gaich\",\"Maximilian Philipp\",\"Hannes Wolf\",\"Emmanuel Dennis\",\"Félix Correia\",\"Lucas Martínez Quarta\",\"Pablo Moreno\",\"Baptiste Santamaria\",\"Alfred Gomis\",\"Ridle Baku\",\"Carlos Fernández\",\"Manolo Portanova\",\"Karol Linetty\",\"Irfan Can Kahveci\",\"Brenden Aaronson\",\"Mehdi Taremi\",\"Borja Mayoral\",\"Jesse Lingard\",\"Mario Lemina\",\"Ademola Lookman\",\"M'Baye Niang\",\"Marco Benassi\",\"Daniele Rugani\",\"Alessandro Florenzi\",\"Ki-Jana Hoever\",\"Seko Fofana\",\"Matheus Pereira\",\"Ibrahim Sangaré\",\"Aaron Mooy\",\"Morgan Schneiderlin\",\"Shane Duffy\",\"Rafinha\",\"Valentin Mihaila\",\"Adrian Grbic\",\"Mohammed Kudus\",\"Enes Ünal\",\"Eldor Shomurodov\",\"Kouadio Koné\",\"Bouna Sarr\",\"Tiquinho Soares\",\"Dalbert\",\"Kenny Lala\",\"Adolfo Gaich\",\"Evanilson\",\"Nikola Moro\",\"Facundo Pellistri\",\"Filip Stevanovic\",\"Karim Rekik\",\"Guus Til\",\"Alberto Grassi\",\"Grégoire Defrel\",\"Yann Karamoh\",\"Abel Ruiz\",\"Robson Bambu\",\"Sven Botman\",\"Bruno Fuchs\",\"Caio Henrique\",\"Terem Moffi\",\"Mohamed Fares\",\"Marley Aké\",\"Franco Tongya\",\"Elia Petrelli\",\"Talles Magno\",\"Sergio Rico\",\"Yeferson Soteldo\",\"Juan Fernando Quintero\",\"François Kamano\",\"Zé Luís\",\"Alexis Saelemaekers\",\"Matías Palacios\",\"Gerónimo Rulli\",\"Pablo\",\"Joël Veltman\",\"Antonin Barak\",\"Pol Lirola\",\"Paul Bernardoni\",\"Luis Suárez\",\"Santiago Sosa\",\"Kevin Lasagna\",\"Gregor Kobel\",\"Leonardo Balerdi\",\"Francesco Cassata\",\"Felix Uduokhai\",\"Simone Muratore\",\"Amine Gouiri\",\"Leonardo Bittencourt\",\"Jordan Lotomba\",\"Alexander Schwolow\",\"Ondrej Duda\",\"Sam Lammers\",\"Sebastian Andersson\",\"Pedro Gonçalves\",\"Simon Kjaer\",\"Luciano Vietto\",\"Toni Martínez\",\"Mijat Gacinovic\",\"Kaan Ayhan\",\"Ola Aina\",\"Javi Ontiveros\",\"Maxime Busi\",\"Mikkel Damsgaard\",\"Nahuel Bustos\",\"Francisco Montero\",\"Illan Meslier\",\"Harrison Reed\",\"Oliver Burke\",\"Lucas Veríssimo\",\"Antonio Sanabria\",\"Lucas Robertone\",\"Moses Simon\",\"Steve Mounié\",\"Terence Kongolo\",\"Álvaro González\",\"Gianluca Caprari\",\"Wesley Hoedt\",\"Ronaldo Vieira\",\"Uros Spajic\",\"Salomón Rondón\",\"Benik Afobe\",\"Hernani\",\"Simon Sohm\",\"Marcelino Moreno\",\"Stephy Mavididi\",\"Jayden Bogle\",\"Kevin Danso\",\"Jan Hurtado\",\"Yan Couto\",\"Pablo Marí\",\"Núrio Fortuna\",\"Arthur Cabral\",\"Ignatius Ganago\",\"Jonas Omlin\",\"Guilherme\",\"Vladimir Coufal\",\"Michael Olunga\",\"Diego Rosa\",\"Bruno Praxedes\",\"Michal Karbownik\",\"Umar Sadiq\",\"Nacho Fernández\",\"Luigi Sepe\",\"Shon Weissman\",\"Roger Assalé\",\"Marcel Tisserand\",\"Niklas Dorsch\",\"Adrien Hunou\",\"Dimitrios Giannoulis\",\"Henry Onyekuru\",\"Viktor Kovalenko\",\"Iago Falque\",\"Lucas Olaza\",\"Victor Moses\",\"Bryan Reynolds\",\"Giuseppe Pezzella\",\"Ivan Toney\",\"Albian Ajeti\",\"Harry Arter\",\"Waldemar Anton\",\"Bas Dost\",\"Christophe Hérelle\",\"Jordan Hugill\",\"Kenny Tete\",\"Nikola Kalinic\",\"Jeroen Zoet\",\"Mark McKenzie\",\"Lincoln\",\"Kevin Rüegg\",\"Kévin Cabral\",\"Tomás Pochettino\",\"Mërgim Vojvoda\",\"Ricardo Goulart\",\"Iván Marcone\",\"Vlad Chiriches\",\"Luis Henrique\",\"Franck Honorat\",\"Vasilis Barkas\",\"Luis Milla\",\"Kemar Roofe\",\"Bartosz Bialek\",\"Maxence Lacroix\",\"Ramadan Sobhi\",\"Loïc Mbe Soh\",\"Raúl Guti\",\"Tabata\",\"Moisés Caicedo\",\"Carlos González\",\"Emanuel Reynoso\",\"Gianluca Lapadula\",\"Anastasios Bakasetas\",\"Aleksandar Kolarov\",\"Federico Bonazzoli\",\"Filippo Falco\",\"Amer Gojak\",\"Amin Younes\",\"Pape Abou Cissé\",\"Soualiho Meïté\",\"Chris Richards\",\"Jasmin Kurtic\",\"Jens Petter Hauge\",\"Timothée Kolodziejczak\",\"Hassane Kamara\",\"Pione Sisto\",\"Maicon\",\"Dale Stephens\",\"Craig Dawson\",\"Dimitrios Siovas\",\"Alex Vigo\",\"Jun-ho Son\",\"Aleksandr Sobolev\",\"Daniel Muñoz\",\"Kévin N'Doram\",\"Oumar Solet\",\"Issa Kaboré\",\"Gustavo Maia\",\"Mirko Maric\",\"Albian Hajdari\",\"Jailson\",\"Víctor Dávila\",\"Aleksandr Kokorin\",\"Filippo Romagna\",\"Adrien Tamèze\",\"Ianis Hagi\",\"Facundo Medina\",\"Pedro Aquino\",\"Steven Zuber\",\"Koray Günter\",\"Ben Gibson\",\"Fabio Depaoli\",\"Ernesto Torregrossa\",\"Nemanja Radonjic\",\"Emiliano Rigoni\",\"Patryk Klimala\",\"Kamil Józwiak\",\"Santiago Rodríguez\",\"Sean Klaiber\",\"Yordan Osorio\",\"Manuel Ugarte\",\"Nicolò Rovella\",\"Valon Berisha\",\"José Carlos Lazo\",\"Anastasios Donis\",\"José Machín\",\"Cyriel Dessers\",\"Ömer Toprak\",\"Maxime Gonalons\",\"Deyovaisio Zeefuik\",\"Nayef Aguerd\",\"Kaly Sène\",\"Carlos Augusto\",\"Zaidu\",\"Bono\",\"Andi Zeqiri\",\"Willy Kambwala\",\"Bruno Henrique\",\"Claudio Baeza\",\"Zouhair Feddal\",\"Nuno Santos\",\"Gadi Kinda\",\"Mauro Manotas\",\"Dimitrios Limnios\",\"Marcel Ruiz\",\"Cedric Itten\",\"Bersant Celina\",\"Antonio Colak\",\"Niclas Eliasson\",\"Luciano Acosta\",\"Alan Franco\",\"Stephen Eustaquio\",\"Odion Ighalo\",\"Moussa Konaté\",\"Cecilio Domínguez\",\"Étienne Capoue\",\"Timothy Fosu-Mensah\",\"Braian Cufré\",\"Kevin Bonifazi\",\"Felipe Mora\",\"Aníbal Moreno\",\"Jemerson\",\"Peter Etebo\",\"Jorrit Hendrix\",\"Augusto Solari\",\"Bernard Mensah\",\"Florian Müller\",\"Valentin Rosier\",\"Robert Snodgrass\",\"Ovie Ejaria\",\"Max Lowe\",\"Pontus Almqvist\",\"Sebastián Ferreira\",\"Ermedin Demirovic\",\"Bastien Toma\",\"Caio Alexandre\",\"Isaac Atanga\",\"Gregore\",\"Jean-Victor Makengo\",\"Mike Trésor\",\"Helinho\",\"Eric Ramires\",\"Chadrac Akolo\",\"Mauro Quiroga\",\"Gerardo Arteaga\",\"Tim Kleindienst\",\"Daniil Fomin\",\"Etrit Berisha\",\"Ivo Grbic\",\"Kiki Kouyaté\",\"Aleksey Ionov\",\"Davide Diaw\",\"Kamil Glik\",\"Antonee Robinson\",\"Gustavo Gómez\",\"Sly\",\"Damian Kadzior\",\"Robert Gumny\",\"Ricardo Rodríguez\",\"Silvan Hefti\",\"Jack Butland\",\"Alberth Elis\",\"Djordje Mihailovic\",\"Ionut Nedelcearu\",\"Bright Osayi-Samuel\",\"Diego Farias\",\"Leonardo Koutris\",\"Sebastiano Luperto\",\"Ahmed Hegazy\",\"Lukas Lerager\",\"Lennart Czyborra\",\"Damián Batallini\",\"Adama Soumaoro\",\"Kevin Agudelo\",\"Jonathan Panzo\",\"Kaide Gordon\",\"Erik López\",\"Ante Majstorovic\",\"Scott McKenna\",\"Mattia Bani\",\"Vitor Hugo\",\"Chuba Akpom\",\"Miler Bolaños\",\"Andrés Cubas\",\"Scott Hogan\",\"Keno\",\"Emiliano Rigoni\",\"David Barbona\",\"Mbaye Diagne\",\"Borja García\",\"Patrick Burner\",\"Mattia Bani\",\"Saúl Salcedo\",\"Eduardo Vargas\",\"Akram Afif\",\"Cristian Benavente\",\"Giangiacomo Magnani\",\"Idriz Voca\",\"Isaac Lihadji\",\"Tomás Chancalay\",\"Christian Oliva\",\"Julian Chabot\",\"Omar Alderete\",\"Edon Zhegrova\",\"Gilberto\",\"Nathan\",\"Júnior Alonso\",\"Enric Gallego\",\"Juan Cruz\",\"Vagner\",\"Javi Sánchez\",\"David Turnbull\",\"Gilberto\",\"David Turnbull\",\"Luis Perea\",\"Juan Cruz\",\"Pêpê\",\"Armand Laurienté\",\"Juan Gutiérrez\",\"Alessandro Tripaldelli\",\"Edon Zhegrova\",\"Evgeniy Chernov\",\"Angelo Preciado\",\"Juan Otero\",\"Ivan Nevistic\",\"Cristian Borja\",\"Mustapha Bundu\",\"Berkay Özcan\",\"Reggie Cannon\",\"Federico Viñas\",\"Siebe Schrijvers\",\"Diogo Barbosa\",\"Jacopo Petriccione\",\"Emir Dilaver\",\"Stefan Ristovski\",\"Stiven Mendoza\",\"Georgios Kyriakopoulos\",\"Landry Dimata\",\"Tomás Cardona\",\"Félix Nzouango\",\"Christopher Lungoyi\",\"Thievy Bifouma\",\"Luan Peres\",\"Ahmed Hassan\",\"Tosin Adarabioyo\",\"Alireza Beiranvand\",\"Callum Paterson\",\"Davidson\",\"Cristian Benavente\",\"Maximiliano Lovera\",\"Franco Ibarra\",\"Leonel Miranda\",\"Álvaro Giménez\",\"Rob Dickie\",\"Alberto Soro\",\"Guilherme\",\"Yassine Benrahou\",\"Nedim Bajrami\",\"Bastos\",\"Cristian Manea\",\"Miha Zajc\",\"Jesper Karlsson\",\"Mincheng Yuan\",\"Dia Saba\",\"Aoshuang Nie\",\"Yue Xu\",\"Zhipeng Jiang\",\"Darian Males\",\"Anthony Musaba\",\"Berat Özdemir\",\"Miguel Baeza\",\"Kristoffer Askildsen\",\"Jorge Cuenca\",\"Armin Gigovic\",\"Stéphane Diarra\",\"Choco Lozano\",\"In-beom Hwang\",\"Jorge Cuenca\",\"Ravil Tagir\",\"Jordi Escobar\",\"Vinicius Souza\",\"Igor Lichnovsky\",\"Fabio Abreu\",\"Armin Gigovic\",\"Berat Özdemir\",\"Erik\",\"Kévin Monzialo\",\"Dimitrios Pelkas\",\"Thomas Murg\",\"Clifford Aboagye\",\"Kévin Denkey\",\"Alexander Bah\",\"Mostafa Mohamed\",\"Sven Kums\",\"Artur Ionita\",\"Mehdi Abeid\",\"Alexander Barboza\",\"Jonathan Menéndez\",\"Patrick Twumasi\",\"Ronald Matarrita\",\"Eric Remedi\",\"Martín Benítez\",\"Dmitri Chistyakov\",\"Leonardo Godoy\",\"Luca Mazzitelli\",\"Gastón Ávila\",\"Toni Sunjic\",\"Neil Etheridge\",\"Majeed Waris\",\"Lorenzo Tonelli\",\"Lucas Torró\",\"Marçal\",\"Cristian Lema\",\"Ben Davies\",\"Marius Bülter\",\"Juan Brunetta\",\"Ricardo Centurión\",\"Kemal Ademi\",\"Claudio Bravo\",\"Diego Pituca\",\"Pascal Stenzel\",\"Konstantinos Mavropanos\",\"Thomas Kaminski\",\"Jhonder Cádiz\",\"Lucas Pratto\",\"Baptiste Reynet\",\"Ryan Manning\",\"Guido Herrera\",\"Arkadiusz Reca\",\"João Paulo\",\"Déiber Caicedo\",\"Sam Cosgrove\",\"Siqi Feng\",\"Koki Saito\",\"Kieffer Moore\",\"Francesco Antonucci\",\"Lyndon Dykes\",\"Jacob Brown\",\"Ardian Ismajli\",\"Levi García\",\"Macauley Bonne\",\"Marko Bulat\",\"Fousseni Diabaté\",\"Agustín Fontana\",\"Thomas Didillon\",\"Mateo García\",\"Abdulfattah Asiri\",\"Heriberto Tavares\",\"Julio Tavarès\",\"Nemanja Miletic\",\"Jens Odgaard\",\"Li Lu\",\"Youssouf Ndayishimiye\",\"César Haydar\",\"Alan Franco\",\"Jorge Rodríguez\",\"Leonardo\",\"Kieran Dowell\",\"Kasper Junker\",\"Ragnar Ache\",\"Lennart Grill\",\"Thierry Ambrose\",\"Oliver Abildgaard\",\"Martin Minchev\",\"Leonardo Loria\",\"Fraser Hornby\",\"Joel Campbell\",\"Quentin Boisgard\",\"Iván Alejo\",\"Dimitri Foulquier\",\"Jorge de Frutos\",\"Luca Kilian\",\"Jeppe Kjaer\",\"Baktiyar Zaynutdinov\",\"Thomas Monconduit\",\"Smail Prevljak\",\"Franck Kanouté\",\"Jackson Muleka\",\"Jan Paul van Hecke\",\"Leonardo Lopes\",\"Davide Diaw\",\"Rúnar Alex Rúnarsson\",\"Keidi Bare\",\"Igor Jesus\",\"Leonardo Morosini\",\"Saturnin Allagbé\",\"Haissem Hassan\",\"Thiago\",\"Oleg Reabciuk\",\"Rocco Zikovic\",\"Nico Mantl\",\"Luis Orejuela\",\"Milan Badelj\",\"Saidy Janko\",\"Joe Scally\",\"Diego Lopes\",\"Blessing Eleke\",\"Fidel Martínez\",\"Alexander Ring\",\"Jean Butez\",\"Mert Cetin\",\"Fran Karacic\",\"Jaloliddin Masharipov\",\"Frankie Amaya\",\"Damjan Bohar\",\"Andrés Roa\",\"Alexandru Baluta\",\"Leandro González Pírez\",\"João Klauss\",\"Bryan Dabo\",\"Christian Rivera\",\"Ali Sowe\",\"Franco Soldano\",\"Younousse Sankharé\",\"Odil Akhmedov\",\"Nok-Hang Leung\",\"Hyoran\",\"Denis Alibec\",\"Yuchen Zhou\",\"Andrea La Mantia\",\"Marco D'Alessandro\",\"Daniil Lesovoy\",\"Myrto Uzuni\",\"Sami Tlemcani\",\"Nazim Sangaré\",\"Jordi Mboula\",\"Cacá\",\"Agustín Palavecino\",\"Lucas Da Cunha\",\"Tamás Kádár\",\"Tarik Tissoudali\",\"Walid Azaro\",\"Daniil Lesovoy\",\"Bautista Merlini\",\"Yony González\",\"Tim Parker\",\"Matías Godoy\",\"Blas Riveros\",\"Matheus Babi\",\"Dominik Frieser\",\"Nicolò Francofonte\",\"Wataru Endo\",\"Lukas Haraslin\",\"Sam Greenwood\",\"Aaron Hickey\",\"Louis Munteanu\",\"Franco Fragapane\",\"Ömer Ali Sahiner\",\"Veljko Birmancevic\",\"Pieros Sotiriou\",\"Josip Juranovic\",\"Petar Musa\",\"Badr Benoun\",\"Ben Whiteman\",\"Pedro Raul\",\"Dániel Gazdag\",\"Modou Barrow\",\"João Carlos Teixeira\",\"Frederik Alves\",\"Davide De Marino\",\"Marijan Cabraja\",\"Mauricio Lemos\",\"Mark Diemers\",\"Mousa Al-Tamari\",\"Mateo Bajamich\",\"Corentin Jean\",\"Jordan Lefort\",\"Jordi Amat\",\"Mohamed Dräger\",\"Milos Vulic\",\"Vincent Pajot\",\"Pieter Gerkens\",\"Jaime Báez\",\"Josh Windass\",\"Johan Mojica\",\"Corey Baird\",\"Kristoffer Peterson\",\"Sebastián Ferreira\",\"Kristiyan Malinov\",\"Damjan Djokovic\",\"Emanuel Brítez\",\"Franco Troyansky\",\"Luis Rojas\",\"Rodrigo Piñeiro\",\"Eboue Kouassi\",\"Tommaso Augello\",\"Adrian Semper\",\"Oleksandr Zubkov\",\"Gustavo Hamer\",\"Mohamed Buya Turay\",\"Vitali Lisakovich\",\"Helton Leite\",\"Aleksandr Zuev\",\"Emil Roback\",\"Musashi Suzuki\",\"Cenk Özkacar\",\"Okechukwu Azubuike\",\"Henk Veerman\",\"Gabriel Charpentier\",\"Caio Roque\",\"Oleksandr Filippov\",\"Samuele Vianni\",\"Emil Riis\",\"Luca Pfeiffer\",\"Rémy Vita\",\"Breno Lopes\",\"Antônio Carlos\",\"Tibor Halilovic\",\"Emil Bohinen\",\"Vitinho\",\"Alexandru Matan\",\"Emerson Santos\",\"Mohamed Buya Turay\",\"Matteo Tramoni\",\"Giannis Fetfatzidis\",\"Oston Urunov\",\"Jesper Karlström\",\"Alan Kardec\",\"Georginio Rutter\",\"Pedrinho\",\"Liam Henderson\",\"Kemar Lawrence\",\"Lazar Samardzic\",\"Dusan Jovancic\",\"Marko Tolic\",\"Kirill Panchenko\",\"Ross McCrorie\",\"Cherif Ndiaye\",\"Damian Kadzior\",\"Amato Ciciretti\",\"Wilfried Kanon\",\"Braian Romero\",\"Stefano Gori\",\"Liam Fraser\",\"Álvaro Barreal\",\"Jonson Clarke-Harris\",\"Pawel Bochniewicz\",\"Herbie Kane\",\"Mihai Bordeianu\",\"David Terans\",\"Yeison Gordillo\",\"Jamal Lowe\",\"Stef Peeters\",\"Francis Mac Allister\",\"Miroslav Bogosavac\",\"Diego Rodríguez\",\"Branko Jovicic\",\"Piero Hincapié\",\"Malte Amundsen\",\"Matheus Pereira\",\"Erik Gerbi\",\"Damian Szymanski\",\"David Zima\",\"Nikola Maras\",\"Frederik Winther\",\"César Pinares\",\"Koji Miyoshi\",\"Lyle Foster\",\"Jacob Lungi Sörensen\",\"Jonathan Leko\",\"Joe Gelhardt\",\"Edo Kayembe\",\"Nigel Robertha\",\"David Martínez\",\"Gabriel Iancu\",\"Simon Tibbling\",\"Kristijan Kahlina\",\"Wenyi Chi\",\"Rasmus Lauritsen\",\"Amadou Ciss\",\"Jorge Pombo\",\"Matous Trmal\",\"Jordan Attah Kadiri\",\"Kristijan Jakic\",\"Flávio\",\"Liberato Cacace\",\"Diego Churín\",\"Silvester van der Water\",\"Szabolcs Schön\",\"Cédric Kipré\",\"David Button\",\"Birger Meling\",\"Ivan Zlobin\",\"Everson\",\"Ciprian Tatarusanu\",\"Thiago Santos\",\"Stanislav Iljutcenko\",\"Kento Hashimoto\",\"Jonathan Herrera\",\"Davide Lanzafame\",\"Streli Mamba\",\"Jordan Botaka\",\"Tomané\",\"Richard\",\"Josh Cullen\",\"Jeando Fuchs\",\"Nemanja Nikolic\",\"Dieumerci Ndongala\",\"Mehdi Torabi\",\"Toni Sunjic\",\"Denis Will Poha\",\"Evgeniy Markov\",\"Hannes Van Der Bruggen\",\"Franco Moyano\",\"Raúl Navas\",\"Robbin Ruiter\",\"Daniele Verde\",\"Jonathan Herrera\",\"Marlon\",\"Atakan Üner\",\"Alfredo Morales\",\"Sebastián Sosa\",\"Eden Hazard\",\"Antoine Griezmann\",\"João Félix\",\"Christian Eriksen\",\"Philippe Coutinho\",\"Harry Maguire\",\"Frenkie de Jong\",\"Matthijs de Ligt\",\"Lucas Hernández\",\"Nicolas Pépé\",\"Rodri\",\"Romelu Lukaku\",\"João Cancelo\",\"Tanguy Ndombélé\",\"Luka Jovic\",\"Bruno Fernandes\",\"Luka Jovic\",\"Nabil Fekir\",\"Aaron Wan-Bissaka\",\"Éder Militão\",\"Sébastien Haller\",\"Julian Brandt\",\"Giovani Lo Celso\",\"Giovani Lo Celso\",\"Ferland Mendy\",\"Rodrygo\",\"Mateo Kovacic\",\"Youri Tielemans\",\"Konstantinos Manolas\",\"Erling Haaland\",\"Duván Zapata\",\"Joelinton\",\"Paco Alcácer\",\"Malcom\",\"Wissam Ben Yedder\",\"Hirving Lozano\",\"Moise Kean\",\"Pablo Sarabia\",\"Maxi Gómez\",\"Raúl Jiménez\",\"Thorgan Hazard\",\"Danilo\",\"Paco Alcácer\",\"Nicolò Barella\",\"Benjamin Pavard\",\"Jasper Cillessen\",\"Dejan Kulusevski\",\"Abdou Diallo\",\"Mats Hummels\",\"Steven Bergwijn\",\"Ryan Sessegnon\",\"Marko Arnautovic\",\"Kieran Trippier\",\"Dani Olmo\",\"Tiemoué Bakayoko\",\"Ayoze Pérez\",\"Franck Kessié\",\"Kerem Demirbay\",\"Krzysztof Piatek\",\"Cristian Romero\",\"Alex Iwobi\",\"Gelson Martins\",\"Idrissa Gueye\",\"Ismaïla Sarr\",\"Marcos Llorente\",\"Reinier\",\"William Saliba\",\"Matteo Politano\",\"Stephan El Shaarawy\",\"Ivan Perisic\",\"Emre Can\",\"Suso\",\"Rafael Leão\",\"Leonardo Spinazzola\",\"Borja Iglesias\",\"Pablo Fornals\",\"André Gomes\",\"Jean-Philippe Gbamin\",\"Patrick Cutrone\",\"Matteo Politano\",\"Kieran Tierney\",\"Neto\",\"Alex Meret\",\"Nico Schulz\",\"Danny Ings\",\"Mario Hermoso\",\"Lucas Tousart\",\"Jules Koundé\",\"Rony Lopes\",\"Wesley\",\"Jeff Reine-Adélaïde\",\"Joachim Andersen\",\"Bryan Cristante\",\"Thiago Mendes\",\"Junior Firpo\",\"Allan Saint-Maximin\",\"Exequiel Palacios\",\"Shoya Nakajima\",\"Henrikh Mkhitaryan\",\"Jean Michaël Seri\",\"Dennis Praet\",\"Pau López\",\"Nikola Vlasic\",\"Sander Berge\",\"Julian Weigl\",\"Gabriel Barbosa\",\"Raúl de Tomás\",\"Victor Osimhen\",\"Valentino Lazaro\",\"Tyrone Mings\",\"Adam Webster\",\"Neal Maupay\",\"Luca Pellegrini\",\"Filip Kostic\",\"Gianluca Mancini\",\"Christian Kouamé\",\"Theo Hernández\",\"Jarrod Bowen\",\"Amadou Diawara\",\"Raphinha\",\"Stanislav Lobotka\",\"Kasper Dolberg\",\"Emil Audero\",\"Felipe\",\"Raúl de Tomás\",\"Dodi Lukébakio\",\"Maximilian Philipp\",\"Renato Sanches\",\"Youssef En-Nesyri\",\"Bruno Guimarães\",\"Ademola Lookman\",\"Diadié Samassékou\",\"Andrea Petagna\",\"David Luiz\",\"Aarón Martín\",\"João Pedro\",\"Chris Smalling\",\"Giovanni Simeone\",\"Patrick Cutrone\",\"Marko Grujic\",\"Danny Rose\",\"Jordan Veretout\",\"Daniel Podence\",\"Merih Demiral\",\"Oliver McBurnie\",\"Valentino Lazaro\",\"Salomón Rondón\",\"Guus Til\",\"Guillermo Maripán\",\"Aurélien Tchouameni\",\"Matheus Cunha\",\"Edmond Tapsoba\",\"Martin Braithwaite\",\"Andrea Petagna\",\"Nahitan Nández\",\"Quincy Promes\",\"Manuel Lazzari\",\"Leander Dendoncker\",\"Grzegorz Krychowiak\",\"Pedro\",\"Stefano Sensi\",\"Pedro Neto\",\"Daniel James\",\"Yusuf Yazici\",\"Pedri\",\"Karl Toko Ekambi\",\"Alphonse Areola\",\"Munas Dabbur\",\"Carlos Vinícius\",\"Benjamin Lecomte\",\"Óliver Torres\",\"Diego Demme\",\"Nadiem Amiri\",\"Bas Dost\",\"Alfred Duncan\",\"Alban Lafont\",\"Douglas Luiz\",\"Ché Adams\",\"Stefano Sturaro\",\"Philip Billing\",\"Arnaut Danjuma\",\"Eljif Elmas\",\"Leandro Trossard\",\"Angeliño\",\"Martin Hinteregger\",\"Jean-Kévin Augustin\",\"Angeliño\",\"Mattia Caldara\",\"Moussa Djenepo\",\"Matt Targett\",\"Moussa Diaby\",\"Ozan Kabak\",\"Xaver Schlager\",\"Youssouf Fofana\",\"M'Baye Niang\",\"Diego Carlos\",\"Lucas Ocampos\",\"Keylor Navas\",\"Edson Álvarez\",\"Keylor Navas\",\"Youssouf Fofana\",\"Darío Benedetto\",\"Valentin Rongier\",\"Ionut Radu\",\"Fabian Delph\",\"Ionut Radu\",\"Merih Demiral\",\"Gedson Fernandes\",\"Patrik Schick\",\"Djibril Sidibé\",\"Martin Ødegaard\",\"Cristian Pavón\",\"Rafinha\",\"Mario Lemina\",\"Pedro\",\"Lloyd Kelly\",\"Jakub Jankto\",\"Amir Rrahmani\",\"Manuel Locatelli\",\"Joan Jordán\",\"Breel Embolo\",\"Rémy Cabella\",\"Tonny Vilhena\",\"Ruslan Malinovskyi\",\"Henry Onyekuru\",\"Razvan Marin\",\"Ezri Konsa\",\"Jeison Murillo\",\"Luis Muriel\",\"Douglas Santos\",\"Gerson\",\"Christopher Nkunku\",\"Darwin Núñez\",\"Alexis Claude-Maurice\",\"Robert Skov\",\"Victor Osimhen\",\"Pol Lirola\",\"Denis Suárez\",\"Stefan Lainer\",\"Luuk de Jong\",\"Isaac Mbenza\",\"Stanley Nsoki\",\"Takumi Minamino\",\"Nicolás Domínguez\",\"Andy Delort\",\"Erick Pulgar\",\"Ismaël Bennacer\",\"Simone Zaza\",\"Hannes Wolf\",\"Bruma\",\"Marvelous Nakamba\",\"Pedro Porro\",\"Alex Kral\",\"Thierry Correia\",\"Munas Dabbur\",\"Tino Kadewere\",\"Odion Ighalo\",\"Ally Samatta\",\"Benito Raman\",\"Téji Savanier\",\"Jacob Bruun Larsen\",\"Ihlas Bebou\",\"Chicharito\",\"Álex Moreno\",\"Adem Ljajic\",\"Ellyes Skhiri\",\"Dyego Sousa\",\"Aaron Mooy\",\"Grégoire Defrel\",\"Harry Wilson\",\"André Schürrle\",\"Diego Laxalt\",\"Ivan Cavaleiro\",\"Zinho Vanheusden\",\"Fernando\",\"Noah Okafor\",\"Lys Mousset\",\"Jack Clarke\",\"Luciano Vietto\",\"Pedro Neto\",\"Matías Vargas\",\"Rémi Oudin\",\"Rodolfo Pizarro\",\"Zé Luís\",\"Léo Duarte\",\"Maximilian Wöber\",\"Denis Vavro\",\"Maximilian Wöber\",\"Brian Rodríguez\",\"Sofyan Amrabat\",\"Djibril Sow\",\"Santiago Ascacíbar\",\"Eddie Salcedo\",\"Strahinja Pavlovic\",\"Jean Marcelin\",\"Arthur Zagre\",\"Timo Baumgartl\",\"Trezeguet\",\"Strahinja Pavlovic\",\"Santiago Ascacíbar\",\"Adrián Embarba\",\"Jean Marcelin\",\"Josh Brownhill\",\"Jay Rodríguez\",\"Ola Aina\",\"Kevin Mbabu\",\"Leandro Cabrera\",\"Bobby Reid\",\"Rubén Peña\",\"Fernando Calero\",\"Ritsu Doan\",\"Benjamin André\",\"Eduardo Salvio\",\"Kevin Trapp\",\"Rogério\",\"Luiz Gustavo\",\"Ivan Cavaleiro\",\"Gastón Pereiro\",\"Tomas Soucek\",\"Marc Cucurella\",\"Sofyan Amrabat\",\"Guido Rodríguez\",\"Matteo Darmian\",\"Adam Ounas\",\"Nikola Kalinic\",\"Marc Cucurella\",\"Jean-Clair Todibo\",\"Víctor Camarasa\",\"Gerónimo Rulli\",\"Jony\",\"Carles Pérez\",\"Davie Selke\",\"Kevin Vogt\",\"Henry Onyekuru\",\"Ethan Ampadu\",\"Mattia Perin\",\"Marcelo Saracchi\",\"Andrea Pinamonti\",\"Ricardo Rodríguez\",\"Uriel Antuna\",\"Fernando\",\"André Carrillo\",\"Mateus Uribe\",\"Alberto Cerri\",\"Anwar El Ghazi\",\"Tomas Kalas\",\"Youssouf Koné\",\"Flavien Tait\",\"Marcus Thuram\",\"Vincent Janssen\",\"Nicolás López\",\"Marin Pongracic\",\"Chicharito\",\"Giovanni Di Lorenzo\",\"Edouard Mendy\",\"Takehiro Tomiyasu\",\"Vincenzo Grifo\",\"Mbaye Diagne\",\"Sebastian Rudy\",\"Milan Badelj\",\"Fedor Smolov\",\"Kenneth Zohore\",\"Bruno Jordão\",\"Arvin Appiah\",\"Tom Heaton\",\"Alan Pulido\",\"Rade Krunic\",\"Dominik Kohr\",\"Ignacio Pussetto\",\"Walace\",\"Victor Moses\",\"Badou Ndiaye\",\"Yannick Cotter\",\"Sebastiaan Bornauw\",\"Krystian Bielik\",\"Alejandro Marqués\",\"Matías Pellegrini\",\"David Okereke\",\"Luan Cândido\",\"Nicola Sansone\",\"Roberto Soriano\",\"Juanmi\",\"Jean Lucas\",\"Christopher Jullien\",\"Joseph Aidoo\",\"Björn Engels\",\"Ivan Sunjic\",\"Wesley Saïd\",\"Han-Noah Massengo\",\"Ruben Aguilar\",\"Jeremiah St. Juste\",\"Silas Katompa Mvumpa\",\"Ludovic Blas\",\"Nicola Sansone\",\"Roberto Soriano\",\"Jean Lucas\",\"Erick Cabaco\",\"Luan Cândido\",\"Edimilson Fernandes\",\"Simon Mignolet\",\"Michel Vlap\",\"Niclas Füllkrug\",\"Andreas Skov Olsen\",\"Laurent Koscielny\",\"Luan\",\"Valentin Rosier\",\"Martin Braithwaite\",\"Alexander Djiku\",\"Anthony Knockaert\",\"Charlie Austin\",\"Kevin Danso\",\"Paulo Díaz\",\"Jordan Ayew\",\"Gianluca Caprari\",\"Marius Wolf\",\"Jeison Murillo\",\"Khouma Babacar\",\"Emiliano Rigoni\",\"Nacho Monreal\",\"Callum Robinson\",\"Francesco Caputo\",\"Agustín Marchesín\",\"Morato\",\"George Puscas\",\"Tomas Koubek\",\"Mamadou Loum\",\"Javi Ontiveros\",\"Michael\",\"Ivan Ignatjev\",\"Dawid Kownacki\",\"Vitor Hugo\",\"Christian Luyindama\",\"Gustavo Cuéllar\",\"Lucas Zelarayán\",\"Luis Díaz\",\"Ryan Kent\",\"Jesús Angulo\",\"Cristian Calderón\",\"Aké Loba\",\"Albian Ajeti\",\"Pedro Obiang\",\"Andrea Favilli\",\"Lisandro Martínez\",\"Eduard Löwen\",\"Marcos Senesi\",\"Andrea Favilli\",\"Lisandro Martínez\",\"Léo Pereira\",\"Théo Bongonda\",\"Alessandro Russo\",\"Kwang-song Han\",\"Landry Dimata\",\"Naïm Sliti\",\"Aden Flint\",\"Alexis Saelemaekers\",\"Víctor Ruiz\",\"Rodrigo Becão\",\"Kevin-Prince Boateng\",\"Konstantinos Mitroglou\",\"Leonardo Bittencourt\",\"Michael Gregoritsch\",\"Pape Cheikh\",\"Zack Steffen\",\"Jan Hurtado\",\"James Justin\",\"Iago\",\"Sam Gallagher\",\"Domagoj Bradaric\",\"Bryan Mbeumo\",\"Lucas Lima\",\"Patrik Hrosovsky\",\"Yevgen Konoplyanka\",\"Gustavo Bou\",\"Richard Sánchez\",\"Matías Viña\",\"Luis Romo\",\"Pontus Jansson\",\"Christian Cueva\",\"Lukas Lerager\",\"Victorien Angban\",\"Serhou Guirassy\",\"Gabriel Brazão\",\"Denis Cheryshev\",\"Craig Dawson\",\"Stefano Denswil\",\"Enric Gallego\",\"Léo Jardim\",\"Clinton N'Jie\",\"Robert Glatzel\",\"Kemar Roofe\",\"Paul Onuachu\",\"Alfred N'Diaye\",\"Robert Navarro\",\"Raúl Moro\",\"Artur\",\"Andraz Sporar\",\"Michael Krmencik\",\"Rony\",\"Sebastian Szymanski\",\"Chiquinho\",\"Rúben Vezo\",\"Ianis Hagi\",\"Denis Bouanga\",\"Guillermo Pol Fernández\",\"Björn Engels\",\"Mohamed Fares\",\"Sofiane Hanni\",\"Ryad Boudebouz\",\"Shinji Kagawa\",\"Marko Marin\",\"Nicolás Figal\",\"Sergi Palencia\",\"Nicolás Fernández\",\"Marko Rog\",\"Anthony Limbombe\",\"Florin Andone\",\"Adrien Tamèze\",\"Gregor Kobel\",\"Pedro Rebocho\",\"Ante Coric\",\"Alexander Sörloth\",\"Michael Hector\",\"Luke Freeman\",\"Vedat Muriqi\",\"Manu Vallejo\",\"Renzo Saravia\",\"Ronaël Pierre-Gabriel\",\"Elkeson\",\"Sada Thioub\",\"Nikolay Komlichenko\",\"Chang-hoon Kwon\",\"Matheus Pereira\",\"Ricardo Lopes\",\"Julián Carranza\",\"Sebastián Jurado\",\"Lucas João\",\"Emil Krafth\",\"Bryan Angulo\",\"Shin-wook Kim\",\"Caio Canedo\",\"Bruno Jordão\",\"Abdulfattah Adam\",\"Ivan Santini\",\"Predrag Rajković\",\"Pep Biel\",\"Jesse Joronen\",\"Sam Larsson\",\"Kik Pierie\",\"Cleiton\",\"Daley Sinkgraven\",\"Rasmus Kristensen\",\"Kenneth Omeruo\",\"Moisés\",\"Gonzalo Villar\",\"Cleiton\",\"Sam Larsson\",\"Marcus Danielson\",\"Jota Peleteiro\",\"Fabio Depaoli\",\"Georges-Kevin N'Koudou\",\"Jonathan Schmid\",\"Raúl Albiol\",\"Alessandro Murgia\",\"Manu García\",\"Jonas Martin\",\"Dylan Bronn\",\"Felipe Avenatti\",\"Efthymios Koulouris\",\"James McCarthy\",\"Koffi Djidji\",\"Ralf Fährmann\",\"Chimy Ávila\",\"Christian Oliva\",\"Cristian Ansaldi\",\"Marvin Spielmann\",\"Zanka\",\"Jesé\",\"Alexis Blin\",\"Cristo González\",\"Antonin Bobichon\",\"Moi Gómez\",\"Gonzalo Maroni\",\"Erik Pieters\",\"Massimo Luongo\",\"Andreaw Gravillon\",\"Luiz Adriano\",\"Jetro Willems\",\"Ömer Toprak\",\"Nabil Bentaleb\",\"Ramadan Sobhi\",\"Asmir Begovic\",\"Nahki Wells\",\"Darren Randolph\",\"Mert Müldür\",\"Lennart Czyborra\",\"Derlis González\",\"Derlis González\",\"Edison Flores\",\"Lucas Cavallini\",\"Modibo Sagnan\",\"Juan Pablo Vigón\",\"Rúben Semedo\",\"Lucien Agoumé\",\"Fernando\",\"Leonardo Mancuso\",\"Michael Ngadeu\",\"Tiago Volpi\",\"Gastón Giménez\",\"Renaud Emond\",\"Jaroslaw Niezgoda\",\"Alexander Barboza\",\"Yohan Boli\",\"Simon Deli\",\"Éder Balanta\",\"Iuri Medeiros\",\"Miroslav Stoch\",\"Fayçal Fajr\",\"Sly\",\"Eduardo Sasha\",\"Ángel González\",\"Diego Farias\",\"Pablo Maffeo\",\"Ron-Robert Zieler\",\"Julian Gressel\",\"Michael Lang\",\"Taiwo Awoniyi\",\"Jasmin Kurtic\",\"Aleksandr Sobolev\",\"Leonardo Koutris\",\"Martín Benítez\",\"Filip Bradaric\",\"Jack Stacey\",\"Tommy Smith\",\"Juan Escobar\",\"Morgan Rogers\",\"Mert Cetin\",\"Dmitri Skopintsev\",\"Adam Buksa\",\"Emanuel Vignato\",\"Sam McCallum\",\"Ángelo Araos\",\"John Mary\",\"Renan Lodi\",\"Luca Zanimacchia\",\"Dimitrios Nikolaou\",\"Sergio León\",\"Dejan Joveljic\",\"Birger Verstraete\",\"Rubén Vargas\",\"Pawel Jaroszynski\",\"Andrea Adorante\",\"Mattias Andersson\",\"Carlos Gruezo\",\"Nicolae Stanciu\",\"Edu Expósito\",\"Reziuan Mirzov\",\"Sebastian Rode\",\"Tiago Djaló\",\"Jordan Larsson\",\"Lucas Romero\",\"Lamine Fomba\",\"Yannick Gomis\",\"Hicham Boudaoui\",\"Miha Mevlja\",\"Vitão\",\"Patryk Klimala\",\"Anderson Niangbo\",\"Mubarak Wakaso\",\"Robert Bozenik\",\"Bosko Sutalo\",\"Héctor Villalba\",\"Kaj Sierhuis\",\"Tamás Kádár\",\"Gonzalo Melero\",\"David Ospina\",\"Maximiliano Lovera\",\"Iván Marcano\",\"Fiete Arp\",\"Ezequiel Ponce\",\"Dmitri Poloz\",\"Benson\",\"Egor Sorokin\",\"Jonathan Kodjia\",\"Enzo Crivelli\",\"Brandley Kuwas\",\"Eddy Gnahoré\",\"Lucas Pérez\",\"Lucas Janson\",\"Luka Djordjevic\",\"Joselu\",\"Matías Rojas\",\"Brice Samba\",\"Jordan Ferri\",\"Sergey Tkachev\",\"Pere Pons\",\"Florian Ayé\",\"Zaydou Youssouf\",\"Takashi Inui\",\"Borja Mayoral\",\"Reece Oxford\",\"Robert Beric\",\"Paul-José Mpoku\",\"Nasser El Khayati\",\"Ashley Young\",\"Ryan Babel\",\"Umut Bozok\",\"Rajiv van La Parra\",\"Sanjin Prcic\",\"Anastasios Donis\",\"Kamil Grosicki\",\"Clayson\",\"Valentín Vada\",\"Adrián Dalmau\",\"Sidcley\",\"Hamza Mendyl\",\"Mariusz Stepinski\",\"Sebastián Palacios\",\"Guilherme\",\"Oscar Taty Maritu\",\"Matt Clarke\",\"Ben Osborn\",\"Giacomo Vrioni\",\"Odilon Kossounou\",\"Carlos Cuesta\",\"Danijel Aleksic\",\"Mathias Jensen\",\"Kasey Palmer\",\"Juan Dinenno\",\"Mariusz Stepinski\",\"Manuel Pucciarelli\",\"Jaromir Zmrhal\",\"Fabrizio Angileri\",\"Leonardo Gil\",\"Gary Medel\",\"Julian Chabot\",\"Benjamin Nygren\",\"Alex Ferrari\",\"Victor Nelsson\",\"Alexis Peña\",\"Marrony\",\"Pawel Dawidowicz\",\"Victor Sá\",\"Christian Nörgaard\",\"Marco Friedl\",\"Jesús Angulo\",\"Rubén García\",\"Stephen Odey\",\"Anderson Esiti\",\"Erasmo Mulè\",\"Galeno\",\"Kwang-song Han\",\"Mounir Chouiar\",\"Johan Vásquez\",\"Allan\",\"Boli Bolingoli\",\"Nicolás Reniero\",\"Aleksey Sutormin\",\"Lisandro López\",\"Arnaud Souquet\",\"Evander\",\"Florian Niederlechner\",\"Aleksey Sutormin\",\"Yannis Salibur\",\"Nuno Da Costa\",\"Yeimar Gómez Andrade\",\"Tim Leibold\",\"Igor Diveev\",\"Felix Uduokhai\",\"Moussa Koné\",\"Nélson Oliveira\",\"Guillermo Ochoa\",\"Carlos Eduardo\",\"Nicolás Blandi\",\"Sam Byram\",\"Kristoffer Peterson\",\"Thomas Didillon\",\"Arkadiusz Reca\",\"Josef Husbauer\",\"Pablo Santos\",\"Obbi Oulare\",\"Kortney Hause\",\"Ethan Pinnock\",\"David Raya\",\"Quique González\",\"Haroune Camara\",\"Ludovit Reis\",\"Milos Degenek\",\"Romaine Sawyers\",\"Franck Kom\",\"Nicolas Gavory\",\"Enzo Barrenechea\",\"Stefano Palmucci\",\"Ignacio Jeraldino\",\"Darwin Machís\",\"Mattia Sprocati\",\"Christian Rasmussen\",\"David Kinsombi\",\"Pedro Bigas\",\"Kaio\",\"Fabien Centonze\",\"El Arbi Hillel Soudani\",\"Igor\",\"Andrea Romagnoli\",\"Marco Sala\",\"Mattia Valoti\",\"Reinildo Mandava\",\"Douglas Augusto\",\"Eduardo Henrique\",\"Sory Kaba\",\"Raniel\",\"Elmir Nabiullin\",\"Roberto Olabe\",\"Luis Advíncula\",\"Claudio Baeza\",\"Domingos Duarte\",\"Marcus Coco\",\"Ricardo Gomes\",\"Gonçalo Cardoso\",\"Gaël Kakuta\",\"Casimir Ninga\",\"Halil Dervisoglu\",\"Federico Ricca\",\"Luka Ivanusec\",\"Dario Maresic\",\"Youcef Belaïli\",\"Tim Kleindienst\",\"Philipp Förster\",\"Slobodan Tedic\",\"Allan Nyom\",\"Alerrandro\",\"Mikkel Kaufmann\",\"Ignacio Aliseda\",\"Yimmi Chará\",\"Jonathan Silva\",\"Michael Estrada\",\"Marvin Friedrich\",\"Deniz Türüc\",\"Alberto Soro\",\"Jorge Carrascal\",\"Jay Dasilva\",\"Jeremy Toljan\",\"Jorge Sáenz\",\"Younes Namli\",\"Olivier Boscagli\",\"Bruno Ecuele Manga\",\"Sebastián Palacios\",\"Juan Ramírez\",\"Gen Shoji\",\"Michal Travnik\",\"Carlinhos Junior\",\"Felipe Mora\",\"Sargis Adamyan\",\"Lamine Koné\",\"Vincent Sierro\",\"Lasse Schöne\",\"Caio Lucas\",\"Igor\",\"Marc Muniesa\",\"Bruno Varela\",\"Marvin Friedrich\",\"Peter Ankersen\",\"Jacek Goralski\",\"Marlon Pack\",\"Erik Thommy\",\"Oscar Hiljemark\",\"Pedro Rocha\",\"Wilfrid Kaptoum\",\"Lukas Rupp\",\"Stefan Ilsanker\",\"Ruslan Kambolov\",\"Elías Gómez\",\"Wil Trapp\",\"Kiril Despodov\",\"Eric Lanini\",\"Alessandro Minelli\",\"Thonny Anderson\",\"Matteo Luigi Brunori\",\"Marco D'Aloia\",\"Bernard Mensah\",\"José Machín\",\"Nana Ampomah\",\"Simon Skrabb\",\"Octavio Rivero\",\"Matías Kranevitter\",\"Dmitri Zhivoglyadov\",\"Guilherme Arana\",\"Bailey Peacock-Farrell\",\"Diego Zabala\",\"José Cifuentes\",\"Mattia Bani\",\"Marco Olivieri\",\"Maurits Kjaergaard\",\"Daishawn Redan\",\"Jamal Lowe\",\"Kieffer Moore\",\"Hany Mukhtar\",\"Leonardo\",\"Víctor Cantillo\",\"Nicolás Freire\",\"Steven Skrzybski\",\"Karlo Bartolec\",\"Lucas Hernández\",\"Shuai Pei\",\"Dalun Zheng\",\"Xinli Peng\",\"Qianglong Tao\",\"Jiali Hu\",\"Yongpo Wang\",\"Long Zheng\",\"Gianluca Frabotta\",\"Rui Yu\",\"Sead Haksabanovic\",\"Wei Wu\",\"Fan Yang\",\"Zhenqin Li\",\"Gastón Brugman\",\"Zixuan Li\",\"Mehdi Léris\",\"Samuel Di Carmine\",\"José Sá\",\"Bernard Tekpetey\",\"Luca Itter\",\"Philipp Klement\",\"Benjamin Sesko\",\"Fernando Gorriarán\",\"Jhonder Cádiz\",\"Murilo Cerqueira\",\"Peniel Mlapa\",\"Marc Cardona\",\"Andrés Martín\",\"Oleksandr Karavaev\",\"Nikola Dovedan\",\"Samu Saiz\",\"Agustín Rogel\",\"Leo Stulac\",\"Xavier Amaechi\",\"Kevin Agudelo\",\"Hakon Evjen\",\"Mats Möller Daehli\",\"Gabriele Moncini\",\"Lucas Menossi\",\"Marco Varnier\",\"Hendrik Van Crombrugge\",\"Romario Benzar\",\"Emil Krafth\",\"Ibrahima Diallo\",\"Umar Sadiq\",\"Daniel Carriço\",\"Carlitos\",\"Anderson Julio\",\"Sasa Kalajdzic\",\"Berkay Özcan\",\"Svetozar Markovic\",\"Riechedly Bazoer\",\"Younes Namli\",\"Mauro Pittón\",\"Héctor Fértoli\",\"Silvije Begic\",\"Roberto Rosales\",\"Aminu Umar\",\"Walker Zimmerman\",\"Mauro Pittón\",\"Oleg Danchenko\",\"Lucas Deaux\",\"Yordan Osorio\",\"Nino\",\"Cristian Guanca\",\"Ertugrul Ersoy\",\"Mama Baldé\",\"Daniele Verde\",\"Fernando Gaibor\",\"Federico Mattiello\",\"Maximilian Ullmann\",\"Bernard Tekpetey\",\"Chema Rodríguez\",\"Gerard Gumbau\",\"Nonato\",\"José Manuel Arnáiz\",\"Emanuel Brítez\",\"Abdul-Aziz Tetteh\",\"Nedim Bajrami\",\"Facundo Roncaglia\",\"Franco Soldano\",\"Claudemir\",\"Gennaro Tutino\",\"Jannes Horn\",\"Timo Letschert\",\"Hamdan Al-Shammrani\",\"Abdulrahman Al-Obood\",\"Tyler Boyd\",\"Abner\",\"Martín Satriano\",\"Will Vaulks\",\"Edoardo Masciangelo\",\"Cristian Espinoza\",\"Sebastián Cáceres\",\"Ismaila Soro\",\"Nicolás Acevedo\",\"Josecarlos van Rankin\",\"Francisco Ginella\",\"Liam Lindsay\",\"Lucas Passerini\",\"Benjamín Garré\",\"Shandon Baptiste\",\"Souleymane Doukara\",\"Davide Mariani\",\"Anto Grgic\",\"Tomás Pochettino\",\"Rodrigo Aliendro\",\"David Barbona\",\"Carlos Auzqui\",\"Ola Kamara\",\"Ramón Miérez\",\"Aleksandar Boljevic\",\"Ante Budimir\",\"Daniel Bentley\",\"Antonee Robinson\",\"Gavin Whyte\",\"Tom Bayliss\",\"Anfernee Dijksteel\",\"Carl Jenkinson\",\"Isaac Vassell\",\"Lucas Fernandes\",\"Mateo García\",\"Michael Santos\",\"Matteo Lovato\",\"Ryota Morioka\",\"Jerdy Schouten\",\"Patryk Dziczek\",\"Amir Rrahmani\",\"Camilo\",\"Filip Helander\",\"Rey Manaj\",\"Jack Lahne\",\"Brandon Thomas\",\"Danilo Avelar\",\"Kingsley Ehizibue\",\"Christopher Martins Pereira\",\"Woo-yeong Jeong\",\"Anthony Ujah\",\"Michael Ohana\",\"Bryan Okoh\",\"Cristian Galano\",\"Luis Rioja\",\"Jens Stage\",\"Ewerton\",\"Ivan Novoseltsev\",\"Jean-Ricner Bellegarde\",\"Maximiliano Salas\",\"Ui-jo Hwang\",\"Chidera Ejuke\",\"Romain Perraud\",\"Guglielmo Vicario\",\"Show\",\"Youssoufou Niakaté\",\"Joel Valencia\",\"Franck Boli\",\"Gerson Rodrigues\",\"Esteban Pavez\",\"Sidy Sarr\",\"Ádám Nagy\",\"Thomás Chacón\",\"Rober Ibáñez\",\"Danil Krugovoy\",\"Zakaria Aboukhlal\",\"Dani de Wit\",\"Caleb Zady Sery\",\"Jean-Kévin Duverne\",\"Maximiliano Araújo\",\"Guilherme Augusto\",\"Aliou Badji\",\"Rey Manaj\",\"Marvin Zeegelaar\",\"Jean Onana\",\"Mehdi Chahiri\",\"Lirim Kastrati\",\"Pieros Sotiriou\",\"Janio Bikel\",\"Sepp van den Berg\",\"Denis Dragus\",\"Felipe Aguilar\",\"Fernando González\",\"Paul Nardi\",\"Jules Keita\",\"Oier Olazábal\",\"Samir Memisevic\",\"Lucas Gamba\",\"Kemar Lawrence\",\"Ivan Petryak\",\"Luciano\",\"Darko Brasanac\",\"Jeando Fuchs\",\"Fede Varela\",\"Alfred Gomis\",\"Chris Löwe\",\"Antonio Colak\",\"Jón Dadi Bödvarsson\",\"Cafú\",\"Ibragim Tsallagov\",\"Dan Crowley\",\"Tomané\",\"Sigurd Rosted\",\"Everton Felipe\",\"Samba Sow\",\"Juan Dinenno\",\"Anice Badri\",\"Pedro Henrique\",\"Wilfried Kanon\",\"John Guidetti\",\"Suleiman Abdullahi\",\"Gaëtan Bong\",\"Chadrac Akolo\",\"Jakov Puljic\",\"Jonathan Gradit\",\"Fran Villalba\",\"Andrey Panyukov\",\"Wataru Endo\",\"Matías Godoy\",\"Lukas Haraslin\",\"Patryk Dziczek\",\"Emre Mor\",\"Elio Capradossi\",\"Ramón Martínez\",\"Mohamed Awad\",\"Alex Castro\",\"Jamiro Monteiro\",\"Júnior Urso\",\"Xiaoxiao Zhang\",\"Matteo Pinelli\",\"Bartosz Slisz\",\"Ali Adnan\",\"Jefferson Savarino\",\"Nikita Vlasenko\",\"Fabian Pavone\",\"Ales Mateju\",\"Mohanad Ali\",\"Junior Kabananga\",\"Félix Torres\",\"Hatem Abd Elhamed\",\"Dany Mota\",\"José Madueña\",\"Thiago Martins\",\"Johan Vásquez\",\"Miguel Barbieri\",\"Jonathan Perlaza\",\"Eden Shamir\",\"Koya Kitagawa\",\"Keaton Parks\",\"Bruno Martella\",\"Andrea Schenetti\",\"Stef Peeters\",\"Nikita Chernov\",\"Gerson Rodrigues\",\"Alejandro Donatti\",\"Jens Odgaard\",\"Matías De los Santos\",\"Cristian Chávez\",\"Aldo Cruz\",\"Adrián Mora\",\"Filipe Soares\",\"James Scott\",\"Juan Brunetta\",\"Dereck Kutesa\",\"Carlos Mané\",\"Miguel Trauco\",\"Darlington Nagbe\",\"Ognjen Mudrinski\",\"Sebastián Ribas\",\"Simone Scuffet\",\"Lei Tong\",\"Mateo Klimowicz\",\"Omar Alderete\",\"Aleksa Terzić\",\"Noah Joel Sarenren Bazee\",\"Pablo Marí\",\"Simon Sluga\",\"Darnell Furlong\",\"Harvey Elliott\",\"John Marquis\",\"Farouk Miya\",\"Pablo Ceppelini\",\"William Mendieta\",\"Seung-woo Lee\",\"Kamil Wilczek\",\"Ibrahima Seck\",\"Luka Stojanovic\",\"Federico Ricci\",\"Kylian Mbappé\",\"Cristiano Ronaldo\",\"Kepa Arrizabalaga\",\"Thomas Lemar\",\"Riyad Mahrez\",\"Naby Keïta\",\"Thibaut Courtois\",\"Christian Pulisic\",\"Alisson\",\"Fred\",\"Jorginho\",\"Douglas Costa\",\"Gonzalo Higuaín\",\"Álvaro Morata\",\"Gonzalo Higuaín\",\"Vinicius Junior\",\"Fabinho\",\"Malcom\",\"Radja Nainggolan\",\"Patrik Schick\",\"Paulinho\",\"João Cancelo\",\"Gonçalo Guedes\",\"Leandro Paredes\",\"Paulinho\",\"Tiemoué Bakayoko\",\"Michy Batshuayi\",\"Richarlison\",\"Lucas Paquetá\",\"Felipe Anderson\",\"Thilo Kehrer\",\"Mattia Caldara\",\"Clément Lenglet\",\"Leonardo Bonucci\",\"Krzysztof Piatek\",\"Shoya Nakajima\",\"Gelson Martins\",\"Arturo Vidal\",\"Arthur\",\"Yerry Mina\",\"Fabián Ruiz\",\"Álvaro Odriozola\",\"Jean Michaël Seri\",\"Aleksandr Golovin\",\"Lucas Torreira\",\"Steven Nzonzi\",\"Geoffrey Kondogbia\",\"Marek Hamsik\",\"Keita Baldé\",\"Giovani Lo Celso\",\"Michy Batshuayi\",\"Anthony Modeste\",\"Abdou Diallo\",\"Jefferson Lerma\",\"Kevin Strootman\",\"Lautaro Martínez\",\"Issa Diop\",\"Bernd Leno\",\"James Maddison\",\"Jannik Vestergaard\",\"Simone Verdi\",\"Rodri\",\"Talisca\",\"Paulinho\",\"William Carvalho\",\"Bryan Cristante\",\"Cesc Fàbregas\",\"Tanguy Ndombélé\",\"Sime Vrsaljko\",\"Bryan Cristante\",\"André Zambo Anguissa\",\"Javier Pastore\",\"Aleksandar Mitrović\",\"Yuri Berchiche\",\"Miguel Almirón\",\"Quincy Promes\",\"Alassane Plea\",\"Andriy Yarmolenko\",\"Nikola Kalinic\",\"Diogo Dalot\",\"Ricardo Pereira\",\"Moussa Dembélé\",\"Mariano Díaz\",\"Talisca\",\"Matteo Politano\",\"André Silva\",\"Simone Zaza\",\"Samu Castillejo\",\"Dominic Solanke\",\"Caglar Söyüncü\",\"Jonny Otto\",\"Lucas Digne\",\"Thomas Delaney\",\"Axel Witsel\",\"Willem Geubbels\",\"Willem Geubbels\",\"Rolando Mandragora\",\"Axel Witsel\",\"Adama Traoré\",\"Benjamin Henrichs\",\"Amadou Haidara\",\"Duván Zapata\",\"Sokratis Papastathopoulos\",\"Kévin Gameiro\",\"Gonzalo Martínez\",\"Duván Zapata\",\"Duje Caleta-Car\",\"Alireza Jahanbakhsh\",\"Diego Laxalt\",\"Karl Toko Ekambi\",\"Rui Patrício\",\"Mohamed Elyounoussi\",\"Daley Blind\",\"Xherdan Shaqiri\",\"Santiago Arias\",\"Alban Lafont\",\"Salif Sané\",\"Mousa Dembélé\",\"Grzegorz Krychowiak\",\"Islam Slimani\",\"Joaquín Correa\",\"Justin Kluivert\",\"Brahim Díaz\",\"Emiliano Sala\",\"Leander Dendoncker\",\"Ben Gibson\",\"Alfie Mawson\",\"Ahmed Musa\",\"Nordi Mukiele\",\"Sebastian Rudy\",\"Mattia Perin\",\"Jordan Amavi\",\"Leonardo Balerdi\",\"Grégoire Defrel\",\"João Carvalho\",\"Matheus Cunha\",\"Mouctar Diakhaby\",\"Diego Rico\",\"Wilmar Barrios\",\"Tetê\",\"Dusan Tadić\",\"Joris Gnagnon\",\"Davy Klaassen\",\"Jeison Murillo\",\"Nacer Chadli\",\"Medhi Benatia\",\"Kurt Zouma\",\"Marouane Fellaini\",\"Daniel Wass\",\"Jonny Evans\",\"Raúl Jiménez\",\"André Gomes\",\"Paco Alcácer\",\"André Ayew\",\"Jeison Murillo\",\"Marko Pjaca\",\"Badou Ndiaye\",\"Cédric Soares\",\"André Schürrle\",\"Roger Martínez\",\"Rodolfo Pizarro\",\"Filip Benkovic\",\"Nikola Kalinic\",\"Ibrahim Amadou\",\"Diogo Jota\",\"Danny Ward\",\"Jean-Eudes Aholou\",\"Rachid Ghezzal\",\"Diego Lainez\",\"Maximiliano Meza\",\"Gerard Deulofeu\",\"Fedor Smolov\",\"Chris Mepham\",\"Benik Afobe\",\"Mbaye Diagne\",\"Germán Pezzella\",\"Salomón Rondón\",\"Adem Ljajic\",\"Matej Vydra\",\"M'Baye Niang\",\"Mitchell Weiser\",\"Willy Boly\",\"Marcelo Saracchi\",\"Mikel Merino\",\"Vitinho\",\"Kévin Malcuit\",\"Marlon\",\"Souza\",\"Nemanja Radonjic\",\"Emerson Royal\",\"Sardar Azmoun\",\"Cheikhou Kouyaté\",\"Giuliano\",\"Jonny Otto\",\"Juan Bernat\",\"Aarón Martín\",\"Loris Karius\",\"Denis Suárez\",\"Munir El Haddadi\",\"Manolo Gabbiadini\",\"Soualiho Meïté\",\"Benik Afobe\",\"Josh Murphy\",\"Jonathan Rodríguez\",\"Bobby Reid\",\"David Brooks\",\"Angus Gunn\",\"Nicolás González\",\"Tom Ince\",\"Gianluca Lapadula\",\"Suat Serdar\",\"Fodé Ballo-Touré\",\"Ozan Kabak\",\"Emmanuel Boateng\",\"Sergi Darder\",\"Armando Izzo\",\"Yoshinori Muto\",\"Víctor Dávila\",\"Orbelín Pineda\",\"Valentino Lazaro\",\"Wout Weghorst\",\"Odsonne Edouard\",\"Djaniny\",\"Francesco Acerbi\",\"Danilo Barbosa\",\"Omar Mascarell\",\"Daniel Ginczek\",\"Bernardo\",\"Borja Iglesias\",\"Antonio Barreca\",\"Nemanja Maksimovic\",\"Santiago Cáseres\",\"Adama Diakhaby\",\"Jérémie Boga\",\"Alphonso Davies\",\"Myziane Maolida\",\"Jason Denayer\",\"Vicente Iborra\",\"Aleksandar Prijovic\",\"Yaroslav Rakitskyi\",\"Nicolae Stanciu\",\"Gabriel Pires\",\"Pablo Maffeo\",\"Ramiro Funes Mori\",\"Carlos Salcedo\",\"Valon Berisha\",\"Mikel Merino\",\"Wahbi Khazri\",\"Carlos Bacca\",\"João Moutinho\",\"Marius Wolf\",\"Ante Rebic\",\"Joe Hart\",\"Nicolas N'Koulou\",\"Roberto Inglese\",\"Dwight Gayle\",\"Kevin Wimmer\",\"Grégoire Defrel\",\"Henry Onyekuru\",\"Martin Hinteregger\",\"Steven Zuber\",\"Marius Wolf\",\"Kevin Akpoguma\",\"Gerson\",\"Davide Santon\",\"Róger Guedes\",\"Aleix Vidal\",\"Brian Fernández\",\"Giorgian de Arrascaeta\",\"Riccardo Saponara\",\"Jordan Siebatcheu\",\"Lukasz Skorupski\",\"Antonino La Gumina\",\"Robin Olsen\",\"Lisandro Magallán\",\"Rabbi Matondo\",\"Garry Rodrigues\",\"Rodrigo Caio\",\"Rémy Cabella\",\"Odion Ighalo\",\"Benedikt Höwedes\",\"Juan Fernando Quintero\",\"Andrea Petagna\",\"Riccardo Saponara\",\"Nikola Vukcevic\",\"Guido Pizarro\",\"Andriy Lunin\",\"Roger Martínez\",\"Nordin Amrabat\",\"Samuel Kalu\",\"Kasim Adams\",\"Silvan Widmer\",\"Hassane Bandé\",\"Anthony Limbombe\",\"Yves Bissouma\",\"Alejandro Pozuelo\",\"Samuel Gigot\",\"Lukasz Fabianski\",\"Aden Flint\",\"Jean-Philippe Mateta\",\"Mattéo Guendouzi\",\"Christian Cueva\",\"Ignacio Pussetto\",\"Cristiano Piccini\",\"Fran Beltrán\",\"Erling Haaland\",\"Bubacarr Sanneh\",\"Alexis Mac Allister\",\"Sam Vokes\",\"Alexandru Mitrita\",\"Khouma Babacar\",\"Éder Militão\",\"Martín Montoya\",\"Sam Clucas\",\"Federico Fernández\",\"Tomás Rincón\",\"Ole Selnaes\",\"Gonzalo Castro\",\"Jérôme Roussillon\",\"Sandro Wagner\",\"Omar Mascarell\",\"Mario Pasalic\",\"Bruno Peres\",\"Luis Muriel\",\"Kevin-Prince Boateng\",\"Jean-Clair Todibo\",\"Almamy Touré\",\"Gabriel Barbosa\",\"Marko Rog\",\"Stuart Armstrong\",\"Patrick Bamford\",\"Nicolás Castillo\",\"George Saville\",\"Andrea Favilli\",\"Riza Durmisi\",\"Pierre Kunde\",\"Iván Marcone\",\"Marcel Tisserand\",\"Lukasz Teodorczyk\",\"Ante Coric\",\"Okay Yokuslu\",\"Érick Gutiérrez\",\"Vincenzo Grifo\",\"Lucas Pérez\",\"Dominique Heintz\",\"Borja Mayoral\",\"Alberto Cerri\",\"Roberto Soriano\",\"Emiliano Rigoni\",\"Federico Di Francesco\",\"Sam Johnstone\",\"Ryan Woods\",\"Peter Etebo\",\"Pelé\",\"Nicolás Castillo\",\"Ronaldo Vieira\",\"Néstor Araújo\",\"Davide Bettella\",\"Diego Falcinelli\",\"Daniel Podence\",\"Romarinho\",\"Ayrton Lucas\",\"Sékou Sanogo\",\"Wilson Manafá\",\"Jacob Rasmussen\",\"Yann Karamoh\",\"Ramadan Sobhi\",\"Roque Mesa\",\"Lucas Castro\",\"Éder\",\"Fabio Borini\",\"Carlos Salcedo\",\"Adam Masina\",\"Frédéric Guilbert\",\"Max Gradel\",\"Naïm Sliti\",\"Stefano Sturaro\",\"Antonio Barreca\",\"Ramadan Sobhi\",\"Kevin Mirallas\",\"Antonio Sanabria\",\"Reece Oxford\",\"Jacob Murphy\",\"Lewis Grabban\",\"Elías Hernández\",\"Joe Bryan\",\"Maycon\",\"Raphinha\",\"Federico Santander\",\"Vladyslav Supryaga\",\"Lovre Kalinic\",\"Dawid Kownacki\",\"Juraj Kucka\",\"Raúl Ruidíaz\",\"Christian Kouamé\",\"Ante Palaversa\",\"Raphael Dwamena\",\"Diego Valdés\",\"Andreaw Gravillon\",\"Borna Sosa\",\"Leonardo Bittencourt\",\"Zakaria Labyad\",\"Uros Spajic\",\"Florin Andone\",\"Walace\",\"William Bianda\",\"Federico Valietti\",\"Tomas Vaclik\",\"Moussa Niakhaté\",\"Ronaël Pierre-Gabriel\",\"Ayoub El Kaabi\",\"Igor Coronado\",\"Diego Rolán\",\"Fabri\",\"Hamza Mendyl\",\"Youssef En-Nesyri\",\"Bafétimbi Gomis\",\"Abderazak Hamdallah\",\"Pablo\",\"Manor Solomon\",\"Cristian Benavente\",\"Emerson Royal\",\"Leo Baptistão\",\"André Horta\",\"Rodriguinho\",\"Christophe Hérelle\",\"Firmin Mubele\",\"Mbemba\",\"Dimitri Oberlin\",\"André Carrillo\",\"Arbër Zeneli\",\"Moses Simon\",\"Fran Sol\",\"Miha Zajc\",\"Christian Luyindama\",\"Sebastian Giovinco\",\"Facundo Ferreyra\",\"Gaël Kakuta\",\"Loïc Rémy\",\"Raúl de Tomás\",\"Filip Kostic\",\"Vincenzo Grifo\",\"Landry Dimata\",\"Alexander Sörloth\",\"Marco Sportiello\",\"Jonathas\",\"Milton Caraglio\",\"Filip Bradaric\",\"Bremer\",\"Michael Lang\",\"Paddy McNair\",\"James McClean\",\"Martyn Waghorn\",\"Ishak Belfodil\",\"Angeliño\",\"Fernando\",\"Denzel Dumfries\",\"Evan Ndicka\",\"Sergi Gómez\",\"Carlos Eduardo\",\"Bruno Henrique\",\"Nico Yennaris\",\"Yacine Adli\",\"Emre Akbaba\",\"Germán Conti\",\"Jasmin Kurtic\",\"Cecilio Domínguez\",\"Marcão\",\"Alexis Vega\",\"Min-jae Kim\",\"Nicolás Benedetti\",\"Majeed Waris\",\"Henrique Dourado\",\"Jesús Gallardo\",\"Yimmi Chará\",\"Carlos Izquierdoz\",\"Omar Colley\",\"Ben Brereton Díaz\",\"Pietro Iemmello\",\"Felipe Vizeu\",\"Florent Hadergjonaj\",\"Luca Waldschmidt\",\"Fabrício\",\"José Manuel Arnáiz\",\"Rómulo Otero\",\"Federico Dimarco\",\"Marco Tumminello\",\"Petros\",\"Marc Muniesa\",\"Carlos Eduardo\",\"Johan Mojica\",\"Jens Odgaard\",\"Marco Carraro\",\"Jonathan Ikoné\",\"Giangiacomo Magnani\",\"Sidcley\",\"Giangiacomo Magnani\",\"Moussa Wagué\",\"Ignasi Miquel\",\"Esteban Andrada\",\"Mathias Jensen\",\"Andrea Favilli\",\"Kaveh Rezaei\",\"Lenny Pintor\",\"Rodriguinho\",\"Aderllan Santos\",\"Rubén Sobrino\",\"Ivan Radovanovic\",\"Tchê Tchê\",\"Abdoulay Diaby\",\"Álvaro García\",\"Iván Marcone\",\"John Guidetti\",\"Baptiste Reynet\",\"Léo Bonatini\",\"Miguel Layún\",\"Fabián Balbuena\",\"Ibai Gómez\",\"Joshua Brenet\",\"Tolgay Arslan\",\"Samuel Grandsir\",\"Ivan Santini\",\"Nemanja Gudelj\",\"Virgil Misidjan\",\"Cristiano Biraghi\",\"Jonas Lössl\",\"Gustavo Bou\",\"Joel Obi\",\"Anwar El Ghazi\",\"Ryan Babel\",\"Maicon\",\"Aleksandr Tashaev\",\"Antonio Adán\",\"Pablo Hernández\",\"Jordi Amat\",\"Marko Grujic\",\"Christian Cueva\",\"Edimilson Fernandes\",\"Lorenzo Tonelli\",\"Yuya Kubo\",\"Stefano Okaka\",\"Jailson\",\"Hiram Mier\",\"Tchê Tchê\",\"Ronald Araújo\",\"Tyias Browning\",\"Yuya Osako\",\"Dusko Tosic\",\"Bruno Gaspar\",\"Krzysztof Piatek\",\"Genki Haraguchi\",\"Andreas Poulsen\",\"Nicolò Zaniolo\",\"Mattias Svanberg\",\"Kyle Bartley\",\"David Button\",\"John Egan\",\"Dominick Drexler\",\"Sidnei\",\"Roland Sallai\",\"Manuel da Costa\",\"Kristoffer Olsson\",\"Dmitri Skopintsev\",\"Matz Sels\",\"Sverrir Ingi Ingason\",\"Felix Klaus\",\"Arnaud Souquet\",\"Tyler Adams\",\"Albin Ekdal\",\"Sofyan Amrabat\",\"Richmond Boakye\",\"Franco Soldano\",\"Nuri Sahin\",\"Pierluigi Gollini\",\"Dia Saba\",\"Jhon Cifuente\",\"Hussein El Shahat\",\"Ayrton Preciado\",\"Cristian Romero\",\"Aleksandar Pesic\",\"Roger Ibañez\",\"Jeremain Lens\",\"Szymon Zurkowski\",\"Alberto Paloschi\",\"Martin Dubravka\",\"João Pedro\",\"Marcos Guilherme\",\"Greg Cunningham\",\"Ghislain Konan\",\"Antonio Mirante\",\"Carlos Vinícius\",\"Ribamar\",\"Alex Smithies\",\"Adam Webster\",\"Juan Musso\",\"Maxime Le Marchand\",\"Clément Grenier\",\"Fabian Schär\",\"Sergio Álvarez\",\"Iván Alejo\",\"Saman Ghoddos\",\"Lebo Mothiba\",\"Arnór Sigurdsson\",\"Ivan Oblyakov\",\"Mikkel Duelund\",\"Matheus Fernandes\",\"Casper De Norre\",\"Marcão\",\"Daouda Peeters\",\"Miguel Layún\",\"Kiril Despodov\",\"Sory Kaba\",\"Cheikh M'Bengue\",\"Juan Iturbe\",\"Claudio Spinelli\",\"Louis Schaub\",\"Matej Mitrovic\",\"Gustavo Gómez\",\"Javier Correa\",\"Bruno Viana\",\"Enzo Crivelli\",\"David Soria\",\"Lucas Evangelista\",\"Gaëtan Laborde\",\"Emmanuel Gigliotti\",\"Florian Kainz\",\"Marcelo Grohe\",\"Paulo Díaz\",\"Mariusz Stepinski\",\"Peter Zulj\",\"Konstantinos Laifis\",\"Celso Borges\",\"Guillermo Pol Fernández\",\"Havard Nordtveit\",\"Jonathan Cafú\",\"Sébastien Corchia\",\"Ola Aina\",\"Alfa Semedo\",\"Paolo Hurtado\",\"Juanfran\",\"Joel Obi\",\"Ezequiel Schelotto\",\"Sam Baldock\",\"David Hancko\",\"Toma Basic\",\"Idrissa Doumbia\",\"Héber\",\"Ezequiel Cerutti\",\"El Arbi Hillel Soudani\",\"Kenny Saief\",\"Arkadiusz Reca\",\"Federico Ceccherini\",\"Milos Degenek\",\"Dan Burn\",\"Dieter Villalpando\",\"Keno\",\"Roberto Alvarado\",\"Léo Jabá\",\"Lucas Torró\",\"Christian Nörgaard\",\"Jean-Paul Boëtius\",\"Thomas Foket\",\"Mayke\",\"Yoshimar Yotún\",\"Cristian Calderón\",\"Stephen Eustaquio\",\"Felipe Aguilar\",\"Jorman Campuzano\",\"Gabriel Fernández\",\"Merih Demiral\",\"Marcos Antônio\",\"Federico Viviani\",\"Steven Skrzybski\",\"Lucas Olaza\",\"Mathieu Dossevi\",\"Siebe Schrijvers\",\"Hyun-jun Suk\",\"Guilherme\",\"Gen Shoji\",\"Valdívia\",\"Mehdi Carcela-González\",\"Vitorino Antunes\",\"Yuto Nagatomo\",\"Mathieu Dossevi\",\"Serdar Gürler\",\"Isaac Mbenza\",\"Björn Johnsen\",\"Trezeguet\",\"Hyun-jun Suk\",\"Marcos Rocha\",\"Lei Wu\",\"Marko Livaja\",\"Juan Garro\",\"Ragnar Klavan\",\"João Novais\",\"Hugo Nervo\",\"Burak Yilmaz\",\"Diego Rolán\",\"Éder\",\"Derrick Luckassen\",\"Lucas Olaza\",\"Danny Batth\",\"Leandro Bacuna\",\"Octavio Rivero\",\"Niklas Hauptmann\",\"Connor Goldson\",\"Fernando Karanga\",\"Jack Marriott\",\"Barry Douglas\",\"Bersant Celina\",\"Will Grigg\",\"Karim Adeyemi\",\"William Troost-Ekong\",\"Mattia Sprocati\",\"Dušan Vlahović\",\"Ognjen Vranjes\",\"Percy Tau\",\"Peter Olayinka\",\"Claudio Baeza\",\"Cristian Borja\",\"Florian Jozefzoon\",\"John McGinn\",\"Bruno Méndez\",\"Tiago Casasola\",\"Ola Kamara\",\"Yeferson Soteldo\",\"Ander Capa\",\"Luca Antei\",\"Elias Cobbaut\",\"André Hahn\",\"Stefan Mitrovic\",\"Olarenwaju Kayode\",\"Joseph Paintsil\",\"Igor Plastun\",\"Felix Beijmo\",\"Anselmo\",\"Samuel Bastien\",\"Karlo Letica\",\"Fredrik Jensen\",\"Marco Varnier\",\"Paulinho\",\"Jonathan Panzo\",\"Gonçalo Paciência\",\"Youcef Atal\",\"Giorgi Kvilitaia\",\"Denis Bouanga\",\"Patrick Twumasi\",\"Jamiro Monteiro\",\"Enrico Brignola\",\"Piris da Motta\",\"Örjan Nyland\",\"Federico Barba\",\"Zé Rafael\",\"Hernanes\",\"Igor Rabello\",\"Souleyman Doumbia\",\"Enric Gallego\",\"Sergi Guardiola\",\"Lucas Ribeiro\",\"Gabriele Zappa\",\"Mattia Zennaro\",\"Jan Mlakar\",\"Frederik Rönnow\",\"Ben Foster\",\"Ryan Thomas\",\"Josip Elez\",\"Berke Özer\",\"Uros Djurdjevic\",\"Diego Farias\",\"Martin Harnik\",\"Saidy Janko\",\"Oliver Norwood\",\"Mauro Arambarri\",\"Juan Otero\",\"Lukas Klünter\",\"Dmitri Stotskiy\",\"Marvin Ducksch\",\"Pablo de Blasis\",\"Jeff Reine-Adélaïde\",\"Alfred Gomis\",\"Joel Campbell\",\"Andreas Cornelius\",\"José Pozo\",\"Fernando Uribe\",\"Marcello Trotta\",\"Emil Audero\",\"Isaac Kiese Thelin\",\"Ayaz Guliev\",\"Lionel Carole\",\"Marko Marin\",\"Martín Cáceres\",\"Matheus Pereira\",\"Johannes Geis\",\"Carlitos\",\"Tiago Volpi\",\"Marcelo\",\"Aminu Umar\",\"Luis Advíncula\",\"Dodi Lukébakio\",\"Matt Miazga\",\"Valter Birsa\",\"Marvin Zeegelaar\",\"Federico Viviani\",\"Walter Montoya\",\"Pedro Henrique\",\"Chico Geraldes\",\"Justin Hoogma\",\"Tudor Baluta\",\"Maurides\",\"Ezri Konsa\",\"Michael Olunga\",\"Arnaut Danjuma\",\"Hördur Magnússon\",\"Josh Windass\",\"Bryan Acosta\",\"Théo Bongonda\",\"Adrian Mierzejewski\",\"George Puscas\",\"Jonathan Silva\",\"Harun Tekin\",\"André\",\"Mauricio Martínez\",\"Aziz Behich\",\"Brahian Alemán\",\"Hussein El Shahat\",\"Yacine Bammou\",\"Robert Mudrazija\",\"Matías Suárez\",\"Alexandru Baluta\",\"Ahmed El Shenawy\",\"Eric Traoré\",\"Iyayi Atiemwen\",\"Michael Frey\",\"Gang Wang\",\"Jesús Molina\",\"Zheng Zou\",\"Walter González\",\"Xuri Zhao\",\"Guicheng Yang\",\"Xiaotian Shi\",\"Florent Mollet\",\"Alejandro Silva\",\"Wentao Zhang\",\"Hong Gui\",\"Gabriel Brazão\",\"Shihao Wei\",\"Zhunyi Gao\",\"Yiming Liu\",\"Xiuwei Zhang\",\"Chao He\",\"Miler Bolaños\",\"Fernandão\",\"Alfa Semedo\",\"Paulinho\",\"Nicola Leali\",\"Philippe Sandler\",\"Roberto Massimo\",\"Petar Micin\",\"Lovro Majer\",\"Nicola Leali\",\"Sikou Niakaté\",\"Dominick Drexler\",\"Felipe Avenatti\",\"Zeki Celik\",\"Vidar Örn Kjartansson\",\"Karol Swiderski\",\"Juninho Bacuna\",\"Jhon Lucumí\",\"Ivan Fiolic\",\"Vasyl Kravets\",\"Qiang Li\",\"Andrés Tello\",\"Richairo Živković\",\"Constantin Budescu\",\"Haris Hajradinovic\",\"Kevin Boli\",\"Odysseas Vlachodimos\",\"Lucas Galvão\",\"Júnior Sornoza\",\"Sandro\",\"Sandro\",\"Andreas Weimann\",\"Thomas Didillon\",\"Vadis Odjidja-Ofoe\",\"Marcelo Díaz\",\"Philipp Lienhart\",\"Jérôme Onguéné\",\"Junior Sambia\",\"Milos Jojic\",\"Julian Jeanvier\",\"Ritsu Doan\",\"Edenilson\",\"Jack Hunt\",\"Benito Raman\",\"Emiliano Buendía\",\"Clinton Mata\",\"Ahmad Benali\",\"Fayçal Fajr\",\"Léandre Tawamba\",\"Marko Vejinović\",\"Stefan Ristovski\",\"Renzo Saravia\",\"Adrian Mierzejewski\",\"Antonio Barragán\",\"Simon Gustafson\",\"Vincent Pajot\",\"Federico Mattiello\",\"Vyacheslav Podberezkin\",\"Federico Mancuello\",\"Zoran Nizic\",\"Pedro Rocha\",\"Justin Meram\",\"Deni Alar\",\"Vicente Gómez\",\"Roderick Miranda\",\"Duje Cop\",\"Nenad Krsticic\",\"Tana\",\"Sandro\",\"Jonathan Menéndez\",\"Nicolas Isimat-Mirin\",\"Carlos Mané\",\"Stefanos Kapino\",\"Darwin Machís\",\"Marco Tumminello\",\"Robert Bauer\",\"Nicolai Müller\",\"Franko Andrijasevic\",\"Braian Romero\",\"Ezequiel Ponce\",\"Kaimu Zheng\",\"Yunlong Fan\",\"Borna Barisic\",\"Luis Pedro Cavanda\",\"Chanathip Songkrasin\",\"Saúl Salcedo\",\"Jandrei\",\"Tiago Ilori\",\"Vitinho\",\"Boyuan Feng\",\"Alexandru Cicaldau\",\"Tobias Figueiredo\",\"Joel Asoro\",\"Thiago Carleto\",\"Mauro Zárate\",\"Nikola Katic\",\"Andy Polo\",\"Fabián Castillo\",\"Keanan Bennetts\",\"Ken Sema\",\"Filip Stuparevic\",\"Júnior Brumado\",\"Marko Jankovic\",\"Vakoun Issouf Bayo\",\"Uros Racic\",\"Arthur Caíke\",\"Mehdi Bourabia\",\"Chuba Akpom\",\"Anders Dreyer\",\"Thomas Kaminski\",\"Alexander Scholz\",\"Aaron Leya Iseka\",\"Ján Gregus\",\"Carlos Benavidez\",\"Marinho\",\"Ali Gabr\",\"Yairo Moreno\",\"Radu Dragusin\",\"Aldo Kalulu\",\"Sebastián Ferreira\",\"Fabián Orellana\",\"Jakub Piotrowski\",\"Mark Flekken\",\"Ludovic Ajorque\",\"Ibrahima Sissoko\",\"Pierre Ekwah\",\"Pascal Köpke\",\"Erick Cabaco\",\"Jonas Omlin\",\"Marc Navarro\",\"Tòfol Montiel\",\"Vladimir Screciu\",\"Romain Del Castillo\",\"Anton Nedyalkov\",\"Jorge Carrascal\",\"Ewerton\",\"Yordan Osorio\",\"Nehuén Pérez\",\"Casimir Ninga\",\"Hilary Gong\",\"Luis Sinisterra\",\"Jonas\",\"Fábio\",\"Tino Kadewere\",\"Dória\",\"Okechukwu Azubuike\",\"Franck Honorat\",\"Eros Grezda\",\"Issah Abass\",\"Dia Saba\",\"Stiven Plaza\",\"Adam Bareiro\",\"Naldo\",\"Neto Borges\",\"Robinho\",\"Héctor Fértoli\",\"Álvaro Aguado\",\"Filip Jagiello\",\"Maryan Shved\",\"Mathias Jörgensen\",\"Noam Emeran\",\"Fabio Ceravolo\",\"Emiliano Viviano\",\"Alfredo Donnarumma\",\"Guillermo Varela\",\"Marcelo Barovero\",\"Vincent Laurini\",\"Kenan Kodro\",\"Ervin Zukanovic\",\"Mats Rits\",\"Coke\",\"Armin Hodzic\",\"David Timor\",\"Recio\",\"Somália\",\"Ximo Navarro\",\"Jacopo Dezi\",\"Borek Dockal\",\"Bobby Wood\",\"Gastón Giménez\",\"Roman Bezus\",\"Erik Sviatchenko\",\"Renan Ribeiro\",\"Douglas Augusto\",\"Takuma Asano\",\"Emre Colak\",\"Leonardo Morosini\",\"Eddie Salcedo\",\"Afriyie Acquah\",\"Goran Causic\",\"Gabriel Xavier\",\"Gabriel Obertan\",\"Enrique Triverio\",\"Benjamin Kololli\",\"Jae-sung Lee\",\"Henri Saivet\",\"Diego Rodríguez\",\"Rafal Kurzawa\",\"Aymen Barkok\",\"Stoppila Sunzu\",\"Fanendo Adi\",\"Sander Coopman\",\"Lisandro Martínez\",\"Everton Felipe\",\"Juan Ramírez\",\"Djalma\",\"Alen Halilovic\",\"Hólmar Örn Eyjólfsson\",\"Charles Traoré\",\"Jorge Carrascal\",\"Wilson Morelo\",\"Bernard Mensah\",\"Ömer Bayram\",\"Serdar Gürler\",\"Samuel Eduok\",\"Clint Leemans\",\"Mame Thiam\",\"Ahmed Hassan\",\"Facundo Quignón\",\"Reinhold Yabo\",\"Domingos Duarte\",\"Lamin Jallow\",\"Kevin Mac Allister\",\"Vitor Bueno\",\"Fernando Coniglio\",\"Carlos Auzqui\",\"Justin Meram\",\"Marko Vejinović\",\"Fernando Monetti\",\"Rodrigo Aguirre\",\"Ji-soo Park\",\"Eric Remedi\",\"Lucas Torró\",\"Carles Gil\",\"Leonardo Bertone\",\"Jonathan Biabiany\",\"Khalid Boutaïb\",\"Jamie Murphy\",\"Raphael Rossi\",\"Pedro Tiba\",\"Alexander Domínguez\",\"Kenneth Omeruo\",\"Dodô\",\"Esteban Pavez\",\"Musa Cagiran\",\"Slavoljub Srnic\",\"Maximiliano Cuadra\",\"Ante Budimir\",\"Ben Wilmot\",\"Khaled Narey\",\"Ben Marshall\",\"Lee Grant\",\"Saïd Benrahma\",\"Reece Burke\",\"Samuele Mulattieri\",\"Quique González\",\"Nigel Hasselbaink\",\"Mathias Normann\",\"Karlan Grant\",\"Marin Tomasov\",\"Vid Belec\",\"William Tesillo\",\"Hamza Lahmar\",\"David Moberg Karlsson\",\"Matus Bero\",\"Nayef Aguerd\",\"Rúnar Alex Rúnarsson\",\"Brad Potts\",\"Ryosuke Yamanaka\",\"Mislav Orsic\",\"Gustavo\",\"In-beom Hwang\",\"Leo Stulac\",\"Jan Matousek\",\"Sandro Lauper\",\"Pedro Aquino\",\"David Terans\",\"Andrea Beghetto\",\"Rifat Zhemaletdinov\",\"Moritz Leitner\",\"Ryan Mendes\",\"Samuel Mraz\",\"Mohamed Camara\",\"Baris Alici\",\"Laurens Serpe\",\"Nicholas Opoku\",\"Marko Hanuljak\",\"Xande Silva\",\"Peter Gwargis\",\"Stephy Mavididi\",\"Junior Brandão\",\"Rafa Soares\",\"Mohamed Mahmoud\",\"Fernando Andrade\",\"Misael Domínguez\",\"Damian Szymanski\",\"Hamdi Fathi\",\"Sardor Rashidov\",\"Przemyslaw Frankowski\",\"Josh Maja\",\"Carles Gil\",\"Aliou Badji\",\"Dorin Rotariu\",\"Ferdi Kadioglu\",\"Joe Garner\",\"Rubén Rochina\",\"Luka Krajnc\",\"Dieumerci Ndongala\",\"Jonatan Maidana\",\"Jérôme Gondorf\",\"Nenad Tomović\",\"Mirko Ivanic\",\"Eduardo\",\"Thorsten Röcher\",\"Rafael Martins\",\"Yevgen Makarenko\",\"Zakaria Bakkali\",\"Anthony Nwakaeme\",\"Konstantin Kerschbaumer\",\"Raman Chibsah\",\"Facundo Píriz\",\"Harrison Manzala\",\"Damián Musto\",\"Jiri Skalak\",\"Felipe Vizeu\",\"Carlos Quintana\",\"Daniel Arzani\",\"Ike Opara\",\"Eugenio Mena\",\"Abdallah Said\",\"Carlos Sánchez\",\"Dario Zuparic\",\"Colin Coosemans\",\"Sadik Ciftpinar\",\"Merih Demiral\",\"Joris van Overeem\",\"Davide Lanzafame\",\"Suleiman Abdullahi\",\"Gino Peruzzi\",\"Ibrahim Hassan\",\"Marco Aratore\",\"Lorenzo Ebecilio\",\"Brian Fernández\",\"Christoph Knasmüllner\",\"Majid Hosseini\",\"Erdal Rakip\",\"Felix Passlack\",\"Prince Oniangué\",\"Titi\",\"Said Ahmed Said\",\"Sebastián Ribas\",\"Djordje Jovanovic\",\"Lucas Boyé\",\"Anton Maglica\",\"José Naranjo\",\"Felipe Pires\",\"Bilal Basacikoglu\",\"Allano\",\"Aleksa Vukanovic\",\"João Amaral\",\"Zargo Touré\",\"Luis Miguel Rodríguez\",\"Luiz Antônio\",\"Michael Hefele\",\"Leonardo Sequeira\",\"Rene Krhin\",\"Marin Leovac\",\"Filippo Falco\",\"Simon Zoller\",\"Marcello Falzerano\",\"Sebá\",\"Ben Wilmot\",\"Rashid Sumaila\",\"Alex Ferrari\",\"Héldon\",\"Ramon Leeuwin\",\"Senna Miangue\",\"Leandro Fernández\",\"François Bellugou\",\"Gerónimo Poblete\",\"Josef Sural\",\"Dario Dumic\",\"Antonino Ragusa\",\"Sergio Vittor\",\"Aílton\",\"Marcel Franke\",\"Eden Ben Basat\",\"Manolis Siopis\",\"Federico Bonazzoli\",\"Lorenzo Venuti\"],\"weight\":[117000000,113000000,85000000,81000000,40000000,66000000,42000000,10000000,58000000,55000000,31000000,45000000,23000000,15000000,42000000,15000000,40000000,40000000,35000000,7000000,5000000,38000000,35000000,1000000,35000000,32000000,18000000,17000000,7000000,30000000,30000000,30000000,30000000,30000000,26000000,25000000,21000000,10000000,6000000,29000000,29000000,29000000,28000000,28000000,20000000,8000000,3000000,8000000,6000000,26000000,25000000,25000000,20000000,19000000,16000000,14000000,14000000,9000000,4000000,2000000,2000000,600000,23000000,23000000,23000000,23000000,23000000,24000000,17000000,14000000,6000000,6000000,3000000,20000000,20000000,20000000,18000000,18000000,17000000,16000000,16000000,14000000,14000000,14000000,12000000,3000000,1000000,18000000,18000000,18000000,17000000,17000000,15000000,15000000,11000000,2000000,1000000,500000,17000000,17000000,17000000,17000000,16000000,14000000,11000000,2000000,14000000,16000000,16000000,16000000,13000000,10000000,8000000,6000000,2000000,15000000,15000000,15000000,15000000,15000000,15000000,15000000,15000000,15000000,15000000,15000000,15000000,14000000,14000000,12000000,12000000,9000000,6000000,6000000,5000000,4000000,4000000,3000000,1000000,1000000,350000,200000,14000000,14000000,12000000,10000000,6000000,500000,13000000,13000000,13000000,12000000,7000000,2000000,1000000,12000000,12000000,12000000,12000000,12000000,11000000,10000000,9000000,8000000,8000000,6000000,6000000,5000000,4000000,3000000,1000000,1000000,1000000,1000000,1000000,500000,12000000,11000000,11000000,11000000,11000000,11000000,11000000,11000000,11000000,6000000,6000000,1000000,1000000,500000,10000000,10000000,10000000,10000000,16000000,11000000,10000000,10000000,10000000,10000000,8000000,8000000,7000000,7000000,5000000,5000000,5000000,5000000,5000000,4000000,3000000,3000000,3000000,3000000,2000000,720000,500000,500000,150000,9000000,9000000,2000000,9000000,9000000,8000000,8000000,8000000,6000000,6000000,3000000,2000000,8000000,6000000,4000000,1000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,7000000,7000000,7000000,6000000,6000000,5000000,5000000,5000000,5000000,2000000,2000000,2000000,1000000,600000,600000,500000,500000,250000,7000000,7000000,7000000,7000000,7000000,7000000,6000000,5000000,5000000,3000000,500000,7000000,18000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,6000000,6000000,6000000,6000000,5000000,5000000,4000000,4000000,4000000,4000000,3000000,3000000,3000000,2000000,2000000,2000000,1000000,1000000,500000,500000,500000,500000,500000,300000,120000,100000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,5000000,5000000,4000000,1000000,300000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,5000000,5000000,4000000,4000000,4000000,4000000,3000000,3000000,2000000,2000000,1000000,1000000,1000000,909000,500000,500000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,4000000,3000000,3000000,2000000,5000000,5000000,5000000,5000000,6000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,3000000,3000000,3000000,3000000,3000000,3000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,1000000,1000000,1000000,500000,500000,500000,350000,350000,250000,180000,2000000,1000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,3000000,3000000,3000000,3000000,3000000,2000000,2000000,1000000,1000000,1000000,800000,500000,500000,500000,4000000,3000000,200000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,800000,600000,500000,500000,70000,3000000,3000000,3000000,2000000,2000000,1000000,1000000,750000,3000000,3000000,3000000,5000000,4000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,909000,800000,600000,500000,500000,500000,400000,200000,200000,90000,85000,3000000,3000000,3000000,2000000,1000000,200000,3000000,3000000,3000000,2000000,2000000,1000000,550000,3000000,3000000,3000000,3000000,3000000,4000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,875000,850000,850000,800000,500000,409000,409000,400000,364000,364000,250000,250000,221000,150000,130000,120000,100000,2000000,1000000,2000000,2000000,2000000,4000000,2000000,2000000,2000000,1000000,1000000,900000,500000,300000,300000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,3000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,909000,900000,700000,700000,700000,617000,600000,595000,580000,500000,500000,500000,500000,384000,350000,350000,300000,300000,273000,250000,200000,200000,170000,150000,150000,135000,2000000,2000000,2000000,2000000,1000000,1000000,500000,2000000,2000000,2000000,1000000,1000000,1000000,75000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,1000000,1000000,1000000,1000000,900000,500000,2000000,3000000,3000000,3000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,909000,900000,881000,850000,800000,800000,750000,750000,700000,650000,650000,619000,500000,500000,500000,419000,400000,400000,400000,300000,250000,200000,168000,150000,150000,50000,1000000,1000000,1000000,800000,600000,1000000,1000000,2000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,802000,800000,800000,800000,800000,600000,500000,500000,442000,350000,335000,250000,227000,200000,35000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,800000,600000,500000,500000,350000,110000,100000,1000000,1000000,1000000,1000000,1000000,1000000,800000,682000,500000,250000,200000,1000000,1000000,3000000,2000000,2000000,2000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,800000,800000,800000,700000,700000,650000,600000,500000,500000,456000,455000,450000,450000,400000,350000,350000,300000,295000,250000,250000,200000,200000,200000,170000,168000,150000,150000,100000,100000,70000,33000,80000000,60000000,76000000,68000000,53000000,60000000,50000000,43000000,50000000,50000000,32000000,22000000,12000000,45000000,33000000,44000000,39000000,75000000,40000000,40000000,32000000,32000000,30000000,15000000,2000000,35000000,20000000,35000000,10000000,6000000,1000000,31000000,30000000,22000000,1000000,1000000,23000000,20000000,11000000,7000000,27000000,27000000,27000000,26000000,26000000,26000000,26000000,2000000,25000000,25000000,22000000,14000000,3000000,1000000,24000000,24000000,17000000,4000000,3000000,23000000,3000000,22000000,22000000,21000000,4000000,3000000,21000000,21000000,21000000,20000000,20000000,22000000,20000000,20000000,20000000,16000000,15000000,15000000,4000000,3000000,3000000,3000000,2000000,1000000,1000000,1000000,250000,19000000,19000000,18000000,18000000,20000000,18000000,16000000,15000000,14000000,11000000,1000000,17000000,17000000,15000000,11000000,17000000,13000000,600000,16000000,16000000,16000000,16000000,16000000,16000000,16000000,15000000,9000000,2000000,1000000,1000000,1000000,15000000,5000000,15000000,15000000,15000000,15000000,15000000,13000000,13000000,12000000,8000000,8000000,5000000,3000000,1000000,1000000,14000000,11000000,7000000,2000000,2000000,21000000,13000000,13000000,500000,500000,200000,13000000,13000000,13000000,13000000,12000000,12000000,34000000,21000000,17000000,15000000,12000000,12000000,12000000,12000000,12000000,12000000,11000000,11000000,10000000,7000000,3000000,2000000,2000000,1000000,1000000,500000,11000000,11000000,11000000,25000000,13000000,11000000,11000000,11000000,11000000,8000000,2000000,1000000,1000000,10000000,13000000,10000000,10000000,10000000,10000000,10000000,10000000,7000000,7000000,5000000,4000000,2000000,2000000,2000000,2000000,1000000,800000,800000,500000,9000000,8000000,8000000,7000000,4000000,2000000,2000000,1000000,9000000,9000000,9000000,9000000,9000000,9000000,8000000,5000000,2000000,500000,300000,8000000,8000000,8000000,8000000,2000000,450000,8000000,10000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,7000000,6000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,2000000,1000000,500000,490000,7000000,7000000,4000000,150000,7000000,1000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,6000000,6000000,3000000,3000000,3000000,3000000,2000000,2000000,650000,6000000,6000000,6000000,500000,6000000,6000000,6000000,6000000,6000000,6000000,5000000,5000000,4000000,4000000,1000000,1000000,750000,500000,500000,100000,6000000,6000000,6000000,6000000,3000000,500000,130000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,5000000,5000000,4000000,4000000,4000000,4000000,4000000,3000000,3000000,1000000,650000,600000,500000,500000,300000,100000,5000000,5000000,5000000,5000000,4000000,4000000,4000000,3000000,3000000,1000000,1000000,5000000,2000000,2000000,5000000,2000000,5000000,2000000,500000,9000000,8000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,4000000,4000000,4000000,3000000,1000000,1000000,1000000,1000000,750000,700000,500000,250000,4000000,4000000,4000000,4000000,2000000,1000000,1000000,1000000,1000000,1000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,3000000,3000000,3000000,3000000,3000000,2000000,2000000,600000,500000,250000,100000,4000000,4000000,4000000,4000000,4000000,4000000,23000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,1000000,1000000,909000,900000,680000,675000,500000,500000,450000,200000,200000,110000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,500000,500000,190000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,2000000,2000000,2000000,2000000,2000000,1000000,1000000,1000000,1000000,727000,550000,508000,500000,500000,500000,500000,500000,200000,200000,175000,100000,3000000,3000000,3000000,3000000,3000000,5000000,3000000,3000000,3000000,2000000,2000000,2000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,850000,500000,380000,300000,82000,50000,200000,4000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,2000000,2000000,2000000,1000000,1000000,1000000,1000000,1000000,1000000,600000,500000,260000,150000,2000000,2000000,2000000,2000000,2000000,1000000,630000,550000,500000,500000,500000,2000000,2000000,2000000,2000000,2000000,1000000,1000000,500000,500000,400000,180000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,700000,545000,455000,250000,200000,100000,100000,99000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,750000,500000,500000,500000,350000,278000,223000,100000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,550000,255000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,864000,850000,800000,700000,682000,550000,500000,500000,500000,300000,300000,62000,1000000,1000000,1000000,1000000,4000000,2000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,835000,750000,620000,600000,490000,420000,409000,289000,67000,1000000,800000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,800000,400000,200000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,800000,700000,700000,700000,560000,520000,455000,450000,412000,400000,400000,300000,166000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,800000,760000,750000,720000,600000,545000,500000,400000,300000,300000,225000,200000,150000,110000,100000,84000,80000,45000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,890000,700000,600000,500000,400000,300000,1000000,1000000,7000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,750000,500000,350000,50000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,975000,800000,727000,700000,700000,600000,600000,500000,500000,480000,400000,350000,350000,350000,300000,300000,300000,291000,250000,200000,190000,180000,150000,150000,91000,86000,115000000,120000000,127000000,27000000,8000000,87000000,86000000,85000000,80000000,80000000,62000000,74000000,65000000,60000000,63000000,63000000,22000000,19000000,55000000,50000000,50000000,25000000,22000000,16000000,48000000,45000000,45000000,45000000,36000000,20000000,12000000,44000000,23000000,40000000,40000000,35000000,27000000,18000000,14000000,38000000,25000000,37000000,21000000,12000000,35000000,35000000,35000000,32000000,30000000,30000000,27000000,25000000,22000000,22000000,3000000,33000000,32000000,32000000,24000000,31000000,30000000,30000000,30000000,30000000,30000000,30000000,30000000,21000000,16000000,5000000,1000000,980000,29000000,29000000,28000000,28000000,25000000,25000000,18000000,2000000,27000000,26000000,26000000,25000000,25000000,25000000,25000000,25000000,25000000,25000000,25000000,24000000,22000000,22000000,20000000,18000000,17000000,12000000,3000000,1000000,19000000,23000000,23000000,23000000,20000000,17000000,22000000,22000000,22000000,22000000,22000000,22000000,22000000,6000000,2000000,1000000,21000000,21000000,21000000,21000000,21000000,20000000,20000000,20000000,20000000,20000000,20000000,20000000,20000000,20000000,18000000,14000000,12000000,8000000,6000000,4000000,3000000,3000000,3000000,2000000,2000000,1000000,19000000,19000000,19000000,1000000,18000000,18000000,18000000,18000000,18000000,18000000,18000000,16000000,16000000,15000000,15000000,13000000,12000000,11000000,2000000,17000000,17000000,17000000,17000000,4000000,2000000,17000000,17000000,13000000,11000000,10000000,9000000,7000000,2000000,800000,16000000,16000000,16000000,16000000,16000000,16000000,15000000,12000000,9000000,4000000,2000000,900000,15000000,15000000,15000000,15000000,15000000,15000000,15000000,15000000,15000000,15000000,15000000,15000000,15000000,14000000,13000000,10000000,9000000,8000000,8000000,4000000,3000000,2000000,2000000,1000000,1000000,1000000,1000000,14000000,14000000,14000000,14000000,14000000,13000000,12000000,9000000,13000000,13000000,12000000,13000000,13000000,21000000,13000000,13000000,13000000,13000000,13000000,10000000,3000000,2000000,12000000,12000000,12000000,12000000,12000000,8000000,8000000,4000000,12000000,17000000,12000000,12000000,12000000,12000000,12000000,12000000,12000000,12000000,12000000,12000000,10000000,10000000,9000000,9000000,8000000,7000000,7000000,6000000,6000000,5000000,3000000,3000000,2000000,1000000,500000,11000000,11000000,5000000,11000000,11000000,11000000,11000000,11000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,19000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,9000000,9000000,9000000,8000000,8000000,8000000,7000000,7000000,7000000,7000000,6000000,6000000,5000000,4000000,4000000,4000000,3000000,3000000,2000000,2000000,2000000,2000000,1000000,1000000,1000000,1000000,1000000,1000000,750000,750000,650000,521000,500000,500000,250000,9000000,9000000,9000000,9000000,9000000,9000000,9000000,9000000,9000000,9000000,9000000,9000000,9000000,8000000,8000000,7000000,7000000,7000000,1000000,850000,700000,700000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,6000000,216000,176000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,7000000,7000000,6000000,6000000,6000000,5000000,5000000,5000000,5000000,4000000,4000000,4000000,4000000,3000000,2000000,2000000,2000000,1000000,1000000,500000,250000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,6000000,5000000,5000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,11000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,5000000,5000000,4000000,3000000,2000000,1000000,1000000,1000000,600000,500000,500000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,5000000,1000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,5000000,5000000,5000000,4000000,4000000,4000000,4000000,3000000,3000000,3000000,3000000,2000000,2000000,2000000,1000000,1000000,1000000,700000,512000,500000,400000,400000,375000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,3000000,3000000,2000000,800000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,3000000,3000000,3000000,3000000,3000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,750000,125000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,3000000,3000000,3000000,2000000,2000000,2000000,1000000,1000000,1000000,1000000,1000000,1000000,800000,750000,682000,600000,500000,500000,500000,500000,380000,50000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,1000000,4000000,4000000,4000000,21000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,950000,880000,750000,700000,600000,500000,500000,270000,100000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,2000000,1000000,1000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,830000,550000,550000,400000,300000,100000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,1000000,3000000,3000000,3000000,3000000,3000000,3000000,5000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,815000,500000,500000,500000,500000,500000,500000,400000,250000,91000,50000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,200000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,3000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,880000,750000,700000,700000,620000,600000,600000,500000,500000,500000,500000,500000,430000,400000,300000,250000,250000,250000,125000,100000,10000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,890000,800000,800000,650000,100000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,2000000,2000000,2000000,2000000,3000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,900000,850000,850000,800000,800000,780000,750000,750000,700000,700000,700000,675000,650000,600000,500000,500000,500000,500000,500000,400000,400000,300000,300000,300000,285000,200000,190000,100000,1000000,1000000,1000000,1000000,810000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,909000,800000,700000,500000,500000,470000,350000,250000,200000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,954000,600000,310000,200000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,500000,500000,460000,145000000,117000000,80000000,72000000,67000000,60000000,35000000,64000000,62000000,59000000,57000000,40000000,10000000,18000000,7000000,45000000,45000000,41000000,38000000,42000000,42000000,40000000,40000000,40000000,5000000,5000000,3000000,39000000,38000000,38000000,37000000,36000000,35000000,35000000,35000000,35000000,22000000,18000000,31000000,30000000,30000000,30000000,30000000,30000000,28000000,26000000,22000000,20000000,5000000,3000000,1000000,29000000,28000000,28000000,25000000,25000000,25000000,25000000,25000000,25000000,24000000,20000000,19000000,18000000,16000000,9000000,9000000,8000000,6000000,5000000,24000000,24000000,24000000,24000000,24000000,21000000,23000000,20000000,22000000,22000000,22000000,22000000,21000000,5000000,5000000,3000000,2000000,21000000,21000000,21000000,21000000,20000000,20000000,20000000,20000000,20000000,20000000,20000000,20000000,20000000,19000000,18000000,16000000,16000000,14000000,14000000,19000000,19000000,19000000,18000000,18000000,18000000,16000000,14000000,11000000,8000000,7000000,5000000,1000000,1000000,17000000,17000000,17000000,17000000,1000000,16000000,16000000,16000000,16000000,16000000,14000000,10000000,15000000,15000000,15000000,15000000,15000000,15000000,15000000,15000000,13000000,13000000,13000000,12000000,12000000,8000000,7000000,7000000,6000000,4000000,3000000,2000000,2000000,1000000,1000000,1000000,750000,500000,400000,14000000,14000000,14000000,14000000,14000000,14000000,14000000,14000000,14000000,14000000,13000000,13000000,9000000,13000000,13000000,13000000,9000000,2000000,1000000,12000000,12000000,12000000,12000000,12000000,12000000,12000000,12000000,12000000,12000000,12000000,12000000,12000000,10000000,10000000,7000000,5000000,3000000,2000000,2000000,1000000,11000000,11000000,11000000,11000000,11000000,11000000,11000000,11000000,11000000,11000000,11000000,11000000,11000000,11000000,11000000,8000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,12000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,9000000,9000000,9000000,8000000,7000000,7000000,7000000,7000000,5000000,5000000,4000000,3000000,3000000,3000000,2000000,1000000,1000000,800000,800000,600000,500000,220000,92000,9000000,9000000,9000000,9000000,15000000,9000000,9000000,9000000,9000000,9000000,9000000,9000000,9000000,7000000,6000000,5000000,5000000,3000000,3000000,2000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,4000000,8000000,8000000,16000000,9000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,8000000,7000000,7000000,7000000,6000000,6000000,5000000,5000000,5000000,5000000,5000000,4000000,2000000,1000000,1000000,1000000,1000000,750000,700000,500000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,6000000,6000000,6000000,5000000,4000000,3000000,2000000,1000000,1000000,1000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,7000000,6000000,6000000,6000000,5000000,5000000,5000000,5000000,5000000,5000000,2000000,2000000,1000000,1000000,800000,750000,550000,500000,500000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,1000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,6000000,5000000,5000000,5000000,5000000,5000000,4000000,4000000,4000000,4000000,3000000,3000000,3000000,3000000,2000000,2000000,2000000,1000000,1000000,600000,600000,500000,350000,300000,200000,5000000,5000000,5000000,2000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,4000000,3000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,9000000,8000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,3000000,3000000,3000000,3000000,3000000,3000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,865000,500000,500000,500000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,3000000,3000000,2000000,2000000,2000000,2000000,1000000,1000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,2000000,2000000,2000000,2000000,1000000,1000000,1000000,1000000,700000,700000,600000,400000,350000,300000,250000,220000,3000000,3000000,3000000,3000000,2000000,430000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,8000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,500000,500000,500000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,3000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,750000,700000,600000,500000,500000,450000,440000,440000,400000,350000,300000,300000,300000,300000,300000,265000,250000,200000,50000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,1000000,500000,400000,2000000,2000000,2000000,1000000,1000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,900000,875000,800000,750000,647000,600000,600000,500000,500000,500000,500000,500000,430000,350000,350000,300000,300000,272000,200000,200000,200000,132000,50000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,1000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,940000,900000,900000,900000,859000,850000,800000,800000,773000,750000,725000,700000,635000,600000,600000,500000,500000,500000,442000,400000,400000,400000,400000,350000,307000,300000,260000,250000,225000,225000,175000,140000,130000,90000,90000,25000,22000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,850000,800000,500000,400000,400000,300000,220000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,500000,300000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,850000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,890000,875000,855000,850000,850000,800000,750000,750000,750000,700000,700000,700000,700000,660000,650000,600000,600000,550000,517000,500000,500000,500000,500000,500000,470000,450000,450000,450000,400000,400000,400000,350000,350000,350000,350000,350000,340000,330000,315000,300000,300000,300000,300000,300000,300000,300000,260000,250000,250000,250000,236000,220000,200000,190000,160000,150000,150000,150000,100000,100000,100000,100000,84000,80000]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":false},\"physics\":{\"stabilization\":false}},\"groups\":null,\"width\":300,\"height\":300,\"idselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false,\"variable\":\"group\",\"main\":\"Select by group\"},\"main\":null,\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"igraphlayout\":{\"type\":\"square\"},\"highlight\":{\"enabled\":false,\"hoverNearest\":false,\"degree\":1,\"algorithm\":\"all\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":false,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"}},\"evals\":[],\"jsHooks\":[]}\n\n\n\n",
    "preview": "posts/httpsisha-mahajan12githubiofootballtransfersocialnetworkposts2022-05-08-exploring-european-football-transfer-networks/exploring-european-football-transfer-networks_files/figure-html5/unnamed-chunk-4-1.png",
    "last_modified": "2022-05-11T18:47:21-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsisha-mahajan12githubiofootballtransfersocialnetworkposts2022-05-09-network-status/",
    "title": "Network Status and Centrality",
    "description": "Who are the key actors in the football network? What makes them the key actors",
    "author": [
      {
        "name": "Isha Akshita Mahajan, Ankit Kumar",
        "url": {}
      }
    ],
    "date": "2022-05-11",
    "categories": [],
    "contents": "\nAssignment Description\nCalculate closeness, betweenness and eigenvector centrality measures for your network data, and bonachic-power if possible. Compare these measures to basic degree centrality measures. Try to interpret the results. Are there any interesting patterns in the distribution of measures or correlations between them that provide insight into the measures?\nYou may also want to identify whether the same node(s) are more/less central using the different measures, and see if you can find any patterns in the results based on which nodes are high/low on each measures. Discuss (with any related evidence) whether or not the node(s) behavior is in line with or violates expectations based on the degree centrality measure, comparing across those measures using a data frame similar to that constructed in the syntax. Be sure to share your assignment with group members for comments.\nEigenvector Centrality\nThe eigenvector centrality determines how important the neighborhood of the nodes is in the network. The higher the eigenvalue centrality, the more important the neighbors of that node are with respect to other nodes in the network. (Jackson 08) The eigenvalues also take into account the proximity of the node to many other important nodes in the network.\nAS Roma has the highest eigenvalue in the network. This can be an additional support to our previous speculation on how AS Roma might influential in the influx and outflow of football talent as they are well connected to the other influential nodes in our football transfer network.\n\n\ntemp <- igraph::centr_eigen(ig,directed=T)\ntransfer.nodes$eigen <- temp$vector\n#arrange descending and return top 5 nodes\narrange(transfer.nodes, desc(eigen)) %>%\n  slice(1:5)\n\n\n                         name degree indegree outdegree     eigen\nAS Roma               AS Roma     78       39        39 1.0000000\nGenoa CFC           Genoa CFC     73       46        27 0.9612356\nInter Milan       Inter Milan     68       32        36 0.8787351\nACF Fiorentina ACF Fiorentina     66       38        28 0.7988873\nUS Sassuolo       US Sassuolo     70       35        35 0.7789739\n\nDerived and Reflected Centrality\nWe compute the derived and reflected Eigenvector centrality to better understand whether the influence is more observed in the neighborhood of the nodes or is it more observed on the strength of the node itself.\n\n\nmatrix <- as.matrix(as_adjacency_matrix(ig, attr = \"weight\"))\n#square the adjacency matrix\nmatsq<-t(matrix) %*% matrix\n#Calculate the proportion of reflected centrality.\ntransfer.nodes$rc<-diag(matsq)/rowSums(matsq)\n#replace missing values with 0\ntransfer.nodes$rc<-ifelse(is.nan(transfer.nodes$rc),0,transfer.nodes$rc)\n#Calculate received eigenvalue centrality\ntransfer.nodes$eigen.rc<-transfer.nodes$eigen*transfer.nodes$rc\n#Calculate the proportion of derived centrality.\ntransfer.nodes$dc<-1-diag(matsq)/rowSums(matsq)\n#replace missing values with 0\ntransfer.nodes$dc<-ifelse(is.nan(transfer.nodes$dc),1,transfer.nodes$dc)\n#Calculate received eigenvalue centrality\ntransfer.nodes$eigen.dc<-transfer.nodes$eigen*transfer.nodes$dc\n\n\n\n\n\nfilter(transfer.nodes,name%in%c(\"Chelsea FC\",\"FC Barcelona\"))\n\n\n                     name degree indegree outdegree     eigen\nFC Barcelona FC Barcelona     59       21        38 0.2704215\nChelsea FC     Chelsea FC     48       12        36 0.2449357\n                    rc   eigen.rc        dc  eigen.dc\nFC Barcelona 0.2218696 0.05999830 0.7781304 0.2104232\nChelsea FC   0.2352494 0.05762098 0.7647506 0.1873148\n\n\n\n##cen <- eigen_centrality(ig, directed = TRUE)\n#cen$vector\n\n\n\n\n\ntransfer.nodes%>%\n  select(-name) %>% \n  gather() %>% \n  ggplot(aes(value)) +\n    geom_histogram() +\n    facet_wrap(~key, scales = \"free\")\n\n\n\n\n\n\n#build on the dataframe\ntemp<-transfer.nodes %>% \n  select(degree,indegree,outdegree,eigen,eigen.rc,eigen.dc)%>%\n  correlate() %>%\n  rearrange()\n\n\n\n\n\nfashion(temp)\n\n\n       term outdegree degree indegree eigen.rc eigen.dc eigen\n1 outdegree              .94      .79      .67      .67   .69\n2    degree       .94             .95      .73      .79   .80\n3  indegree       .79    .95               .70      .82   .82\n4  eigen.rc       .67    .73      .70               .82   .86\n5  eigen.dc       .67    .79      .82      .82           1.00\n6     eigen       .69    .80      .82      .86     1.00      \n\n\n\nrplot(temp)\n\n\n\n\nBetweeness Centrality\nBetweeness centrality quantifies the number of times a node acts as a bridge along the shortest path between two other nodes.\n\n\ntransfer.nodes$betweeness <- igraph::betweenness(ig, directed=TRUE)\ntransfer.nodes%>%\narrange(desc(betweeness))%>%\nslice(1:5)\n\n\n                                 name degree indegree outdegree\nUC Sampdoria             UC Sampdoria     57       32        25\nOlympiacos Piraeus Olympiacos Piraeus     41       19        22\nGenoa CFC                   Genoa CFC     73       46        27\nACF Fiorentina         ACF Fiorentina     66       38        28\nHellas Verona           Hellas Verona     39       27        12\n                       eigen         rc   eigen.rc        dc\nUC Sampdoria       0.6156139 0.06250452 0.03847865 0.9374955\nOlympiacos Piraeus 0.1548258 0.02184055 0.00338148 0.9781595\nGenoa CFC          0.9612356 0.08798435 0.08457368 0.9120157\nACF Fiorentina     0.7988873 0.11743415 0.09381665 0.8825658\nHellas Verona      0.6603528 0.02847622 0.01880435 0.9715238\n                    eigen.dc betweeness\nUC Sampdoria       0.5771352   45262.42\nOlympiacos Piraeus 0.1514443   43409.28\nGenoa CFC          0.8766619   34603.48\nACF Fiorentina     0.7050706   31710.00\nHellas Verona      0.6415485   31489.50\n\nNetwork Constraint\n\n\ntransfer.nodes$constraint<-constraint(ig)\n\n\n\nAuthority\nAuthorities are those actors which get many incoming links from hubs, presumably because of their high quality relevant information. (Klien 16) In this case Juventus, Chelsea, Barcelona,PSG, Manchester United and Athleteco have the highest authority scores. This means that these clubs are attracting talent from the hubs like Real Madrid, which we will see includes Eden Hazard’s transfer in 2019\n\n\ntransfer.nodes$authority <- authority_score(ig)$vector\n\na <- transfer.nodes %>% \n  arrange(desc(authority))\nhead(a)\n\n\n                                   name degree indegree outdegree\nJuventus FC                 Juventus FC     68       27        41\nChelsea FC                   Chelsea FC     48       12        36\nFC Barcelona               FC Barcelona     59       21        38\nParis Saint-Germain Paris Saint-Germain     37       17        20\nManchester United     Manchester United     29       15        14\nAtlético de Madrid   Atlético de Madrid     48       26        22\n                        eigen        rc   eigen.rc        dc\nJuventus FC         0.6770212 0.2150981 0.14562594 0.7849019\nChelsea FC          0.2449357 0.2352494 0.05762098 0.7647506\nFC Barcelona        0.2704215 0.2218696 0.05999830 0.7781304\nParis Saint-Germain 0.3905048 0.2504831 0.09781486 0.7495169\nManchester United   0.1991738 0.2315679 0.04612226 0.7684321\nAtlético de Madrid  0.3488429 0.1835874 0.06404317 0.8164126\n                     eigen.dc betweeness constraint authority\nJuventus FC         0.5313953  20394.667 0.10137186 1.0000000\nChelsea FC          0.1873148    470.000 0.10431587 0.7752539\nFC Barcelona        0.2104232   4600.083 0.09625534 0.7566895\nParis Saint-Germain 0.2926900   1106.000 0.11810230 0.6491154\nManchester United   0.1530515   1222.500 0.09350633 0.5523492\nAtlético de Madrid  0.2847998   1422.662 0.09802569 0.5507481\n\nHubs\nMany Ties to Peripheral Actors\n\n\ntransfer.nodes$hub_score <- hub_score(ig)$vector\nhead(transfer.nodes)\n\n\n                               name degree indegree outdegree\nAston Villa             Aston Villa     35       27         8\nInter Milan             Inter Milan     68       32        36\nBorussia Dortmund Borussia Dortmund     45       18        27\nACF Fiorentina       ACF Fiorentina     66       38        28\nReal Madrid             Real Madrid     46       17        29\nRB Leipzig               RB Leipzig     44       26        18\n                      eigen        rc   eigen.rc        dc  eigen.dc\nAston Villa       0.2139009 0.1837553 0.03930541 0.8162447 0.1745954\nInter Milan       0.8787351 0.2193920 0.19278741 0.7806080 0.6859477\nBorussia Dortmund 0.2370659 0.1480322 0.03509339 0.8519678 0.2019725\nACF Fiorentina    0.7988873 0.1174342 0.09381665 0.8825658 0.7050706\nReal Madrid       0.2296944 0.2975292 0.06834078 0.7024708 0.1613536\nRB Leipzig        0.3082591 0.1717242 0.05293556 0.8282758 0.2553235\n                  betweeness constraint  authority hub_score\nAston Villa          788.000 0.11333984 0.11093521 0.2347654\nInter Milan         2799.590 0.09623411 0.26367856 0.7339420\nBorussia Dortmund   2073.000 0.06401961 0.14776045 0.5191494\nACF Fiorentina     31709.998 0.11085545 0.06147522 0.4296561\nReal Madrid         4185.762 0.10787227 0.39259852 1.0000000\nRB Leipzig          2936.417 0.09094430 0.10029228 0.3521672\n\nConsider Real Madrid a hub given that their hub_score is 1. We can confirm this by looking at higher eigenvector derived centrality and lower reflected centrality.\nBridges\nA few ties to central actors =\n\n\nbridges(ig)\n\n\n+ 238/4386 edges from 898a914 (vertex names):\n [1] Maccabi Haifa      ->Levski Sofia           \n [2] SC Farense         ->Vancouver Whitecaps FC \n [3] Moreirense FC      ->Al-Batin FC            \n [4] Grenoble Foot 38   ->FC Famalicão           \n [5] CA Fénix           ->FC Famalicão           \n [6] Maccabi Netanya    ->Hapoel Beer Sheva      \n [7] Ironi Kiryat Shmona->Hapoel Beer Sheva      \n [8] Hapoel Haifa       ->Hapoel Beer Sheva      \n [9] FC Basel 1893 U18  ->Juventus Primavera     \n[10] Amiens SC U19      ->Manchester United Youth\n+ ... omitted several edges\n\nbridges <- transfer.nodes %>% \n  filter(name == \"Maccabi Haifa\")\nhead(bridges)\n\n\n                       name degree indegree outdegree eigen rc\nMaccabi Haifa Maccabi Haifa      1        0         1     0  0\n              eigen.rc dc eigen.dc betweeness constraint authority\nMaccabi Haifa        0  1        0          0          1         0\n              hub_score\nMaccabi Haifa         0\n\nWe test the understanding whether these teams actually serve as bridges in the network. By looking at the derived and reflected centrality scores, we see that the the reflected centrality for Maccabi Haifa is low while the derived centrality is high, thereby making it a bridge.\nCorrelations for Centrality Measures\n\n\nhead(transfer.nodes)\n\n\n                               name degree indegree outdegree\nAston Villa             Aston Villa     35       27         8\nInter Milan             Inter Milan     68       32        36\nBorussia Dortmund Borussia Dortmund     45       18        27\nACF Fiorentina       ACF Fiorentina     66       38        28\nReal Madrid             Real Madrid     46       17        29\nRB Leipzig               RB Leipzig     44       26        18\n                      eigen        rc   eigen.rc        dc  eigen.dc\nAston Villa       0.2139009 0.1837553 0.03930541 0.8162447 0.1745954\nInter Milan       0.8787351 0.2193920 0.19278741 0.7806080 0.6859477\nBorussia Dortmund 0.2370659 0.1480322 0.03509339 0.8519678 0.2019725\nACF Fiorentina    0.7988873 0.1174342 0.09381665 0.8825658 0.7050706\nReal Madrid       0.2296944 0.2975292 0.06834078 0.7024708 0.1613536\nRB Leipzig        0.3082591 0.1717242 0.05293556 0.8282758 0.2553235\n                  betweeness constraint  authority hub_score\nAston Villa          788.000 0.11333984 0.11093521 0.2347654\nInter Milan         2799.590 0.09623411 0.26367856 0.7339420\nBorussia Dortmund   2073.000 0.06401961 0.14776045 0.5191494\nACF Fiorentina     31709.998 0.11085545 0.06147522 0.4296561\nReal Madrid         4185.762 0.10787227 0.39259852 1.0000000\nRB Leipzig          2936.417 0.09094430 0.10029228 0.3521672\n\ncor<-transfer.nodes %>% \n  select(degree,eigen,betweeness, authority, hub_score)%>%\n  correlate() %>%\n  rearrange()\nrplot(cor)\n\n\n\n\nBrokerage\n\n\ntempo <-as.data.frame(brokerage(network, cl  = get.vertex.attribute(network,\"league\"))$raw.nli)\nhead(tempo)\n\n\n                  w_I w_O b_IO b_OI b_O   t\nAston Villa       209   0    0    0   0 209\nInter Milan       925   0    0    0   0 925\nBorussia Dortmund 416   0    0    0   0 416\nACF Fiorentina    897   0    0    0   0 897\nReal Madrid       420   0    0    0   0 420\nRB Leipzig        410   0    0    0   0 410\n\ntransfer.nodes<-transfer.nodes %>%\nmutate(broker.tot = tempo$t, # AS ROMA, AS Monaco, US Sassuolo, Genoa CFC, Atlanta BC\n       broker.coord = tempo$w_I,\n       broker.itin = tempo$w_O, # Aston Villa, Inter Milan, Borussia Dortmund, ACF florentina\n       broker.rep = tempo$b_IO, # # Aston Villa, Inter Milan, Borussia Dortmund, ACF florentina\n       broker.gate = tempo$b_OI,\n       broker.lia = tempo$b_O)\nbroker <- transfer.nodes %>% \n  arrange(desc(broker.tot)) %>% \n  slice(1:10)\nkable(broker)\n\n\n\n\n\nname\n\n\ndegree\n\n\nindegree\n\n\noutdegree\n\n\neigen\n\n\nrc\n\n\neigen.rc\n\n\ndc\n\n\neigen.dc\n\n\nbetweeness\n\n\nconstraint\n\n\nauthority\n\n\nhub_score\n\n\nbroker.tot\n\n\nbroker.coord\n\n\nbroker.itin\n\n\nbroker.rep\n\n\nbroker.gate\n\n\nbroker.lia\n\n\nAS Roma\n\n\nAS Roma\n\n\n78\n\n\n39\n\n\n39\n\n\n1.0000000\n\n\n0.1130986\n\n\n0.1130986\n\n\n0.8869014\n\n\n0.8869014\n\n\n20233.500\n\n\n0.0830009\n\n\n0.3603443\n\n\n0.2527186\n\n\n1286\n\n\n1286\n\n\n0\n\n\n0\n\n\n0\n\n\n0\n\n\nAS Monaco\n\n\nAS Monaco\n\n\n72\n\n\n39\n\n\n33\n\n\n0.3837432\n\n\n0.1410820\n\n\n0.0541392\n\n\n0.8589180\n\n\n0.3296040\n\n\n920.000\n\n\n0.0822568\n\n\n0.2386720\n\n\n0.6582977\n\n\n1157\n\n\n1157\n\n\n0\n\n\n0\n\n\n0\n\n\n0\n\n\nUS Sassuolo\n\n\nUS Sassuolo\n\n\n70\n\n\n35\n\n\n35\n\n\n0.7789739\n\n\n0.0487223\n\n\n0.0379534\n\n\n0.9512777\n\n\n0.7410205\n\n\n19581.790\n\n\n0.1146313\n\n\n0.1001784\n\n\n0.1704004\n\n\n1026\n\n\n1026\n\n\n0\n\n\n0\n\n\n0\n\n\n0\n\n\nGenoa CFC\n\n\nGenoa CFC\n\n\n73\n\n\n46\n\n\n27\n\n\n0.9612356\n\n\n0.0879843\n\n\n0.0845737\n\n\n0.9120157\n\n\n0.8766619\n\n\n34603.483\n\n\n0.1803853\n\n\n0.1525313\n\n\n0.4153337\n\n\n1015\n\n\n1015\n\n\n0\n\n\n0\n\n\n0\n\n\n0\n\n\nAtalanta BC\n\n\nAtalanta BC\n\n\n68\n\n\n35\n\n\n33\n\n\n0.7380989\n\n\n0.0801672\n\n\n0.0591713\n\n\n0.9198328\n\n\n0.6789275\n\n\n17953.233\n\n\n0.0997573\n\n\n0.1513361\n\n\n0.3371393\n\n\n966\n\n\n966\n\n\n0\n\n\n0\n\n\n0\n\n\n0\n\n\nInter Milan\n\n\nInter Milan\n\n\n68\n\n\n32\n\n\n36\n\n\n0.8787351\n\n\n0.2193920\n\n\n0.1927874\n\n\n0.7806080\n\n\n0.6859477\n\n\n2799.590\n\n\n0.0962341\n\n\n0.2636786\n\n\n0.7339420\n\n\n925\n\n\n925\n\n\n0\n\n\n0\n\n\n0\n\n\n0\n\n\nSL Benfica\n\n\nSL Benfica\n\n\n63\n\n\n25\n\n\n38\n\n\n0.2308760\n\n\n0.0952775\n\n\n0.0219973\n\n\n0.9047225\n\n\n0.2088787\n\n\n9303.833\n\n\n0.0988418\n\n\n0.1211357\n\n\n0.5025727\n\n\n905\n\n\n905\n\n\n0\n\n\n0\n\n\n0\n\n\n0\n\n\nACF Fiorentina\n\n\nACF Fiorentina\n\n\n66\n\n\n38\n\n\n28\n\n\n0.7988873\n\n\n0.1174342\n\n\n0.0938166\n\n\n0.8825658\n\n\n0.7050706\n\n\n31709.998\n\n\n0.1108554\n\n\n0.0614752\n\n\n0.4296561\n\n\n897\n\n\n897\n\n\n0\n\n\n0\n\n\n0\n\n\n0\n\n\nSporting CP\n\n\nSporting CP\n\n\n63\n\n\n24\n\n\n39\n\n\n0.2121757\n\n\n0.0853551\n\n\n0.0181103\n\n\n0.9146449\n\n\n0.1940654\n\n\n15777.081\n\n\n0.0750053\n\n\n0.0362787\n\n\n0.2564397\n\n\n891\n\n\n891\n\n\n0\n\n\n0\n\n\n0\n\n\n0\n\n\nJuventus FC\n\n\nJuventus FC\n\n\n68\n\n\n27\n\n\n41\n\n\n0.6770212\n\n\n0.2150981\n\n\n0.1456259\n\n\n0.7849019\n\n\n0.5313953\n\n\n20394.667\n\n\n0.1013719\n\n\n1.0000000\n\n\n0.5912871\n\n\n879\n\n\n879\n\n\n0\n\n\n0\n\n\n0\n\n\n0\n\n\nAS Roma plays a role of coordinator in the network which means that many ties go to and from AS Roma. This is in alignment with the degrees of the network as we saw earlier and the Eigenvector centrality which was also the highest for AS Roma in the network.\nAston Villa is an iterant broker in the network.\n\n\n\n",
    "preview": "posts/httpsisha-mahajan12githubiofootballtransfersocialnetworkposts2022-05-09-network-status/network-status_files/figure-html5/unnamed-chunk-6-1.png",
    "last_modified": "2022-05-11T18:47:31-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsisha-mahajan12githubiofootballtransfersocialnetworkpostswelcome/",
    "title": "Introduction to Football Networks",
    "description": "In this blog, We'll be referring to soccer as football -- since it's played with a foot.",
    "author": [
      {
        "name": "Isha Akshita Mahajan, Ankit Kumar",
        "url": {}
      }
    ],
    "date": "2022-05-11",
    "categories": [],
    "contents": "\nTransfer of players in European Football\nThis blog is an attempt to examine a social network of football transfers in major football leagues. The data was extracted using web scraping techniques from transfermarket.co.uk which is known to be a reliable source for data on players and their movement in various sports.\nUnlike American sports, where players transfer from one team to another either through contracts or through their agents. It is more like a trade. However, in the football transfer system, the players move from one team to another by the selling and buying process. The transaction that is made during the process is considered to be a transfer fee and is the amount that one team is paying to another while transferring the player. Usually 5 or 10 percent of this fee goes to the player themself.\nThese transactions happen during transfer windows which are similar to trade deadlines in the NBA. However, unlike a specific date, it is a window of time during which football clubs buy and sell players. These transfer windows in most European leagues are during the summer summer and winter.\nIn addition to transfers by paying money, players also move from one club to another on loans where they can temporally play for a team for which they dont have a contract. There is no transaction between the clubs however the club is still responsible for paying the player’s fee.\nWebscraping\nThe data was scraped using python and is attached to this blog. We extracted data from the year 2018-2021 which is 4 years and 8 transfer windows. We removed the free and loan transfers because they don’t show a transaction between the club.\n\n\n\n",
    "preview": {},
    "last_modified": "2022-05-11T18:46:51-04:00",
    "input_file": {}
  },
  {
    "path": "posts/httpgratefulnetworklivepostsstatistics/",
    "title": "Statistical Analysis",
    "description": "Using Univariate Conditional Uniform Graph Tests",
    "author": [
      {
        "name": "Kristina Becvar",
        "url": "http://gratefulnetwork.live/"
      }
    ],
    "date": "2022-05-11",
    "categories": [
      "network analytics",
      "statistics",
      "CUG test",
      "statnet"
    ],
    "contents": "\n\nContents\nLoading Networks\nAffiliation Matrix\nBipartite Projection\nCreate statnet Object\n\nCentrality and Node\nData\nComparing Network\nProperties\nCreate t-stat Function\nNetwork Transitivity to\nNull\nPlot Results\nInspect Details\nT-Stat Test\nEvaluation\n\nNetwork Degree\nCentralization to Null\nPlot Results\nInspect Details\nT-Stat Test\nEvaluation\n\nBetweenness Centrality\nPlot Results\nInspect Details\nT-Stat Test\nEvaluation\n\nTransitivity\nPlot Results\nInspect Details\nT-Stat Test\nEvaluation\n\nMultiple Evaluations\nVisualization\n\n\n\n\n\nShow code\n\nlibrary(ggplot2) \nlibrary(readr) \nlibrary(statnet)\nlibrary(ggraph)\nlibrary(tidyverse)\nlibrary(ergm)\nlibrary(dplyr)\nlibrary(corrr)\nlibrary(magrittr)\n\nsuppressWarnings(expr)\n\n\n\nLoading Networks\nI previously analyzed the network using igraph and statnet, and need\nto make a decision about which package serves the network best.\nAffiliation Matrix\nLoading the dataset and creating the network to begin my\nanalysis:\n\n\nShow code\n\ngd_affiliation <- read.csv('gd_affiliation_matrix.csv', row.names = 1, header = TRUE, check.names = FALSE)\ngd_matrix <- as.matrix(gd_affiliation)\n\n\n\nBipartite Projection\n\n\nShow code\n\ngd_projection <- gd_matrix%*%t(gd_matrix)\nwrite.csv(gd_projection, file = \"gd_projection.csv\")\n\n\n\nCreate statnet Object\n\n\nShow code\n\nset.seed(11)\ngd_statnet <- as.network(gd_projection,\n               directed = FALSE, \n               bipartite = FALSE,\n               loops = FALSE,\n               connected = TRUE)\n\n\n\nCentrality and Node Data\nI am going to load the data frame I saved from the statnet package\nanalysis as well as a dataframe with key comparable results from each\npackage\n\n\nShow code\n\ngd_stat_nodes <- read.csv(\"gd_stat_nodes.csv\")\ngd_compare <- read.csv(\"gd_comparison_packages.csv\")\n\n\n\nComparing Network Properties\nIn the semester assignment, we looked at what to do if we are\ninterested in testing whether or not a specific network property, such\nas transitivity, is higher in the network we are interested in than we\nwould expect from a random network. To test our network against a null\nhypothesis, we can use the function cug.test() and set the parameters on\nwhich we plan to condition. Possible parameters for this function\ninclude: size, edges, and dyad.census for sna/statnet.\nCreate t-stat Function\n\n\nShow code\n\ncug.t<-function(cug.object){\n  (cug.object$obs.stat-mean(cug.object$rep.stat))/sd(cug.object$rep.stat)\n}\n\n\n\nNetwork Transitivity to Null\nComparing transitivity to null conditional on size\n\n\nShow code\n\n#compare network transitivity to null conditional on size\ntrans.cug<-cug.test(gd_projection,FUN=gtrans,mode=\"graph\",cmode=\"size\")\ntrans.cug\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: graph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 0.5240964 \nPr(X>=Obs): 0.189 \nPr(X<=Obs): 0.811 \n\nPlot Results\n\n\nShow code\n\nplot(trans.cug)\n\n\n\n\nInspect Details\n\n\nShow code\n\n#inspect CUG test\ntrans.cug\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: graph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 0.5240964 \nPr(X>=Obs): 0.189 \nPr(X<=Obs): 0.811 \n\nT-Stat Test\n\n\nShow code\n\n#inspect CUG test\ncug.t(trans.cug)\n\n\n[1] 0.8395548\n\nEvaluation\nThere is a reasonable probability that the observed network\ntransitivity of 0.524 could be randomly generated, conditional only on\nthe size of the network. In this case, I cannot accept the alternative\nhypothesis that the observed transitivity is higher than would be\nexpected from a random network. In fact, the probability that X <=\n0.524 is 19.6% and the probability that x >= 0.524 is 80.4%. The\nt-stat evaluation tells us that the observed transitivity value is less\nthan 1 standard error away from what we would expect, on average.\nNetwork Degree\nCentralization to Null\nComparing network degree centralization to null conditional on\nsize\n\n\nShow code\n\n#compare network degree centralization to null conditional on size\nc.degree.cug <-cug.test(gd_projection,FUN=centralization,  FUN.arg=list(FUN=degree, cmode=\"degree\"), mode=\"graph\", cmode=\"size\")\n\n\n\nPlot Results\n\n\nShow code\n\n#plot vs simulation results\nplot(c.degree.cug)\n\n\n\n\nInspect Details\n\n\nShow code\n\n#inspect CUG test\nc.degree.cug\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: graph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 5.206522 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\nT-Stat Test\n\n\nShow code\n\n#t-stat between observed and simulated networks\ncug.t(c.degree.cug)\n\n\n[1] 101.9499\n\nEvaluation\nThere is an extremely remote probability that the observed network\ndegree centrality of 5.21 could be randomly generated, conditional only\non the size of the network. In this case, I can accept the alternative\nhypothesis that the observed network degree centrality is higher than\nwould be expected from a random network. .\nBetweenness Centrality\nComparing network betweenness centralization to null conditional on\nsize\n\n\nShow code\n\n#compare network betweenness centralization to null conditional on size\nb.degree.cug <-cug.test(gd_projection,FUN=centralization,  FUN.arg=list(FUN=betweenness, cmode=\"undirected\"), mode=\"graph\", cmode=\"size\", reps=100) \n\n\n\nPlot Results\n\n\nShow code\n\n#plot vs simulation results\nplot(b.degree.cug)\n\n\n\n\nInspect Details\n\n\nShow code\n\n#inspect CUG test\nb.degree.cug\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: graph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 0.3759561 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\nT-Stat Test\n\n\nShow code\n\n#t-stat between observed and simulated networks\ncug.t(b.degree.cug)\n\n\n[1] 34.06653\n\nEvaluation\nAgain, there is an extremely remote probability that the observed\nbetweenness centrality of 0.376 could be randomly generated, conditional\nonly on the size of the network. In this case, I can accept the\nalternative hypothesis that the observed network degree centrality is\nhigher than would be expected from a random network. This makes sense\nwith the rest of my network evaluations.\nTransitivity\nComparing transitivity to null conditional on dyad\n\n\nShow code\n\nt.degree.cug <-cug.test(gd_projection,FUN=gtrans, mode=\"graph\", cmode=\"dyad\", reps=100) \n\n\n\nPlot Results\n\n\nShow code\n\n#plot vs simulation results\nplot(t.degree.cug)\n\n\n\n\nInspect Details\n\n\nShow code\n\n#inspect CUG test\nt.degree.cug\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: dyad.census \nGraph Type: graph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 0.5240964 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\nT-Stat Test\n\n\nShow code\n\n#t-stat between observed and simulated networks\ncug.t(t.degree.cug)\n\n\n[1] 8.463895\n\nEvaluation\nUnlike the first evaluation of transitivity on size, this evaluation\nof transivity on dyad gives a result that is more in line with\nsubsequent calculations.\nMultiple Evaluations\nFor my research in particular, I want to look at the measures of\ncentrality and through the different modes of evaluation.\n\n\nShow code\n\ncug_cent_size <- cug.test(gd_statnet,\n                       centralization,\n                       FUN.arg=list(FUN=degree), \n                       mode=\"graph\", \n                       cmode=\"size\")\ncug_cent_edge <- cug.test(gd_statnet,\n                        centralization,\n                        FUN.arg=list(FUN=degree), \n                        mode=\"graph\", \n                        cmode=\"edges\")\ncug_cent_dyad <- cug.test(gd_statnet,\n                       centralization,\n                       FUN.arg=list(FUN=degree), \n                       mode=\"graph\", \n                       cmode=\"dyad.census\")\n\n\n\nVisualization\n\n\nShow code\n\ndegree_centralization <- c(cug_cent_size$obs.stat,\n                        cug_cent_edge$obs.stat, \n                        cug_cent_dyad$obs.stat)\n\nrt_tail <- c(cug_cent_size$pgteobs, \n             cug_cent_edge$pgteobs, \n             cug_cent_dyad$pgteobs)\n\nlt_tail <- c(cug_cent_size$plteobs, \n             cug_cent_edge$plteobs, \n             cug_cent_dyad$plteobs)\n\ncentrality <- cbind(degree_centralization,\n                     rt_tail, \n                     lt_tail)\n\nrownames(centrality) <- c(\"Size\", \"Edges\", \"Dyads\")\n\npar(mfrow=c(1,3))\nplot(cug_cent_size, main=\"Centrality \\nConditioned on Size\" )\nplot(cug_cent_edge, main=\"Centrality \\nConditioned on Edges\" )\nplot(cug_cent_dyad, main=\"Centrality \\nConditioned on Dyads\" )\n\n\n\n\n\n\n\n",
    "preview": "posts/httpgratefulnetworklivepostsstatistics/distill-preview.png",
    "last_modified": "2022-05-11T18:47:38-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpswwwkristinabecvarcompostsnetworks-community/",
    "title": "DACSS 697E Assignment 7",
    "description": "Assignment 7 for DACSS 697E course 'Social and Political Network Analysis': \"Networks: Community\"",
    "author": [
      {
        "name": "Kristina Becvar",
        "url": "https://www.kristinabecvar.com"
      }
    ],
    "date": "2022-04-15",
    "categories": [
      "networks",
      "homework",
      "grateful network"
    ],
    "contents": "\n\nContents\nNetwork Creation\nBasic Visualization\n\nCleaning\nSimplify Function\nGiant Component\n\nFast and Greedy Community\nGroups\nCommunity Membership\nPlot the Network with Community Colors\n\nWalktrap Community Detection and Plot\nPlot the Network with Community Colors\n\nCompare Community Partitions - Fast and Greedy and Walktrap\nCollect & Compare Modularity Scores\n\nLeading Label Propagation Community Detection\nEdge Betweenness Community Detection\nEigenvector Community Detection\nPlot the Network with Community Colors\n\nSpinglass Community Detection\nPlot the Network with Community Colors\n\nModularity\nEvaluation\n\n\nI am continuing to use the Grateful Dead song writing data set that I used in previous assignments to examine co-writing links and centrality. The data set consists of the links between co-writers of songs played by the Grateful Dead over their 30-year touring career that I compiled.\nThere are 26 songwriters that contributed to the songs played over the course of the Grateful Dead history, resulting in 26 nodes in the dataset.\nThere are a total of 183 (updated and still under review!) unique songs played, and the varies combinations of co-writing combinations are now represented in a binary affiliation matrix.\n\n\n\nThis week I will calculate community clusters using various algorithms.\nNetwork Creation\nFirst, I will get my data into an igraph network object and inspect it.\n\n\nShow code\n\n#import data\ngd_vertices <- read.csv(\"gd_nodes.csv\", header=T, stringsAsFactors=F)\ngd_affiliation <- read.csv(\"gd_affiliation_matrix.csv\", row.names = 1, header = TRUE, check.names = FALSE)\ngd_matrix <- as.matrix(gd_affiliation)\ngd_projection <- gd_matrix%*%t(gd_matrix)\n#Create igraph object\ngd_network_ig <- graph.adjacency(gd_projection,mode=\"undirected\")\n\n\n\nBasic Visualization\n\n\n\nCleaning\nSimplify Function\nThe fast and greedy function was giving me an error code of:\nError in cluster_fast_greedy(gd_network_ig):At fast_community.c:660: fast-greedy community finding works only on graphs without multiple edges, Invalid value\nSome community sourcing of opinions led me to run the “simplify()” function to correct this.\n\n\n#create simplified igraph network\nsimple_gd <- simplify(gd_network_ig)\n\n\n\nGiant Component\nCreating a function to extract the giant component. The spinglass model will not evaluate unconnected graphs, so I did this step first. The one isolate node, “Bruce Hornsby”, is the only songwriter who wrote only a song without collaborating with anyone, and would be the only unevaluated node in the spinglass model.\n\n\nShow code\n\ngiant.component <- function(graph) {\n  cl <- clusters(graph)\n  induced.subgraph(graph, which(cl$membership == which.max(cl$csize)))\n}\n\n\n\n\n\nShow code\n\n#extract giant component\ngd_giant<-giant.component(gd_network_ig)\n\n\n\nFast and Greedy Community\nThe method attempts to detect dense sub-graphs by optimizing modularity scores on igraph networks that are un-directed. I’ll start with inspecting the names that are part of the new object.\n\n\nShow code\n\n#run fast_greedy clustering algorithm\n#fg_gd <- cluster_fast_greedy(simple_gd)\n\n\n\n\n\n\n\n\n\n\n\nShow code\n\n#inspect\nnames(fg_gd)\n\n\n[1] \"merges\"     \"modularity\" \"membership\" \"names\"      \"algorithm\" \n[6] \"vcount\"    \n\nGroups\nLooking at the list of which nodes belong to which clusters:\n\n\nShow code\n\nigraph::groups(fg_gd)\n\n\n$`1`\n[1] \"Frank Guida\" \"Dave Parker\" \"Pigpen\"      \"Joe Royster\"\n\n$`2`\n[1] \"Eric Andersen\" \"John Barlow\"   \"Bob Bralove\"   \"Willie Dixon\" \n[5] \"Gerrit Graham\" \"Robert Hunter\" \"Rob Wasserman\" \"Bob Weir\"     \n[9] \"Vince Welnick\"\n\n$`3`\n[1] \"John Dawson\"     \"Jerry Garcia\"    \"Donna Godchaux\" \n[4] \"Keith Godchaux\"  \"Mickey Hart\"     \"Bill Kreutzmann\"\n\n$`4`\n[1] \"Andrew Charles\"  \"Ned Lagin\"       \"Phil Lesh\"      \n[4] \"Peter Monk\"      \"Brent Mydland\"   \"Robert Petersen\"\n\n$`5`\n[1] \"Bruce Hornsby\"\n\nCommunity Membership\nFirst I’m inspecting the community membership as a vector\n\n\nShow code\n\n#Inspect community membership vector\nfg_gd$membership\n\n\n [1] 2 2 2 4 3 2 3 3 3 2 1 3 5 2 3 4 4 4 4 1 4 1 1 2 2 2\n\nAnd I can confirm which of the 5 membership groups each songwriter is part of:\n\n\nShow code\n\n#Membership function\nmembership(fg_gd)\n\n\n  Eric Andersen     John Barlow     Bob Bralove  Andrew Charles \n              2               2               2               4 \n    John Dawson    Willie Dixon    Jerry Garcia  Donna Godchaux \n              3               2               3               3 \n Keith Godchaux   Gerrit Graham     Frank Guida     Mickey Hart \n              3               2               1               3 \n  Bruce Hornsby   Robert Hunter Bill Kreutzmann       Ned Lagin \n              5               2               3               4 \n      Phil Lesh      Peter Monk   Brent Mydland     Dave Parker \n              4               4               4               1 \nRobert Petersen          Pigpen     Joe Royster   Rob Wasserman \n              4               1               1               2 \n       Bob Weir   Vince Welnick \n              2               2 \n\nPlot the Network with Community Colors\nIgraph colors the nodes by community\n\n\nShow code\n\n#plot network with community coloring\nplot(fg_gd,gd_network_ig)\n\n\n\n\nWalktrap Community Detection and Plot\nThe walktrap community detection created two communities; one community is the lone isolate, and the rest of the songwriters are in the other community with the giant component.\n\n\nShow code\n\n#Run clustering algorithm: walktrap\nwt_gd <- walktrap.community(gd_network_ig)\n#Inspect community membership\nigraph::groups(wt_gd)\n\n\n$`1`\n [1] \"Eric Andersen\"   \"John Barlow\"     \"Bob Bralove\"    \n [4] \"Andrew Charles\"  \"John Dawson\"     \"Willie Dixon\"   \n [7] \"Jerry Garcia\"    \"Donna Godchaux\"  \"Keith Godchaux\" \n[10] \"Gerrit Graham\"   \"Frank Guida\"     \"Mickey Hart\"    \n[13] \"Robert Hunter\"   \"Bill Kreutzmann\" \"Ned Lagin\"      \n[16] \"Phil Lesh\"       \"Peter Monk\"      \"Brent Mydland\"  \n[19] \"Dave Parker\"     \"Robert Petersen\" \"Pigpen\"         \n[22] \"Joe Royster\"     \"Rob Wasserman\"   \"Bob Weir\"       \n[25] \"Vince Welnick\"  \n\n$`2`\n[1] \"Bruce Hornsby\"\n\nPlot the Network with Community Colors\nIgraph colors the nodes by community\n\n\nShow code\n\n#plot network with community coloring\nplot(wt_gd,gd_network_ig)\n\n\n\n\nCompare Community Partitions - Fast and Greedy and Walktrap\nThe modularity score for the fast and greedy algorithm is higher than the walktrap algorithm, as predicted by the tutorial.\nIt would be worth comparing these scores on a weighted network in the future since it would take that into consideration.\n\n\nShow code\n\n#compare community partition modularity scores\nmodularity(fg_gd)\n\n\n[1] 0.2792899\n\n\n\nShow code\n\n#compare community partition modularity scores\nmodularity(wt_gd)\n\n\n[1] 0.2482355\n\nCollect & Compare Modularity Scores\nSaving the scores for evaluation and later analysis; I will continue to add the other community modularity scores into this vector as I run them.\n\n\nmods<-c(fastgreedy=modularity(fg_gd), walktrap=modularity(wt_gd))\nmods\n\n\nfastgreedy   walktrap \n 0.2792899  0.2482355 \n\nVariation Method\n\n\nShow code\n\n#compare community partitions using variation of information\ncompare(fg_gd,wt_gd,method=\"vi\")\n\n\n[1] 1.294253\n\nNormalized Mutual Information Method\n\n\nShow code\n\n#compare community partitions\ncompare(fg_gd,wt_gd,method=\"nmi\")\n\n\n[1] 0.2012264\n\nSplit Join Distance Method\n\n\nShow code\n\n#compare community partitions\ncompare(fg_gd,wt_gd,method=\"split.join\")\n\n\n[1] 16\n\nRand Index Method\n\n\nShow code\n\n#compare community partitions\ncompare(fg_gd,wt_gd,method=\"rand\")\n\n\n[1] 0.2984615\n\nAdjusted Rand Index Method\n\n\nShow code\n\n#compare community partitions\ncompare(fg_gd,wt_gd,method=\"adjusted.rand\")\n\n\n[1] 0.04633205\n\nLeading Label Propagation Community Detection\nIn this evaluation, each of the nodes was indicated to be in its’ own community. I will not plot this community.\n\n\nShow code\n\n#Run clustering algorithm: leading label\nlab_gd<-label.propagation.community(gd_network_ig)\n#Inspect community membership\nigraph::groups(lab_gd)\n\n\n$`1`\n[1] \"Eric Andersen\"\n\n$`2`\n[1] \"John Barlow\"\n\n$`3`\n[1] \"Bob Bralove\"\n\n$`4`\n[1] \"Andrew Charles\"\n\n$`5`\n[1] \"John Dawson\"\n\n$`6`\n[1] \"Willie Dixon\"\n\n$`7`\n[1] \"Jerry Garcia\"\n\n$`8`\n[1] \"Donna Godchaux\"\n\n$`9`\n[1] \"Keith Godchaux\"\n\n$`10`\n[1] \"Gerrit Graham\"\n\n$`11`\n[1] \"Frank Guida\"\n\n$`12`\n[1] \"Mickey Hart\"\n\n$`13`\n[1] \"Bruce Hornsby\"\n\n$`14`\n[1] \"Robert Hunter\"\n\n$`15`\n[1] \"Bill Kreutzmann\"\n\n$`16`\n[1] \"Ned Lagin\"\n\n$`17`\n[1] \"Phil Lesh\"\n\n$`18`\n[1] \"Peter Monk\"\n\n$`19`\n[1] \"Brent Mydland\"\n\n$`20`\n[1] \"Dave Parker\"\n\n$`21`\n[1] \"Robert Petersen\"\n\n$`22`\n[1] \"Pigpen\"\n\n$`23`\n[1] \"Joe Royster\"\n\n$`24`\n[1] \"Rob Wasserman\"\n\n$`25`\n[1] \"Bob Weir\"\n\n$`26`\n[1] \"Vince Welnick\"\n\nShow code\n\n#collect modularity scores to compare\nmods<-c(mods, label=modularity(lab_gd))\n\n\n\nEdge Betweenness Community Detection\nAgain, each of the nodes was indicated to be in its’ own community. I will not plot this community.\n\n\nShow code\n\n#Run clustering algorithm: edge betweenness\nedge_gd <- label.propagation.community(gd_network_ig)\n#Inspect community membership\nigraph::groups(edge_gd)\n\n\n$`1`\n[1] \"Eric Andersen\"\n\n$`2`\n[1] \"John Barlow\"\n\n$`3`\n[1] \"Bob Bralove\"\n\n$`4`\n[1] \"Andrew Charles\"\n\n$`5`\n[1] \"John Dawson\"\n\n$`6`\n[1] \"Willie Dixon\"\n\n$`7`\n[1] \"Jerry Garcia\"\n\n$`8`\n[1] \"Donna Godchaux\"\n\n$`9`\n[1] \"Keith Godchaux\"\n\n$`10`\n[1] \"Gerrit Graham\"\n\n$`11`\n[1] \"Frank Guida\"\n\n$`12`\n[1] \"Mickey Hart\"\n\n$`13`\n[1] \"Bruce Hornsby\"\n\n$`14`\n[1] \"Robert Hunter\"\n\n$`15`\n[1] \"Bill Kreutzmann\"\n\n$`16`\n[1] \"Ned Lagin\"\n\n$`17`\n[1] \"Phil Lesh\"\n\n$`18`\n[1] \"Peter Monk\"\n\n$`19`\n[1] \"Brent Mydland\"\n\n$`20`\n[1] \"Dave Parker\"\n\n$`21`\n[1] \"Robert Petersen\"\n\n$`22`\n[1] \"Pigpen\"\n\n$`23`\n[1] \"Joe Royster\"\n\n$`24`\n[1] \"Rob Wasserman\"\n\n$`25`\n[1] \"Bob Weir\"\n\n$`26`\n[1] \"Vince Welnick\"\n\nShow code\n\n#collect modularity scores to compare\nmods<-c(mods, edge=modularity(edge_gd))\n\n\n\nEigenvector Community Detection\nThis method has also created 5 communities to examine.\n\n\nShow code\n\n#Run clustering algorithm: leading eigenvector\neigen_gd <- leading.eigenvector.community(gd_network_ig)\n#Inspect community membership\nigraph::groups(eigen_gd)\n\n\n$`1`\n[1] \"Eric Andersen\" \"John Barlow\"   \"Bob Bralove\"   \"Willie Dixon\" \n[5] \"Gerrit Graham\" \"Brent Mydland\" \"Rob Wasserman\" \"Bob Weir\"     \n[9] \"Vince Welnick\"\n\n$`2`\n[1] \"Bruce Hornsby\"\n\n$`3`\n[1] \"John Dawson\"   \"Jerry Garcia\"  \"Robert Hunter\"\n\n$`4`\n [1] \"Andrew Charles\"  \"Frank Guida\"     \"Bill Kreutzmann\"\n [4] \"Ned Lagin\"       \"Phil Lesh\"       \"Peter Monk\"     \n [7] \"Dave Parker\"     \"Robert Petersen\" \"Pigpen\"         \n[10] \"Joe Royster\"    \n\n$`5`\n[1] \"Donna Godchaux\" \"Keith Godchaux\" \"Mickey Hart\"   \n\nShow code\n\n#collect modularity scores to compare\nmods<-c(mods, eigen=modularity(eigen_gd))\n\n\n\nPlot the Network with Community Colors\nIgraph colors the nodes by community\n\n\nShow code\n\n#plot network with community coloring\nplot(eigen_gd,gd_network_ig)\n\n\n\n\nSpinglass Community Detection\nThis method has, not surprisingly, created 4 communities to examine since we are only looking at the giant component, eliminating the one isolate.\n\n\nShow code\n\n#Run clustering algorithm: spinglass\nspin_gd <- spinglass.community(gd_giant)\n#Inspect community membership\nigraph::groups(spin_gd)\n\n\n$`1`\n[1] \"Frank Guida\" \"Dave Parker\" \"Pigpen\"      \"Joe Royster\"\n\n$`2`\n[1] \"Andrew Charles\"  \"Ned Lagin\"       \"Phil Lesh\"      \n[4] \"Peter Monk\"      \"Brent Mydland\"   \"Robert Petersen\"\n\n$`3`\n[1] \"Eric Andersen\" \"John Barlow\"   \"Bob Bralove\"   \"Willie Dixon\" \n[5] \"Gerrit Graham\" \"Rob Wasserman\" \"Bob Weir\"      \"Vince Welnick\"\n\n$`4`\n[1] \"John Dawson\"     \"Jerry Garcia\"    \"Donna Godchaux\" \n[4] \"Keith Godchaux\"  \"Mickey Hart\"     \"Robert Hunter\"  \n[7] \"Bill Kreutzmann\"\n\nShow code\n\n#collect modularity scores to compare\nmods<-c(mods, spin=modularity(spin_gd))\n\n\n\nPlot the Network with Community Colors\nIgraph colors the nodes by community\n\n\nShow code\n\n#plot network with community coloring\nplot(spin_gd,gd_giant)\n\n\n\n\nModularity\nFinally, for this post, I will look at the modularity scores across the various methods of community evaluation.\n\n\nShow code\n\ngd_mods <- as.matrix(mods)\ngd_mods\n\n\n                 [,1]\nfastgreedy 0.27928994\nwalktrap   0.24823554\nlabel      0.40297240\nedge       0.40297240\neigen      0.45402593\nspin       0.04933856\n\nEvaluation\nAfter an initial look at the network through various community algorithms, it is my instinct that the fast and greedy community structure actually makes very little sense to me, outside the isolate.\nThe eigenvector community makes the most sense to me. Even the inclusion of John Dawson with Jerry Garcia and Robert Hunter makes sense, given the eigenvector principle. The only song John Dawson wrote was a popular song, written with Jerry Garcia and Robert Hunter.\nThe spinglass community structure is interesting, and I would like to look at that in more detail in the future. It has intuitively more of a logical distribution than the fast and greedy model, though it’s not quite as “clean” of a picture as the eigenvector model.\nCitations:\nAllan, Alex; Grateful Dead Lyric & Song Finder: https://whitegum.com/~acsa/intro.htm\nASCAP. 18 March 2022.\nDodd, David; The Annotated Grateful Dead Lyrics: http://artsites.ucsc.edu/gdead/agdl/\nSchofield, Matt; The Grateful Dead Family Discography: http://www.deaddisc.com/\nPhoto by Rosie McGee\nThis information is intended for private research only, and not for any commercial use. Original Grateful Dead songs are ©copyright Ice Nine Music\n\n\n\n  \n    \n      Share:  \n      \n        \n      \n      \n        \n      \n    \n  \n\n\n",
    "preview": "posts/httpswwwkristinabecvarcompostsnetworks-community/distill-preview.png",
    "last_modified": "2022-04-15T17:25:14-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpswwwkristinabecvarcomposts2022-04-04-dacss-697e-assignment-6/",
    "title": "DACSS 697E Assignment 6",
    "description": "Assignment 6 for DACSS 697E course 'Social and Political Network Analysis': \"Network Roles\"",
    "author": [
      {
        "name": "Kristina Becvar",
        "url": "https://www.kristinabecvar.com"
      }
    ],
    "date": "2022-04-15",
    "categories": [
      "networks",
      "homework",
      "grateful network"
    ],
    "contents": "\n\nContents\nNetwork Structure\nCreate a Data Frame\nStructural Equivalence\n“Complete”\n“Average”\n“Single”\n“Ward.D”\n\nPartition Using Clustering\nHeight= 15\nHeight= 10\nHeight= 3\n\nBlockmodel Partitions\n2-partition blockmodel\n5-partition blockmodel\n\nPlotting Network Roles\nStatnet\nIgraph\n\nCentrality by Network Role\nConcoR\nBest model\n\n\nI am continuing to use the Grateful Dead song writing data set that I used in previous assignments to examine co-writing links and centrality. The data set consists of the links between co-writers of songs played by the Grateful Dead over their 30-year touring career that I compiled.\nThere are 26 songwriters that contributed to the songs played over the course of the Grateful Dead history, resulting in 26 nodes in the dataset.\nThere are a total of 183 (updated and still under review!) unique songs played, and the varies combinations of co-writing combinations are now represented in a binary affiliation matrix.\nI plan on eventually introducing the number of times a given song was played live as a method of weighting the network, given the culture of the band and its’ community was one of collaboration and the prominence of a song being representative of the level at which it resonated with the community. I need to continue to investigate the best time and way to incorporate those weights.\n\n\n\nLoading the dataset and creating the network to begin this assignment:\n\n\nShow code\n\ngd_vertices <- read.csv(\"gd_nodes.csv\", header=T, stringsAsFactors=F)\ngd_affiliation <- read.csv(\"gd_affiliation_matrix.csv\", row.names = 1, header = TRUE, check.names = FALSE)\ngd_matrix <- as.matrix(gd_affiliation)\ngd_projection <- gd_matrix%*%t(gd_matrix)\n\n#Create igraph and statnet Objects\n\ngd_network_ig <- graph.adjacency(gd_projection,mode=\"undirected\") #igraph object\ngd_network_stat <- network(gd_projection, directed=F, matrix.type=\"adjacency\") #statnet object\n\n\n\nNetwork Structure\nThe network is an undirected, unweighted network. It has two components; one large component with one isolate.\nThe statnet object has a density of 0.2 and a transitivity of 0.5241.\n\n\nShow code\n\n#Inspect New igraph and statnet objects\n\nprint(gd_network_stat)\n\n\n Network attributes:\n  vertices = 26 \n  directed = FALSE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 65 \n    missing edges= 0 \n    non-missing edges= 65 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nShow code\n\nigraph::components(gd_network_ig)$no\n\n\n[1] 2\n\nShow code\n\ngden(gd_network_stat)\n\n\n[1] 0.2\n\nShow code\n\ngtrans(gd_network_stat)\n\n\n[1] 0.5240964\n\nCreate a Data Frame\nI need to create a data frame of the network node data as in previous tutorials/assignments, but having had trouble using both igraph and statnet in the same .rmd, I used igraph in previous assignments. I’ll use statnet in this assignment and inspect the differences as well.\n\n\nShow code\n\nget.eigen<-function(net, attr=NULL){\n    #set attr=\"weight\" if weighted network\n    eigen<-evcent(net)\n    mat<-as.matrix.network(net, attr=attr)\n    diag(mat)<-0\n    mat2<-mat%*%mat\n    rc<-diag(mat2)/rowSums(mat2)\n    dc<-1-rc\n    data.frame(name=net%v%\"vertex.names\",\n        eigen=eigen,\n        eigen.rc=eigen*rc,\n        eigen.dc=eigen*dc)\n}\nget.brokerage<-function(net, attr=\"attr\"){\n  temp<-data.frame(brokerage(net, cl = net%v%\"attr\")$z.nli)\n  temp$name=net%v%\"vertex.names\"\n  mutate(temp, broker.tot = temp$t,\n         broker.coord = temp$w_I,\n         broker.itin = temp$w_O,\n         broker.rep = temp$b_IO,\n         broker.gate = temp$b_OI,\n         broker.lia = temp$b_O)%>%\n    select(contains(\"broker\"))\n}\n\n\n\nBecause I am again having an issue with using igraph and statnet in one knit chunk, I need to save my data frame then recall it to knit.\n\n\nShow code\n\n#create dataframe with names\n#gd_nodes<-data.frame(name=gd_network_stat%v%\"vertex.names\",\n        #degree=sna::degree(gd_network_stat,gmode=\"graph\"),\n        #bonpow=bonpow(gd_network_stat),\n        #betweenness=betweenness(gd_network_stat, gmode=\"graph\"),\n        #close=sna::closeness(gd_network_stat, gmode=\"graph\", cmode = \"undirected\"),\n        #constraint=constraint(gd_network_ig))\n\n#add eigenvector centrality using custom function\n#gd_nodes<-full_join(gd_nodes,get.eigen(gd_network_stat), by=\"name\")\n\n#write csv for retrieval in knitting document\n#write.csv(gd_nodes, file = \"gd_nodes6.csv\")\n\n\n\n\n\ngd_nodes <- read.csv(\"gd_nodes6.csv\")\n\nhead(gd_nodes)\n\n\n  X           name degree      bonpow betweenness close constraint\n1 1  Eric Andersen      1  0.02612461    0.000000     0  1.0000000\n2 2    John Barlow      3 -1.44991592    0.750000     0  0.6706222\n3 3    Bob Bralove      5 -1.41072900    1.833333     0  0.4989170\n4 4 Andrew Charles      1 -0.48330531    0.000000     0  1.0000000\n5 5    John Dawson      2 -1.18866981    0.000000     0  1.2945238\n6 6   Willie Dixon      2  0.27430842    0.000000     0  0.7040590\n       eigen    eigen.rc   eigen.dc\n1 0.04883644 0.002872732 0.04596371\n2 0.07763512 0.008957898 0.06867722\n3 0.12770600 0.015963250 0.11174275\n4 0.04317463 0.003083902 0.04009073\n5 0.07977694 0.007597803 0.07217913\n6 0.06423801 0.005839819 0.05839819\n\nStructural Equivalence\nCreating the matrix element then taking a look at the summary using the equivalence function “sedist”, the default measure of assessing the approximate structural equivalence of actors, or “complete”.\n“Complete”\n\n\nShow code\n\n#calculate equivalence from specified distance marix\ngd_stat_se<-equiv.clust(gd_network_stat, equiv.fun=\"sedist\", method=\"hamming\",mode=\"graph\")\n\n\n\n\n\n#summary of object produced by sedist()\nsummary(gd_stat_se)\n\n\n               Length Class  Mode     \ncluster         7     hclust list     \nmetric          1     -none- character\nequiv.fun       1     -none- character\ncluster.method  1     -none- character\nglabels        26     -none- character\nplabels        26     -none- character\n\n#plot equivalence clustering\nplot(gd_stat_se,labels=gd_stat_se$glabels)\n\n\n\n\nI need to look at the other methods of clustering as well.\n“Average”\n\n\nShow code\n\n#with average cluster.method\ngd_avg_se<-equiv.clust(gd_network_stat, equiv.fun=\"sedist\", cluster.method=\"average\", method=\"hamming\",mode=\"graph\")\n#plot:\nplot(gd_avg_se,labels=gd_stat_se$glabels)\n\n\n\n\n“Single”\n\n\nShow code\n\n#with average cluster.method\ngd_sing_se<-equiv.clust(gd_network_stat, equiv.fun=\"sedist\", cluster.method=\"single\", method=\"hamming\",mode=\"graph\")\n\n#plot:\nplot(gd_sing_se,labels=gd_stat_se$glabels)\n\n\n\n\n“Ward.D”\n\n\nShow code\n\n#with average cluster.method\ngd_wrd_se<-equiv.clust(gd_network_stat, equiv.fun=\"sedist\", cluster.method=\"ward.D\", method=\"hamming\",mode=\"graph\")\n\n#plot:\nplot(gd_wrd_se,labels=gd_stat_se$glabels)\n\n\n\n\nIt is interesting, because none of these dendograms represent fully what I feel accurately represents this network, but it makes me want to look more deeply and understand the network.\nPartition Using Clustering\nI understand that the number of partitions (or roles) will depend on the height at which the dendrogram is cut. Using the tutorial example, I set the height at 15 and the result is 5 clusters. Using the alternate view from the tutorial, I also set the height at 10, and identify 8 distinct clusters or roles.\nHeight= 15\n\n\nShow code\n\n#plot equivalence clustering\nplot(gd_stat_se,labels=gd_stat_se$glabels)\n#partition the clusters\nrect.hclust(gd_stat_se$cluster,h=15)\n\n\n\n\nHeight= 10\n\n\nShow code\n\n#plot equivalence clustering\nplot(gd_stat_se,labels=gd_stat_se$glabels)\n#partition the clusters\nrect.hclust(gd_stat_se$cluster,h=10)\n\n\n\n\nHeight= 3\nFor my own experimenting, looking at it with an even lower height (“3”), it spreads the clusters out to 16.\n\n\nShow code\n\n#plot equivalence clustering\nplot(gd_stat_se,labels=gd_stat_se$glabels)\n#partition the clusters\nrect.hclust(gd_stat_se$cluster,h=3)\n\n\n\n\nBlockmodel Partitions\nInspecting the goodness of fit of the partitions that result from the clustering steps above using blockmodeling to try and get a better sense of how well the partitioning worked. Using the blockmodel command in statnet and specifying “k=x” means that “x” will indicate how many partitions to create, and “h=x” means that “x” will indicate the height to cut the dendogram.\n2-partition blockmodel\n\n\nShow code\n\n#blockmodel and select partitions\nblk_mod<-blockmodel(gd_network_stat,gd_stat_se,k=2)\n#print blockmodel object\nblk_mod\n\n\n\nNetwork Blockmodel:\n\nBlock membership:\n\n  Eric Andersen     John Barlow     Bob Bralove  Andrew Charles \n              1               1               1               1 \n    John Dawson    Willie Dixon    Jerry Garcia  Donna Godchaux \n              1               1               1               1 \n Keith Godchaux   Gerrit Graham     Frank Guida     Mickey Hart \n              1               1               1               1 \n  Bruce Hornsby   Robert Hunter Bill Kreutzmann       Ned Lagin \n              1               1               1               1 \n      Phil Lesh      Peter Monk   Brent Mydland     Dave Parker \n              2               1               1               1 \nRobert Petersen          Pigpen     Joe Royster   Rob Wasserman \n              1               1               1               1 \n       Bob Weir   Vince Welnick \n              2               1 \n\nReduced form blockmodel:\n\n     Eric Andersen John Barlow Bob Bralove Andrew Charles John Dawson Willie Dixon Jerry Garcia Donna Godchaux Keith Godchaux Gerrit Graham Frank Guida Mickey Hart Bruce Hornsby Robert Hunter Bill Kreutzmann Ned Lagin Phil Lesh Peter Monk Brent Mydland Dave Parker Robert Petersen Pigpen Joe Royster Rob Wasserman Bob Weir Vince Welnick \n          Block 1   Block 2\nBlock 1 0.1268116 0.6041667\nBlock 2 0.6041667 1.0000000\n\n\n\nShow code\n\nplot.block<-function(x=blk_mod, main=NULL, cex.lab=1){\n  plot.sociomatrix(x$blocked.data, labels=list(x$plabels,x$plabels),\n                   main=main, drawlines = FALSE, cex.lab=cex.lab)\n  for (j in 2:length(x$plabels)) if (x$block.membership[j] !=\n                                     x$block.membership[j-1]) \n    abline(v = j - 0.5, h = j - 0.5, lty = 3, xpd=FALSE)\n}\nplot.block(blk_mod,main=\"Grateful Dead Songwriting: 2 Partitions\", cex.lab=.4)\n\n\n\n\n5-partition blockmodel\n\n\nShow code\n\n#blockmodel and select partitions\nblk_mod2<-blockmodel(gd_network_stat,gd_stat_se,k=5)\n#print blockmodel object\nblk_mod2$block.model\n\n\n           Block 1    Block 2 Block 3   Block 4 Block 5\nBlock 1 0.06666667 0.05208333  0.3125 0.0625000     0.5\nBlock 2 0.05208333 0.93333333  1.0000 0.4166667     1.0\nBlock 3 0.31250000 1.00000000     NaN 1.0000000     1.0\nBlock 4 0.06250000 0.41666667  1.0000 1.0000000     1.0\nBlock 5 0.50000000 1.00000000  1.0000 1.0000000     NaN\n\nShow code\n\n#plot blockmodel partitions\nplot.block(blk_mod2,main=\"Grateful Dead Songwriting, 5 Partitions\", cex.lab=.5)\n\n\n\n\nPlotting Network Roles\nTo do this, I will assign “block.membership” as a vertex attribute to my 5-partition blockmodel, then use the role attribute to change the color of plotted nodes in a network plot. I am using this part of the tutorial as well because graphics are always a fun thing to do in the middle of learning new concepts and coding all day! I will definitely want to investigate another aspect of this data and graphing options more later because the results show me that this network is not exactly graphing in a familiar way.\n\n\nShow code\n\nblk_mod3<-blockmodel(gd_network_stat,gd_stat_se,k=5)\n\n\n\nStatnet\n\nIgraph\n\n\nShow code\n\nlibrary(igraph)\n\nV(gd_network_ig)$role<-blk_mod3$block.membership[match(V(gd_network_ig)$name,blk_mod3$plabels)]\n\n#plot network using \"role\" to color nodes: igraph\nplot(gd_network_ig, layout=layout_with_kk, vertex.color=V(gd_network_ig)$role)\n\n\n\n\nCentrality by Network Role\nI am attempting to use the “gd_nodes” table created earlier and adding the role assignments from the “blockmodel” calculations to summarise average node measures of centrality by role.\nYet again, I am finding that the code used for this process using both igraph and statnet worked until I knit the document, but is giving me trouble at that point, so I will revisit this process.\n\n\nShow code\n\nlibrary(igraph)\n#attach role to .nodes dataframe\ngd_new_nodes <- gd_nodes$role<-V(gd_network_ig)$role\n\n\n\nConcoR\nUtilizing the “concoR” package\n\n\nShow code\n\nlibrary(concoR)\n#select partitions with concor\nconcoR::concor_hca(list(gd_projection), p=2)\n\n\n   block          vertex\n1      1   Eric Andersen\n2      1     John Barlow\n7      2     Bob Bralove\n11     3  Andrew Charles\n17     4     John Dawson\n8      2    Willie Dixon\n18     4    Jerry Garcia\n19     4  Donna Godchaux\n20     4  Keith Godchaux\n3      1   Gerrit Graham\n12     3     Frank Guida\n21     4     Mickey Hart\n4      1   Bruce Hornsby\n22     4   Robert Hunter\n23     4 Bill Kreutzmann\n13     3       Ned Lagin\n24     4       Phil Lesh\n14     3      Peter Monk\n5      1   Brent Mydland\n25     4     Dave Parker\n15     3 Robert Petersen\n26     4          Pigpen\n16     3     Joe Royster\n9      2   Rob Wasserman\n6      1        Bob Weir\n10     2   Vince Welnick\n\nTaking this output and plotting it as I tried earlier, I get a better visualization of the blockmodeling:\n\n           Block 1   Block 2    Block 3   Block 4\nBlock 1 0.33333333 0.2083333 0.02777778 0.1666667\nBlock 2 0.20833333 0.6666667 0.00000000 0.0750000\nBlock 3 0.02777778 0.0000000 0.06666667 0.1000000\nBlock 4 0.16666667 0.0750000 0.10000000 0.6666667\n\n\n\nShow code\n\n#plot blockmodel partitions\nplot.block(blk_mod,main=\"Grateful Dead Songwriting, Concor 4 Partitions\", cex.lab=.5)\n\n\n\n\nBest model\nFinally, I want to look at the “optimized” 5 partition model, which in the end seems to represent the network most intuitively of the models I’ve explored so far.\n\n\n\n\n\nShow code\n\n#plot blockmodel partitions\nplot.block(blk_mod,main=\"Grateful Dead Songwriting, Optimized 5 Partitions\", cex.lab=.5)\n\n\n\n\nI have more evaluations to do but I continue to struggle with using igraph and statnet in the same .rmd file, so I will revisit this process in future posts.\nCitations:\nAllan, Alex; Grateful Dead Lyric & Song Finder: https://whitegum.com/~acsa/intro.htm\nASCAP. 18 March 2022.\nDodd, David; The Annotated Grateful Dead Lyrics: http://artsites.ucsc.edu/gdead/agdl/\nSchofield, Matt; The Grateful Dead Family Discography: http://www.deaddisc.com/\nPhoto by Grateful Dead Productions\nThis information is intended for private research only, and not for any commercial use. Original Grateful Dead songs are ©copyright Ice Nine Music\n\n\n\n  \n    \n      Share:  \n      \n        \n      \n      \n        \n      \n    \n  \n\n\n",
    "preview": "posts/httpswwwkristinabecvarcomposts2022-04-04-dacss-697e-assignment-6/distill-preview.png",
    "last_modified": "2022-04-15T17:24:55-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpswwwkristinabecvarcomposts2022-04-04-dacss-697e-assignment-5/",
    "title": "DACSS 697E Assignment 5",
    "description": "Assignment 5 for DACSS 697E course 'Social and Political Network Analysis': \"Brokerage and Betweenness\"",
    "author": [
      {
        "name": "Kristina Becvar",
        "url": "https://www.kristinabecvar.com"
      }
    ],
    "date": "2022-04-15",
    "categories": [
      "networks",
      "homework",
      "grateful network"
    ],
    "contents": "\n\nContents\nNetwork Details\nCentrality Scores\nEigenvector Centrality\nCloseness\nBetweenness\nTop Betweenness\nTop Closeness\nNetwork Constraint (Burt)\n\n\nNetwork Details\nI am continuing to use the Grateful Dead song writing data set that I used in previous assignments to examine co-writing links and centrality.\nThe data set consists of the links between co-writers of songs played by the Grateful Dead over their 30-year touring career that I compiled. One aspect of the Grateful Dead song data is that the connections between co-writers is weighted, with the weights representing the number of time each song was played live.\nThere are 26 songwriters that contributed to the songs played over the course of the Grateful Dead history, resulting in 26 nodes in the dataset.\nThere are a total of 183 (updated and still under review!) unique songs played, and the varies combinations of co-writing combinations are now represented in a binary affiliation matrix.\n\n\n\nLoading the dataset and creating the network to begin this assignment:\n\n\nShow code\n\ngd_vertices <- read.csv(\"gd_nodes.csv\", header=T, stringsAsFactors=F)\ngd_affiliation <- read.csv(\"gd_affiliation_matrix.csv\", row.names = 1, header = TRUE, check.names = FALSE)\ngd_matrix <- as.matrix(gd_affiliation)\ngd_projection <- gd_matrix%*%t(gd_matrix)\n\n#Create Igraph Object\n\ngd_network_ig <- graph.adjacency(gd_projection,mode=\"undirected\") #igraph object\n\n\n\nThis is a non-directed, unweighted igraph object. It has two components; one large component with one isolate.\n\n\n#Inspect New Object\n\nigraph::vertex_attr_names(gd_network_ig)\n\n\n[1] \"name\"\n\nigraph::edge_attr_names(gd_network_ig)\n\n\ncharacter(0)\n\nhead(V(gd_network_ig)$name)\n\n\n[1] \"Eric Andersen\"  \"John Barlow\"    \"Bob Bralove\"   \n[4] \"Andrew Charles\" \"John Dawson\"    \"Willie Dixon\"  \n\nis_directed(gd_network_ig)\n\n\n[1] FALSE\n\nis_weighted(gd_network_ig)\n\n\n[1] FALSE\n\nis_bipartite(gd_network_ig)\n\n\n[1] FALSE\n\nigraph::dyad.census(gd_network_ig)\n\n\n$mut\n[1] 738\n\n$asym\n[1] 0\n\n$null\n[1] -413\n\nigraph::triad.census(gd_network_ig)\n\n\n [1] 1788    0  488    0    0    0    0    0    0    0  237    0    0\n[14]    0    0   87\n\nCentrality Scores\nTo examine the centrality and power scores of the nodes, I’m creating a data frame with the centrality degree, normalized centrality, Bonacich power, Eigenvector centrality scores and the breakdown of reflected and derived centrality scores.\nTo calculate the reflected and derived centrality scores, I first run some operations on the adjacency matrix and keep in mind that these two scores make up the entire calculation of the Eigenvector centrality score.\n\n\nShow code\n\ngd_adjacency <- as.matrix(as_adjacency_matrix(gd_network_ig))\ngd_adjacency_2 <- gd_adjacency %*% gd_adjacency\n\n#calculate portion of reflected centrality\ngd_reflective <- diag(as.matrix(gd_adjacency_2))/rowSums(as.matrix(gd_adjacency_2))\ngd_reflective <- ifelse(is.nan(gd_reflective),0,gd_reflective)\n\n#calculate derived centrality\ngd_derived <- 1-diag(as.matrix(gd_adjacency_2))/rowSums(as.matrix(gd_adjacency_2))\ngd_derived <- ifelse(is.nan(gd_derived),1,gd_derived)\n\ncentrality_gd <-data.frame(id=1:vcount(gd_network_ig),\n                        name=V(gd_network_ig)$name,\n                        degree_all=igraph::degree(gd_network_ig),\n                        degree_norm=igraph::degree(gd_network_ig,normalized=T),\n                        BC_power=power_centrality(gd_network_ig),\n                        EV_cent=centr_eigen(gd_network_ig,directed = F)$vector,\n                        reflect_EV=gd_reflective*centr_eigen(gd_network_ig,directed = F)$vector,\n                        derive_EV=gd_derived*centr_eigen(gd_network_ig,directed = F)$vector)\n\nrow.names(centrality_gd)<-NULL\ncentrality_gd%>%\n  arrange(desc(degree_all))%>%\n  slice(1:5)\n\n\n  id            name degree_all degree_norm   BC_power    EV_cent\n1  7    Jerry Garcia        328       13.12 -0.2551417 0.96094165\n2 14   Robert Hunter        313       12.52 -0.1735142 1.00000000\n3 25        Bob Weir        213        8.52 -0.5430836 0.18725953\n4 17       Phil Lesh        149        5.96 -0.1806656 0.15133380\n5 15 Bill Kreutzmann        100        4.00 -0.7011548 0.09223647\n   reflect_EV  derive_EV\n1 0.332625452 0.62831620\n2 0.371327549 0.62867245\n3 0.040709421 0.14655011\n4 0.022140576 0.12919322\n5 0.009710558 0.08252591\n\nRight away, I see the highest degree are clearly Jerry Garcia and Robert Hunter, which makes sense given that they were a songwriting pair that were prolific in creating the Grateful Dead original songbook. Bob Weir also contributed quite a bit, though the songs he wrote with his writing partner John Barlow numbered many less than those that he wrote as part of the whole band, judging by Barlow’s absence in the top counts.\nThe original lineup of Jerry Garcia, Bob Weir, Phil Lesh, Bill Kreutzmann, and Pigpen as well as Robert Hunter’s presence in the formative years of the band’s most collaborative era, means that this degree ranking makes sense intuitively.\nEigenvector Centrality\nI am also interested in the Eigenvector centrality scores - Both the top as well as the lowest value scores.\n\n\nShow code\n\ncentrality_gd%>%\n  arrange(desc(EV_cent))%>%\n  slice(1:5)\n\n\n  id            name degree_all degree_norm   BC_power    EV_cent\n1 14   Robert Hunter        313       12.52 -0.1735142 1.00000000\n2  7    Jerry Garcia        328       13.12 -0.2551417 0.96094165\n3 25        Bob Weir        213        8.52 -0.5430836 0.18725953\n4 17       Phil Lesh        149        5.96 -0.1806656 0.15133380\n5 15 Bill Kreutzmann        100        4.00 -0.7011548 0.09223647\n   reflect_EV  derive_EV\n1 0.371327549 0.62867245\n2 0.332625452 0.62831620\n3 0.040709421 0.14655011\n4 0.022140576 0.12919322\n5 0.009710558 0.08252591\n\nRobert Hunter having the top Eigenvector centrality score is not a shock - he has long held the unofficial title of band member and as the person behind the songwriting magic of the Grateful Dead. His primary songwriting partner was Jerry Garcia, but he also wrote songs with the early, full band and later with almost all of the individual members of the band.\nIt is a little surprising, though, that the Eigenvector scores fall off so quickly after Robert Hunter and Jerry Garcia.\nCloseness\nThe closeness centrality of a node is defined as the sum of the geodesic distances between that node and all other nodes in a network. This works; however, I get a warning that closeness centrality is not well-defined for disconnected graphs.\n\n\n#calculate closeness centrality: igraph\nigraph::closeness(gd_network_ig)\n\n\n  Eric Andersen     John Barlow     Bob Bralove  Andrew Charles \n    0.012500000     0.012987013     0.013333333     0.012048193 \n    John Dawson    Willie Dixon    Jerry Garcia  Donna Godchaux \n    0.012048193     0.012658228     0.015625000     0.014285714 \n Keith Godchaux   Gerrit Graham     Frank Guida     Mickey Hart \n    0.014492754     0.012500000     0.011363636     0.014492754 \n  Bruce Hornsby   Robert Hunter Bill Kreutzmann       Ned Lagin \n    0.001538462     0.015873016     0.015384615     0.012048193 \n      Phil Lesh      Peter Monk   Brent Mydland     Dave Parker \n    0.016666667     0.012048193     0.013698630     0.014492754 \nRobert Petersen          Pigpen     Joe Royster   Rob Wasserman \n    0.012345679     0.015151515     0.011363636     0.013333333 \n       Bob Weir   Vince Welnick \n    0.017543860     0.013157895 \n\nIn addition to node-level centrality scores, I also want to calculate the network level centralization index for closeness centrality measures. Again, I get a warning that closeness centrality is not well-defined for disconnected graphs.\n\n\n#calculate closeness centralization index: igraph\ncentr_clo(gd_network_ig)$centralization\n\n\n[1] 0.2310331\n\nBetweenness\nBetweenness represents the number of geodesics on which a node sits.\n\n\n#calculate betweenness centrality: igraph\nigraph::betweenness(gd_network_ig, directed=FALSE)\n\n\n  Eric Andersen     John Barlow     Bob Bralove  Andrew Charles \n   0.000000e+00    6.708464e-01    1.216013e-01    0.000000e+00 \n    John Dawson    Willie Dixon    Jerry Garcia  Donna Godchaux \n   0.000000e+00    0.000000e+00    1.658436e+01    0.000000e+00 \n Keith Godchaux   Gerrit Graham     Frank Guida     Mickey Hart \n   9.345794e-03    0.000000e+00    0.000000e+00    3.738318e-02 \n  Bruce Hornsby   Robert Hunter Bill Kreutzmann       Ned Lagin \n   0.000000e+00    2.410682e+01    3.132042e+00    0.000000e+00 \n      Phil Lesh      Peter Monk   Brent Mydland     Dave Parker \n   9.039664e+01    0.000000e+00    1.306941e+00    0.000000e+00 \nRobert Petersen          Pigpen     Joe Royster   Rob Wasserman \n   0.000000e+00    4.402857e+01    0.000000e+00    9.459707e-01 \n       Bob Weir   Vince Welnick \n   1.216595e+02    0.000000e+00 \n\nTop Betweenness\nNow I want to add the closeness and betweenness to my centrality data frame and first, sort by and take a look at the nodes with the highest betweenness:\n\n\nShow code\n\ncentrality_gd <-data.frame(id=1:vcount(gd_network_ig),\n                        name=V(gd_network_ig)$name,\n                        degree_all=igraph::degree(gd_network_ig),\n                        degree_norm=igraph::degree(gd_network_ig,normalized=T),\n                        BC_power=power_centrality(gd_network_ig),\n                        EV_cent=centr_eigen(gd_network_ig,directed = F)$vector,\n                        reflect_EV=gd_reflective*centr_eigen(gd_network_ig,directed = F)$vector,\n                        derive_EV=gd_derived*centr_eigen(gd_network_ig,directed = F)$vector,\n                        close=closeness(gd_network_ig),\n                        between=betweenness(gd_network_ig, directed=FALSE))\n                        \n\nrow.names(centrality_gd)<-NULL\ncentrality_gd%>%\n  arrange(desc(between))%>%\n  slice(1:5)\n\n\n  id          name degree_all degree_norm   BC_power    EV_cent\n1 25      Bob Weir        213        8.52 -0.5430836 0.18725953\n2 17     Phil Lesh        149        5.96 -0.1806656 0.15133380\n3 22        Pigpen         95        3.80 -0.5257366 0.07985305\n4 14 Robert Hunter        313       12.52 -0.1735142 1.00000000\n5  7  Jerry Garcia        328       13.12 -0.2551417 0.96094165\n   reflect_EV  derive_EV      close   between\n1 0.040709421 0.14655011 0.01754386 121.65948\n2 0.022140576 0.12919322 0.01666667  90.39664\n3 0.009031643 0.07082141 0.01515152  44.02857\n4 0.371327549 0.62867245 0.01587302  24.10682\n5 0.332625452 0.62831620 0.01562500  16.58436\n\nThe most immediate observations I have is that the highest degree node (Jerry Garcia) is not the node with the highest scoring betweenness. That goes to Bob Weir, who is still a relatively high degree node, but significantly lower than Jerry Garcia given that his betweenness score is so much higher (~121 compared to Garcia’s ~16).\nI can make a guess that the two highest degree nodes, Jerry Garcia and Robert Hunter, having relatively low betweenness scores can be linked to the fact that the two wrote mostly together. Although the pair wrote the most songs in the originals catalog, Bob Weir wrote many songs with a variety of other songwrriters; giving him a higher level of betweenness.\nSimilarly, Phil Lesh and Pigpen, original band members who wrote relatively fewer songs, contributed to more songs that were written by the entire band, giving them more exposure to connections on the songs that they did write.\nTop Closeness\nNow a look at the top closeness scores:\n\n\nShow code\n\ncentrality_gd%>%\n  arrange(desc(close))%>%\n  slice(1:5)\n\n\n  id            name degree_all degree_norm   BC_power    EV_cent\n1 25        Bob Weir        213        8.52 -0.5430836 0.18725953\n2 17       Phil Lesh        149        5.96 -0.1806656 0.15133380\n3 14   Robert Hunter        313       12.52 -0.1735142 1.00000000\n4  7    Jerry Garcia        328       13.12 -0.2551417 0.96094165\n5 15 Bill Kreutzmann        100        4.00 -0.7011548 0.09223647\n   reflect_EV  derive_EV      close    between\n1 0.040709421 0.14655011 0.01754386 121.659478\n2 0.022140576 0.12919322 0.01666667  90.396640\n3 0.371327549 0.62867245 0.01587302  24.106816\n4 0.332625452 0.62831620 0.01562500  16.584364\n5 0.009710558 0.08252591 0.01538462   3.132042\n\nThis evaluation is more difficult as the range is made up of much less clearly defined scores.\nNetwork Constraint (Burt)\nConstraint is a measure of the redundancy of a node’s connections. It is bound between 0 and 1, with 0 being a complete lack, and 1 being complete redundancy.\n\n\nShow code\n\nconstraint(gd_network_ig)\n\n\n  Eric Andersen     John Barlow     Bob Bralove  Andrew Charles \n      1.0000000       0.6706222       0.4989170       1.0000000 \n    John Dawson    Willie Dixon    Jerry Garcia  Donna Godchaux \n      1.2945238       0.7040590       0.5061908       0.4514219 \n Keith Godchaux   Gerrit Graham     Frank Guida     Mickey Hart \n      0.5143887       1.0000000       0.8224000       0.5294014 \n  Bruce Hornsby   Robert Hunter Bill Kreutzmann       Ned Lagin \n      0.0000000       0.6332636       0.5159787       1.0000000 \n      Phil Lesh      Peter Monk   Brent Mydland     Dave Parker \n      0.4521996       1.0000000       0.9325133       0.5591083 \nRobert Petersen          Pigpen     Joe Royster   Rob Wasserman \n      0.7134697       0.5404552       0.8224000       0.4756234 \n       Bob Weir   Vince Welnick \n      0.3367355       0.5216319 \n\nFinally, I’m going to save all of this data into a .csv file for future analysis.\n\n\nShow code\n\ncentrality_gd <-data.frame(id=1:vcount(gd_network_ig),\n                        name=V(gd_network_ig)$name,\n                        degree_all=igraph::degree(gd_network_ig),\n                        degree_norm=igraph::degree(gd_network_ig,normalized=T),\n                        BC_power=power_centrality(gd_network_ig),\n                        EV_cent=centr_eigen(gd_network_ig,directed = F)$vector,\n                        reflect_EV=gd_reflective*centr_eigen(gd_network_ig,directed = F)$vector,\n                        derive_EV=gd_derived*centr_eigen(gd_network_ig,directed = F)$vector,\n                        close=closeness(gd_network_ig),\n                        between=betweenness(gd_network_ig, directed=FALSE),\n                        burt=constraint(gd_network_ig))\n\nwrite.csv(centrality_gd, file = \"centrality_df.csv\")\n\n\n\nCitations:\nAllan, Alex; Grateful Dead Lyric & Song Finder: https://whitegum.com/~acsa/intro.htm\nASCAP. 18 March 2022.\nDodd, David; The Annotated Grateful Dead Lyrics: http://artsites.ucsc.edu/gdead/agdl/\nSchofield, Matt; The Grateful Dead Family Discography: http://www.deaddisc.com/\nThis information is intended for private research only, and not for any commercial use. Original Grateful Dead songs are ©copyright Ice Nine Music\n\n\n\n  \n    \n      Share:  \n      \n        \n      \n      \n        \n      \n    \n  \n\n\n",
    "preview": {},
    "last_modified": "2022-04-15T17:25:00-04:00",
    "input_file": {}
  },
  {
    "path": "posts/httpswwwkristinabecvarcomposts2022-04-04-dacss-697e-assignment-4/",
    "title": "DACSS 697E Assignment 4",
    "description": "Assignment 4 for DACSS 697E course 'Social and Political Network Analysis': \"Status & Eigenvector Centrality\"",
    "author": [
      {
        "name": "Kristina Becvar",
        "url": "https://www.kristinabecvar.com"
      }
    ],
    "date": "2022-04-15",
    "categories": [
      "networks",
      "homework",
      "grateful network"
    ],
    "contents": "\n\nContents\nNetwork Details\nAffiliation Matrix\nBipartite Projection\nNetwork Creation\nDyad & Triad Census\nTransitivity\nGeodesic Distance\nComponents\nDensity\n\nDegree Centrality\nIgraph\nStatnet\nSummary Statistics\nStatnet v. Igraph Degree Treatment\nOverall Eigenvector Score\nBonacich Power\nGraphing Centrality Scores\n\n\n\nNetwork Details\nI am continuing to use the Grateful Dead song writing data set that I am using in this series of posts to examine co-writing links and centrality.\nThe data set consists of the links between co-writers of songs played by the Grateful Dead over their 30-year touring career that I compiled.\nThere are 26 songwriters that contributed to the songs played over the course of the Grateful Dead history, resulting in 26 nodes in the dataset.\nThere are a total of 183 (updated and still under review!) unique songs played, and the varies combinations of co-writing combinations are now represented in a binary affiliation matrix.\nI have not weighted this version of the data; I am trying to build it from a binary affiliation matrix first, and hope to later add the number of times a given song was played live as a weight.\n\n\n\nAffiliation Matrix\nLoading the dataset and creating the network to begin this assignment:\n\n\nShow code\n\ngd_vertices <- read.csv(\"gd_nodes.csv\", header=T, stringsAsFactors=F)\ngd_affiliation <- read.csv(\"gd_affiliation_matrix.csv\", row.names = 1, header = TRUE, check.names = FALSE)\ngd_matrix <- as.matrix(gd_affiliation)\n\n\n\nInspecting the first 8 columns of the data structure in the affiliation matrix format:\n\n\nShow code\n\ndim(gd_matrix)\n\n\n[1]  26 183\n\nShow code\n\ngd_matrix[1:10, 1:4]\n\n\n               Alabama Getaway Alice D Millionaire Alligator Althea\nEric Andersen                0                   0         0      0\nJohn Barlow                  0                   0         0      0\nBob Bralove                  0                   0         0      0\nAndrew Charles               0                   0         0      0\nJohn Dawson                  0                   0         0      0\nWillie Dixon                 0                   0         0      0\nJerry Garcia                 1                   1         0      1\nDonna Godchaux               0                   0         0      0\nKeith Godchaux               0                   0         0      0\nGerrit Graham                0                   0         0      0\n\nBipartite Projection\nNow I can create the single mode network and examine the bipartite projection. After converting the matrix to a square adjacency matrix, I can look at the full matrix.\nI can also call the adjacency matrix count for co-writing incidences between certain songwriters, such as between writing partners Jerry Garcia and Robert Hunter and between John Barlow and Bob Weir.\n\n\nShow code\n\ngd_projection <- gd_matrix%*%t(gd_matrix)\ndim(gd_projection)\n\n\n[1] 26 26\n\nShow code\n\ngd_projection[1:10, 1:4]\n\n\n               Eric Andersen John Barlow Bob Bralove Andrew Charles\nEric Andersen              1           0           0              0\nJohn Barlow                0          26           1              0\nBob Bralove                0           1           3              0\nAndrew Charles             0           0           0              1\nJohn Dawson                0           0           0              0\nWillie Dixon               0           0           0              0\nJerry Garcia               0           0           0              0\nDonna Godchaux             0           0           0              0\nKeith Godchaux             0           0           0              0\nGerrit Graham              0           0           0              0\n\nShow code\n\ngd_projection[\"Jerry Garcia\", \"Robert Hunter\"]\n\n\n[1] 78\n\nShow code\n\ngd_projection[\"John Barlow\", \"Bob Weir\"]\n\n\n[1] 21\n\nNetwork Creation\nNow I will use this adjacency matrix to create both igraph and statnet network objects and take a look at their resulting features. This is a non-directed, unweighted dataset.\n\n\nShow code\n\n#Create Igraph and Statnet Objects\n\ngd_network_ig <- graph.adjacency(gd_projection,mode=\"undirected\") #igraph object\ngd_network_stat <- network(gd_projection, directed=F, matrix.type=\"adjacency\") #statnet object\n\n#Inspect New Objects\nprint(gd_network_stat)\n\n\n Network attributes:\n  vertices = 26 \n  directed = FALSE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 65 \n    missing edges= 0 \n    non-missing edges= 65 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nShow code\n\nigraph::vertex_attr_names(gd_network_ig)\n\n\n[1] \"name\"\n\nShow code\n\nigraph::edge_attr_names(gd_network_ig)\n\n\ncharacter(0)\n\nShow code\n\nhead(V(gd_network_ig)$name)\n\n\n[1] \"Eric Andersen\"  \"John Barlow\"    \"Bob Bralove\"   \n[4] \"Andrew Charles\" \"John Dawson\"    \"Willie Dixon\"  \n\nShow code\n\nis_directed(gd_network_ig)\n\n\n[1] FALSE\n\nShow code\n\nis_weighted(gd_network_ig)\n\n\n[1] FALSE\n\nShow code\n\nis_bipartite(gd_network_ig)\n\n\n[1] FALSE\n\nDyad & Triad Census\nLooking at the dyad/triad census info in igraph and statnet:\n\n\nShow code\n\nigraph::dyad.census(gd_network_ig)\n\n\n$mut\n[1] 738\n\n$asym\n[1] 0\n\n$null\n[1] -413\n\nShow code\n\nigraph::triad.census(gd_network_ig)\n\n\n [1] 1788    0  488    0    0    0    0    0    0    0  237    0    0\n[14]    0    0   87\n\nShow code\n\nsna::dyad.census(gd_network_stat)\n\n\n     Mut Asym Null\n[1,]  65    0  260\n\nShow code\n\nsna::triad.census(gd_network_stat)\n\n\n      003 012 102 021D 021U 021C 111D 111U 030T 030C 201 120D 120U\n[1,] 1451   0 825    0    0    0    0    0    0    0 237    0    0\n     120C 210 300\n[1,]    0   0  87\n\nKnowing this network has 26 vertices, I want to see if the triad census is working correctly by comparing the following data, which I can confirm it is here!\n\n\nShow code\n\n#possible triads in network\n26*25*24/6\n\n\n[1] 2600\n\nShow code\n\nsum(igraph::triad.census(gd_network_ig))\n\n\n[1] 2600\n\nTransitivity\nLooking next at the global v. average local transitivity of the network in igraph and confirming global transitivity in statnet and igraph (Statnet and igraph network transitivity = 0.5241, igraph local transitivity = 0.7756)\n\n\nShow code\n\n#network transitivity: statnet\ngtrans(gd_network_stat)\n\n\n[1] 0.5240964\n\nShow code\n\n#global clustering cofficient: igraph\ntransitivity(gd_network_ig, type=\"global\")\n\n\n[1] 0.5240964\n\nShow code\n\n#average local clustering coefficient: igraph\ntransitivity(gd_network_ig, type=\"average\")\n\n\n[1] 0.7755587\n\nThese transitivity results tells me that the average local network transitivity is significantly higher than the global transitivity, indicating, again from my still naive network knowledge, that the overall network is generally more loose, and that there is a more connected sub-network.\nGeodesic Distance\nLooking at the geodesic distance tells me that on average, I can confirm that the path length is just over 2, so on average, each node is two “stops” from each other on the geodesic path.\n\n\nShow code\n\naverage.path.length(gd_network_ig,directed=F)\n\n\n[1] 2.01\n\nComponents\nGetting a look at the components of the network comfirms that there are 2 components in the network, and 25 of the 26 nodes make up the giant component with 1 isolate.\n\n\nShow code\n\nnames(igraph::components(gd_network_ig))\n\n\n[1] \"membership\" \"csize\"      \"no\"        \n\nShow code\n\nigraph::components(gd_network_ig)$no \n\n\n[1] 2\n\nShow code\n\nigraph::components(gd_network_ig)$csize\n\n\n[1] 25  1\n\nDensity\nThe network density measure: First with just the call “graph.density” and then with adding “loops=TRUE”. In igraph, I know that its’ default output assumes that loops are not included but does not remove them, which wwe had corrected with the addition of “loops=TRUE” per the course tutorials when comparing output to statnet. In this case, the statnet output is far different, so I am not sure what is happening with this aspect of the network.\n\n\nShow code\n\ngraph.density(gd_network_ig, loops=TRUE)\n\n\n[1] 2.102564\n\nShow code\n\nnetwork.density(gd_network_stat)\n\n\n[1] 0.2\n\nDegree Centrality\nThe network degree measure: This gives me a clear output showing the degree of each particular node (songwriter). It is not surprising, knowing my subject matter, that Jerry Garcia is the highest degree node in this network as the practical and figurative head of the band. The other band members’ degree measures are not necessarily what I expected, though. I did not anticipate that his songwriting partner, Robert Hunter, would have a lower degree than band members Phil Lesh and Bob Weir. Further, I did not anticipate that the degree measure of band member ‘Pigpen’ would be so high given his early death in the first years of the band’s touring life.\n\n\nShow code\n\nigraph::degree(gd_network_ig)\n\n\n  Eric Andersen     John Barlow     Bob Bralove  Andrew Charles \n              3              81              14               3 \n    John Dawson    Willie Dixon    Jerry Garcia  Donna Godchaux \n              4               4             328              12 \n Keith Godchaux   Gerrit Graham     Frank Guida     Mickey Hart \n             16               3               4              36 \n  Bruce Hornsby   Robert Hunter Bill Kreutzmann       Ned Lagin \n              4             313             100               3 \n      Phil Lesh      Peter Monk   Brent Mydland     Dave Parker \n            149               3              41               7 \nRobert Petersen          Pigpen     Joe Royster   Rob Wasserman \n             13              95               4              10 \n       Bob Weir   Vince Welnick \n            213              13 \n\nShow code\n\nsna::degree(gd_network_stat)\n\n\n [1]  2  6 10  2  4  4 20 12 14  2  4 14  0 22 18  2 28  2  8 10  4 16\n[23]  4 10 34  8\n\nTo look further I will create a dataframe in igraph first, then statnet.\nIgraph\n\n\nShow code\n\nig_nodes<-data.frame(name=V(gd_network_ig)$name, degree=igraph::degree(gd_network_ig))\nhead(ig_nodes)\n\n\n                         name degree\nEric Andersen   Eric Andersen      3\nJohn Barlow       John Barlow     81\nBob Bralove       Bob Bralove     14\nAndrew Charles Andrew Charles      3\nJohn Dawson       John Dawson      4\nWillie Dixon     Willie Dixon      4\n\nStatnet\n\n\nShow code\n\nstat_nodes<-data.frame(name=gd_network_stat%v%\"vertex.names\", degree=sna::degree(gd_network_stat))\nhead(stat_nodes)\n\n\n            name degree\n1  Eric Andersen      2\n2    John Barlow      6\n3    Bob Bralove     10\n4 Andrew Charles      2\n5    John Dawson      4\n6   Willie Dixon      4\n\nThe igraph and statnet dataframes give very different results.\nSummary Statistics\nA quick look at the summary statistics confirms for me the minimum, maximum, median, and mean node degree data using each package.\n\n\nShow code\n\nsummary(ig_nodes)\n\n\n     name               degree      \n Length:26          Min.   :  3.00  \n Class :character   1st Qu.:  4.00  \n Mode  :character   Median : 12.50  \n                    Mean   : 56.77  \n                    3rd Qu.: 71.00  \n                    Max.   :328.00  \n\nShow code\n\nsummary(stat_nodes)\n\n\n     name               degree  \n Length:26          Min.   : 0  \n Class :character   1st Qu.: 4  \n Mode  :character   Median : 8  \n                    Mean   :10  \n                    3rd Qu.:14  \n                    Max.   :34  \n\nStatnet v. Igraph Degree Treatment\nI’m taking a look at the dataframe of the degree nodes, though since it is not a directed network the in and out degrees are not measured or relevant to our network. But it is still interesting to look at how igraph and statnet handle these datasets differently.\nStatnet\n\n\nShow code\n\n#create a dataframe of the total, in and out-degree of nodes in the stat network\ngd_stat_nodes <- data.frame(name=gd_network_stat%v%\"vertex.names\",\n    totdegree=sna::degree(gd_network_stat),\n    indegree=sna::degree(gd_network_stat, cmode=\"indegree\"),\n    outdegree=sna::degree(gd_network_stat, cmode=\"outdegree\"))\n\n#sort the top total degree of nodes in the stat network\narrange(gd_stat_nodes, desc(totdegree))%>%slice(1:5)\n\n\n             name totdegree indegree outdegree\n1        Bob Weir        34       17        17\n2       Phil Lesh        28       14        14\n3   Robert Hunter        22       11        11\n4    Jerry Garcia        20       10        10\n5 Bill Kreutzmann        18        9         9\n\nIgraph\n\n\nShow code\n\n#create a dataframe of the total, in and out-degree of nodes in the igraph network\ngd_ig_nodes<-data.frame(name=V(gd_network_ig)$name, \n                     degree=igraph::degree(gd_network_ig), mode=\"tot\",\n                     degree=igraph::degree(gd_network_ig), mode=\"in\",\n                     degree=igraph::degree(gd_network_ig), mode=\"out\")\n\n#sort the top total degree of nodes in the igraph network\narrange(gd_ig_nodes, desc(degree))%>%slice(1:5)\n\n\n                           name degree mode degree.1 mode.1 degree.2\nJerry Garcia       Jerry Garcia    328  tot      328     in      328\nRobert Hunter     Robert Hunter    313  tot      313     in      313\nBob Weir               Bob Weir    213  tot      213     in      213\nPhil Lesh             Phil Lesh    149  tot      149     in      149\nBill Kreutzmann Bill Kreutzmann    100  tot      100     in      100\n                mode.2\nJerry Garcia       out\nRobert Hunter      out\nBob Weir           out\nPhil Lesh          out\nBill Kreutzmann    out\n\nOverall Eigenvector Score\nThe Eigenvector centrality score for each node can be accessed by calling “vector”, and I can examine the top eigenvector scores in the igraph network:\n\n\n#Eigenvector centrality, top 10 in igraph network\n\neigen_ig <- eigen_centrality(gd_network_ig)\neigen_gd_ig <- data.frame(eigen_ig)\narrange(eigen_gd_ig[1], desc(vector))%>%slice(1:10)\n\n\n                    vector\nRobert Hunter   1.00000000\nJerry Garcia    0.96094165\nBob Weir        0.18725953\nPhil Lesh       0.15133380\nBill Kreutzmann 0.09223647\nPigpen          0.07985305\nMickey Hart     0.02523896\nJohn Barlow     0.01773746\nKeith Godchaux  0.01382256\nVince Welnick   0.01192303\n\nBonacich Power\nThe Bonacich power centrality score for each node can be accessed first just using defaults, including setting the index to “1”; then, I can “rescale” so that all of the scores sum “1”.\nTo display my results, I have to run the calculations and save the results as a dataframe to recall, since the command “bonpow()” is the same in igraph and statnet, which is causing trouble in running then knitting this file.\nI need to understand more nuance to the Bonacich power measure in order to fully understand what these two measures say about my specific network.\n\n\nShow code\n\n#Compute Bonpow scores\n\n#bp_ig1 <- bonpow(gd_network_ig) #with a default index of \"1\"\n#bonpow_gd_ig1 <- data.frame(bp_ig1)\n#write.csv(bonpow_gd_ig1, file = \"bonpow_gd_ig1.csv\")\n\n#Rescaled so that they sum to \"1\"\n\n#bp_ig2 <- bonpow(gd_network_ig, rescale = TRUE) #with a default index of \"1\"\n#bonpow_gd_ig2 <- data.frame(bp_ig2)\n#write.csv(bonpow_gd_ig2, file = \"bonpow_gd_ig2.csv\")\n\n\n\n\n\nShow code\n\n#Read in dataframe from previous chunk\n\nbon1 <- read.csv(\"bonpow_gd_ig1.csv\")\nbon2 <- read.csv(\"bonpow_gd_ig2.csv\")\n\ntotalbonpow <- merge(bon1,bon2)\n\ntotalbonpow\n\n\n                 X      bp_ig1      bp_ig2\n1   Andrew Charles  0.08220268  0.01522717\n2  Bill Kreutzmann -0.70115475 -0.12988143\n3      Bob Bralove -0.22064550 -0.04087222\n4         Bob Weir -0.54308358 -0.10060043\n5    Brent Mydland  0.52651322  0.09753095\n6    Bruce Hornsby  0.00000000  0.00000000\n7      Dave Parker -0.89144078 -0.16512988\n8   Donna Godchaux  1.23038839  0.22791631\n9    Eric Andersen -0.28021530 -0.05190689\n10     Frank Guida  3.07056607  0.56878957\n11   Gerrit Graham -0.28021530 -0.05190689\n12    Jerry Garcia -0.25514168 -0.04726227\n13     Joe Royster  3.07056607  0.56878957\n14     John Barlow -0.31662818 -0.05865199\n15     John Dawson  0.09708065  0.01798315\n16  Keith Godchaux  1.17992241  0.21856802\n17     Mickey Hart  0.15330194  0.02839755\n18       Ned Lagin  0.08220268  0.01522717\n19      Peter Monk  0.08220268  0.01522717\n20       Phil Lesh -0.18066559 -0.03346637\n21          Pigpen -0.52573655 -0.09738708\n22   Rob Wasserman -0.41469644 -0.07681809\n23   Robert Hunter -0.17351422 -0.03214166\n24 Robert Petersen  1.11819222  0.20713317\n25   Vince Welnick -0.07953575 -0.01473315\n26    Willie Dixon -0.43204347 -0.08003144\n\nCreating a data frame summarizing all of this information and doing basic visualization on a couple of them:\n\n\nShow code\n\ngd_adjacency <- as.matrix(as_adjacency_matrix(gd_network_ig))\ngd_adjacency_2 <- gd_adjacency %*% gd_adjacency\n\n#calculate portion of reflected centrality\ngd_reflective <- diag(as.matrix(gd_adjacency_2))/rowSums(as.matrix(gd_adjacency_2))\ngd_reflective <- ifelse(is.nan(gd_reflective),0,gd_reflective)\n\n#calculate derived centrality\ngd_derived <- 1-diag(as.matrix(gd_adjacency_2))/rowSums(as.matrix(gd_adjacency_2))\ngd_derived <- ifelse(is.nan(gd_derived),1,gd_derived)\n#create data frame of centrality measures\ncentrality_gd <-data.frame(id=1:vcount(gd_network_ig),\n                        name=V(gd_network_ig)$name,\n                        degree_all=igraph::degree(gd_network_ig),\n                        BC_power=power_centrality(gd_network_ig),\n                        degree_norm=igraph::degree(gd_network_ig,normalized=T),\n                        EV_cent=centr_eigen(gd_network_ig,directed = F)$vector,\n                        reflect_EV=gd_reflective*centr_eigen(gd_network_ig,directed = F)$vector,\n                        derive_EV=gd_derived*centr_eigen(gd_network_ig,directed = F)$vector)\n\nrow.names(centrality_gd)<-NULL\ncentrality_gd\n\n\n   id            name degree_all    BC_power degree_norm      EV_cent\n1   1   Eric Andersen          3 -0.28021530        0.12 6.852805e-04\n2   2     John Barlow         81 -0.31662818        3.24 1.773746e-02\n3   3     Bob Bralove         14 -0.22064550        0.56 8.992246e-03\n4   4  Andrew Charles          3  0.08220268        0.12 5.538095e-04\n5   5     John Dawson          4  0.09708065        0.16 7.176110e-03\n6   6    Willie Dixon          4 -0.43204347        0.16 7.041156e-04\n7   7    Jerry Garcia        328 -0.25514168       13.12 9.609417e-01\n8   8  Donna Godchaux         12  1.23038839        0.48 5.313952e-03\n9   9  Keith Godchaux         16  1.17992241        0.64 1.382256e-02\n10 10   Gerrit Graham          3 -0.28021530        0.12 6.852805e-04\n11 11     Frank Guida          4  3.07056607        0.16 2.932974e-04\n12 12     Mickey Hart         36  0.15330194        1.44 2.523896e-02\n13 13   Bruce Hornsby          4  0.00000000        0.16 2.574501e-17\n14 14   Robert Hunter        313 -0.17351422       12.52 1.000000e+00\n15 15 Bill Kreutzmann        100 -0.70115475        4.00 9.223647e-02\n16 16       Ned Lagin          3  0.08220268        0.12 5.538095e-04\n17 17       Phil Lesh        149 -0.18066559        5.96 1.513338e-01\n18 18      Peter Monk          3  0.08220268        0.12 5.538095e-04\n19 19   Brent Mydland         41  0.52651322        1.64 2.659589e-03\n20 20     Dave Parker          7 -0.89144078        0.28 5.385443e-03\n21 21 Robert Petersen         13  1.11819222        0.52 2.274921e-03\n22 22          Pigpen         95 -0.52573655        3.80 7.985305e-02\n23 23     Joe Royster          4  3.07056607        0.16 2.932974e-04\n24 24   Rob Wasserman         10 -0.41469644        0.40 5.146870e-03\n25 25        Bob Weir        213 -0.54308358        8.52 1.872595e-01\n26 26   Vince Welnick         13 -0.07953575        0.52 1.192303e-02\n     reflect_EV    derive_EV\n1  8.512801e-06 0.0006767677\n2  4.171627e-03 0.0135658315\n3  2.393769e-04 0.0087528693\n4  9.466828e-06 0.0005443426\n5  4.752391e-05 0.0071285863\n6  1.242557e-05 0.0006916900\n7  3.326255e-01 0.6283162014\n8  1.213231e-04 0.0051926286\n9  2.487863e-04 0.0135737779\n10 8.512801e-06 0.0006767677\n11 1.113787e-05 0.0002821595\n12 1.390973e-03 0.0238479844\n13 1.593739e-17 0.0000000000\n14 3.713275e-01 0.6286724511\n15 9.710558e-03 0.0825259133\n16 9.466828e-06 0.0005443426\n17 2.214058e-02 0.1291932241\n18 9.466828e-06 0.0005443426\n19 6.119022e-04 0.0020476869\n20 4.829994e-05 0.0053371431\n21 1.438169e-04 0.0021311045\n22 9.031643e-03 0.0708214079\n23 1.113787e-05 0.0002821595\n24 1.077879e-04 0.0050390825\n25 4.070942e-02 0.1465501114\n26 3.311952e-04 0.0115918330\n\nGraphing Centrality Scores\n\n\nShow code\n\nattach(centrality_gd)\nbreaks<-round(vcount(gd_network_ig))\nhist(degree_all,breaks=breaks,\n     main=paste(\"Distribution of Total Degree Scores in GD Songwriters \",sep=\"\"),\n     xlab=\"Total Degree Score\")\n\n\n\nShow code\n\nhist(EV_cent,breaks=breaks,\n     main=paste(\"Distribution of Eigenvector Centrality Scores in GD Songwriters \",sep=\"\"),\n    xlab=\"Eigenvector Centrality Score\")\n\n\n\nShow code\n\nhist(BC_power,breaks=breaks,\n     main=paste(\"Distribution of Bonacich Power Scores in GD Songwriters\",sep=\"\"),\n     xlab=\"Bonacich Power Score\")\n\n\n\n\nI can independently look at the correlations between all scores now. Using prompts from this week’s tutorial, it looks that all of the variables except Bonacich power are strongly correlated, so I think I’ll want to begin subsetting my network to get more meaningful interpretations.\n\n\nShow code\n\nnames(centrality_gd) #Find the columns we want to run the correlation on\n\n\n[1] \"id\"          \"name\"        \"degree_all\"  \"BC_power\"   \n[5] \"degree_norm\" \"EV_cent\"     \"reflect_EV\"  \"derive_EV\"  \n\nShow code\n\ncols<-c(3:8) #All except the id and name in this instance\ncorMat<-cor(centrality_gd[,cols],use=\"complete.obs\") #Specify those in the bracket\ncorMat #Let's look at it, which variables are most strongly correlated?\n\n\n            degree_all   BC_power degree_norm    EV_cent reflect_EV\ndegree_all   1.0000000 -0.2782755   1.0000000  0.9131592  0.8729045\nBC_power    -0.2782755  1.0000000  -0.2782755 -0.1782509 -0.1481903\ndegree_norm  1.0000000 -0.2782755   1.0000000  0.9131592  0.8729045\nEV_cent      0.9131592 -0.1782509   0.9131592  1.0000000  0.9946549\nreflect_EV   0.8729045 -0.1481903   0.8729045  0.9946549  1.0000000\nderive_EV    0.9314936 -0.1943027   0.9314936  0.9983162  0.9869907\n             derive_EV\ndegree_all   0.9314936\nBC_power    -0.1943027\ndegree_norm  0.9314936\nEV_cent      0.9983162\nreflect_EV   0.9869907\nderive_EV    1.0000000\n\nHowever, I will also make a pretty visualization of the correlation matrix, just because.\n\n\nlibrary(corrplot)\ncorrplot(corMat)\n\n\n\n\nCitations:\nAllan, Alex; Grateful Dead Lyric & Song Finder: https://whitegum.com/~acsa/intro.htm\nASCAP. 18 March 2022.\nDodd, David; The Annotated Grateful Dead Lyrics: http://artsites.ucsc.edu/gdead/agdl/\nSchofield, Matt; The Grateful Dead Family Discography: http://www.deaddisc.com/\nPhoto by Grateful Dead Productions\nThis information is intended for private research only, and not for any commercial use. Original Grateful Dead songs are ©copyright Ice Nine Music\n\n\n\n  \n    \n      Share:  \n      \n        \n      \n      \n        \n      \n    \n  \n\n\n",
    "preview": "posts/httpswwwkristinabecvarcomposts2022-04-04-dacss-697e-assignment-4/distill-preview.png",
    "last_modified": "2022-04-15T17:25:04-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpswwwkristinabecvarcomposts2022-04-03-dacss-697e-assignment-3/",
    "title": "DACSS 697E Assignment 3",
    "description": "Assignment 3 for DACSS 697E course 'Social and Political Network Analysis': \"Grateful Research: Creating a Network\"",
    "author": [
      {
        "name": "Kristina Becvar",
        "url": "https://www.kristinabecvar.com"
      }
    ],
    "date": "2022-04-15",
    "categories": [
      "networks",
      "homework",
      "grateful network"
    ],
    "contents": "\n\nContents\nNetwork Creation\nPurpose\nFirst Try - A Miss\nRegouping\nNetwork Creation\n\nNetwork Details\nVisualizing the Network\nDyad and Triad Census\nTransitivity\nGeodesic Distance\nComponents\nDensity\nDegree\nSummary Statistics\nPlotting the Network\nBetter Plotting\nAdding More Detail\n\n\n\nNetwork Creation\nPurpose\nFor my final project, I am using a data set that is somewhat similar in structure to that of my final project to try and get a feel for the process of creating the appropriate network. After recovering data from thousands of New York Times articles pulled through their API on Afghanistan from a 2-year period, I will be analyzing the network of article authorship and themes of articles. To understand the process, I am using for my assignment a data set of co-writers of songs played by the Grateful Dead over their 30-year touring career that I compiled. While compiling the data, I added an attribute that represents the connections between co-writers as songs with the added observation of the number of times each song was played live. The nature of the band was that of a collaborative subculture where the energy of the live shows reflected the crowd’s buy-in to the songs being played. Since the band was primarily one whose popularity was measured by ticket sales, not album sales. I’m still not sure if that will serve appropriately as a ‘weight’ for the network data, so I need to explore the process more thoroughly.\n\n\n\nFirst Try - A Miss\nUnderstanding this as an affiliation network, I first created a matrix linking actors (songwriters) to an event (songs). I began by assigning a unique ID to each actor and event. Taking the data I have pulled from my research, I created an affiliation spreadsheet with the songwriters as rows and the songs as columns. When a songwriter was affiliated with a song, there was a number in that matrix spot. However, I struggled to get this affiliation data into a network in R because I was using weights incorrectly, so I took a different approach.\nRegouping\nIn this example, I used a node list where unique IDs are numbers which correspond to the name of a songwriter.\nThe edgelist is in a separate spreadsheet where the first two columns are the IDs of the source and the target node (songwriter ID), regardless of whether the network is directed, for each edge. Each row contains an observation of a connection between writers for a given song, and since there are multiple collaborations, there may be multiple rows of writer combinations for a given song ID. If there was only one writer on a song, that songwriter’s ID is indicated in both the source and target column for that song.\nThe following columns are edge attributes. In my edgelist, I have the two songwriters representing the co-writing relationship in columns “1” and “2”, the song ID in column “3”, the song name in column “4”, and the number of times the corresponding song was played live is indicated in column “5”.\nI have NOT utilized the number of times the song was played live as a network weight at this point. Additionally, this edgelist format is not the ideal format, but it is the first step in the process I am working through to utilize different methods of working through the data.\nNetwork Creation\n\n\n# Loading nodes and vertices\ngd_vertices <- read.csv(\"gd_nodes.csv\")\ngd_edgelist <- read.csv(\"gd_clean_data.csv\")\n\n\n\nConverting network data into igraph objects using the “graph.data.frame: function, which takes two data frames: d and vertices.\n“d” describes the edges of the network and “vertices” the nodes.\n\n\nset.seed(1234)\ngrateful_data <- graph_from_data_frame(d = gd_edgelist, vertices = gd_vertices, directed = FALSE)\n\n\n\nNetwork Details\nNow to check the vertices and edges in the graph I’ve created to ensure they represent the data accurately, and confirm that all of the attributes have been represented properly:\n\n\nhead(V(grateful_data)$name)\n\n\n[1] \"Eric Andersen\"  \"John Barlow\"    \"Bob Bralove\"   \n[4] \"Andrew Charles\" \"John Dawson\"    \"Willie Dixon\"  \n\nhead(E(grateful_data)$song.id)\n\n\n[1] 1 2 2 2 2 2\n\nhead(E(grateful_data)$song.name)\n\n\n[1] \"Alabama Getaway\"     \"Alice D Millionaire\" \"Alice D Millionaire\"\n[4] \"Alice D Millionaire\" \"Alice D Millionaire\" \"Alice D Millionaire\"\n\nhead(E(grateful_data)$weight)\n\n\nNULL\n\nis_directed(grateful_data)\n\n\n[1] FALSE\n\nis_weighted(grateful_data)\n\n\n[1] FALSE\n\nis_bipartite(grateful_data)\n\n\n[1] FALSE\n\nigraph::vertex_attr_names(grateful_data)\n\n\n[1] \"name\"\n\nigraph::edge_attr_names(grateful_data)\n\n\n[1] \"song.id\"      \"song.name\"    \"times.played\"\n\nVisualizing the Network\n\n\nShow code\n\nplot(grateful_data)\n\n\n\n\nIt’s basically plotting what I want it to illustrate, though I will need to do a lot more work to make the graph represent anything meaningful!\nDyad and Triad Census\nFinishing the look at the basic network information such as the dyad and triad census: I have 558 mutual dyads and null value of “-233”, with a warning that calling a dyad census on an undirected graph. This does indicate to me that the edgelist format is not the best representation of this data.\n\n\nShow code\n\nigraph::dyad.census(grateful_data)\n\n\n$mut\n[1] 558\n\n$asym\n[1] 0\n\n$null\n[1] -233\n\nShow code\n\nigraph::triad.census(grateful_data)\n\n\n [1] 2043    0  233    0    0    0    0    0    0    0  237    0    0\n[14]    0    0   87\n\nKnowing this network has 26 vertices, I want to see if the triad census is working correctly by comparing the following data, which I can confirm using this calculation.\n\n\nShow code\n\n#possible triads in network\n26*25*24/6\n\n\n[1] 2600\n\nShow code\n\nsum(igraph::triad.census(grateful_data))\n\n\n[1] 2600\n\nTransitivity\nLooking next at the global v. average local transitivity of the network:\n\n\nShow code\n\n#get global clustering cofficient: igraph\ntransitivity(grateful_data, type=\"global\")\n\n\n[1] 0.5240964\n\nShow code\n\n#get average local clustering coefficient: igraph\ntransitivity(grateful_data, type=\"average\")\n\n\n[1] 0.7755587\n\nThis transitivity tells me that the average network transitivity is significantly higher than the global transitivity, indicating, from my still naive network knowledge, that the overall network is generally more loose, and that there is a more connected sub-network.\nGeodesic Distance\nLooking at the geodesic distance tells me that on average, the path length is just over 2.\n\n\nShow code\n\naverage.path.length(grateful_data,directed=F)\n\n\n[1] 2.01\n\nComponents\nGetting a look at the components of the network shows that there are 2 components in the network, and 25 of the 26 nodes make up the giant component with 1 isolate.\n\n\nShow code\n\nnames(igraph::components(grateful_data))\n\n\n[1] \"membership\" \"csize\"      \"no\"        \n\nShow code\n\nigraph::components(grateful_data)$no \n\n\n[1] 2\n\nShow code\n\nigraph::components(grateful_data)$csize\n\n\n[1] 25  1\n\nThis is a great start - now I can get to looking at the network density, centrality, and centralization.\nDensity\nThe network density measure: First with just the call “graph.density” and then with adding “loops=TRUE”. Since I’m using igraph, I know that its’ default output assumes that loops are not included but does not remove them, which can be corrected with the addition of “loops=TRUE” per the course tutorials when comparing output to statnet. This gives me confidence that my network density is closer to 1.58.\n\n\nShow code\n\ngraph.density(grateful_data)\n\n\n[1] 1.716923\n\nShow code\n\ngraph.density(grateful_data, loops=TRUE)\n\n\n[1] 1.589744\n\nDegree\nThe network degree measure: This gives me a clear output showing the degree of each particular node (songwriter). It is not suprising, knowing my subject matter, that Jerry Garcia is the highest degree node in this network as the practical and figurative head of the band. The other band members’ degree measures are not necessarily what I expected, though. I did not anticipate that his songwriting partner, Robert Hunter, would have a lower degree than band members Phil Lesh and Bob Weir. Further, I did not anticipate that the degree measure of band member ‘Pigpen’ would be so high given his early death in the first years of the band’s touring life.\n\n\nShow code\n\nigraph::degree(grateful_data)\n\n\n  Eric Andersen     John Barlow     Bob Bralove  Andrew Charles \n              1              30              12               1 \n    John Dawson    Willie Dixon    Jerry Garcia  Donna Godchaux \n              2               2             215              16 \n Keith Godchaux   Gerrit Graham     Frank Guida     Mickey Hart \n             19               1               2              25 \n  Bruce Hornsby   Robert Hunter Bill Kreutzmann       Ned Lagin \n              4             136             121               1 \n      Phil Lesh      Peter Monk   Brent Mydland     Dave Parker \n            158               1              24              10 \nRobert Petersen          Pigpen     Joe Royster   Rob Wasserman \n              5             119               2              10 \n       Bob Weir   Vince Welnick \n            188              11 \n\nTo look further I will create a dataframe for easier review going forward.\n\n\nShow code\n\ngrateful_nodes<-data.frame(name=V(grateful_data)$name, degree=igraph::degree(grateful_data))\nhead(grateful_nodes)\n\n\n                         name degree\nEric Andersen   Eric Andersen      1\nJohn Barlow       John Barlow     30\nBob Bralove       Bob Bralove     12\nAndrew Charles Andrew Charles      1\nJohn Dawson       John Dawson      2\nWillie Dixon     Willie Dixon      2\n\nSummary Statistics\nA quick look at the summary statistics confirms for me the minimum, maximum, median, and mean node degree data.\n\n\nShow code\n\nsummary(grateful_nodes)\n\n\n     name               degree      \n Length:26          Min.   :  1.00  \n Class :character   1st Qu.:  2.00  \n Mode  :character   Median : 10.50  \n                    Mean   : 42.92  \n                    3rd Qu.: 28.75  \n                    Max.   :215.00  \n\nPlotting the Network\nNow I want to take a step back and try to visually represent this data better.\n\n\nShow code\n\n# Community detection algoritm \ncommunity <- cluster_louvain(grateful_data) \n\n# Attach communities to relevant vertices\nV(grateful_data)$color <- community$membership \n\n# Graph layout\nlayout <- layout.random(grateful_data) \n\n# igraph plot \nplot(grateful_data, layout = layout)\n\n\n\n\nBetter Plotting\nBetter, but not quite.\n\n\nShow code\n\nggraph(grateful_data, layout = \"fr\") +\n  geom_edge_link() + \n  geom_node_point(aes(color = factor(color))) + \n  geom_node_text(aes(label = name), repel = TRUE) +\n  theme_void() +\n  theme(legend.position = \"none\") \n\n\n\n\nAdding More Detail\nThat is starting to look more meaningful!\n\n\nShow code\n\n# Set size to degree centrality \nV(grateful_data)$size = degree(grateful_data)\n\n# Additional customisation for better legibility \nggraph(grateful_data, layout = \"fr\") +\n  geom_edge_arc(strength = 0.2, width = 0.5, alpha = 0.15) + \n  geom_node_point(aes(size = size, color = factor(color))) + \n  geom_node_text(aes(label = name, size = size), repel = TRUE) +\n  theme_void() +\n  theme(legend.position = \"none\") \n\n\n\n\nThere is a lot more to do, but this is a great start.\nCitations:\nAllan, Alex; Grateful Dead Lyric & Song Finder: https://whitegum.com/~acsa/intro.htm\nASCAP. 18 March 2022.\nDodd, David; The Annotated Grateful Dead Lyrics: http://artsites.ucsc.edu/gdead/agdl/\nSchofield, Matt; The Grateful Dead Family Discography: http://www.deaddisc.com/\nThis information is intended for private research only, and not for any commercial use. Original Grateful Dead songs are ©copyright Ice Nine Music\n\n\n\n  \n    \n      Share:  \n      \n        \n      \n      \n        \n      \n    \n  \n\n\n",
    "preview": "posts/httpswwwkristinabecvarcomposts2022-04-03-dacss-697e-assignment-3/distill-preview.png",
    "last_modified": "2022-04-15T17:25:07-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsrpubscomburnworthj886887/",
    "title": "Elitism of the Supreme Court: Liberals v. Conservatives",
    "description": "\"After the feedback about this homework, I hopefully fixed my dataset. A tie now consists of a Justice and the school they attened and every school they have hired a clerk from. This solved my issue from before where there was limited connections. \n\nMy results were chaotic involving the entire history of Justices. I decided to focus on the current Justices on the Supreme Court. Further, I thought it would be interesting to split up and compare networks of conservative and liberal Justices(based on the party of the appointing president).\n\nThe Democrat Appointed Justices Network has 27 nodes, is directed, and has 243 total edges. The REpublican Appointed Justices Network has 35 nodes, is directed, and has 334 total edges.\"",
    "author": [
      {
        "name": "Justin Burnworth",
        "url": {}
      }
    ],
    "date": "2022-04-11",
    "categories": [],
    "contents": "\n\n\n\n\n\n\n\n\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 1 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 23.45622\n\n“There is a tiny possibility that the Democrat Appointed Justices Network transitivity observed value of 1 could be randomly generated conditional on only the size of the network, meaning that the observed transitivity is higher than would be expected from a random network. It is 23.46 standard deviations from what we would expect.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 1 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 23.45622\n\n“The Republican Appointed Justices Network is the exact same as the Demcorats.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 1 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 22.03544\n\n“The Democrat Appointed Justices network transitivity is 22.03 standard deviations from what we would expect compared to null conditional on size.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 1 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 29.37328\n\n“The Republican Appointed Justices network transitivity is 29.37 standard deviations from what we would expect compared to null conditional on size.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 2.636095 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 50.64118\n\n“The Democrat Appointed Justices network have a observed value of 2.64 degree centralization which is 52.68 standard deviations what we would expect from a random network null conditional on size.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 2.163495 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 48.32089\n\n“The Republican Appointed Justices network have a observed value of 2.16 degree centralization which is 49.29 standard deviations what we would expect from a random network null conditional on size.”\n\n\n[1] -3.406754\n\n“The Democrat Appointed Justices network has an observed value of 0 which is -3.01 standard deviations from what we would expect from a random network null conditional on size.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 0 \nPr(X>=Obs): 1 \nPr(X<=Obs): 0 \n\n[1] -3.404384\n\n“The Republican Appointed Justices network has an observed value of 0 which is -4.20 standard deviations from what we would expect from a random network null conditional on size.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: edges \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 1 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 57.79646\n\n“The Democrat Appointed Justices network has an observed value of 1 which is 57.81 standard deviations from what we would expect from a random network null conditional on size.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: edges \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 1 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 61.3773\n\n“The Republican Appointed Justices network has an observed value of 1 which is 60.39 standard deviations from what we would expect from a random network null conditional on size.”\n\n\n\n",
    "preview": "posts/httpsrpubscomburnworthj886887/distill-preview.png",
    "last_modified": "2022-04-11T16:43:19-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsyli210813githubiosocialnetworkanalysishw9/",
    "title": "Homework 9",
    "description": "Week 9 Assignment: Network Statistics.",
    "author": [
      {
        "name": "Yifan Li",
        "url": {}
      }
    ],
    "date": "2022-04-11",
    "categories": [],
    "contents": "\n\n\n\n\n\n\n\n\n\nDescriptive Statistics\n\n[1] FALSE\n[1] TRUE\n[1] TRUE\n\nThe original dataset is the trade dataset version 4 from the Correlates of War Project. In this subject I only use trade data of year 2014. The format is edgelist. The nodes are countries, and the ties are the trading relations between countries in 2014. The network is directed and weighted.\nLet’s look at some basic descriptive facts.\n\n[1] 186\n[1] 22451\n[1] 241.4086\n[1] 0.6524557\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n     0.0      0.2      4.9    813.1     78.5 472525.2 \n\nThe network in 2014 has 186 nodes, i.e. 186 countries involed in the trading network. There are 22451 egdes. Each country has 241 connected edges on average. On average, one country import 813 million dollars of good from another country each year. 65% of potential ties exit.\nLet’s classify all dyads and traids in the network:\n\n$mut\n[1] 9933\n\n$asym\n[1] 2585\n\n$null\n[1] 4687\n [1]  75574  62420  92513  11021   9514  11233  60137  45246   5530\n[10]    788 188669  14094   9006  15882 147383 306230\n[1] 0.07161783\n[1] 0.3484117\n[1] 1\n\nThere are 9933 mutual bilateral trade relations, 2585 unilateral trade relations, and 4687 pairs of coutries have no trading in 2014.\n7% of the triads are empty, and 65% of them are triangle. The network is quite dense.\nCentrality Scores\nLet’s look at the distribution of nodes centrality.\n\n\n\nThe betweenness centrality and reflected centrality are right-skewed as expected. Limited coutries locate at the central bridging positions. But the bonachic-power and closeness show nearly normal distribution, and the eigenvector centrality and deprived centrality are highly left-skewed, which might show a decentralized network. The deprived centrality contribute to largest part of eigenvector centrality. Every country kind of plays as bridge in the network.\n\n\n\n\n Network attributes:\n  vertices = 186 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 22451 \n    missing edges= 0 \n    non-missing edges= 22451 \n\n Vertex attribute names: \n    vertex.names \n\n Edge attribute names not shown \n\nUsing CUG-tests to test network properties\nAfter learning statistics about the network, let’s test whether these statistics are significantly different from null hypothesis. Compare to null network conditioning on size is almost meaningless. The world market is too closely connected and dense. Let’s test against null hypothesis conditioning on density.\n\n\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: edges \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 0.7765289 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 490.4112\n\nThe observed network transitivity is 0.78. We can feel confident accepting the alternative hypothesis that the observed transitivity is clearly higher than would be expected from a random network.(p<0.001)\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: edges \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 11702.88 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 887366.5\n\nThe observed network degree centralization is 11702.88. We can feel confident accepting the alternative hypothesis that the observed 11702.88 is clearly higher than would be expected from a random network.(p<0.001)\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: edges \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 50 \n\nObserved Value: 0.007458064 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 129.5252\n\nThe observed network betweenness centralization is 0.0075. We can feel confident accepting the alternative hypothesis that the observed betweenness centralization is clearly higher than would be expected from a random network.(p<0.001)\nCompare to Simulated Networks\n\n\n\n\n\n\n\n                Observed   Simulated         SD   tvalue\ndensity      0.652455681 0.005376344 0.00000000      Inf\ntransitivity 0.776528929 0.000000000 0.00000000      Inf\nindegCent    0.343988313 0.142198977 0.05181549 3.894382\nbetwCent     0.007458064 0.002974834 0.00167135 2.682401\n\n\nThe density and transitivity scores are significantly higher than expected. (p>0.001) The indegree and betweenness centrality scores are also sighnificantly higher than simulation.(p>0.01)\nSince the density is very high, let’s model a preferential attachment network with higher average degree.\n\n                Observed Simulated SD tvalue\ndensity      0.652455681 0.5000000  0    Inf\ntransitivity 0.776528929 1.0000000  0   -Inf\nindegCent    0.343988313 0.5027027  0   -Inf\nbetwCent     0.007458064 0.0000000  0    Inf\n\n\nBased on PA model, the observed density and betweeness centrality are still significantly high compared with simulation, while transivity and indegree centrality are lower.(p<0.001)\nNotice that the mean of simulated transitivity score is 1.0, indicating a fully transitive network. I think it’s not a good null hypothesis.\nThen, simulate a preferential attachment network conditional on the degree distribution we observe, using the out.seq= option。\n\n                Observed   Simulated           SD     tvalue\ndensity      0.652455681 0.477390294 0.0000000000        Inf\ntransitivity 0.776528929 0.990193508 0.0005187225 -411.90536\nindegCent    0.343988313 0.513152374 0.0051016389  -33.15877\nbetwCent     0.007458064 0.001389953 0.0005487202   11.05866\n\n\nSimilarly, the observed density and betweeness centrality are still significantly high compared with simulation, while transivity and indegree centrality are lower. The mean of simulated transitivity score is also near 1.\nCompare with other network.\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] 0.9442986\n\n\n\nQAP Test Results\n\nEstimated p-values:\n    p(f(perm) >= f(d)): 0 \n    p(f(perm) <= f(d)): 1 \n\n\nThe world trade network in 2004 is very similar with trade2014, with a correlation of 0.94. It’s significantly higher than correlation between two random networks.(p>0.001) During the ten years, the trade partnership didn’t change much.\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] 0.5554877\n\n\n\nQAP Test Results\n\nEstimated p-values:\n    p(f(perm) >= f(d)): 0 \n    p(f(perm) <= f(d)): 1 \n\n\nThe correlation between trade 1964 and 2014 is much lower (0.56). It indicates the trade relationship does change a lot during the 50 years. But still, the score is significantly higher than random. (p>0.001) The trade network in 2014 can be predicted a lot by network in 1964.\n\n\n\n",
    "preview": "posts/httpsyli210813githubiosocialnetworkanalysishw9/distill-preview.png",
    "last_modified": "2022-04-11T16:43:40-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsnmilsteinumagithubiomyblogposts2022-04-11-networks-blog-post-9/",
    "title": "Networks Blog Post 9",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Noah Milstein",
        "url": {}
      }
    ],
    "date": "2022-04-11",
    "categories": [],
    "contents": "\n\n\n\nLoading the Networks\nPutting Network into\nNecessary Formats\n\n\n\nAdding Attributes\n\n\n\nBrokerage scores in the\n1000s\n\n\n\n\n\n\nBrokerage scores in the\n1100s\n\n\n\nBrokerage scores in the\n1200s\n\n\n\n\n\n\n\n\n\nInital Graphical\nRepresentation\n1000s GGplot\n\n\n\n1100s GGplot\n\n\n\n1200s GGplot\n\n\n\n\n\nwars_in_1000s_edgelist <- as.matrix(wars_in_1000s)\n\nwars_in_1000s_edgelist_network_edgelist <- graph.edgelist(wars_in_1000s_edgelist, directed=TRUE)\n\nwars_in_1000s.ig<-graph_from_data_frame(wars_in_1000s)\n\nwars_in_1000s_network <- asNetwork(wars_in_1000s.ig)\n\n\n\n\n\naspects_of_1000s_states <- read_excel(\"~/Desktop/Spring 2022/Networks/aspects_of_1000s_states.xlsx\")\n\ntotal_1000s <- merge(aspects_of_1000s_states, wars_in_1000s.nodes.stat_2, by=\"name\")\n\n\n\n\n\naspects_of_1100s_states <- read_excel(\"~/Desktop/Spring 2022/Networks/aspects_of_1100s_states.xlsx\")\n\ntotal_1100s <- merge(aspects_of_1100s_states, wars_in_1100s.nodes.stat_2, by=\"name\")\n\n\n\n\n\naspects_of_1200s_states <- read_excel(\"~/Desktop/Spring 2022/Networks/aspects_of_1200s_states.xlsx\")\n\ntotal_1200s <- merge(aspects_of_1200s_states, wars_in_1200s.nodes.stat_2, by=\"name\")\n\n\n\n\n\ntotal_1000s_brokerag_reg<-total_1000s\n\ntotal_1000s_brokerag_reg$win_rate <- (total_1000s_brokerag_reg$outdegree/total_1000s_brokerag_reg$totdegree)\n\ntotal_1000s_brokerag_reg$loss_rate <- (total_1000s_brokerag_reg$indegree/total_1000s_brokerag_reg$totdegree)\n\ntotal_1000s_brokerag_reg_binom <- total_1000s_brokerag_reg %>% mutate(more_win_or_loss = case_when(\n  win_rate < 0.5 ~ 0,\n    win_rate >= 0.5 ~ 1))\n\nFirst_1000s_regression <- glm(more_win_or_loss~.-name-totdegree-indegree-outdegree-dc-eigen.dc-win_rate-loss_rate, total_1000s_brokerag_reg_binom, family=binomial)\n\nFirst_1000s_regression\n\n\n\nCall:  glm(formula = more_win_or_loss ~ . - name - totdegree - indegree - \n    outdegree - dc - eigen.dc - win_rate - loss_rate, family = binomial, \n    data = total_1000s_brokerag_reg_binom)\n\nCoefficients:\n (Intercept)      Catholic         Islam      Orthodox      Buddhist  \n  -2.090e+01     1.446e-01    -7.108e-02    -4.043e-01    -8.572e-02  \n       Pagan      Tengrism        Shinto         Hindu     Shamanism  \n   5.506e-01    -5.656e+01     1.820e+00    -2.142e+00    -1.506e+00  \n       eigen         close            rc      eigen.rc    broker.tot  \n  -1.877e+03     5.146e+03    -3.979e+00     1.574e+03     2.378e+02  \nbroker.coord   broker.itin    broker.rep   broker.gate    broker.lia  \n  -9.610e+01    -9.449e+01    -7.164e+01    -2.810e+01    -1.298e+02  \n\nDegrees of Freedom: 101 Total (i.e. Null);  82 Residual\n  (8 observations deleted due to missingness)\nNull Deviance:      140.8 \nResidual Deviance: 4.53e-09     AIC: 40\n\n\n\nset.seed(292)\n\ntotal_1000s_for_regression <- total_1000s[,-c(1, 20:25)]\n\ntotal_1000s_for_regression$win_rate <- (total_1000s_for_regression$outdegree/total_1000s_for_regression$totdegree)\n\ntotal_1000s_for_regression$loss_rate <- (total_1000s_for_regression$indegree/total_1000s_for_regression$totdegree)\n\ntotal_1000s_for_regression <- total_1000s_for_regression %>% mutate(more_win_or_loss = case_when(\n  win_rate < 0.5 ~ 0,\n    win_rate >= 0.5 ~ 1))\n\nFirst_1000s_regression <- glm(more_win_or_loss~.-loss_rate-win_rate-totdegree-indegree-outdegree-dc-eigen.dc, total_1000s_for_regression, family=binomial)\n\nFirst_1000s_regression\n\n\n\nCall:  glm(formula = more_win_or_loss ~ . - loss_rate - win_rate - totdegree - \n    indegree - outdegree - dc - eigen.dc, family = binomial, \n    data = total_1000s_for_regression)\n\nCoefficients:\n(Intercept)     Catholic        Islam     Orthodox     Buddhist  \n   -15.1948      13.9008      12.7531      14.6893      15.0858  \n      Pagan     Tengrism       Shinto        Hindu    Shamanism  \n     0.9610      11.6691      16.0623       9.1358      -0.1497  \n      eigen        close           rc     eigen.rc  \n   -82.1100     256.5294      -3.3322     -17.3152  \n\nDegrees of Freedom: 109 Total (i.e. Null);  96 Residual\nNull Deviance:      152.3 \nResidual Deviance: 58.4     AIC: 86.4\n\n\n\nset.seed(6738)\n\nin_training<- sample(1:nrow(total_1000s_for_regression),  nrow(total_1000s_for_regression) * 0.7 )\n\ntraining_1000s <- total_1000s_for_regression[in_training,]\n\ntest_1000s <- total_1000s_for_regression[-in_training,]\n\nlm_1000s_binom_subset_1 <- glm(more_win_or_loss~.-loss_rate-win_rate-totdegree-indegree-outdegree-dc-eigen.dc, total_1000s_for_regression, family=binomial, subset = in_training )\n\nlogsitic_1_1000s_prob <- predict(lm_1000s_binom_subset_1, test_1000s,\ntype = \"response\")\n\nlog_preds_1<-ifelse(logsitic_1_1000s_prob >= 0.5, 1, 0)\n\nprediction_1_logs <-mean(log_preds_1 == test_1000s$more_win_or_loss)\n\nprediction_1_logs %>% kable()\n\n\nx\n0.9090909\n\n\n\nlibrary(glmnet)\nlibrary(MASS)\n\n\n\n\n\nset.seed(246)\n\nx_ridge <- model.matrix(more_win_or_loss ~ .-loss_rate-win_rate-totdegree-indegree-outdegree-dc-eigen.dc, total_1000s_for_regression)[, -1] \n\ny_ridge <- total_1000s_for_regression$more_win_or_loss\n\ngrid <- 10^seq(10, -2, length = 100)\n\nridge.mod <- glmnet(x_ridge, y_ridge, alpha = 0, lambda = grid)\n\ndim(coef(ridge.mod))\n\n\n[1]  14 100\n\n\n\nset.seed(729)\ntrain_ridge <- sample(1:nrow(x_ridge), nrow(x_ridge)*0.8 ) \n\ntest_ridge <- (-train_ridge)\n\ny.test_ridge <- y_ridge[test_ridge]\n\n\n\n\n\nset.seed(9292)\n\nridge.mod <- glmnet(x_ridge[train_ridge, ], y_ridge[train_ridge], \n                    alpha = 0, lambda = grid, thresh = 1e-12)\n\nridge.pred <- predict(ridge.mod, s = 4, newx = x_ridge[test_ridge,])\n\nmean((ridge.pred - y.test_ridge)^2) %>% kable()\n\n\nx\n0.2416376\n\n\n\nset.seed(231)\nridge.pred <- predict(ridge.mod, s = 0, newx = x_ridge[test_ridge, ], \n                      exact = T, x = x_ridge[train_ridge, ], y = y_ridge[train_ridge])\n\npredict(ridge.mod, s = 0, exact = T, type = \"coefficients\", \n        x = x_ridge[train_ridge, ], y = y_ridge[train_ridge])[1:14, ]\n\n\n(Intercept)    Catholic       Islam    Orthodox    Buddhist \n 0.21024033  0.21827317 -0.01160454  0.21312966  0.35601806 \n      Pagan    Tengrism      Shinto       Hindu   Shamanism \n 0.08955257  0.14069809  0.38278477 -0.07034364 -0.01038790 \n      eigen       close          rc    eigen.rc \n-4.61480591 12.51011844 -0.29977861  4.64835194 \n\n\n\nset.seed(9292)\n\ncv.out <- cv.glmnet(x_ridge[train_ridge, ], y_ridge[train_ridge], alpha = 0) \n\nplot(cv.out)\n\n\n\n\n\n\nset.seed(9292)\n\nbestlam <- cv.out$lambda.min\n\nbestlam\n\n\n[1] 0.415338\n\n\n\nset.seed(9292)\n\nridge.pred <- predict(cv.out, s = bestlam, newx = x_ridge[test_ridge,])\n\nmean((ridge.pred - y.test_ridge)^2) %>% kable()\n\n\nx\n0.174632\n\n\n\nset.seed(2897)\n\nx_lasso <- model.matrix(more_win_or_loss ~ .-loss_rate-win_rate-totdegree-indegree-outdegree-dc-eigen.dc, total_1000s_for_regression)[, -1] \n\ny_lasso <- total_1000s_for_regression$more_win_or_loss\n\ngrid <- 10^seq(10, -2, length = 100)\n\nlasso.mod <- glmnet(x_lasso, y_lasso, alpha = 0, lambda = grid)\n\ndim(coef(lasso.mod))\n\n\n[1]  14 100\n\n\n\nset.seed(729)\n\ntrain_lasso <- sample(1:nrow(x_ridge), nrow(x_ridge)*0.8 ) \n\ntest_lasso <- (-train_lasso)\n\ny.test_lasso <- y_lasso[test_lasso]\n\n\n\n\n\nset.seed(9292)\n\nlasso.mod <- glmnet(x_lasso[train_lasso, ], y_lasso[train_lasso], \n                    alpha = 1, lambda = grid)\n\nplot(lasso.mod)\n\n\n\n\n\n\nset.seed(1029)\n\ncv.out_2 <- cv.glmnet(x_lasso[train_lasso, ], y_lasso[train_lasso], alpha = 1) \n\nplot(cv.out_2)\n\n\n\n\n\n\nset.seed(1920)\n\nbestlam_2 <- cv.out_2$lambda.min\n\nlasso.pred <- predict(cv.out_2, s = bestlam_2, newx = x_ridge[test_ridge,])\n\nmean((lasso.pred - y.test_ridge)^2) %>% kable()\n\n\nx\n0.1749583\n\n\n\nset.seed(2739)\n\nout <- glmnet(x_lasso[train_lasso, ], y_lasso[train_lasso], \n              alpha = 1, lambda = grid)\n\nlasso.coef <- predict(out, type = \"coefficients\", s = bestlam_2)[1:14, ]\n\nlasso.coef\n\n\n(Intercept)    Catholic       Islam    Orthodox    Buddhist \n 0.42561685  0.05577020 -0.09275344  0.00000000  0.00000000 \n      Pagan    Tengrism      Shinto       Hindu   Shamanism \n 0.00000000  0.00000000  0.00000000  0.00000000  0.00000000 \n      eigen       close          rc    eigen.rc \n 0.00000000  3.22570629 -0.21240622  0.00000000 \n\nCommunity Grouping\nLabel Propagation 1000s:\nThe first community cluster below is done using label propagation.\nThis results in 39 groups\n\n\nset.seed(23)\ncomm.lab<-label.propagation.community(wars_in_1000s.ig)\n#Inspect clustering object\n# igraph::groups(comm.lab)\n\n\n\n\n\n\nWalktrap 1000s:\nWalktrap classification as seen below results in 19 distinct\ncommunities.\n\n\nset.seed(238)\n#Run clustering algorithm: fast_greedy\nwars_in_1000s.wt<-walktrap.community(wars_in_1000s.ig)\n\n#igraph::groups(wars_in_1000s.wt)\n\n\n\nAdding more steps resulted in 19 groups for both 10 and 20 steps.\n\n\n#Run & inspect clustering algorithm: 10 steps\n#igraph::groups(walktrap.community(wars_in_1000s.ig, steps=10)) \n#Run & inspect clustering algorithm: 20 steps\n#igraph::groups(walktrap.community(wars_in_1000s.ig ,steps=20))\n#Run & inspect clustering algorithm\n\n\n\n\n\n\nMachine\nLearning, Regression and Principle Components:\n\n\ntotal_1000s_for_PCA <- total_1000s_brokerag_reg_binom[-c(20:27)]\n\napply(total_1000s_for_PCA[-1], 2, mean)\n\n\n        Catholic            Islam         Orthodox         Buddhist \n     0.454545455      0.181818182      0.154545455      0.063636364 \n           Pagan         Tengrism           Shinto            Hindu \n     0.036363636      0.018181818      0.054545455      0.045454545 \n       Shamanism        totdegree         indegree        outdegree \n     0.009090909      2.754545455      1.336363636      1.418181818 \n           eigen            close               rc         eigen.rc \n     0.028058711      0.023546832      0.287358773      0.003637773 \n              dc         eigen.dc more_win_or_loss \n     0.712641227      0.024420939      0.481818182 \n\n\n\napply(total_1000s_for_PCA[-1], 2, var)\n\n\n        Catholic            Islam         Orthodox         Buddhist \n    0.2502085071     0.1501251043     0.1318598832     0.0601334445 \n           Pagan         Tengrism           Shinto            Hindu \n    0.0353628023     0.0180150125     0.0520433695     0.0437864887 \n       Shamanism        totdegree         indegree        outdegree \n    0.0090909091     8.9208507089     2.6656380317     6.3189324437 \n           eigen            close               rc         eigen.rc \n    0.0076304265     0.0019575460     0.1260782284     0.0004728954 \n              dc         eigen.dc more_win_or_loss \n    0.1260782284     0.0056490031     0.2519599666 \n\n\n\npr.out <- prcomp(total_1000s_for_PCA[-1], scale = TRUE)\n\n\n\n\n\nnames(pr.out)\n\n\n[1] \"sdev\"     \"rotation\" \"center\"   \"scale\"    \"x\"       \n\n\n\npr.out$center\n\n\n        Catholic            Islam         Orthodox         Buddhist \n     0.454545455      0.181818182      0.154545455      0.063636364 \n           Pagan         Tengrism           Shinto            Hindu \n     0.036363636      0.018181818      0.054545455      0.045454545 \n       Shamanism        totdegree         indegree        outdegree \n     0.009090909      2.754545455      1.336363636      1.418181818 \n           eigen            close               rc         eigen.rc \n     0.028058711      0.023546832      0.287358773      0.003637773 \n              dc         eigen.dc more_win_or_loss \n     0.712641227      0.024420939      0.481818182 \n\n\n\npr.out$scale\n\n\n        Catholic            Islam         Orthodox         Buddhist \n      0.50020846       0.38745981       0.36312516       0.24522122 \n           Pagan         Tengrism           Shinto            Hindu \n      0.18805000       0.13422002       0.22813016       0.20925221 \n       Shamanism        totdegree         indegree        outdegree \n      0.09534626       2.98677932       1.63267818       2.51374868 \n           eigen            close               rc         eigen.rc \n      0.08735231       0.04424416       0.35507496       0.02174616 \n              dc         eigen.dc more_win_or_loss \n      0.35507496       0.07515985       0.50195614 \n\n\n\n\n\n\nbiplot(pr.out, scale = 0)\n\n\n\n\n\n\nset.seed(172)\n\nggbiplot(pr.out, labels =  total_1000s_for_PCA$name, labels.size  =1.5)\n\n\n\n\n\n\npr.out$rotation = -pr.out$rotation \n\npr.out$x = -pr.out$x\n\nbiplot(pr.out, scale = 0)\n\n\n\n\n\n\npr.out$sdev\n\n\n [1] 2.217501e+00 1.681548e+00 1.239242e+00 1.211199e+00 1.065982e+00\n [6] 1.037692e+00 1.029507e+00 1.011117e+00 1.005425e+00 9.514802e-01\n[11] 8.848499e-01 7.782431e-01 6.162540e-01 4.426224e-01 2.541422e-01\n[16] 1.091189e-01 7.597269e-16 6.258811e-16 2.174635e-16\n\n\n\npr.var <- pr.out$sdev^2\n\npr.var\n\n\n [1] 4.917311e+00 2.827605e+00 1.535720e+00 1.467004e+00 1.136318e+00\n [6] 1.076804e+00 1.059884e+00 1.022359e+00 1.010879e+00 9.053146e-01\n[11] 7.829594e-01 6.056623e-01 3.797690e-01 1.959146e-01 6.458828e-02\n[16] 1.190694e-02 5.771849e-31 3.917271e-31 4.729037e-32\n\n\n\npve <- pr.var / sum(pr.var)\n\npve\n\n\n [1] 2.588059e-01 1.488213e-01 8.082739e-02 7.721075e-02 5.980622e-02\n [6] 5.667390e-02 5.578337e-02 5.380835e-02 5.320417e-02 4.764814e-02\n[11] 4.120839e-02 3.187696e-02 1.998784e-02 1.031129e-02 3.399383e-03\n[16] 6.266808e-04 3.037815e-32 2.061722e-32 2.488967e-33\n\n\n\npar(mfrow = c(1, 2))\nplot(pve, xlab = \"Principal Component\",\nylab = \"Proportion of Variance Explained\", ylim = c(0, 1),\ntype = \"b\")\n\nplot(cumsum(pve), xlab = \"Principal Component\",\nylab = \"Cumulative Proportion of Variance Explained\", ylim = c(0, 1), type = \"b\")\n\n\n\n\n\n\nnames(total_1200s)\n\n\n [1] \"name\"         \"Catholic\"     \"Islam\"        \"Orthodox\"    \n [5] \"Buddhist\"     \"Pagan\"        \"Tengrism\"     \"Shinto\"      \n [9] \"Hindu\"        \"Shamanism\"    \"totdegree\"    \"indegree\"    \n[13] \"outdegree\"    \"eigen\"        \"rc\"           \"eigen.rc\"    \n[17] \"dc\"           \"eigen.dc\"     \"broker.tot\"   \"broker.coord\"\n[21] \"broker.itin\"  \"broker.rep\"   \"broker.gate\"  \"broker.lia\"  \n\n\n\ntotal_1200s_brokerag_reg<-total_1200s\n\n\n\n\n\ntotal_1200s_brokerag_reg$win_rate <- (total_1200s_brokerag_reg$outdegree/total_1200s_brokerag_reg$totdegree)\n\n\n\n\n\ntotal_1200s_brokerag_reg$loss_rate <- (total_1200s_brokerag_reg$indegree/total_1200s_brokerag_reg$totdegree)\n\n\n\n\n\ntotal_1200s_brokerag_reg_binom <- total_1200s_brokerag_reg %>% mutate(more_win_or_loss = case_when(\n  win_rate < 0.5 ~ 0,\n    win_rate >= 0.5 ~ 1))\n\n\n\n\n\ntotal_1200s_for_PCA <- total_1200s_brokerag_reg_binom[-c(20:27)]\n\n\napply(total_1200s_for_PCA[-1], 2, mean)\n\n\n   Catholic       Islam    Orthodox    Buddhist       Pagan \n0.712500000 0.068750000 0.087500000 0.087500000 0.012500000 \n   Tengrism      Shinto       Hindu   Shamanism   totdegree \n0.025000000 0.000000000 0.006250000 0.000000000 3.918750000 \n   indegree   outdegree       eigen          rc    eigen.rc \n1.962500000 1.956250000 0.025567955 0.158754617 0.002192746 \n         dc    eigen.dc  broker.tot \n0.841245383 0.023375209 0.341581810 \n\n\n\napply(total_1200s_for_PCA[-1], 2, var)\n\n\n    Catholic        Islam     Orthodox     Buddhist        Pagan \n2.061321e-01 6.442610e-02 8.034591e-02 8.034591e-02 1.242138e-02 \n    Tengrism       Shinto        Hindu    Shamanism    totdegree \n2.452830e-02 0.000000e+00 6.250000e-03 0.000000e+00 2.666631e+01 \n    indegree    outdegree        eigen           rc     eigen.rc \n6.237579e+00 1.595405e+01 5.631476e-03 7.141295e-02 7.316162e-05 \n          dc     eigen.dc   broker.tot \n7.141295e-02 4.574350e-03 3.001236e+01 \n\n\n\n# I cannot scale variables with \n\ntotal_1200s_for_PCA<-total_1200s_for_PCA[-c(8,10)]\n\n\n\n\n\npr.out_2 <- prcomp(total_1200s_for_PCA[-1], scale = TRUE)\n\n\n\n\n\nnames(pr.out_2)\n\n\n[1] \"sdev\"     \"rotation\" \"center\"   \"scale\"    \"x\"       \n\n\n\npr.out_2$center\n\n\n   Catholic       Islam    Orthodox    Buddhist       Pagan \n0.712500000 0.068750000 0.087500000 0.087500000 0.012500000 \n   Tengrism       Hindu   totdegree    indegree   outdegree \n0.025000000 0.006250000 3.918750000 1.962500000 1.956250000 \n      eigen          rc    eigen.rc          dc    eigen.dc \n0.025567955 0.158754617 0.002192746 0.841245383 0.023375209 \n broker.tot \n0.341581810 \n\n\n\npr.out_2$scale\n\n\n   Catholic       Islam    Orthodox    Buddhist       Pagan \n0.454017704 0.253822971 0.283453545 0.283453545 0.111451261 \n   Tengrism       Hindu   totdegree    indegree   outdegree \n0.156615139 0.079056942 5.163943541 2.497514488 3.994251963 \n      eigen          rc    eigen.rc          dc    eigen.dc \n0.075043164 0.267232010 0.008553457 0.267232010 0.067633938 \n broker.tot \n5.478353760 \n\n\n\n\n\n\nbiplot(pr.out_2, scale = 0)\n\n\n\n\n\n\npr.out_2$rotation = -pr.out_2$rotation \n\npr.out_2$x = -pr.out_2$x\n\nbiplot(pr.out_2, scale = 0)\n\n\n\n\n\n\nset.seed(8192)\n\nggbiplot(pr.out_2, labels =  total_1200s_for_PCA$name, labels.size  =1.5)\n\n\n\n\n\n\npr.out$sdev\n\n\n [1] 2.217501e+00 1.681548e+00 1.239242e+00 1.211199e+00 1.065982e+00\n [6] 1.037692e+00 1.029507e+00 1.011117e+00 1.005425e+00 9.514802e-01\n[11] 8.848499e-01 7.782431e-01 6.162540e-01 4.426224e-01 2.541422e-01\n[16] 1.091189e-01 7.597269e-16 6.258811e-16 2.174635e-16\n\n\n\npr.var_2 <- pr.out_2$sdev^2\n\npr.var_2\n\n\n [1] 4.903737e+00 2.344663e+00 1.670548e+00 1.250176e+00 1.132904e+00\n [6] 1.097802e+00 1.011326e+00 9.460639e-01 8.661454e-01 5.139677e-01\n[11] 1.659928e-01 9.667541e-02 2.916516e-30 4.832251e-31 2.292490e-31\n[16] 1.889562e-32\n\n\n\npve_2 <- pr.var_2 / sum(pr.var_2)\n\npve_2\n\n\n [1] 3.064835e-01 1.465414e-01 1.044092e-01 7.813602e-02 7.080651e-02\n [6] 6.861260e-02 6.320785e-02 5.912899e-02 5.413409e-02 3.212298e-02\n[11] 1.037455e-02 6.042213e-03 1.822822e-31 3.020157e-32 1.432806e-32\n[16] 1.180977e-33\n\n\n\npar(mfrow = c(1, 2))\nplot(pve_2, xlab = \"Principal Component\",\nylab = \"Proportion of Variance Explained\", ylim = c(0, 1),\ntype = \"b\")\n\nplot(cumsum(pve_2), xlab = \"Principal Component\",\nylab = \"Cumulative Proportion of Variance Explained\", ylim = c(0, 1), type = \"b\")\n\n\n\n\nCUG 1000s\n\n\ntrans.cug<-cug.test(wars_1000s,FUN=gtrans,mode=\"digraph\",cmode=\"size\")\ntrans.cug\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 0.0984456 \nPr(X>=Obs): 1 \nPr(X<=Obs): 0 \n\n\n\nplot(trans.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\n(trans.cug$obs.stat-mean(trans.cug$rep.stat))/sd(trans.cug$rep.stat)\n\n\n[1] -88.00188\n\n\n\ncug.t<-function(cug.object){\n  (cug.object$obs.stat-mean(cug.object$rep.stat))/sd(cug.object$rep.stat)\n}\n\n\n\n\n\n#compare network transitivity to null conditional on size\ntrans.cug<-cug.test(wars_1000s,FUN=gtrans,mode=\"digraph\",cmode=\"size\", reps = 100)\ntrans.cug\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 0.0984456 \nPr(X>=Obs): 1 \nPr(X<=Obs): 0 \n\n\n\n#plot vs. simulation results\nplot(trans.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\ncug.t(trans.cug)\n\n\n[1] -83.27903\n\nCUG 1100s\n\n\ntrans.cug<-cug.test(wars_1100s,FUN=gtrans,mode=\"digraph\",cmode=\"size\")\ntrans.cug\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 0.1388889 \nPr(X>=Obs): 1 \nPr(X<=Obs): 0 \n\n\n\nplot(trans.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\n(trans.cug$obs.stat-mean(trans.cug$rep.stat))/sd(trans.cug$rep.stat)\n\n\n[1] -67.57014\n\n\n\ncug.t<-function(cug.object){\n  (cug.object$obs.stat-mean(cug.object$rep.stat))/sd(cug.object$rep.stat)\n}\n\n\n\n\n\n#compare network transitivity to null conditional on size\ntrans.cug<-cug.test(wars_1100s,FUN=gtrans,mode=\"digraph\",cmode=\"size\", reps = 100)\ntrans.cug\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 0.1388889 \nPr(X>=Obs): 1 \nPr(X<=Obs): 0 \n\n\n\n#plot vs. simulation results\nplot(trans.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\ncug.t(trans.cug)\n\n\n[1] -62.85368\n\nCUG 1200s\n\n\ntrans.cug<-cug.test(wars_1200s,FUN=gtrans,mode=\"digraph\",cmode=\"size\")\ntrans.cug\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 0.1111111 \nPr(X>=Obs): 1 \nPr(X<=Obs): 0 \n\n\n\nplot(trans.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\n(trans.cug$obs.stat-mean(trans.cug$rep.stat))/sd(trans.cug$rep.stat)\n\n\n[1] -120.9757\n\n\n\ncug.t<-function(cug.object){\n  (cug.object$obs.stat-mean(cug.object$rep.stat))/sd(cug.object$rep.stat)\n}\n\n\n\n\n\n#compare network transitivity to null conditional on size\ntrans.cug<-cug.test(wars_1200s,FUN=gtrans,mode=\"digraph\",cmode=\"size\", reps = 100)\ntrans.cug\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 0.1111111 \nPr(X>=Obs): 1 \nPr(X<=Obs): 0 \n\n\n\n#plot vs. simulation results\nplot(trans.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\ncug.t(trans.cug)\n\n\n[1] -123.9686\n\nCUG Test Centralization\n1000s\n\n\n#compare network degree centralization to null conditional on size\nc.degree.cug <-cug.test(wars_1000s,FUN=centralization,  FUN.arg=list(FUN=degree, cmode=\"indegree\"), mode=\"digraph\", cmode=\"size\") \n#plot vs simulation results\nplot(c.degree.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\ncug.t(c.degree.cug)\n\n\n[1] -3.691657\n\n\n\n#compare network betweenness centralization to null conditional on size\nb.degree.cug <-cug.test(wars_1000s,FUN=centralization,  FUN.arg=list(FUN=betweenness, cmode=\"directed\"), mode=\"digraph\", cmode=\"size\", reps=100) \n#plot vs simulation results\nplot(b.degree.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\ncug.t(b.degree.cug)\n\n\n[1] 52.41828\n\nCUG Test Centralization\n1200s\n\n\n#compare network degree centralization to null conditional on size\nc.degree.cug <-cug.test(wars_1100s,FUN=centralization,  FUN.arg=list(FUN=degree, cmode=\"indegree\"), mode=\"digraph\", cmode=\"size\") \n#plot vs simulation results\nplot(c.degree.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\ncug.t(c.degree.cug)\n\n\n[1] 0.1300734\n\n\n\n#compare network betweenness centralization to null conditional on size\nb.degree.cug <-cug.test(wars_1100s,FUN=centralization,  FUN.arg=list(FUN=betweenness, cmode=\"directed\"), mode=\"digraph\", cmode=\"size\", reps=100) \n#plot vs simulation results\nplot(b.degree.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\ncug.t(b.degree.cug)\n\n\n[1] 29.04174\n\nCUG Test Centralization\n1200s\n\n\n#compare network degree centralization to null conditional on size\nc.degree.cug <-cug.test(wars_1200s,FUN=centralization,  FUN.arg=list(FUN=degree, cmode=\"indegree\"), mode=\"digraph\", cmode=\"size\") \n#plot vs simulation results\nplot(c.degree.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\ncug.t(c.degree.cug)\n\n\n[1] -1.973945\n\n\n\n#compare network betweenness centralization to null conditional on size\nb.degree.cug <-cug.test(wars_1200s,FUN=centralization,  FUN.arg=list(FUN=betweenness, cmode=\"directed\"), mode=\"digraph\", cmode=\"size\", reps=100) \n#plot vs simulation results\nplot(b.degree.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\ncug.t(b.degree.cug)\n\n\n[1] 220.5521\n\nConditioning\non Different Network Properties 1000s\n\n\n#compare network transitivity to null conditional on dyads\ntrans.cug<-cug.test(wars_1000s,FUN=gtrans,mode=\"digraph\",cmode=\"dyad\")\ntrans.cug\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: dyad.census \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 0.0984456 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n\n\n#plot vs simulation results\nplot(trans.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\ncug.t(trans.cug)\n\n\n[1] 11.14202\n\n\n\n#compare network transitivity to null conditional on edges (density)\ntrans.cug<-cug.test(wars_1000s,FUN=gtrans,mode=\"digraph\",cmode=\"edges\", reps=100)\ntrans.cug\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: edges \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 0.0984456 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n\n\n#plot vs simulation results\nplot(trans.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\ncug.t(trans.cug)\n\n\n[1] 12.58383\n\nConditioning\non Different Network Properties 1100s\n\n\n#compare network transitivity to null conditional on dyads\ntrans.cug<-cug.test(wars_1100s,FUN=gtrans,mode=\"digraph\",cmode=\"dyad\")\ntrans.cug\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: dyad.census \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 0.1388889 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n\n\n#plot vs simulation results\nplot(trans.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\ncug.t(trans.cug)\n\n\n[1] 16.10525\n\n\n\n#compare network transitivity to null conditional on edges (density)\ntrans.cug<-cug.test(wars_1100s,FUN=gtrans,mode=\"digraph\",cmode=\"edges\", reps=100)\ntrans.cug\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: edges \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 0.1388889 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n\n\n#plot vs simulation results\nplot(trans.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\ncug.t(trans.cug)\n\n\n[1] 17.64935\n\nConditioning\non Different Network Properties 1200s\n\n\n#compare network transitivity to null conditional on dyads\ntrans.cug<-cug.test(wars_1200s,FUN=gtrans,mode=\"digraph\",cmode=\"dyad\")\ntrans.cug\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: dyad.census \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 0.1111111 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n\n\n#plot vs simulation results\nplot(trans.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\ncug.t(trans.cug)\n\n\n[1] 19.55207\n\n\n\n#compare network transitivity to null conditional on edges (density)\ntrans.cug<-cug.test(wars_1200s,FUN=gtrans,mode=\"digraph\",cmode=\"edges\", reps=100)\ntrans.cug\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: edges \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 0.1111111 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n\n\n#plot vs simulation results\nplot(trans.cug)\n\n\n\n\n\n\n#t-stat between observed and simulated networks\ncug.t(trans.cug)\n\n\n[1] 20.27918\n\nCompare to Simulated\nNetworks\nSimulated Networks 1000s\n\n\n#create empty dataframe for simulations\ntrials<-data.frame(id=1:100, gdens=NA, gtrans=NA, cent.deg=NA, cent.bet=NA)\n\n\n\n\n\n#as.network(wars_in_1000s)\n\nwars_in_1000s_2 <- wars_in_1000s[-c(19, 64, 65, 71),]\n\nwars_in_1000s_2.stat <- as.network(wars_in_1000s_2)\n\n\n\n\n\n#simulate PA networks and add stats to trials dataframe: size\nfor ( i in 1:100 ){ \n  pa.ig<- igraph::sample_pa(n = network.size(wars_in_1000s_2.stat), directed=TRUE)\n  pa.stat<-intergraph::asNetwork(pa.ig)\n  trials$gdens<-gden(pa.stat)\n  trials$gtrans[i] <- gtrans(pa.stat)\n  trials$cent.deg[i] <- centralization(pa.stat, FUN=degree, cmode=\"indegree\")\n  trials$cent.bet[i] <-centralization(pa.stat, FUN=betweenness)\n}\n\n\n\n\n\nsummary(trials)\n\n\n       id             gdens              gtrans     cent.deg      \n Min.   :  1.00   Min.   :0.009009   Min.   :0   Min.   :0.07347  \n 1st Qu.: 25.75   1st Qu.:0.009009   1st Qu.:0   1st Qu.:0.13769  \n Median : 50.50   Median :0.009009   Median :0   Median :0.17438  \n Mean   : 50.50   Mean   :0.009009   Mean   :0   Mean   :0.18631  \n 3rd Qu.: 75.25   3rd Qu.:0.009009   3rd Qu.:0   3rd Qu.:0.21107  \n Max.   :100.00   Max.   :0.009009   Max.   :0   Max.   :0.50463  \n    cent.bet        \n Min.   :0.0009174  \n 1st Qu.:0.0026569  \n Median :0.0042626  \n Mean   :0.0048482  \n 3rd Qu.:0.0061481  \n Max.   :0.0155508  \n\n\n\nsim.t<-function(g, trials){\n  temp<-data.frame(density=c(gden(g),mean(trials$gdens),sd(trials$gdens)),\n             transitivity=c(gtrans(g),mean(trials$gtrans),sd(trials$gtrans)),\n             indegCent=c(centralization(g, FUN=degree, cmode=\"indegree\"),mean(trials$cent.deg), sd(trials$cent.deg)),\n             betwCent=c(centralization(g, FUN=betweenness), mean(trials$cent.bet), sd(trials$cent.bet)))\n  rownames(temp)<-c(\"Observed\",\"Simulated\", \"SD\")\n  temp<-data.frame(t(temp))\n  temp$tvalue<-(temp$Observed-temp$Simulated)/temp$SD\n  temp\n}\n\n\n\n\n\nplot.sim.t<-function(g,trials){\n  temp<-data.frame(net.stat=c(\"gtrans\",\"cent.deg\",\"cent.bet\"), x=c(gtrans(g),centralization(g, FUN=degree, cmode=\"indegree\"), centralization(g, FUN=betweenness)))\n  trials[c(3:5)]%>%\n    gather(key=\"net.stat\",value = \"estimate\")%>%\n    ggplot(aes(estimate)) +\n    geom_histogram() +\n    facet_wrap(net.stat ~ ., scales=\"free\", ncol=3) +\n    geom_vline(data=temp, aes(xintercept=x),\n               linetype=\"dashed\", size=1, colour=\"red\")\n}\n\n\n\n\n\n#check for differences from null\n\nsim.t(g=wars_1000s, trials)\n\n\n               Observed   Simulated          SD    tvalue\ndensity      0.01253071 0.009009009 0.000000000       Inf\ntransitivity 0.09844560 0.000000000 0.000000000       Inf\nindegCent    0.05157025 0.186305785 0.072871174 -1.848955\nbetwCent     0.01810448 0.004848199 0.002948065  4.496604\n\n\n\nplot.sim.t(wars_in_1000s_2.stat, trials)\n\n\n\n\nSimulated Networks 1100s\n\n\n#as.network(wars_in_1100s)\n\nwars_in_1100s_2 <- wars_in_1100s[-c(47, 61, 62, 77, 78, 83),]\n\n#as.network(wars_in_1100s_2)\n\nwars_in_1100s_2_1 <- wars_in_1100s_2[-c(178,181, 182, 184, 185, 188),]\n\n#as.network(wars_in_1100s_2_1)\n\nwars_in_1100s_2_2 <- wars_in_1100s_2_1[-c(183, 202, 203, 204, 205, 206),]\n\n#as.network(wars_in_1100s_2_2)\n\nwars_in_1100s_2_3<- wars_in_1100s_2_2[-c(201, 202),]\n\nwars_in_1100s_2.stat <- as.network(wars_in_1100s_2_3)\n\n\n\n\n\n#simulate PA networks and add stats to trials dataframe: size\nfor ( i in 1:100 ){ \n  pa.ig<- igraph::sample_pa(n = network.size(wars_in_1100s_2.stat), directed=TRUE)\n  pa.stat<-intergraph::asNetwork(pa.ig)\n  trials$gdens<-gden(pa.stat)\n  trials$gtrans[i] <- gtrans(pa.stat)\n  trials$cent.deg[i] <- centralization(pa.stat, FUN=degree, cmode=\"indegree\")\n  trials$cent.bet[i] <-centralization(pa.stat, FUN=betweenness)\n}\n\n\n\n\n\nsummary(trials)\n\n\n       id             gdens             gtrans     cent.deg      \n Min.   :  1.00   Min.   :0.01031   Min.   :0   Min.   :0.09484  \n 1st Qu.: 25.75   1st Qu.:0.01031   1st Qu.:0   1st Qu.:0.14746  \n Median : 50.50   Median :0.01031   Median :0   Median :0.18956  \n Mean   : 50.50   Mean   :0.01031   Mean   :0   Mean   :0.19567  \n 3rd Qu.: 75.25   3rd Qu.:0.01031   3rd Qu.:0   3rd Qu.:0.23166  \n Max.   :100.00   Max.   :0.01031   Max.   :0   Max.   :0.37901  \n    cent.bet       \n Min.   :0.001162  \n 1st Qu.:0.003045  \n Median :0.004794  \n Mean   :0.005423  \n 3rd Qu.:0.007267  \n Max.   :0.017632  \n\n\n\nsim.t<-function(g, trials){\n  temp<-data.frame(density=c(gden(g),mean(trials$gdens),sd(trials$gdens)),\n             transitivity=c(gtrans(g),mean(trials$gtrans),sd(trials$gtrans)),\n             indegCent=c(centralization(g, FUN=degree, cmode=\"indegree\"),mean(trials$cent.deg), sd(trials$cent.deg)),\n             betwCent=c(centralization(g, FUN=betweenness), mean(trials$cent.bet), sd(trials$cent.bet)))\n  rownames(temp)<-c(\"Observed\",\"Simulated\", \"SD\")\n  temp<-data.frame(t(temp))\n  temp$tvalue<-(temp$Observed-temp$Simulated)/temp$SD\n  temp\n}\n\n\n\ncent.bet, cent.deg, gtrans\n\n\nplot.sim.t<-function(g,trials){\n  temp<-data.frame(net.stat=c(\"gtrans\",\"cent.deg\",\"cent.bet\"), x=c(gtrans(g),centralization(g, FUN=degree, cmode=\"indegree\"), centralization(g, FUN=betweenness)))\n  trials[c(3:5)]%>%\n    gather(key=\"net.stat\",value = \"estimate\")%>%\n    ggplot(aes(estimate)) +\n    geom_histogram() +\n    facet_wrap(net.stat ~ ., scales=\"free\", ncol=3) +\n    geom_vline(data=temp, aes(xintercept=x),\n               linetype=\"dashed\", size=1, colour=\"red\")\n}\n\n\n\n\n\n#check for differences from null\n\nsim.t(g=wars_1100s, trials)\n\n\n               Observed   Simulated          SD    tvalue\ndensity      0.02555842 0.010309278 0.000000000       Inf\ntransitivity 0.13888889 0.000000000 0.000000000       Inf\nindegCent    0.13205295 0.195666233 0.058576476 -1.085987\nbetwCent     0.01398369 0.005423314 0.003073955  2.784808\n\n\n\nplot.sim.t(wars_in_1100s_2.stat, trials)\n\n\n\n\nSimulated Networks 1200s\n\n\n# as.network(wars_in_1200s)\n\nwars_in_1200s_2 <- wars_in_1200s[-c(23, 93, 96, 142, 163, 167),]\n\n# as.network(wars_in_1200s_2)\n\nwars_in_1200s_2_1 <- wars_in_1200s_2[-c(162, 189, 225, 236, 302, 304),]\n\n# as.network(wars_in_1200s_2_1)\n\nwars_in_1200s_2_2 <- wars_in_1200s_2_1[-c(299),]\n\nwars_in_1200s_2.stat <- as.network(wars_in_1200s_2_2)\n\n\n\n\n\n#simulate PA networks and add stats to trials dataframe: size\nfor ( i in 1:100 ){ \n  pa.ig<- igraph::sample_pa(n = network.size(wars_in_1200s_2.stat), directed=TRUE)\n  pa.stat<-intergraph::asNetwork(pa.ig)\n  trials$gdens<-gden(pa.stat)\n  trials$gtrans[i] <- gtrans(pa.stat)\n  trials$cent.deg[i] <- centralization(pa.stat, FUN=degree, cmode=\"indegree\")\n  trials$cent.bet[i] <-centralization(pa.stat, FUN=betweenness)\n}\n\n\n\n\n\nsummary(trials)\n\n\n       id             gdens              gtrans     cent.deg      \n Min.   :  1.00   Min.   :0.006211   Min.   :0   Min.   :0.06922  \n 1st Qu.: 25.75   1st Qu.:0.006211   1st Qu.:0   1st Qu.:0.12582  \n Median : 50.50   Median :0.006211   Median :0   Median :0.14469  \n Mean   : 50.50   Mean   :0.006211   Mean   :0   Mean   :0.15997  \n 3rd Qu.: 75.25   3rd Qu.:0.006211   3rd Qu.:0   3rd Qu.:0.18871  \n Max.   :100.00   Max.   :0.006211   Max.   :0   Max.   :0.35852  \n    cent.bet        \n Min.   :0.0005646  \n 1st Qu.:0.0018678  \n Median :0.0028960  \n Mean   :0.0033793  \n 3rd Qu.:0.0043615  \n Max.   :0.0125295  \n\n\n\nsim.t<-function(g, trials){\n  temp<-data.frame(density=c(gden(g),mean(trials$gdens),sd(trials$gdens)),\n             transitivity=c(gtrans(g),mean(trials$gtrans),sd(trials$gtrans)),\n             indegCent=c(centralization(g, FUN=degree, cmode=\"indegree\"),mean(trials$cent.deg), sd(trials$cent.deg)),\n             betwCent=c(centralization(g, FUN=betweenness), mean(trials$cent.bet), sd(trials$cent.bet)))\n  rownames(temp)<-c(\"Observed\",\"Simulated\", \"SD\")\n  temp<-data.frame(t(temp))\n  temp$tvalue<-(temp$Observed-temp$Simulated)/temp$SD\n  temp\n}\n\n\n\n\n\nplot.sim.t<-function(g,trials){\n  temp<-data.frame(net.stat=c(\"gtrans\",\"cent.deg\",\"cent.bet\"), x=c(gtrans(g),centralization(g, FUN=degree, cmode=\"indegree\"), centralization(g, FUN=betweenness)))\n  trials[c(3:5)]%>%\n    gather(key=\"net.stat\",value = \"estimate\")%>%\n    ggplot(aes(estimate)) +\n    geom_histogram() +\n    facet_wrap(net.stat ~ ., scales=\"free\", ncol=3) +\n    geom_vline(data=temp, aes(xintercept=x),\n               linetype=\"dashed\", size=1, colour=\"red\")\n}\n\n\n\n\n\n#check for differences from null\n\nsim.t(g=wars_1100s, trials)\n\n\n               Observed  Simulated          SD     tvalue\ndensity      0.02555842 0.00621118 0.000000000        Inf\ntransitivity 0.13888889 0.00000000 0.000000000        Inf\nindegCent    0.13205295 0.15996992 0.052300150 -0.5337838\nbetwCent     0.01398369 0.00337929 0.002025597  5.2351971\n\n\n\nplot.sim.t(wars_in_1100s_2.stat, trials)\n\n\n\n\n\n\n\n",
    "preview": "posts/httpsnmilsteinumagithubiomyblogposts2022-04-11-networks-blog-post-9/networks-blog-post-9_files/figure-html5/unnamed-chunk-10-1.png",
    "last_modified": "2022-04-11T16:44:19-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/elitism-of-the-supreme-court-liberals-v-conservatives/",
    "title": "Elitism of the Supreme Court: Liberals v. Conservatives",
    "description": "\"After the feedback about this homework, I hopefully fixed my dataset. A tie now consists of a Justice and the school they attened and every school they have hired a clerk from. This solved my issue from before where there was limited connections. \n\nMy results were chaotic involving the entire history of Justices. I decided to focus on the current Justices on the Supreme Court. Further, I thought it would be interesting to split up and compare networks of conservative and liberal Justices(based on the party of the appointing president).\n\nThe Democrat Appointed Justices Network has 27 nodes, is directed, and has 243 total edges. The REpublican Appointed Justices Network has 35 nodes, is directed, and has 334 total edges.\"",
    "author": [
      {
        "name": "Justin Burnworth",
        "url": {}
      }
    ],
    "date": "2022-04-11",
    "categories": [],
    "contents": "\n\n\n\n\n\n\n\n\n\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 1 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 23.45622\n\n“There is a tiny possibility that the Democrat Appointed Justices Network transitivity observed value of 1 could be randomly generated conditional on only the size of the network, meaning that the observed transitivity is higher than would be expected from a random network. It is 23.46 standard deviations from what we would expect.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 1 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 23.45622\n\n“The Republican Appointed Justices Network is the exact same as the Demcorats.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 1 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 22.03544\n\n“The Democrat Appointed Justices network transitivity is 22.03 standard deviations from what we would expect compared to null conditional on size.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 1 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 29.37328\n\n“The Republican Appointed Justices network transitivity is 29.37 standard deviations from what we would expect compared to null conditional on size.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 2.636095 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 50.64118\n\n“The Democrat Appointed Justices network have a observed value of 2.64 degree centralization which is 52.68 standard deviations what we would expect from a random network null conditional on size.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 1000 \n\nObserved Value: 2.163495 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 48.32089\n\n“The Republican Appointed Justices network have a observed value of 2.16 degree centralization which is 49.29 standard deviations what we would expect from a random network null conditional on size.”\n\n\n[1] -3.406754\n\n“The Democrat Appointed Justices network has an observed value of 0 which is -3.01 standard deviations from what we would expect from a random network null conditional on size.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: size \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 0 \nPr(X>=Obs): 1 \nPr(X<=Obs): 0 \n\n[1] -3.404384\n\n“The Republican Appointed Justices network has an observed value of 0 which is -4.20 standard deviations from what we would expect from a random network null conditional on size.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: edges \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 1 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 57.79646\n\n“The Democrat Appointed Justices network has an observed value of 1 which is 57.81 standard deviations from what we would expect from a random network null conditional on size.”\n\n\nUnivariate Conditional Uniform Graph Test\n\nConditioning Method: edges \nGraph Type: digraph \nDiagonal Used: FALSE \nReplications: 100 \n\nObserved Value: 1 \nPr(X>=Obs): 0 \nPr(X<=Obs): 1 \n\n[1] 61.3773\n\n“The Republican Appointed Justices network has an observed value of 1 which is 60.39 standard deviations from what we would expect from a random network null conditional on size.”\n\n\n\n",
    "preview": "posts/elitism-of-the-supreme-court-liberals-v-conservatives/distill-preview.png",
    "last_modified": "2022-04-11T16:47:13-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsrpubscomburnworthj884412/",
    "title": "Elitism of the Supreme Court: Liberals v. Conservatives",
    "description": "\"After the feedback about this homework, I hopefully fixed my dataset. A tie now consists of a Justice and the school they attened and every school they have hired a clerk from. This solved my issue from before where there was limited connections. \n\nMy results were chaotic involving the entire history of Justices. I decided to focus on the current Justices on the Supreme Court. Further, I thought it would be interesting to split up and compare networks of conservative and liberal Justices(based on the party of the appointing president).\"",
    "author": [
      {
        "name": "Justin Burnworth",
        "url": {}
      }
    ],
    "date": "2022-04-03",
    "categories": [],
    "contents": "\n\n\n\n\n\n\n\n\n\n\n\n\n“Network graph for liberal Justices”\n\n\n\n“Network graph for conservative Justices.”\n\n\n\n\n\n\n“Leading Eigenvector Community Detection: Liberal”\n\n$`1`\n[1] \"Stephen Breyer\"    \"Boston University\" \"Boston College\"   \n[4] \"Duke\"              \"Georgia\"           \"GW\"               \n[7] \"North Carolina\"    \"Virginia\"          \"Yale\"             \n\n$`2`\n[1] \"Elena Kagan\"           \"Kentaji Brown Jackson\"\n[3] \"Berkeley\"              \"Harvard\"              \n[5] \"Stanford\"             \n\n$`3`\n [1] \"Sonia Sotomayor\" \"Georgetown\"      \"Michigan\"       \n [4] \"NYU\"             \"UCLA\"            \"Brooklyn\"       \n [7] \"Hawaii\"          \"Cornell\"         \"Northwestern\"   \n[10] \"Vanderbilt\"      \"Texas\"          \n\n$`4`\n[1] \"Chicago\"  \"Columbia\"\n\n\n“Spinglass Community Detection: Liberal”\n\n\n\n\n$`1`\n[1] \"Kentaji Brown Jackson\" \"Harvard\"              \n\n$`2`\n[1] \"Elena Kagan\" \"Berkeley\"    \"Chicago\"     \"Columbia\"   \n[5] \"Georgetown\"  \"Michigan\"    \"Stanford\"   \n\n$`3`\n[1] \"Sonia Sotomayor\" \"Duke\"            \"Yale\"           \n[4] \"Brooklyn\"        \"Hawaii\"          \"Cornell\"        \n[7] \"Northwestern\"    \"Vanderbilt\"      \"Texas\"          \n\n$`4`\n[1] \"Stephen Breyer\"    \"Boston University\" \"Boston College\"   \n[4] \"Georgia\"           \"GW\"                \"North Carolina\"   \n[7] \"NYU\"               \"UCLA\"              \"Virginia\"         \n\n\n\n\n\n\n\n\n\n\n“Spinglass Community Detection: Conservative”\n\n$`1`\n[1] \"Samuel Alito\" \"BYU\"          \"Duke\"         \"Georgetown\"  \n[5] \"Ohio State\"   \"Texas\"        \"UCLA\"         \"Vanderbilt\"  \n\n$`2`\n[1] \"Neil Gorsuch\"    \"Brett Kavanaugh\" \"Chicago\"        \n[4] \"Michigan\"        \"NYU\"             \"Yale\"           \n[7] \"Cornell\"         \"Iowa\"            \"Mississippi\"    \n\n$`3`\n[1] \"Clarence Thomas\" \"Columbia\"        \"Penn\"           \n[4] \"Berkeley\"        \"Georgia\"         \"Catholic\"       \n[7] \"Kansas\"          \"North Carolina\"  \"Seattle\"        \n\n$`4`\n[1] \"John Roberts\"      \"Amy Coney Barrett\" \"Harvard\"          \n[4] \"Stanford\"          \"Virginia\"          \"GW\"               \n[7] \"Northwestern\"      \"Notre Dame\"        \"yale\"             \n\n\n\n\n\n\n\n",
    "preview": "posts/httpsrpubscomburnworthj884412/distill-preview.png",
    "last_modified": "2022-04-03T21:52:06-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpswalidmedanigithubionetworks-blogposts2022-03-24-assignment7/",
    "title": "Assignment_7",
    "description": "Community Detection (Marriages between characters in the Game of Thrones Novels)",
    "author": [
      {
        "name": "Walid Medani",
        "url": "https://walidmedani.github.io/networks-blog/"
      }
    ],
    "date": "2022-04-03",
    "categories": [],
    "contents": "\nGame of Thrones Marriages\n\n\nplot.igraph(gotmarr.ig, \n            vertex.label.cex=1)\n\n\n\n\nNetwork Size\n\n\nvcount(gotmarr.ig)\n\n\n[1] 18\n\necount(gotmarr.ig)\n\n\n[1] 61\n\nAttributes\n\n\nis_bipartite(gotmarr.ig)\n\n\n[1] FALSE\n\nis_directed(gotmarr.ig)\n\n\n[1] FALSE\n\nis_weighted(gotmarr.ig)\n\n\n[1] TRUE\n\nvertex_attr_names(gotmarr.ig)\n\n\n[1] \"color\"        \"na\"           \"region\"       \"vertex.names\"\n[5] \"name\"        \n\nedge_attr_names(gotmarr.ig)\n\n\n[1] \"na\"     \"weight\"\n\nCommunity Detection\nFast and greedy\n\n\n#Run clustering algorithm: fast_greedy\ngot.fg<-cluster_fast_greedy(gotmarr.ig)\n#Retrieve list of nodes in communities\nigraph::groups(got.fg)\n\n\n$`1`\n[1] \"Arryn\" \"Tully\" \"Vale\" \n\n$`2`\n[1] \"Martell\"    \"Crownlands\" \"Essos\"      \"Targaryen\"  \"Dorne\"     \n\n$`3`\n[1] \"Baratheon\" \"Reach\"     \"Tyrell\"   \n\n$`4`\n[1] \"Stormlands\" \"Riverlands\" \"Frey\"      \n\n$`5`\n[1] \"Lannister\"   \"Westerlands\"\n\n$`6`\n[1] \"Stark\" \"North\"\n\nplot(got.fg,gotmarr.ig)\n\n\n\n\nWalktrap\n\n\nnodes.by.gp<-function(network.nodes, groupvar){\n  network.nodes%>%\n  select(-name)%>%\n  group_by_(groupvar) %>%\n  mutate(n=n())%>%\n  summarise_all(mean, na.rm=TRUE)%>%\n  as.matrix()%>%\n  print(digits=2)\n}\n\n\ngot.wt<-walktrap.community(gotmarr.ig)\nigraph::groups(got.wt)\n\n\n$`1`\n[1] \"Arryn\"      \"Tully\"      \"Vale\"       \"Stormlands\" \"Riverlands\"\n[6] \"Frey\"      \n\n$`2`\n[1] \"Martell\"    \"Crownlands\" \"Essos\"      \"Targaryen\"  \"Dorne\"     \n\n$`3`\n[1] \"Baratheon\" \"Reach\"     \"Tyrell\"   \n\n$`4`\n[1] \"Stark\" \"North\"\n\n$`5`\n[1] \"Lannister\"   \"Westerlands\"\n\ngotmarr.nodes$comm.wt<-got.wt$membership\nnodes.by.gp(gotmarr.nodes,\"comm.wt\")\n\n\n     comm.wt degree degree.wt bonpow betweenness close constraint n\n[1,]       1    5.5        23  -1.31         4.5  0.58       0.41 6\n[2,]       2    5.2        22  -0.79         9.3  0.57       0.62 5\n[3,]       3    6.0        22  -0.96         8.9  0.59       0.45 3\n[4,]       4    6.0        36  -0.29         6.9  0.59       0.53 2\n[5,]       5    5.5        25  -0.15         1.4  0.58       0.57 2\n\nplot(got.wt,gotmarr.ig)\n\n\n\n\nLabel Propagation\n\n\ngot.lab<-walktrap.community(gotmarr.ig)\nigraph::groups(got.lab)\n\n\n$`1`\n[1] \"Arryn\"      \"Tully\"      \"Vale\"       \"Stormlands\" \"Riverlands\"\n[6] \"Frey\"      \n\n$`2`\n[1] \"Martell\"    \"Crownlands\" \"Essos\"      \"Targaryen\"  \"Dorne\"     \n\n$`3`\n[1] \"Baratheon\" \"Reach\"     \"Tyrell\"   \n\n$`4`\n[1] \"Stark\" \"North\"\n\n$`5`\n[1] \"Lannister\"   \"Westerlands\"\n\ngotmarr.nodes$comm.lab<-got.lab$membership\nnodes.by.gp(gotmarr.nodes,\"comm.lab\")\n\n\n     comm.lab degree degree.wt bonpow betweenness close constraint\n[1,]        1    5.5        23  -1.31         4.5  0.58       0.41\n[2,]        2    5.2        22  -0.79         9.3  0.57       0.62\n[3,]        3    6.0        22  -0.96         8.9  0.59       0.45\n[4,]        4    6.0        36  -0.29         6.9  0.59       0.53\n[5,]        5    5.5        25  -0.15         1.4  0.58       0.57\n     comm.wt n\n[1,]       1 6\n[2,]       2 5\n[3,]       3 3\n[4,]       4 2\n[5,]       5 2\n\nplot(got.lab,gotmarr.ig)\n\n\n\n\nEdge betweeness\n\n\ngot.edge<-edge.betweenness.community(gotmarr.ig)\nigraph::groups(got.edge)\n\n\n$`1`\n[1] \"Arryn\"\n\n$`2`\n[1] \"Tully\"\n\n$`3`\n[1] \"Vale\"\n\n$`4`\n[1] \"Baratheon\"\n\n$`5`\n[1] \"Lannister\"\n\n$`6`\n[1] \"Martell\"\n\n$`7`\n[1] \"Reach\"\n\n$`8`\n[1] \"Stark\"\n\n$`9`\n[1] \"Stormlands\"\n\n$`10`\n[1] \"Tyrell\"\n\n$`11`\n[1] \"Crownlands\"\n\n$`12`\n[1] \"Essos\"\n\n$`13`\n[1] \"Riverlands\"\n\n$`14`\n[1] \"Westerlands\"\n\n$`15`\n[1] \"Frey\"\n\n$`16`\n[1] \"North\"\n\n$`17`\n[1] \"Targaryen\"\n\n$`18`\n[1] \"Dorne\"\n\ngotmarr.nodes$comm.edge<-got.edge$membership\nnodes.by.gp(gotmarr.nodes,\"comm.edge\")\n\n\n      comm.edge degree degree.wt bonpow betweenness close constraint\n [1,]         1      3        10 -1.113        0.67  0.50       0.51\n [2,]         2      5         5 -1.042        2.31  0.53       0.48\n [3,]         3      5        34 -1.085        2.51  0.57       0.36\n [4,]         4      7        10 -0.757       10.86  0.63       0.38\n [5,]         5      5        22 -0.086        0.89  0.55       0.65\n [6,]         6      3         8 -0.699        0.75  0.52       0.74\n [7,]         7      9        46 -1.442       15.76  0.68       0.32\n [8,]         8      9        33  0.057       13.56  0.68       0.40\n [9,]         9      4        10 -1.941        0.62  0.57       0.41\n[10,]        10      2        11 -0.685        0.00  0.45       0.66\n[11,]        11      6        17 -0.514        1.80  0.59       0.50\n[12,]        12      4        10 -0.956        2.15  0.55       0.70\n[13,]        13      6        32 -1.171        2.85  0.61       0.46\n[14,]        14      6        28 -0.214        1.97  0.61       0.49\n[15,]        15     10        48 -1.513       17.98  0.68       0.24\n[16,]        16      3        39 -0.628        0.31  0.50       0.65\n[17,]        17     12        73 -1.256       42.02  0.77       0.18\n[18,]        18      1         2 -0.500        0.00  0.45       1.00\n      comm.wt comm.lab n\n [1,]       1        1 1\n [2,]       1        1 1\n [3,]       1        1 1\n [4,]       3        3 1\n [5,]       5        5 1\n [6,]       2        2 1\n [7,]       3        3 1\n [8,]       4        4 1\n [9,]       1        1 1\n[10,]       3        3 1\n[11,]       2        2 1\n[12,]       2        2 1\n[13,]       1        1 1\n[14,]       5        5 1\n[15,]       1        1 1\n[16,]       4        4 1\n[17,]       2        2 1\n[18,]       2        2 1\n\nplot(got.edge,gotmarr.ig)\n\n\n\n\nEigenvector\n\n\ngot.eigen<-leading.eigenvector.community(gotmarr.ig)\nigraph::groups(got.eigen)\n\n\n$`1`\n[1] \"Arryn\"      \"Baratheon\"  \"Martell\"    \"Stormlands\" \"Crownlands\"\n[6] \"Essos\"      \"Targaryen\"  \"Dorne\"     \n\n$`2`\n[1] \"Tully\"      \"Vale\"       \"Riverlands\" \"Frey\"      \n\n$`3`\n[1] \"Reach\"\n\n$`4`\n[1] \"Stark\" \"North\"\n\n$`5`\n[1] \"Lannister\"   \"Westerlands\"\n\n$`6`\n[1] \"Tyrell\"\n\ngotmarr.nodes$comm.eigen<-got.eigen$membership\nnodes.by.gp(gotmarr.nodes,\"comm.eigen\")\n\n\n     comm.eigen degree degree.wt bonpow betweenness close constraint\n[1,]          1    5.0        18  -0.97         7.4  0.57       0.55\n[2,]          2    6.5        30  -1.20         6.4  0.60       0.38\n[3,]          3    9.0        46  -1.44        15.8  0.68       0.32\n[4,]          4    6.0        36  -0.29         6.9  0.59       0.53\n[5,]          5    5.5        25  -0.15         1.4  0.58       0.57\n[6,]          6    2.0        11  -0.69         0.0  0.45       0.66\n     comm.wt comm.lab comm.edge n\n[1,]     1.9      1.9       9.8 8\n[2,]     1.0      1.0       8.2 4\n[3,]     3.0      3.0       7.0 1\n[4,]     4.0      4.0      12.0 2\n[5,]     5.0      5.0       9.5 2\n[6,]     3.0      3.0      10.0 1\n\nplot(got.eigen,gotmarr.ig)\n\n\n\n\nModularity Scores\n\nfastgreedy   walktrap      label       edge      eigen \n 0.5173683  0.3289444  0.3289444  0.2051354  0.4572361 \n\nObservations\nFor the GOT marriages data set, the fast/greedy, walktrap, and label propagation made the most sense in identifying communities. Fast and greedy was the most successful method due to it partitioning “Baratheon”, “Reach”, and “Tyrell” as a separate community from the northern kingdoms of “Tully” and “Arryn” where there was a weak or no relationship between the factions.\nEdge betweeness failed to identify any communities within the dataset, whereas the Eigenvector failed to cluster some memberships such as the Reach being distinct from the Tyrell family (rulers of the region) and has strong marriage connections with the Baratheons.\n\n\n\n",
    "preview": "posts/httpswalidmedanigithubionetworks-blogposts2022-03-24-assignment7/assignment7_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2022-04-03T21:52:27-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpswalidmedanigithubionetworks-blogposts2022-03-10-assignment6/",
    "title": "Assignment_6",
    "description": "Roles and Blockmodels (Marriages between characters in the Game of Thrones Novels)",
    "author": [
      {
        "name": "Walid Medani",
        "url": "https://walidmedani.github.io/networks-blog/"
      }
    ],
    "date": "2022-04-03",
    "categories": [],
    "contents": "\n\n\n\n\n\n\nGame of Thrones Marriages\n\n\nplot.igraph(gotmarr.ig, \n            vertex.label.cex=1)\n\n\n\n\nNetwork Size\n\n\nvcount(gotmarr.ig)\n\n\n[1] 18\n\necount(gotmarr.ig)\n\n\n[1] 61\n\nAttributes\n\n\nis_bipartite(gotmarr.ig)\n\n\n[1] FALSE\n\nis_directed(gotmarr.ig)\n\n\n[1] FALSE\n\nis_weighted(gotmarr.ig)\n\n\n[1] TRUE\n\nvertex_attr_names(gotmarr.ig)\n\n\n[1] \"color\"        \"na\"           \"region\"       \"vertex.names\"\n[5] \"name\"        \n\nedge_attr_names(gotmarr.ig)\n\n\n[1] \"na\"     \"weight\"\n\nCentrality Measures\nBetweenness Centrality\n\n\nigraph::betweenness(gotmarr.ig, directed=TRUE)\n\n\n      Arryn       Tully        Vale   Baratheon   Lannister \n   0.000000   32.222222    0.000000   37.038889    2.705556 \n    Martell       Reach       Stark  Stormlands      Tyrell \n   1.250000   21.988889   52.366667    0.000000    0.000000 \n Crownlands       Essos  Riverlands Westerlands        Frey \n   8.000000    2.833333    0.000000   12.358333    7.063889 \n      North   Targaryen       Dorne \n   0.000000   16.569444    0.000000 \n\nBetweeness Centralization\n\n\ncentr_betw(gotmarr.ig,directed=T)$centralization\n\n\n[1] 0.2765138\n\nCloseness Centralization\n\n\ncentr_clo(gotmarr.ig)$centralization\n\n\n[1] 0.4240252\n\nStructural Equivalance\n\n\ngotmarr.nodes<-data.frame(name=gotmarr.stat%v%\"vertex.names\",\n        degree=sna::degree(gotmarr.stat,gmode=\"graph\"),\n        degree.wt=strength(gotmarr.ig),\n        bonpow=bonpow(gotmarr.stat),\n        betweenness=betweenness(gotmarr.stat, gmode=\"graph\"),\n        close=sna::closeness(gotmarr.stat, gmode=\"graph\"),\n        constraint=constraint(gotmarr.ig))\n\n#got partners\ngotmarr.se<-equiv.clust(gotmarr.stat, equiv.fun=\"sedist\", method=\"hamming\",mode=\"graph\")\n\n#plot equivalence clustering\nplot(gotmarr.se,labels=gotmarr.se$glabels)\nrect.hclust(gotmarr.se$cluster,h=15)\n\n\n\n\n\n\nplot.block<-function(x=blk_mod, main=NULL, cex.lab=1){\n  plot.sociomatrix(x$blocked.data, labels=list(x$plabels,x$plabels),\n                   main=main, drawlines = FALSE, cex.lab=cex.lab)\n  for (j in 2:length(x$plabels)) if (x$block.membership[j] !=\n                                     x$block.membership[j-1]) \n    abline(v = j - 0.5, h = j - 0.5, lty = 3, xpd=FALSE)\n}\n\n#blockmodel and select partitions\nblk_mod<-blockmodel(gotmarr.stat,gotmarr.se,k=4)\n#print blockmodel object\nblk_mod$block.model\n\n\n           Block 1    Block 2   Block 3   Block 4\nBlock 1 0.40000000 0.04166667 0.6666667 0.8333333\nBlock 2 0.04166667 0.17857143 0.5000000 0.6250000\nBlock 3 0.66666667 0.50000000 0.3333333 0.6666667\nBlock 4 0.83333333 0.62500000 0.6666667       NaN\n\n#plot blockmodel partitions\nplot.block(blk_mod,main=\"GoT Marriages, 4 Partitions\", cex.lab=.5)\n\n\n\n#blockmodel and select partitions\nblk_mod2<-blockmodel(gotmarr.stat,gotmarr.se,k=6)\n#print blockmodel object\nblk_mod2$block.model\n\n\n           Block 1    Block 2    Block 3   Block 4   Block 5\nBlock 1 0.40000000 0.03333333 0.05555556 0.3333333 0.8333333\nBlock 2 0.03333333 0.30000000 0.06666667 1.0000000 0.6000000\nBlock 3 0.05555556 0.06666667 0.33333333 0.0000000 0.1666667\nBlock 4 0.33333333 1.00000000 0.00000000       NaN 0.5000000\nBlock 5 0.83333333 0.60000000 0.16666667 0.5000000 0.0000000\nBlock 6 0.83333333 0.40000000 1.00000000 1.0000000 0.5000000\n          Block 6\nBlock 1 0.8333333\nBlock 2 0.4000000\nBlock 3 1.0000000\nBlock 4 1.0000000\nBlock 5 0.5000000\nBlock 6       NaN\n\n#plot blockmodel partitions\nplot.block(blk_mod2,main=\"GoT Marriages, 6 Partitions\", cex.lab=.5)\n\n\n\n\nPlotting the block role assignments gives us easy insight into observing marriages between the houses. We see that eastern continents and houses didn’t have many marriage connections between northern houses such as Tully, Vale, and Arryn yet they do with other northern houses such as the Starks and Frey.\n\n\n\n",
    "preview": "posts/httpswalidmedanigithubionetworks-blogposts2022-03-10-assignment6/assignment6_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2022-04-03T21:52:32-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpssvirguezgithubioichrnetworksposts2022-03-23-community-detection/",
    "title": "Community Detection",
    "description": "A comparison of community clusters in the IACtHR network using different algorithms",
    "author": [
      {
        "name": "Santiago Virgüez",
        "url": {}
      }
    ],
    "date": "2022-03-27",
    "categories": [],
    "contents": "\nRecap\naffiliation and one-mode network\nLet’s organize the data one more time. I’m gonna work again with the\none-matrix (actorxactor). As you might remember, this one-mode matrix is\na projection of the affiliation network (actorxcase), which means that\nthe actors (the nodes) are tied by virtue of their participation in the\nsame cases.\n\n\n#Affiliation network data\nlibrary(igraph)\nlibrary(tidyr)\ndata <- read.csv(\"Cleaned_Data.csv\")\n##New column count\ndata$count <- 1\n\n##Gather the data at case level\nlev_data <- pivot_wider(data,id_cols = CaseID, names_from = `Name`, \n                        values_from = count, values_fn = list(count = length), \n                        values_fill = list(count = 0))\n\n##transpose lev_data to have amici grouped by case\nlibrary(data.table)\nT_lev_data <- transpose(lev_data,)\nrownames(T_lev_data) <- colnames(lev_data)\ncolnames(T_lev_data) <- lev_data$CaseID\nT_lev_data <- T_lev_data[-c(1),]\n\n##create affiliation network graph using 'igraph'\nAff_network <- graph.incidence(T_lev_data)\n\n############\n\n#One-Mode matrix (actor x actor)\n\n##extracting the one-mode projection\nAff_network.pr <- bipartite.projection(Aff_network)\n\n##Actor x actor adjacency matrix\n\namici_net <- Aff_network.pr$proj1\n\namici_ad <- graph.adjacency(get.adjacency(amici_net, sparse = FALSE,attr = \"weight\"))\n\n\n\nBefore testing the different methods of community detection, it is\nimportant to remember that the one-mode matrix actor x actor is a\nprojection from an affiliation network where amici actors are tied to\nother amici by virtue of their participation in the same case. What this\nmeans is that we expect that the communities among the amici actors\ncorrespond to the cases where they participate together, with some\nexceptions due to multiple participation of some actors in different\ncases.\nSubstantively, the community detection algorithms will not provide\ntoo much new information about clustering but it would be interesting to\nsee the outcomes. We may expect that, because of the case clustering,\neach algorithm will provide a similar result in terms of the communities\nwithin the actor x actor network.\n\n\n#Node data frame\namici.nodes<-data.frame(name=V(amici_ad)$name,\n                              degree=igraph::degree(amici_ad),\n                              degree.wt=strength(amici_ad),\n                              betweenness=igraph::betweenness(amici_ad, directed=FALSE),\n                              close=igraph::closeness(amici_ad),\n                              constraint=constraint(amici_ad))\n\ntemp<-centr_eigen(amici_ad,directed=F)\namici.nodes$eigen<-temp$vector\n\n\n\nFast and\nGreedy Community Detection\n\n\ncomm.fg<-cluster_fast_greedy(as.undirected(amici_ad))\ncomm.fg\n\n\nIGRAPH clustering fast greedy, groups: 46, mod: 0.74\n+ groups:\n  $`1`\n   [1] \"Rights International\"                                                               \n   [2] \"The International Foundation for the Protection of Human Rights Defenders\"          \n   [3] \"World Organisation Against Torture\"                                                 \n   [4] \"Corporacion Colectivo de Abogados Jose Alvear Restrepo\"                             \n   [5] \"Movimiento Nacional de\\nDerechos Humanos\"                                           \n   [6] \"Una Ventana a la Libertad\"                                                          \n   [7] \"Comite de Familiares de Detenidos Desaparecidos\"                                    \n   [8] \"Robert F. Kennedy Memorial Center for Human Rights\"                                 \n   [9] \"Centro de Derechos Economicos y Sociales\"                                           \n  + ... omitted several groups/vertices\n\namici.nodes$comm.fg<-comm.fg$membership\n\nplot(comm.fg,amici_ad, vertex.label=NA)\n\n\n\n\nWalktrap Clustering\n\n\ncomm.wt<-walktrap.community(amici_ad)\ncomm.wt\n\n\nIGRAPH clustering walktrap, groups: 59, mod: 0.75\n+ groups:\n  $`1`\n  [1] \"Human Rights Clinic of the Universidad de Palermo\"                         \n  [2] \"Universidad Carlos III\"                                                    \n  [3] \"World Press Freedom Committee\"                                             \n  [4] \"Equal Rights Trust\"                                                        \n  [5] \"Asylum and Human Rights Clinic of the Boston University School of Law\"     \n  [6] \"Consejo Latinoamericano de Estudiosos de Derecho Internacional y Comparado\"\n  \n  $`2`\n   [1] \"Amnesty International\"                                              \n  + ... omitted several groups/vertices\n\namici.nodes$comm.wt<-comm.wt$membership\n\nplot(comm.wt,amici_ad, vertex.label=NA)\n\n\n\n\nLeading Label\nPropagation Community Detection\n\n\ncomm.lab<-label.propagation.community(as.undirected(amici_ad))\ncomm.lab\n\n\nIGRAPH clustering label propagation, groups: 57, mod: 0.75\n+ groups:\n  $`1`\n  [1] \"Fernando Linares\"\n  \n  $`2`\n   [1] \"Amnesty International\"                                              \n   [2] \"Legal Research Institute UNAM\"                                      \n   [3] \"International Reproductive and Sexual Health Law Program\"           \n   [4] \"University of Toronto Law School\"                                   \n   [5] \"Women's Link Worldwide\"                                             \n   [6] \"World Organization Against Torture\"                                 \n  + ... omitted several groups/vertices\n\namici.nodes$comm.wt<-comm.lab$membership\n\nplot(comm.lab,amici_ad, vertex.label=NA)\n\n\n\n\nComparing\nCommunity Partitions\nFrom what we saw in the figures, it is possible to say that all the\npartition methods detected similar communities. But to have a better\nsense of their differences, it is necessary to compare the outcomes.\n\n\nmods<-c(fastgreedy=modularity(comm.fg), walktrap=modularity(comm.wt), walktrap=modularity(comm.lab))\nmods\n\n\nfastgreedy   walktrap   walktrap \n 0.7357490  0.7469115  0.7505719 \n\nAs expected, all of the community detection methods seem to have\nsimilar value. Even when we compare them using different comparison\nmethods, the results seem to be very close to each other:\n\n\ncompare.algs<-function(alg.a,alg.b,compare.meth=c(\"vi\", \"nmi\", \"split.join\", \"rand\", \"adjusted.rand\")){\n  #create list of community objects and methods\n  comm.compare<-expand.grid(alg.a=alg.a, alg.b=alg.b, meth=compare.meth, result=NA, stringsAsFactors = FALSE)\n  #compare community partitions using a loop\n  for(i in 1:nrow(comm.compare)){\n    comm1<-get(comm.compare$alg.a[i])\n    comm2<-get(comm.compare$alg.b[i])\n    method<-comm.compare$meth[i]\n    comm.compare$result[i]<-compare(comm1, comm2, method)\n  }\n  return(comm.compare)\n}\n\ncompare.algs(alg.a=c(\"comm.fg\",\"comm.wt\"),alg.b=\"comm.lab\")\n\n\n     alg.a    alg.b          meth     result\n1  comm.fg comm.lab            vi  0.6598215\n2  comm.wt comm.lab            vi  0.1560076\n3  comm.fg comm.lab           nmi  0.8899333\n4  comm.wt comm.lab           nmi  0.9761064\n5  comm.fg comm.lab    split.join 95.0000000\n6  comm.wt comm.lab    split.join 21.0000000\n7  comm.fg comm.lab          rand  0.9529987\n8  comm.wt comm.lab          rand  0.9943683\n9  comm.fg comm.lab adjusted.rand  0.6931815\n10 comm.wt comm.lab adjusted.rand  0.9520560\n\n\n\n\n",
    "preview": "posts/httpssvirguezgithubioichrnetworksposts2022-03-23-community-detection/community-detection_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2022-03-27T15:50:22-04:00",
    "input_file": {},
    "preview_width": 2688,
    "preview_height": 2304
  },
  {
    "path": "posts/httpsrpubscomburnworthj881541/",
    "title": "How Elite is the Supreme Court?",
    "description": "\"After struggling most weeks trying to work with my dataset, I realized from our classes that I was looking at my dataset the wrong way. So, I decided to flip the format. I am now looking at just how elite the Supreme Court has been over its history. I do this by grouping Justices to the school they attended. It was such a relief to be able to run the different network commands and actually get graphs or data. I will save working on formating the graphs for the future when my brain recovers.\n\nThe new version of my dataset has 104 vertices. It is a directed network. It is not bipartite and there are a total of 76 edges.\n\nThis was my record for going the longest in R without running into a wall. I feel a lot more comfortable with R and using network analysis in R ,but I still have a lot of work to do when it comes to understanding the results.\"",
    "author": [
      {
        "name": "Justin Burnworth",
        "url": {}
      }
    ],
    "date": "2022-03-27",
    "categories": [],
    "contents": "\n\n\n\n\n\n\n\n\n\n\n Network attributes:\n  vertices = 104 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 76 \n    missing edges= 0 \n    non-missing edges= 76 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\n\n\n\n\n\n\n\n[1] \"merges\"     \"modularity\" \"membership\" \"names\"      \"algorithm\" \n[6] \"vcount\"    \nIGRAPH clustering fast greedy, groups: 28, mod: 0.9\n+ groups:\n  $`1`\n   [1] \"Harvard\"                   \"John Roberts\"             \n   [3] \"Anthony Kennedy\"           \"Horace Gray\"              \n   [5] \"Oliver Wendell Holmes Jr.\" \"Felix Frankfurter\"        \n   [7] \"Harry Blackmun\"            \"Stephen Breyer\"           \n   [9] \"William Brennan Jr.\"       \"David Souter\"             \n  [11] \"William Moody\"             \"Louis Brandeis\"           \n  [13] \"Elena Kagan\"               \"Edward Sanford\"           \n  [15] \"Harold Burton\"             \"Antonin Scalia\"           \n  [17] \"Neil Gorsuch\"             \n  + ... omitted several groups/vertices\n\n\n$`1`\n [1] \"Harvard\"                   \"John Roberts\"             \n [3] \"Anthony Kennedy\"           \"Horace Gray\"              \n [5] \"Oliver Wendell Holmes Jr.\" \"Felix Frankfurter\"        \n [7] \"Harry Blackmun\"            \"Stephen Breyer\"           \n [9] \"William Brennan Jr.\"       \"David Souter\"             \n[11] \"William Moody\"             \"Louis Brandeis\"           \n[13] \"Elena Kagan\"               \"Edward Sanford\"           \n[15] \"Harold Burton\"             \"Antonin Scalia\"           \n[17] \"Neil Gorsuch\"             \n\n$`2`\n [1] \"Apprenticeship\"        \"Rufus W. Peckham\"     \n [3] \"James F. Byrnes\"       \"Samuel Freeman Miller\"\n [5] \"Stanley Matthews\"      \"John Clarke\"          \n [7] \"Mahon Pitney\"          \"Stephen Field\"        \n [9] \"George Shiras Jr.\"     \"Wiliam R. Day\"        \n[11] \"Pierce Butler\"         \"Joseph Bradley\"       \n\n$`3`\n [1] \"Yale\"                  \"Morrison White\"       \n [3] \"Brett Kavanaugh\"       \"Abe Fortas\"           \n [5] \"William Burnham Woods\" \"Sonia Sotomayor\"      \n [7] \"Henry Billings Brown\"  \"Byron White\"          \n [9] \"Potter Stewart\"        \"Samuel Alito\"         \n[11] \"Clarence Thomas\"      \n\n$`4`\n[1] \"Columbia\"             \"Charles Evans Hughes\"\n[3] \"Harland F. Stone\"     \"Samuel Blatchford\"   \n[5] \"Benjamin N. Cardozo\"  \"William O. Douglas\"  \n[7] \"Stanley Reed\"         \"Ruth Bader Ginsburg\" \n[9] \"Joseph McKenna\"      \n\n$`5`\n[1] \"Cumberland School of Law\" \"Howell Edmunds Jackson\"  \n[3] \"Horace Lurton\"           \n\n$`6`\n[1] \"Washington and Lee\"  \"Lewis F. Powell Jr.\" \"Joseph Lamar\"       \n\n$`7`\n[1] \"Cincinnati\"          \"William Howard Taft\" \"Willis Van Devanter\"\n\n$`8`\n[1] \"Albany\"            \"David Brewer\"      \"Robert H. Jackson\"\n\n$`9`\n[1] \"Michigan\"          \"George Sutherland\" \"Frank Murphy\"     \n\n$`10`\n[1] \"Northwestern\"      \"Arthur Goldberg\"   \"John Paul Stevens\"\n\n$`11`\n[1] \"Stanford\"            \"William Rehnquist\"   \"Sandra Day O'Connor\"\n\n$`12`\n[1] \"Colorado\"       \"Wiley Rutledge\"\n\n$`13`\n[1] \"Virginia\"         \"James McReynolds\"\n\n$`14`\n[1] \"Transylvania University\" \"John Marshall Harlan\"   \n\n$`15`\n[1] \"Texas\"     \"Tom Clark\"\n\n$`16`\n[1] \"Berkeley\"    \"Earl Warren\"\n\n$`17`\n[1] \"St. Paul College of Law\" \"Warren E. Burger\"       \n\n$`18`\n[1] \"School\"  \"Justice\"\n\n$`19`\n[1] \"Emory University\" \"Lucius Lamar\"    \n\n$`20`\n[1] \"Centre Colllege\" \"Fred M. Vinson\" \n\n$`21`\n[1] \"Tulane\"               \"Edward Douglas White\"\n\n$`22`\n[1] \"Kansas City\"       \"Charles Whittaker\"\n\n$`23`\n[1] \"Indiana\"        \"Sherman Minton\"\n\n$`24`\n[1] \"Penn\"         \"Owen Roberts\"\n\n$`25`\n[1] \"Howard\"            \"Thurgood Marhsall\"\n\n$`26`\n[1] \"Notre Dame\"        \"Amy Coney Barrett\"\n\n$`27`\n[1] \"New York Law School\"     \"John Marshall Harlan II\"\n\n$`28`\n[1] \"Bowdoin College\" \"Melville Fuller\"\n\n\n\nNetwork Blockmodel:\n\nBlock membership:\n\n  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17 \n  8   2  16  28  20   7  12   4   5  19   1  25  23  22   9  27  10 \n 18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34 \n 26  24  18  17  11  15  14  21  13   6   3   8   8   2   2   2   2 \n 35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51 \n  2   2   2   2   2   2   2  16  28  20   7   7  12   4   4   4   4 \n 52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68 \n  4   4   4   4   5   5  19   1   1   1   1   1   1   1   1   1   1 \n 69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85 \n  1   1   1   1   1   1  25  23  22   9   9  27  10  10  26  24  18 \n 86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 \n 17  11  11  15  14  21  13   6   6   3   3   3   3   3   3   3   3 \n103 104 \n  3   3 \n\nReduced form blockmodel:\n\n     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 \n            Block 1    Block 2    Block 3   Block 4   Block 5\nBlock 1  0.05882353 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 2  0.00000000 0.08333333 0.00000000 0.0000000 0.0000000\nBlock 3  0.00000000 0.00000000 0.09090909 0.0000000 0.0000000\nBlock 4  0.00000000 0.00000000 0.00000000 0.1111111 0.0000000\nBlock 5  0.00000000 0.00000000 0.00000000 0.0000000 0.3333333\nBlock 6  0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 7  0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 8  0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 9  0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 10 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 11 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 12 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 13 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 14 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 15 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 16 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 17 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 18 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 19 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 20 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 21 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 22 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 23 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 24 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 25 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 26 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 27 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 28 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\n           Block 6   Block 7   Block 8   Block 9  Block 10  Block 11\nBlock 1  0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 2  0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 3  0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 4  0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 5  0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 6  0.3333333 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 7  0.0000000 0.3333333 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 8  0.0000000 0.0000000 0.3333333 0.0000000 0.0000000 0.0000000\nBlock 9  0.0000000 0.0000000 0.0000000 0.3333333 0.0000000 0.0000000\nBlock 10 0.0000000 0.0000000 0.0000000 0.0000000 0.3333333 0.0000000\nBlock 11 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.3333333\nBlock 12 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 13 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 14 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 15 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 16 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 17 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 18 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 19 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 20 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 21 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 22 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 23 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 24 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 25 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 26 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 27 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 28 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\n         Block 12 Block 13 Block 14 Block 15 Block 16 Block 17\nBlock 1       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 2       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 3       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 4       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 5       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 6       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 7       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 8       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 9       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 10      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 11      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 12      0.5      0.0      0.0      0.0      0.0      0.0\nBlock 13      0.0      0.5      0.0      0.0      0.0      0.0\nBlock 14      0.0      0.0      0.5      0.0      0.0      0.0\nBlock 15      0.0      0.0      0.0      0.5      0.0      0.0\nBlock 16      0.0      0.0      0.0      0.0      0.5      0.0\nBlock 17      0.0      0.0      0.0      0.0      0.0      0.5\nBlock 18      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 19      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 20      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 21      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 22      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 23      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 24      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 25      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 26      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 27      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 28      0.0      0.0      0.0      0.0      0.0      0.0\n         Block 18 Block 19 Block 20 Block 21 Block 22 Block 23\nBlock 1       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 2       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 3       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 4       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 5       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 6       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 7       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 8       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 9       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 10      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 11      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 12      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 13      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 14      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 15      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 16      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 17      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 18      0.5      0.0      0.0      0.0      0.0      0.0\nBlock 19      0.0      0.5      0.0      0.0      0.0      0.0\nBlock 20      0.0      0.0      0.5      0.0      0.0      0.0\nBlock 21      0.0      0.0      0.0      0.5      0.0      0.0\nBlock 22      0.0      0.0      0.0      0.0      0.5      0.0\nBlock 23      0.0      0.0      0.0      0.0      0.0      0.5\nBlock 24      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 25      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 26      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 27      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 28      0.0      0.0      0.0      0.0      0.0      0.0\n         Block 24 Block 25 Block 26 Block 27 Block 28\nBlock 1       0.0      0.0      0.0      0.0      0.0\nBlock 2       0.0      0.0      0.0      0.0      0.0\nBlock 3       0.0      0.0      0.0      0.0      0.0\nBlock 4       0.0      0.0      0.0      0.0      0.0\nBlock 5       0.0      0.0      0.0      0.0      0.0\nBlock 6       0.0      0.0      0.0      0.0      0.0\nBlock 7       0.0      0.0      0.0      0.0      0.0\nBlock 8       0.0      0.0      0.0      0.0      0.0\nBlock 9       0.0      0.0      0.0      0.0      0.0\nBlock 10      0.0      0.0      0.0      0.0      0.0\nBlock 11      0.0      0.0      0.0      0.0      0.0\nBlock 12      0.0      0.0      0.0      0.0      0.0\nBlock 13      0.0      0.0      0.0      0.0      0.0\nBlock 14      0.0      0.0      0.0      0.0      0.0\nBlock 15      0.0      0.0      0.0      0.0      0.0\nBlock 16      0.0      0.0      0.0      0.0      0.0\nBlock 17      0.0      0.0      0.0      0.0      0.0\nBlock 18      0.0      0.0      0.0      0.0      0.0\nBlock 19      0.0      0.0      0.0      0.0      0.0\nBlock 20      0.0      0.0      0.0      0.0      0.0\nBlock 21      0.0      0.0      0.0      0.0      0.0\nBlock 22      0.0      0.0      0.0      0.0      0.0\nBlock 23      0.0      0.0      0.0      0.0      0.0\nBlock 24      0.5      0.0      0.0      0.0      0.0\nBlock 25      0.0      0.5      0.0      0.0      0.0\nBlock 26      0.0      0.0      0.5      0.0      0.0\nBlock 27      0.0      0.0      0.0      0.5      0.0\nBlock 28      0.0      0.0      0.0      0.0      0.5\n            Block 1    Block 2    Block 3   Block 4   Block 5\nBlock 1  0.05882353 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 2  0.00000000 0.08333333 0.00000000 0.0000000 0.0000000\nBlock 3  0.00000000 0.00000000 0.09090909 0.0000000 0.0000000\nBlock 4  0.00000000 0.00000000 0.00000000 0.1111111 0.0000000\nBlock 5  0.00000000 0.00000000 0.00000000 0.0000000 0.3333333\nBlock 6  0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 7  0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 8  0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 9  0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 10 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 11 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 12 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 13 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 14 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 15 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 16 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 17 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 18 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 19 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 20 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 21 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 22 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 23 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 24 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 25 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 26 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 27 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\nBlock 28 0.00000000 0.00000000 0.00000000 0.0000000 0.0000000\n           Block 6   Block 7   Block 8   Block 9  Block 10  Block 11\nBlock 1  0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 2  0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 3  0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 4  0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 5  0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 6  0.3333333 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 7  0.0000000 0.3333333 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 8  0.0000000 0.0000000 0.3333333 0.0000000 0.0000000 0.0000000\nBlock 9  0.0000000 0.0000000 0.0000000 0.3333333 0.0000000 0.0000000\nBlock 10 0.0000000 0.0000000 0.0000000 0.0000000 0.3333333 0.0000000\nBlock 11 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.3333333\nBlock 12 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 13 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 14 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 15 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 16 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 17 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 18 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 19 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 20 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 21 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 22 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 23 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 24 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 25 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 26 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 27 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\nBlock 28 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\n         Block 12 Block 13 Block 14 Block 15 Block 16 Block 17\nBlock 1       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 2       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 3       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 4       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 5       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 6       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 7       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 8       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 9       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 10      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 11      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 12      0.5      0.0      0.0      0.0      0.0      0.0\nBlock 13      0.0      0.5      0.0      0.0      0.0      0.0\nBlock 14      0.0      0.0      0.5      0.0      0.0      0.0\nBlock 15      0.0      0.0      0.0      0.5      0.0      0.0\nBlock 16      0.0      0.0      0.0      0.0      0.5      0.0\nBlock 17      0.0      0.0      0.0      0.0      0.0      0.5\nBlock 18      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 19      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 20      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 21      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 22      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 23      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 24      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 25      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 26      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 27      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 28      0.0      0.0      0.0      0.0      0.0      0.0\n         Block 18 Block 19 Block 20 Block 21 Block 22 Block 23\nBlock 1       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 2       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 3       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 4       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 5       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 6       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 7       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 8       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 9       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 10      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 11      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 12      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 13      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 14      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 15      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 16      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 17      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 18      0.5      0.0      0.0      0.0      0.0      0.0\nBlock 19      0.0      0.5      0.0      0.0      0.0      0.0\nBlock 20      0.0      0.0      0.5      0.0      0.0      0.0\nBlock 21      0.0      0.0      0.0      0.5      0.0      0.0\nBlock 22      0.0      0.0      0.0      0.0      0.5      0.0\nBlock 23      0.0      0.0      0.0      0.0      0.0      0.5\nBlock 24      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 25      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 26      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 27      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 28      0.0      0.0      0.0      0.0      0.0      0.0\n         Block 24 Block 25 Block 26 Block 27 Block 28\nBlock 1       0.0      0.0      0.0      0.0      0.0\nBlock 2       0.0      0.0      0.0      0.0      0.0\nBlock 3       0.0      0.0      0.0      0.0      0.0\nBlock 4       0.0      0.0      0.0      0.0      0.0\nBlock 5       0.0      0.0      0.0      0.0      0.0\nBlock 6       0.0      0.0      0.0      0.0      0.0\nBlock 7       0.0      0.0      0.0      0.0      0.0\nBlock 8       0.0      0.0      0.0      0.0      0.0\nBlock 9       0.0      0.0      0.0      0.0      0.0\nBlock 10      0.0      0.0      0.0      0.0      0.0\nBlock 11      0.0      0.0      0.0      0.0      0.0\nBlock 12      0.0      0.0      0.0      0.0      0.0\nBlock 13      0.0      0.0      0.0      0.0      0.0\nBlock 14      0.0      0.0      0.0      0.0      0.0\nBlock 15      0.0      0.0      0.0      0.0      0.0\nBlock 16      0.0      0.0      0.0      0.0      0.0\nBlock 17      0.0      0.0      0.0      0.0      0.0\nBlock 18      0.0      0.0      0.0      0.0      0.0\nBlock 19      0.0      0.0      0.0      0.0      0.0\nBlock 20      0.0      0.0      0.0      0.0      0.0\nBlock 21      0.0      0.0      0.0      0.0      0.0\nBlock 22      0.0      0.0      0.0      0.0      0.0\nBlock 23      0.0      0.0      0.0      0.0      0.0\nBlock 24      0.5      0.0      0.0      0.0      0.0\nBlock 25      0.0      0.5      0.0      0.0      0.0\nBlock 26      0.0      0.0      0.5      0.0      0.0\nBlock 27      0.0      0.0      0.0      0.5      0.0\nBlock 28      0.0      0.0      0.0      0.0      0.5\n         Block 1 Block 2 Block 3 Block 4 Block 5 Block 6 Block 7\nBlock 1    0.059   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 2    0.000   0.083   0.000    0.00    0.00    0.00    0.00\nBlock 3    0.000   0.000   0.091    0.00    0.00    0.00    0.00\nBlock 4    0.000   0.000   0.000    0.11    0.00    0.00    0.00\nBlock 5    0.000   0.000   0.000    0.00    0.33    0.00    0.00\nBlock 6    0.000   0.000   0.000    0.00    0.00    0.33    0.00\nBlock 7    0.000   0.000   0.000    0.00    0.00    0.00    0.33\nBlock 8    0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 9    0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 10   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 11   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 12   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 13   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 14   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 15   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 16   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 17   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 18   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 19   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 20   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 21   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 22   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 23   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 24   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 25   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 26   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 27   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 28   0.000   0.000   0.000    0.00    0.00    0.00    0.00\n         Block 8 Block 9 Block 10 Block 11 Block 12 Block 13 Block 14\nBlock 1     0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 2     0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 3     0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 4     0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 5     0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 6     0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 7     0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 8     0.33    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 9     0.00    0.33     0.00     0.00      0.0      0.0      0.0\nBlock 10    0.00    0.00     0.33     0.00      0.0      0.0      0.0\nBlock 11    0.00    0.00     0.00     0.33      0.0      0.0      0.0\nBlock 12    0.00    0.00     0.00     0.00      0.5      0.0      0.0\nBlock 13    0.00    0.00     0.00     0.00      0.0      0.5      0.0\nBlock 14    0.00    0.00     0.00     0.00      0.0      0.0      0.5\nBlock 15    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 16    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 17    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 18    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 19    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 20    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 21    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 22    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 23    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 24    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 25    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 26    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 27    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 28    0.00    0.00     0.00     0.00      0.0      0.0      0.0\n         Block 15 Block 16 Block 17 Block 18 Block 19 Block 20\nBlock 1       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 2       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 3       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 4       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 5       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 6       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 7       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 8       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 9       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 10      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 11      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 12      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 13      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 14      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 15      0.5      0.0      0.0      0.0      0.0      0.0\nBlock 16      0.0      0.5      0.0      0.0      0.0      0.0\nBlock 17      0.0      0.0      0.5      0.0      0.0      0.0\nBlock 18      0.0      0.0      0.0      0.5      0.0      0.0\nBlock 19      0.0      0.0      0.0      0.0      0.5      0.0\nBlock 20      0.0      0.0      0.0      0.0      0.0      0.5\nBlock 21      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 22      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 23      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 24      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 25      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 26      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 27      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 28      0.0      0.0      0.0      0.0      0.0      0.0\n         Block 21 Block 22 Block 23 Block 24 Block 25 Block 26\nBlock 1       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 2       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 3       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 4       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 5       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 6       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 7       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 8       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 9       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 10      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 11      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 12      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 13      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 14      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 15      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 16      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 17      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 18      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 19      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 20      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 21      0.5      0.0      0.0      0.0      0.0      0.0\nBlock 22      0.0      0.5      0.0      0.0      0.0      0.0\nBlock 23      0.0      0.0      0.5      0.0      0.0      0.0\nBlock 24      0.0      0.0      0.0      0.5      0.0      0.0\nBlock 25      0.0      0.0      0.0      0.0      0.5      0.0\nBlock 26      0.0      0.0      0.0      0.0      0.0      0.5\nBlock 27      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 28      0.0      0.0      0.0      0.0      0.0      0.0\n         Block 27 Block 28\nBlock 1       0.0      0.0\nBlock 2       0.0      0.0\nBlock 3       0.0      0.0\nBlock 4       0.0      0.0\nBlock 5       0.0      0.0\nBlock 6       0.0      0.0\nBlock 7       0.0      0.0\nBlock 8       0.0      0.0\nBlock 9       0.0      0.0\nBlock 10      0.0      0.0\nBlock 11      0.0      0.0\nBlock 12      0.0      0.0\nBlock 13      0.0      0.0\nBlock 14      0.0      0.0\nBlock 15      0.0      0.0\nBlock 16      0.0      0.0\nBlock 17      0.0      0.0\nBlock 18      0.0      0.0\nBlock 19      0.0      0.0\nBlock 20      0.0      0.0\nBlock 21      0.0      0.0\nBlock 22      0.0      0.0\nBlock 23      0.0      0.0\nBlock 24      0.0      0.0\nBlock 25      0.0      0.0\nBlock 26      0.0      0.0\nBlock 27      0.5      0.0\nBlock 28      0.0      0.5\n\n\n  [1]  8  2 16 28 20  7 12  4  5 19  1 25 23 22  9 27 10 26 24 18 17\n [22] 11 15 14 21 13  6  3  8  8  2  2  2  2  2  2  2  2  2  2  2 16\n [43] 28 20  7  7 12  4  4  4  4  4  4  4  4  5  5 19  1  1  1  1  1\n [64]  1  1  1  1  1  1  1  1  1  1  1 25 23 22  9  9 27 10 10 26 24\n [85] 18 17 11 11 15 14 21 13  6  6  3  3  3  3  3  3  3  3  3  3\n  [1] \"Albany\"                    \"Apprenticeship\"           \n  [3] \"Berkeley\"                  \"Bowdoin College\"          \n  [5] \"Centre Colllege\"           \"Cincinnati\"               \n  [7] \"Colorado\"                  \"Columbia\"                 \n  [9] \"Cumberland School of Law\"  \"Emory University\"         \n [11] \"Harvard\"                   \"Howard\"                   \n [13] \"Indiana\"                   \"Kansas City\"              \n [15] \"Michigan\"                  \"New York Law School\"      \n [17] \"Northwestern\"              \"Notre Dame\"               \n [19] \"Penn\"                      \"School\"                   \n [21] \"St. Paul College of Law\"   \"Stanford\"                 \n [23] \"Texas\"                     \"Transylvania University\"  \n [25] \"Tulane\"                    \"Virginia\"                 \n [27] \"Washington and Lee\"        \"Yale\"                     \n [29] \"David Brewer\"              \"Robert H. Jackson\"        \n [31] \"Rufus W. Peckham\"          \"James F. Byrnes\"          \n [33] \"Samuel Freeman Miller\"     \"Stanley Matthews\"         \n [35] \"John Clarke\"               \"Mahon Pitney\"             \n [37] \"Stephen Field\"             \"George Shiras Jr.\"        \n [39] \"Wiliam R. Day\"             \"Pierce Butler\"            \n [41] \"Joseph Bradley\"            \"Earl Warren\"              \n [43] \"Melville Fuller\"           \"Fred M. Vinson\"           \n [45] \"William Howard Taft\"       \"Willis Van Devanter\"      \n [47] \"Wiley Rutledge\"            \"Charles Evans Hughes\"     \n [49] \"Harland F. Stone\"          \"Samuel Blatchford\"        \n [51] \"Benjamin N. Cardozo\"       \"William O. Douglas\"       \n [53] \"Stanley Reed\"              \"Ruth Bader Ginsburg\"      \n [55] \"Joseph McKenna\"            \"Howell Edmunds Jackson\"   \n [57] \"Horace Lurton\"             \"Lucius Lamar\"             \n [59] \"John Roberts\"              \"Anthony Kennedy\"          \n [61] \"Horace Gray\"               \"Oliver Wendell Holmes Jr.\"\n [63] \"Felix Frankfurter\"         \"Harry Blackmun\"           \n [65] \"Stephen Breyer\"            \"William Brennan Jr.\"      \n [67] \"David Souter\"              \"William Moody\"            \n [69] \"Louis Brandeis\"            \"Elena Kagan\"              \n [71] \"Edward Sanford\"            \"Harold Burton\"            \n [73] \"Antonin Scalia\"            \"Neil Gorsuch\"             \n [75] \"Thurgood Marhsall\"         \"Sherman Minton\"           \n [77] \"Charles Whittaker\"         \"George Sutherland\"        \n [79] \"Frank Murphy\"              \"John Marshall Harlan II\"  \n [81] \"Arthur Goldberg\"           \"John Paul Stevens\"        \n [83] \"Amy Coney Barrett\"         \"Owen Roberts\"             \n [85] \"Justice\"                   \"Warren E. Burger\"         \n [87] \"William Rehnquist\"         \"Sandra Day O'Connor\"      \n [89] \"Tom Clark\"                 \"John Marshall Harlan\"     \n [91] \"Edward Douglas White\"      \"James McReynolds\"         \n [93] \"Lewis F. Powell Jr.\"       \"Joseph Lamar\"             \n [95] \"Morrison White\"            \"Brett Kavanaugh\"          \n [97] \"Abe Fortas\"                \"William Burnham Woods\"    \n [99] \"Sonia Sotomayor\"           \"Henry Billings Brown\"     \n[101] \"Byron White\"               \"Potter Stewart\"           \n[103] \"Samuel Alito\"              \"Clarence Thomas\"          \n                   Albany            Apprenticeship \n                        8                         2 \n                 Berkeley           Bowdoin College \n                       16                        28 \n          Centre Colllege                Cincinnati \n                       20                         7 \n                 Colorado                  Columbia \n                       12                         4 \n Cumberland School of Law          Emory University \n                        5                        19 \n                  Harvard                    Howard \n                        1                        25 \n                  Indiana               Kansas City \n                       23                        22 \n                 Michigan       New York Law School \n                        9                        27 \n             Northwestern                Notre Dame \n                       10                        26 \n                     Penn                    School \n                       24                        18 \n  St. Paul College of Law                  Stanford \n                       17                        11 \n                    Texas   Transylvania University \n                       15                        14 \n                   Tulane                  Virginia \n                       21                        13 \n       Washington and Lee                      Yale \n                        6                         3 \n             David Brewer         Robert H. Jackson \n                        8                         8 \n         Rufus W. Peckham           James F. Byrnes \n                        2                         2 \n    Samuel Freeman Miller          Stanley Matthews \n                        2                         2 \n              John Clarke              Mahon Pitney \n                        2                         2 \n            Stephen Field         George Shiras Jr. \n                        2                         2 \n            Wiliam R. Day             Pierce Butler \n                        2                         2 \n           Joseph Bradley               Earl Warren \n                        2                        16 \n          Melville Fuller            Fred M. Vinson \n                       28                        20 \n      William Howard Taft       Willis Van Devanter \n                        7                         7 \n           Wiley Rutledge      Charles Evans Hughes \n                       12                         4 \n         Harland F. Stone         Samuel Blatchford \n                        4                         4 \n      Benjamin N. Cardozo        William O. Douglas \n                        4                         4 \n             Stanley Reed       Ruth Bader Ginsburg \n                        4                         4 \n           Joseph McKenna    Howell Edmunds Jackson \n                        4                         5 \n            Horace Lurton              Lucius Lamar \n                        5                        19 \n             John Roberts           Anthony Kennedy \n                        1                         1 \n              Horace Gray Oliver Wendell Holmes Jr. \n                        1                         1 \n        Felix Frankfurter            Harry Blackmun \n                        1                         1 \n           Stephen Breyer       William Brennan Jr. \n                        1                         1 \n             David Souter             William Moody \n                        1                         1 \n           Louis Brandeis               Elena Kagan \n                        1                         1 \n           Edward Sanford             Harold Burton \n                        1                         1 \n           Antonin Scalia              Neil Gorsuch \n                        1                         1 \n        Thurgood Marhsall            Sherman Minton \n                       25                        23 \n        Charles Whittaker         George Sutherland \n                       22                         9 \n             Frank Murphy   John Marshall Harlan II \n                        9                        27 \n          Arthur Goldberg         John Paul Stevens \n                       10                        10 \n        Amy Coney Barrett              Owen Roberts \n                       26                        24 \n                  Justice          Warren E. Burger \n                       18                        17 \n        William Rehnquist       Sandra Day O'Connor \n                       11                        11 \n                Tom Clark      John Marshall Harlan \n                       15                        14 \n     Edward Douglas White          James McReynolds \n                       21                        13 \n      Lewis F. Powell Jr.              Joseph Lamar \n                        6                         6 \n           Morrison White           Brett Kavanaugh \n                        3                         3 \n               Abe Fortas     William Burnham Woods \n                        3                         3 \n          Sonia Sotomayor      Henry Billings Brown \n                        3                         3 \n              Byron White            Potter Stewart \n                        3                         3 \n             Samuel Alito           Clarence Thomas \n                        3                         3 \nNULL\n\n\n      comm.fg degree degree.wt betweenness  close constraint  n\n [1,]       1    1.9       1.9           0 0.0091       0.94 17\n [2,]       2    1.8       1.8           0 0.0089       0.92 12\n [3,]       3    1.8       1.8           0 0.0088       0.92 11\n [4,]       4    1.8       1.8           0 0.0086       0.90  9\n [5,]       5    1.3       1.3           0 0.0065       0.83  3\n [6,]       6    1.3       1.3           0 0.0065       0.83  3\n [7,]       7    1.3       1.3           0 0.0065       0.83  3\n [8,]       8    1.3       1.3           0 0.0065       0.83  3\n [9,]       9    1.3       1.3           0 0.0065       0.83  3\n[10,]      10    1.3       1.3           0 0.0065       0.83  3\n[11,]      11    1.3       1.3           0 0.0065       0.83  3\n[12,]      12    1.0       1.0           0 0.0049       1.00  2\n[13,]      13    1.0       1.0           0 0.0049       1.00  2\n[14,]      14    1.0       1.0           0 0.0049       1.00  2\n[15,]      15    1.0       1.0           0 0.0049       1.00  2\n[16,]      16    1.0       1.0           0 0.0049       1.00  2\n[17,]      17    1.0       1.0           0 0.0049       1.00  2\n[18,]      18    1.0       1.0           0 0.0049       1.00  2\n[19,]      19    1.0       1.0           0 0.0049       1.00  2\n[20,]      20    1.0       1.0           0 0.0049       1.00  2\n[21,]      21    1.0       1.0           0 0.0049       1.00  2\n[22,]      22    1.0       1.0           0 0.0049       1.00  2\n[23,]      23    1.0       1.0           0 0.0049       1.00  2\n[24,]      24    1.0       1.0           0 0.0049       1.00  2\n[25,]      25    1.0       1.0           0 0.0049       1.00  2\n[26,]      26    1.0       1.0           0 0.0049       1.00  2\n[27,]      27    1.0       1.0           0 0.0049       1.00  2\n[28,]      28    1.0       1.0           0 0.0049       1.00  2\n\n\n\n\n\n$`1`\n [1] \"Harvard\"                   \"John Roberts\"             \n [3] \"Anthony Kennedy\"           \"Horace Gray\"              \n [5] \"Oliver Wendell Holmes Jr.\" \"Felix Frankfurter\"        \n [7] \"Harry Blackmun\"            \"Stephen Breyer\"           \n [9] \"William Brennan Jr.\"       \"David Souter\"             \n[11] \"William Moody\"             \"Louis Brandeis\"           \n[13] \"Elena Kagan\"               \"Edward Sanford\"           \n[15] \"Harold Burton\"             \"Antonin Scalia\"           \n[17] \"Neil Gorsuch\"             \n\n$`2`\n [1] \"Apprenticeship\"        \"Rufus W. Peckham\"     \n [3] \"James F. Byrnes\"       \"Samuel Freeman Miller\"\n [5] \"Stanley Matthews\"      \"John Clarke\"          \n [7] \"Mahon Pitney\"          \"Stephen Field\"        \n [9] \"George Shiras Jr.\"     \"Wiliam R. Day\"        \n[11] \"Pierce Butler\"         \"Joseph Bradley\"       \n\n$`3`\n [1] \"Yale\"                  \"Morrison White\"       \n [3] \"Brett Kavanaugh\"       \"Abe Fortas\"           \n [5] \"William Burnham Woods\" \"Sonia Sotomayor\"      \n [7] \"Henry Billings Brown\"  \"Byron White\"          \n [9] \"Potter Stewart\"        \"Samuel Alito\"         \n[11] \"Clarence Thomas\"      \n\n$`4`\n[1] \"Columbia\"             \"Charles Evans Hughes\"\n[3] \"Harland F. Stone\"     \"Samuel Blatchford\"   \n[5] \"Benjamin N. Cardozo\"  \"William O. Douglas\"  \n[7] \"Stanley Reed\"         \"Ruth Bader Ginsburg\" \n[9] \"Joseph McKenna\"      \n\n$`5`\n[1] \"Washington and Lee\"  \"Lewis F. Powell Jr.\" \"Joseph Lamar\"       \n\n$`6`\n[1] \"Cincinnati\"          \"William Howard Taft\" \"Willis Van Devanter\"\n\n$`7`\n[1] \"Northwestern\"      \"Arthur Goldberg\"   \"John Paul Stevens\"\n\n$`8`\n[1] \"Albany\"            \"David Brewer\"      \"Robert H. Jackson\"\n\n$`9`\n[1] \"Cumberland School of Law\" \"Howell Edmunds Jackson\"  \n[3] \"Horace Lurton\"           \n\n$`10`\n[1] \"Stanford\"            \"William Rehnquist\"   \"Sandra Day O'Connor\"\n\n$`11`\n[1] \"Michigan\"          \"George Sutherland\" \"Frank Murphy\"     \n\n$`12`\n[1] \"Centre Colllege\" \"Fred M. Vinson\" \n\n$`13`\n[1] \"Emory University\" \"Lucius Lamar\"    \n\n$`14`\n[1] \"St. Paul College of Law\" \"Warren E. Burger\"       \n\n$`15`\n[1] \"Texas\"     \"Tom Clark\"\n\n$`16`\n[1] \"Bowdoin College\" \"Melville Fuller\"\n\n$`17`\n[1] \"Notre Dame\"        \"Amy Coney Barrett\"\n\n$`18`\n[1] \"Penn\"         \"Owen Roberts\"\n\n$`19`\n[1] \"School\"  \"Justice\"\n\n$`20`\n[1] \"Transylvania University\" \"John Marshall Harlan\"   \n\n$`21`\n[1] \"Berkeley\"    \"Earl Warren\"\n\n$`22`\n[1] \"New York Law School\"     \"John Marshall Harlan II\"\n\n$`23`\n[1] \"Indiana\"        \"Sherman Minton\"\n\n$`24`\n[1] \"Howard\"            \"Thurgood Marhsall\"\n\n$`25`\n[1] \"Kansas City\"       \"Charles Whittaker\"\n\n$`26`\n[1] \"Colorado\"       \"Wiley Rutledge\"\n\n$`27`\n[1] \"Tulane\"               \"Edward Douglas White\"\n\n$`28`\n[1] \"Virginia\"         \"James McReynolds\"\n$`1`\n [1] \"Harvard\"                   \"John Roberts\"             \n [3] \"Anthony Kennedy\"           \"Horace Gray\"              \n [5] \"Oliver Wendell Holmes Jr.\" \"Felix Frankfurter\"        \n [7] \"Harry Blackmun\"            \"Stephen Breyer\"           \n [9] \"William Brennan Jr.\"       \"David Souter\"             \n[11] \"William Moody\"             \"Louis Brandeis\"           \n[13] \"Elena Kagan\"               \"Edward Sanford\"           \n[15] \"Harold Burton\"             \"Antonin Scalia\"           \n[17] \"Neil Gorsuch\"             \n\n$`2`\n [1] \"Apprenticeship\"        \"Rufus W. Peckham\"     \n [3] \"James F. Byrnes\"       \"Samuel Freeman Miller\"\n [5] \"Stanley Matthews\"      \"John Clarke\"          \n [7] \"Mahon Pitney\"          \"Stephen Field\"        \n [9] \"George Shiras Jr.\"     \"Wiliam R. Day\"        \n[11] \"Pierce Butler\"         \"Joseph Bradley\"       \n\n$`3`\n [1] \"Yale\"                  \"Morrison White\"       \n [3] \"Brett Kavanaugh\"       \"Abe Fortas\"           \n [5] \"William Burnham Woods\" \"Sonia Sotomayor\"      \n [7] \"Henry Billings Brown\"  \"Byron White\"          \n [9] \"Potter Stewart\"        \"Samuel Alito\"         \n[11] \"Clarence Thomas\"      \n\n$`4`\n[1] \"Columbia\"             \"Charles Evans Hughes\"\n[3] \"Harland F. Stone\"     \"Samuel Blatchford\"   \n[5] \"Benjamin N. Cardozo\"  \"William O. Douglas\"  \n[7] \"Stanley Reed\"         \"Ruth Bader Ginsburg\" \n[9] \"Joseph McKenna\"      \n\n$`5`\n[1] \"Washington and Lee\"  \"Lewis F. Powell Jr.\" \"Joseph Lamar\"       \n\n$`6`\n[1] \"Cincinnati\"          \"William Howard Taft\" \"Willis Van Devanter\"\n\n$`7`\n[1] \"Northwestern\"      \"Arthur Goldberg\"   \"John Paul Stevens\"\n\n$`8`\n[1] \"Albany\"            \"David Brewer\"      \"Robert H. Jackson\"\n\n$`9`\n[1] \"Michigan\"          \"George Sutherland\" \"Frank Murphy\"     \n\n$`10`\n[1] \"Cumberland School of Law\" \"Howell Edmunds Jackson\"  \n[3] \"Horace Lurton\"           \n\n$`11`\n[1] \"Stanford\"            \"William Rehnquist\"   \"Sandra Day O'Connor\"\n\n$`12`\n[1] \"Centre Colllege\" \"Fred M. Vinson\" \n\n$`13`\n[1] \"Emory University\" \"Lucius Lamar\"    \n\n$`14`\n[1] \"St. Paul College of Law\" \"Warren E. Burger\"       \n\n$`15`\n[1] \"Texas\"     \"Tom Clark\"\n\n$`16`\n[1] \"Bowdoin College\" \"Melville Fuller\"\n\n$`17`\n[1] \"Notre Dame\"        \"Amy Coney Barrett\"\n\n$`18`\n[1] \"Penn\"         \"Owen Roberts\"\n\n$`19`\n[1] \"School\"  \"Justice\"\n\n$`20`\n[1] \"Transylvania University\" \"John Marshall Harlan\"   \n\n$`21`\n[1] \"Berkeley\"    \"Earl Warren\"\n\n$`22`\n[1] \"New York Law School\"     \"John Marshall Harlan II\"\n\n$`23`\n[1] \"Indiana\"        \"Sherman Minton\"\n\n$`24`\n[1] \"Howard\"            \"Thurgood Marhsall\"\n\n$`25`\n[1] \"Kansas City\"       \"Charles Whittaker\"\n\n$`26`\n[1] \"Colorado\"       \"Wiley Rutledge\"\n\n$`27`\n[1] \"Tulane\"               \"Edward Douglas White\"\n\n$`28`\n[1] \"Virginia\"         \"James McReynolds\"\n$`1`\n [1] \"Apprenticeship\"        \"Rufus W. Peckham\"     \n [3] \"James F. Byrnes\"       \"Samuel Freeman Miller\"\n [5] \"Stanley Matthews\"      \"John Clarke\"          \n [7] \"Mahon Pitney\"          \"Stephen Field\"        \n [9] \"George Shiras Jr.\"     \"Wiliam R. Day\"        \n[11] \"Pierce Butler\"         \"Joseph Bradley\"       \n\n$`2`\n [1] \"Harvard\"                   \"John Roberts\"             \n [3] \"Anthony Kennedy\"           \"Horace Gray\"              \n [5] \"Oliver Wendell Holmes Jr.\" \"Felix Frankfurter\"        \n [7] \"Harry Blackmun\"            \"Stephen Breyer\"           \n [9] \"William Brennan Jr.\"       \"David Souter\"             \n[11] \"William Moody\"             \"Louis Brandeis\"           \n[13] \"Elena Kagan\"               \"Edward Sanford\"           \n[15] \"Harold Burton\"             \"Antonin Scalia\"           \n[17] \"Neil Gorsuch\"             \n\n$`3`\n [1] \"Yale\"                  \"Morrison White\"       \n [3] \"Brett Kavanaugh\"       \"Abe Fortas\"           \n [5] \"William Burnham Woods\" \"Sonia Sotomayor\"      \n [7] \"Henry Billings Brown\"  \"Byron White\"          \n [9] \"Potter Stewart\"        \"Samuel Alito\"         \n[11] \"Clarence Thomas\"      \n\n$`4`\n[1] \"Columbia\"             \"Charles Evans Hughes\"\n[3] \"Harland F. Stone\"     \"Samuel Blatchford\"   \n[5] \"Benjamin N. Cardozo\"  \"William O. Douglas\"  \n[7] \"Stanley Reed\"         \"Ruth Bader Ginsburg\" \n[9] \"Joseph McKenna\"      \n\n$`5`\n[1] \"Washington and Lee\"  \"Lewis F. Powell Jr.\" \"Joseph Lamar\"       \n\n$`6`\n[1] \"Cincinnati\"          \"William Howard Taft\" \"Willis Van Devanter\"\n\n$`7`\n[1] \"Northwestern\"      \"Arthur Goldberg\"   \"John Paul Stevens\"\n\n$`8`\n[1] \"Albany\"            \"David Brewer\"      \"Robert H. Jackson\"\n\n$`9`\n[1] \"Cumberland School of Law\" \"Howell Edmunds Jackson\"  \n[3] \"Horace Lurton\"           \n\n$`10`\n[1] \"Stanford\"            \"William Rehnquist\"   \"Sandra Day O'Connor\"\n\n$`11`\n[1] \"Michigan\"          \"George Sutherland\" \"Frank Murphy\"     \n\n$`12`\n[1] \"Centre Colllege\" \"Fred M. Vinson\" \n\n$`13`\n[1] \"Emory University\" \"Lucius Lamar\"    \n\n$`14`\n[1] \"St. Paul College of Law\" \"Warren E. Burger\"       \n\n$`15`\n[1] \"Texas\"     \"Tom Clark\"\n\n$`16`\n[1] \"Bowdoin College\" \"Melville Fuller\"\n\n$`17`\n[1] \"Notre Dame\"        \"Amy Coney Barrett\"\n\n$`18`\n[1] \"Penn\"         \"Owen Roberts\"\n\n$`19`\n[1] \"School\"  \"Justice\"\n\n$`20`\n[1] \"Transylvania University\" \"John Marshall Harlan\"   \n\n$`21`\n[1] \"Berkeley\"    \"Earl Warren\"\n\n$`22`\n[1] \"New York Law School\"     \"John Marshall Harlan II\"\n\n$`23`\n[1] \"Indiana\"        \"Sherman Minton\"\n\n$`24`\n[1] \"Howard\"            \"Thurgood Marhsall\"\n\n$`25`\n[1] \"Kansas City\"       \"Charles Whittaker\"\n\n$`26`\n[1] \"Colorado\"       \"Wiley Rutledge\"\n\n$`27`\n[1] \"Tulane\"               \"Edward Douglas White\"\n\n$`28`\n[1] \"Virginia\"         \"James McReynolds\"\n$`1`\n [1] \"Apprenticeship\"        \"Rufus W. Peckham\"     \n [3] \"James F. Byrnes\"       \"Samuel Freeman Miller\"\n [5] \"Stanley Matthews\"      \"John Clarke\"          \n [7] \"Mahon Pitney\"          \"Stephen Field\"        \n [9] \"George Shiras Jr.\"     \"Wiliam R. Day\"        \n[11] \"Pierce Butler\"         \"Joseph Bradley\"       \n\n$`2`\n [1] \"Harvard\"                   \"John Roberts\"             \n [3] \"Anthony Kennedy\"           \"Horace Gray\"              \n [5] \"Oliver Wendell Holmes Jr.\" \"Felix Frankfurter\"        \n [7] \"Harry Blackmun\"            \"Stephen Breyer\"           \n [9] \"William Brennan Jr.\"       \"David Souter\"             \n[11] \"William Moody\"             \"Louis Brandeis\"           \n[13] \"Elena Kagan\"               \"Edward Sanford\"           \n[15] \"Harold Burton\"             \"Antonin Scalia\"           \n[17] \"Neil Gorsuch\"             \n\n$`3`\n[1] \"Northwestern\"      \"Arthur Goldberg\"   \"John Paul Stevens\"\n\n$`4`\n[1] \"Stanford\"            \"William Rehnquist\"   \"Sandra Day O'Connor\"\n\n$`5`\n[1] \"Cincinnati\"          \"William Howard Taft\" \"Willis Van Devanter\"\n\n$`6`\n[1] \"Michigan\"          \"George Sutherland\" \"Frank Murphy\"     \n\n$`7`\n[1] \"Albany\"            \"David Brewer\"      \"Robert H. Jackson\"\n\n$`8`\n[1] \"Cumberland School of Law\" \"Howell Edmunds Jackson\"  \n[3] \"Horace Lurton\"           \n\n$`9`\n[1] \"Washington and Lee\"  \"Lewis F. Powell Jr.\" \"Joseph Lamar\"       \n\n$`10`\n [1] \"Yale\"                  \"Morrison White\"       \n [3] \"Brett Kavanaugh\"       \"Abe Fortas\"           \n [5] \"William Burnham Woods\" \"Sonia Sotomayor\"      \n [7] \"Henry Billings Brown\"  \"Byron White\"          \n [9] \"Potter Stewart\"        \"Samuel Alito\"         \n[11] \"Clarence Thomas\"      \n\n$`11`\n[1] \"Columbia\"             \"Charles Evans Hughes\"\n[3] \"Harland F. Stone\"     \"Samuel Blatchford\"   \n[5] \"Benjamin N. Cardozo\"  \"William O. Douglas\"  \n[7] \"Stanley Reed\"         \"Ruth Bader Ginsburg\" \n[9] \"Joseph McKenna\"      \n\n$`12`\n[1] \"Centre Colllege\" \"Fred M. Vinson\" \n\n$`13`\n[1] \"St. Paul College of Law\" \"Warren E. Burger\"       \n\n$`14`\n[1] \"Texas\"     \"Tom Clark\"\n\n$`15`\n[1] \"Bowdoin College\" \"Melville Fuller\"\n\n$`16`\n[1] \"Notre Dame\"        \"Amy Coney Barrett\"\n\n$`17`\n[1] \"Penn\"         \"Owen Roberts\"\n\n$`18`\n[1] \"School\"  \"Justice\"\n\n$`19`\n[1] \"Emory University\" \"Lucius Lamar\"    \n\n$`20`\n[1] \"Transylvania University\" \"John Marshall Harlan\"   \n\n$`21`\n[1] \"Berkeley\"    \"Earl Warren\"\n\n$`22`\n[1] \"New York Law School\"     \"John Marshall Harlan II\"\n\n$`23`\n[1] \"Indiana\"        \"Sherman Minton\"\n\n$`24`\n[1] \"Howard\"            \"Thurgood Marhsall\"\n\n$`25`\n[1] \"Kansas City\"       \"Charles Whittaker\"\n\n$`26`\n[1] \"Colorado\"       \"Wiley Rutledge\"\n\n$`27`\n[1] \"Tulane\"               \"Edward Douglas White\"\n\n$`28`\n[1] \"Virginia\"         \"James McReynolds\"\n\n\n         Block 1 Block 2 Block 3 Block 4 Block 5 Block 6 Block 7\nBlock 1    0.059   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 2    0.000   0.083   0.000    0.00    0.00    0.00    0.00\nBlock 3    0.000   0.000   0.091    0.00    0.00    0.00    0.00\nBlock 4    0.000   0.000   0.000    0.11    0.00    0.00    0.00\nBlock 5    0.000   0.000   0.000    0.00    0.33    0.00    0.00\nBlock 6    0.000   0.000   0.000    0.00    0.00    0.33    0.00\nBlock 7    0.000   0.000   0.000    0.00    0.00    0.00    0.33\nBlock 8    0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 9    0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 10   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 11   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 12   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 13   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 14   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 15   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 16   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 17   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 18   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 19   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 20   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 21   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 22   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 23   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 24   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 25   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 26   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 27   0.000   0.000   0.000    0.00    0.00    0.00    0.00\nBlock 28   0.000   0.000   0.000    0.00    0.00    0.00    0.00\n         Block 8 Block 9 Block 10 Block 11 Block 12 Block 13 Block 14\nBlock 1     0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 2     0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 3     0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 4     0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 5     0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 6     0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 7     0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 8     0.33    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 9     0.00    0.33     0.00     0.00      0.0      0.0      0.0\nBlock 10    0.00    0.00     0.33     0.00      0.0      0.0      0.0\nBlock 11    0.00    0.00     0.00     0.33      0.0      0.0      0.0\nBlock 12    0.00    0.00     0.00     0.00      0.5      0.0      0.0\nBlock 13    0.00    0.00     0.00     0.00      0.0      0.5      0.0\nBlock 14    0.00    0.00     0.00     0.00      0.0      0.0      0.5\nBlock 15    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 16    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 17    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 18    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 19    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 20    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 21    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 22    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 23    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 24    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 25    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 26    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 27    0.00    0.00     0.00     0.00      0.0      0.0      0.0\nBlock 28    0.00    0.00     0.00     0.00      0.0      0.0      0.0\n         Block 15 Block 16 Block 17 Block 18 Block 19 Block 20\nBlock 1       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 2       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 3       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 4       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 5       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 6       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 7       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 8       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 9       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 10      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 11      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 12      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 13      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 14      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 15      0.5      0.0      0.0      0.0      0.0      0.0\nBlock 16      0.0      0.5      0.0      0.0      0.0      0.0\nBlock 17      0.0      0.0      0.5      0.0      0.0      0.0\nBlock 18      0.0      0.0      0.0      0.5      0.0      0.0\nBlock 19      0.0      0.0      0.0      0.0      0.5      0.0\nBlock 20      0.0      0.0      0.0      0.0      0.0      0.5\nBlock 21      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 22      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 23      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 24      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 25      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 26      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 27      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 28      0.0      0.0      0.0      0.0      0.0      0.0\n         Block 21 Block 22 Block 23 Block 24 Block 25 Block 26\nBlock 1       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 2       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 3       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 4       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 5       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 6       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 7       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 8       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 9       0.0      0.0      0.0      0.0      0.0      0.0\nBlock 10      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 11      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 12      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 13      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 14      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 15      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 16      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 17      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 18      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 19      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 20      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 21      0.5      0.0      0.0      0.0      0.0      0.0\nBlock 22      0.0      0.5      0.0      0.0      0.0      0.0\nBlock 23      0.0      0.0      0.5      0.0      0.0      0.0\nBlock 24      0.0      0.0      0.0      0.5      0.0      0.0\nBlock 25      0.0      0.0      0.0      0.0      0.5      0.0\nBlock 26      0.0      0.0      0.0      0.0      0.0      0.5\nBlock 27      0.0      0.0      0.0      0.0      0.0      0.0\nBlock 28      0.0      0.0      0.0      0.0      0.0      0.0\n         Block 27 Block 28\nBlock 1       0.0      0.0\nBlock 2       0.0      0.0\nBlock 3       0.0      0.0\nBlock 4       0.0      0.0\nBlock 5       0.0      0.0\nBlock 6       0.0      0.0\nBlock 7       0.0      0.0\nBlock 8       0.0      0.0\nBlock 9       0.0      0.0\nBlock 10      0.0      0.0\nBlock 11      0.0      0.0\nBlock 12      0.0      0.0\nBlock 13      0.0      0.0\nBlock 14      0.0      0.0\nBlock 15      0.0      0.0\nBlock 16      0.0      0.0\nBlock 17      0.0      0.0\nBlock 18      0.0      0.0\nBlock 19      0.0      0.0\nBlock 20      0.0      0.0\nBlock 21      0.0      0.0\nBlock 22      0.0      0.0\nBlock 23      0.0      0.0\nBlock 24      0.0      0.0\nBlock 25      0.0      0.0\nBlock 26      0.0      0.0\nBlock 27      0.5      0.0\nBlock 28      0.0      0.5\n\n\n\n\n\n\n\n\n[1] 0.8985457\n[1] 0.8985457\n\n\n[1] 0\n[1] 0\n[1] 1\n[1] 1\n\n\n$`1`\n[1] \"Albany\"            \"David Brewer\"      \"Robert H. Jackson\"\n\n$`2`\n [1] \"Apprenticeship\"        \"Rufus W. Peckham\"     \n [3] \"James F. Byrnes\"       \"Samuel Freeman Miller\"\n [5] \"Stanley Matthews\"      \"John Clarke\"          \n [7] \"Mahon Pitney\"          \"Stephen Field\"        \n [9] \"George Shiras Jr.\"     \"Wiliam R. Day\"        \n[11] \"Pierce Butler\"         \"Joseph Bradley\"       \n\n$`3`\n[1] \"Berkeley\"    \"Earl Warren\"\n\n$`4`\n[1] \"Bowdoin College\" \"Melville Fuller\"\n\n$`5`\n[1] \"Centre Colllege\" \"Fred M. Vinson\" \n\n$`6`\n[1] \"Cincinnati\"          \"William Howard Taft\" \"Willis Van Devanter\"\n\n$`7`\n[1] \"Colorado\"       \"Wiley Rutledge\"\n\n$`8`\n[1] \"Columbia\"             \"Charles Evans Hughes\"\n[3] \"Harland F. Stone\"     \"Samuel Blatchford\"   \n[5] \"Benjamin N. Cardozo\"  \"William O. Douglas\"  \n[7] \"Stanley Reed\"         \"Ruth Bader Ginsburg\" \n[9] \"Joseph McKenna\"      \n\n$`9`\n[1] \"Cumberland School of Law\" \"Howell Edmunds Jackson\"  \n[3] \"Horace Lurton\"           \n\n$`10`\n[1] \"Emory University\" \"Lucius Lamar\"    \n\n$`11`\n [1] \"Harvard\"                   \"John Roberts\"             \n [3] \"Anthony Kennedy\"           \"Horace Gray\"              \n [5] \"Oliver Wendell Holmes Jr.\" \"Felix Frankfurter\"        \n [7] \"Harry Blackmun\"            \"Stephen Breyer\"           \n [9] \"William Brennan Jr.\"       \"David Souter\"             \n[11] \"William Moody\"             \"Louis Brandeis\"           \n[13] \"Elena Kagan\"               \"Edward Sanford\"           \n[15] \"Harold Burton\"             \"Antonin Scalia\"           \n[17] \"Neil Gorsuch\"             \n\n$`12`\n[1] \"Howard\"            \"Thurgood Marhsall\"\n\n$`13`\n[1] \"Indiana\"        \"Sherman Minton\"\n\n$`14`\n[1] \"Kansas City\"       \"Charles Whittaker\"\n\n$`15`\n[1] \"Michigan\"          \"George Sutherland\" \"Frank Murphy\"     \n\n$`16`\n[1] \"New York Law School\"     \"John Marshall Harlan II\"\n\n$`17`\n[1] \"Northwestern\"      \"Arthur Goldberg\"   \"John Paul Stevens\"\n\n$`18`\n[1] \"Notre Dame\"        \"Amy Coney Barrett\"\n\n$`19`\n[1] \"Penn\"         \"Owen Roberts\"\n\n$`20`\n[1] \"School\"  \"Justice\"\n\n$`21`\n[1] \"St. Paul College of Law\" \"Warren E. Burger\"       \n\n$`22`\n[1] \"Stanford\"            \"William Rehnquist\"   \"Sandra Day O'Connor\"\n\n$`23`\n[1] \"Texas\"     \"Tom Clark\"\n\n$`24`\n[1] \"Transylvania University\" \"John Marshall Harlan\"   \n\n$`25`\n[1] \"Tulane\"               \"Edward Douglas White\"\n\n$`26`\n[1] \"Virginia\"         \"James McReynolds\"\n\n$`27`\n[1] \"Washington and Lee\"  \"Lewis F. Powell Jr.\" \"Joseph Lamar\"       \n\n$`28`\n [1] \"Yale\"                  \"Morrison White\"       \n [3] \"Brett Kavanaugh\"       \"Abe Fortas\"           \n [5] \"William Burnham Woods\" \"Sonia Sotomayor\"      \n [7] \"Henry Billings Brown\"  \"Byron White\"          \n [9] \"Potter Stewart\"        \"Samuel Alito\"         \n[11] \"Clarence Thomas\"      \n         Block 1 Block 2 Block 3 Block 4 Block 5 Block 6 Block 7\nBlock 1     0.33   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 2     0.00   0.083     0.0     0.0     0.0    0.00     0.0\nBlock 3     0.00   0.000     0.5     0.0     0.0    0.00     0.0\nBlock 4     0.00   0.000     0.0     0.5     0.0    0.00     0.0\nBlock 5     0.00   0.000     0.0     0.0     0.5    0.00     0.0\nBlock 6     0.00   0.000     0.0     0.0     0.0    0.33     0.0\nBlock 7     0.00   0.000     0.0     0.0     0.0    0.00     0.5\nBlock 8     0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 9     0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 10    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 11    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 12    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 13    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 14    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 15    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 16    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 17    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 18    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 19    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 20    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 21    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 22    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 23    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 24    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 25    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 26    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 27    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 28    0.00   0.000     0.0     0.0     0.0    0.00     0.0\n         Block 8 Block 9 Block 10 Block 11 Block 12 Block 13 Block 14\nBlock 1     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 2     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 3     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 4     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 5     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 6     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 7     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 8     0.11    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 9     0.00    0.33      0.0    0.000      0.0      0.0      0.0\nBlock 10    0.00    0.00      0.5    0.000      0.0      0.0      0.0\nBlock 11    0.00    0.00      0.0    0.059      0.0      0.0      0.0\nBlock 12    0.00    0.00      0.0    0.000      0.5      0.0      0.0\nBlock 13    0.00    0.00      0.0    0.000      0.0      0.5      0.0\nBlock 14    0.00    0.00      0.0    0.000      0.0      0.0      0.5\nBlock 15    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 16    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 17    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 18    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 19    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 20    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 21    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 22    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 23    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 24    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 25    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 26    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 27    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 28    0.00    0.00      0.0    0.000      0.0      0.0      0.0\n         Block 15 Block 16 Block 17 Block 18 Block 19 Block 20\nBlock 1      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 2      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 3      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 4      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 5      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 6      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 7      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 8      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 9      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 10     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 11     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 12     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 13     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 14     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 15     0.33      0.0     0.00      0.0      0.0      0.0\nBlock 16     0.00      0.5     0.00      0.0      0.0      0.0\nBlock 17     0.00      0.0     0.33      0.0      0.0      0.0\nBlock 18     0.00      0.0     0.00      0.5      0.0      0.0\nBlock 19     0.00      0.0     0.00      0.0      0.5      0.0\nBlock 20     0.00      0.0     0.00      0.0      0.0      0.5\nBlock 21     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 22     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 23     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 24     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 25     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 26     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 27     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 28     0.00      0.0     0.00      0.0      0.0      0.0\n         Block 21 Block 22 Block 23 Block 24 Block 25 Block 26\nBlock 1       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 2       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 3       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 4       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 5       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 6       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 7       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 8       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 9       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 10      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 11      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 12      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 13      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 14      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 15      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 16      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 17      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 18      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 19      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 20      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 21      0.5     0.00      0.0      0.0      0.0      0.0\nBlock 22      0.0     0.33      0.0      0.0      0.0      0.0\nBlock 23      0.0     0.00      0.5      0.0      0.0      0.0\nBlock 24      0.0     0.00      0.0      0.5      0.0      0.0\nBlock 25      0.0     0.00      0.0      0.0      0.5      0.0\nBlock 26      0.0     0.00      0.0      0.0      0.0      0.5\nBlock 27      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 28      0.0     0.00      0.0      0.0      0.0      0.0\n         Block 27 Block 28\nBlock 1      0.00    0.000\nBlock 2      0.00    0.000\nBlock 3      0.00    0.000\nBlock 4      0.00    0.000\nBlock 5      0.00    0.000\nBlock 6      0.00    0.000\nBlock 7      0.00    0.000\nBlock 8      0.00    0.000\nBlock 9      0.00    0.000\nBlock 10     0.00    0.000\nBlock 11     0.00    0.000\nBlock 12     0.00    0.000\nBlock 13     0.00    0.000\nBlock 14     0.00    0.000\nBlock 15     0.00    0.000\nBlock 16     0.00    0.000\nBlock 17     0.00    0.000\nBlock 18     0.00    0.000\nBlock 19     0.00    0.000\nBlock 20     0.00    0.000\nBlock 21     0.00    0.000\nBlock 22     0.00    0.000\nBlock 23     0.00    0.000\nBlock 24     0.00    0.000\nBlock 25     0.00    0.000\nBlock 26     0.00    0.000\nBlock 27     0.33    0.000\nBlock 28     0.00    0.091\n\n\n\n$`1`\n[1] \"Albany\"            \"David Brewer\"      \"Robert H. Jackson\"\n\n$`2`\n [1] \"Apprenticeship\"        \"Rufus W. Peckham\"     \n [3] \"James F. Byrnes\"       \"Samuel Freeman Miller\"\n [5] \"Stanley Matthews\"      \"John Clarke\"          \n [7] \"Mahon Pitney\"          \"Stephen Field\"        \n [9] \"George Shiras Jr.\"     \"Wiliam R. Day\"        \n[11] \"Pierce Butler\"         \"Joseph Bradley\"       \n\n$`3`\n[1] \"Berkeley\"    \"Earl Warren\"\n\n$`4`\n[1] \"Bowdoin College\" \"Melville Fuller\"\n\n$`5`\n[1] \"Centre Colllege\" \"Fred M. Vinson\" \n\n$`6`\n[1] \"Cincinnati\"          \"William Howard Taft\" \"Willis Van Devanter\"\n\n$`7`\n[1] \"Colorado\"       \"Wiley Rutledge\"\n\n$`8`\n[1] \"Columbia\"             \"Charles Evans Hughes\"\n[3] \"Harland F. Stone\"     \"Samuel Blatchford\"   \n[5] \"Benjamin N. Cardozo\"  \"William O. Douglas\"  \n[7] \"Stanley Reed\"         \"Ruth Bader Ginsburg\" \n[9] \"Joseph McKenna\"      \n\n$`9`\n[1] \"Cumberland School of Law\" \"Howell Edmunds Jackson\"  \n[3] \"Horace Lurton\"           \n\n$`10`\n[1] \"Emory University\" \"Lucius Lamar\"    \n\n$`11`\n [1] \"Harvard\"                   \"John Roberts\"             \n [3] \"Anthony Kennedy\"           \"Horace Gray\"              \n [5] \"Oliver Wendell Holmes Jr.\" \"Felix Frankfurter\"        \n [7] \"Harry Blackmun\"            \"Stephen Breyer\"           \n [9] \"William Brennan Jr.\"       \"David Souter\"             \n[11] \"William Moody\"             \"Louis Brandeis\"           \n[13] \"Elena Kagan\"               \"Edward Sanford\"           \n[15] \"Harold Burton\"             \"Antonin Scalia\"           \n[17] \"Neil Gorsuch\"             \n\n$`12`\n[1] \"Howard\"            \"Thurgood Marhsall\"\n\n$`13`\n[1] \"Indiana\"        \"Sherman Minton\"\n\n$`14`\n[1] \"Kansas City\"       \"Charles Whittaker\"\n\n$`15`\n[1] \"Michigan\"          \"George Sutherland\" \"Frank Murphy\"     \n\n$`16`\n[1] \"New York Law School\"     \"John Marshall Harlan II\"\n\n$`17`\n[1] \"Northwestern\"      \"Arthur Goldberg\"   \"John Paul Stevens\"\n\n$`18`\n[1] \"Notre Dame\"        \"Amy Coney Barrett\"\n\n$`19`\n[1] \"Penn\"         \"Owen Roberts\"\n\n$`20`\n[1] \"School\"  \"Justice\"\n\n$`21`\n[1] \"St. Paul College of Law\" \"Warren E. Burger\"       \n\n$`22`\n[1] \"Stanford\"            \"William Rehnquist\"   \"Sandra Day O'Connor\"\n\n$`23`\n[1] \"Texas\"     \"Tom Clark\"\n\n$`24`\n[1] \"Transylvania University\" \"John Marshall Harlan\"   \n\n$`25`\n[1] \"Tulane\"               \"Edward Douglas White\"\n\n$`26`\n[1] \"Virginia\"         \"James McReynolds\"\n\n$`27`\n[1] \"Washington and Lee\"  \"Lewis F. Powell Jr.\" \"Joseph Lamar\"       \n\n$`28`\n [1] \"Yale\"                  \"Morrison White\"       \n [3] \"Brett Kavanaugh\"       \"Abe Fortas\"           \n [5] \"William Burnham Woods\" \"Sonia Sotomayor\"      \n [7] \"Henry Billings Brown\"  \"Byron White\"          \n [9] \"Potter Stewart\"        \"Samuel Alito\"         \n[11] \"Clarence Thomas\"      \n\n\n         Block 1 Block 2 Block 3 Block 4 Block 5 Block 6 Block 7\nBlock 1     0.33   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 2     0.00   0.083     0.0     0.0     0.0    0.00     0.0\nBlock 3     0.00   0.000     0.5     0.0     0.0    0.00     0.0\nBlock 4     0.00   0.000     0.0     0.5     0.0    0.00     0.0\nBlock 5     0.00   0.000     0.0     0.0     0.5    0.00     0.0\nBlock 6     0.00   0.000     0.0     0.0     0.0    0.33     0.0\nBlock 7     0.00   0.000     0.0     0.0     0.0    0.00     0.5\nBlock 8     0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 9     0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 10    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 11    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 12    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 13    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 14    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 15    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 16    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 17    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 18    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 19    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 20    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 21    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 22    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 23    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 24    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 25    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 26    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 27    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 28    0.00   0.000     0.0     0.0     0.0    0.00     0.0\n         Block 8 Block 9 Block 10 Block 11 Block 12 Block 13 Block 14\nBlock 1     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 2     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 3     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 4     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 5     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 6     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 7     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 8     0.11    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 9     0.00    0.33      0.0    0.000      0.0      0.0      0.0\nBlock 10    0.00    0.00      0.5    0.000      0.0      0.0      0.0\nBlock 11    0.00    0.00      0.0    0.059      0.0      0.0      0.0\nBlock 12    0.00    0.00      0.0    0.000      0.5      0.0      0.0\nBlock 13    0.00    0.00      0.0    0.000      0.0      0.5      0.0\nBlock 14    0.00    0.00      0.0    0.000      0.0      0.0      0.5\nBlock 15    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 16    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 17    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 18    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 19    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 20    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 21    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 22    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 23    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 24    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 25    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 26    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 27    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 28    0.00    0.00      0.0    0.000      0.0      0.0      0.0\n         Block 15 Block 16 Block 17 Block 18 Block 19 Block 20\nBlock 1      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 2      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 3      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 4      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 5      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 6      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 7      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 8      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 9      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 10     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 11     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 12     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 13     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 14     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 15     0.33      0.0     0.00      0.0      0.0      0.0\nBlock 16     0.00      0.5     0.00      0.0      0.0      0.0\nBlock 17     0.00      0.0     0.33      0.0      0.0      0.0\nBlock 18     0.00      0.0     0.00      0.5      0.0      0.0\nBlock 19     0.00      0.0     0.00      0.0      0.5      0.0\nBlock 20     0.00      0.0     0.00      0.0      0.0      0.5\nBlock 21     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 22     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 23     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 24     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 25     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 26     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 27     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 28     0.00      0.0     0.00      0.0      0.0      0.0\n         Block 21 Block 22 Block 23 Block 24 Block 25 Block 26\nBlock 1       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 2       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 3       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 4       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 5       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 6       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 7       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 8       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 9       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 10      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 11      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 12      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 13      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 14      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 15      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 16      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 17      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 18      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 19      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 20      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 21      0.5     0.00      0.0      0.0      0.0      0.0\nBlock 22      0.0     0.33      0.0      0.0      0.0      0.0\nBlock 23      0.0     0.00      0.5      0.0      0.0      0.0\nBlock 24      0.0     0.00      0.0      0.5      0.0      0.0\nBlock 25      0.0     0.00      0.0      0.0      0.5      0.0\nBlock 26      0.0     0.00      0.0      0.0      0.0      0.5\nBlock 27      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 28      0.0     0.00      0.0      0.0      0.0      0.0\n         Block 27 Block 28\nBlock 1      0.00    0.000\nBlock 2      0.00    0.000\nBlock 3      0.00    0.000\nBlock 4      0.00    0.000\nBlock 5      0.00    0.000\nBlock 6      0.00    0.000\nBlock 7      0.00    0.000\nBlock 8      0.00    0.000\nBlock 9      0.00    0.000\nBlock 10     0.00    0.000\nBlock 11     0.00    0.000\nBlock 12     0.00    0.000\nBlock 13     0.00    0.000\nBlock 14     0.00    0.000\nBlock 15     0.00    0.000\nBlock 16     0.00    0.000\nBlock 17     0.00    0.000\nBlock 18     0.00    0.000\nBlock 19     0.00    0.000\nBlock 20     0.00    0.000\nBlock 21     0.00    0.000\nBlock 22     0.00    0.000\nBlock 23     0.00    0.000\nBlock 24     0.00    0.000\nBlock 25     0.00    0.000\nBlock 26     0.00    0.000\nBlock 27     0.33    0.000\nBlock 28     0.00    0.091\n\n\n\n$`1`\n[1] \"Albany\"            \"David Brewer\"      \"Robert H. Jackson\"\n\n$`2`\n [1] \"Apprenticeship\"        \"Rufus W. Peckham\"     \n [3] \"James F. Byrnes\"       \"Samuel Freeman Miller\"\n [5] \"Stanley Matthews\"      \"John Clarke\"          \n [7] \"Mahon Pitney\"          \"Stephen Field\"        \n [9] \"George Shiras Jr.\"     \"Wiliam R. Day\"        \n[11] \"Pierce Butler\"         \"Joseph Bradley\"       \n\n$`3`\n[1] \"Berkeley\"    \"Earl Warren\"\n\n$`4`\n[1] \"Bowdoin College\" \"Melville Fuller\"\n\n$`5`\n[1] \"Centre Colllege\" \"Fred M. Vinson\" \n\n$`6`\n[1] \"Cincinnati\"          \"William Howard Taft\" \"Willis Van Devanter\"\n\n$`7`\n[1] \"Colorado\"       \"Wiley Rutledge\"\n\n$`8`\n[1] \"Columbia\"             \"Charles Evans Hughes\"\n[3] \"Harland F. Stone\"     \"Samuel Blatchford\"   \n[5] \"Benjamin N. Cardozo\"  \"William O. Douglas\"  \n[7] \"Stanley Reed\"         \"Ruth Bader Ginsburg\" \n[9] \"Joseph McKenna\"      \n\n$`9`\n[1] \"Cumberland School of Law\" \"Howell Edmunds Jackson\"  \n[3] \"Horace Lurton\"           \n\n$`10`\n[1] \"Emory University\" \"Lucius Lamar\"    \n\n$`11`\n [1] \"Harvard\"                   \"John Roberts\"             \n [3] \"Anthony Kennedy\"           \"Horace Gray\"              \n [5] \"Oliver Wendell Holmes Jr.\" \"Felix Frankfurter\"        \n [7] \"Harry Blackmun\"            \"Stephen Breyer\"           \n [9] \"William Brennan Jr.\"       \"David Souter\"             \n[11] \"William Moody\"             \"Louis Brandeis\"           \n[13] \"Elena Kagan\"               \"Edward Sanford\"           \n[15] \"Harold Burton\"             \"Antonin Scalia\"           \n[17] \"Neil Gorsuch\"             \n\n$`12`\n[1] \"Howard\"            \"Thurgood Marhsall\"\n\n$`13`\n[1] \"Indiana\"        \"Sherman Minton\"\n\n$`14`\n[1] \"Kansas City\"       \"Charles Whittaker\"\n\n$`15`\n[1] \"Michigan\"          \"George Sutherland\" \"Frank Murphy\"     \n\n$`16`\n[1] \"New York Law School\"     \"John Marshall Harlan II\"\n\n$`17`\n[1] \"Northwestern\"      \"Arthur Goldberg\"   \"John Paul Stevens\"\n\n$`18`\n[1] \"Notre Dame\"        \"Amy Coney Barrett\"\n\n$`19`\n[1] \"Penn\"         \"Owen Roberts\"\n\n$`20`\n[1] \"School\"  \"Justice\"\n\n$`21`\n[1] \"St. Paul College of Law\" \"Warren E. Burger\"       \n\n$`22`\n[1] \"Stanford\"            \"William Rehnquist\"   \"Sandra Day O'Connor\"\n\n$`23`\n[1] \"Texas\"     \"Tom Clark\"\n\n$`24`\n[1] \"Transylvania University\" \"John Marshall Harlan\"   \n\n$`25`\n[1] \"Tulane\"               \"Edward Douglas White\"\n\n$`26`\n[1] \"Virginia\"         \"James McReynolds\"\n\n$`27`\n[1] \"Washington and Lee\"  \"Lewis F. Powell Jr.\" \"Joseph Lamar\"       \n\n$`28`\n [1] \"Yale\"                  \"Morrison White\"       \n [3] \"Brett Kavanaugh\"       \"Abe Fortas\"           \n [5] \"William Burnham Woods\" \"Sonia Sotomayor\"      \n [7] \"Henry Billings Brown\"  \"Byron White\"          \n [9] \"Potter Stewart\"        \"Samuel Alito\"         \n[11] \"Clarence Thomas\"      \n         Block 1 Block 2 Block 3 Block 4 Block 5 Block 6 Block 7\nBlock 1     0.33   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 2     0.00   0.083     0.0     0.0     0.0    0.00     0.0\nBlock 3     0.00   0.000     0.5     0.0     0.0    0.00     0.0\nBlock 4     0.00   0.000     0.0     0.5     0.0    0.00     0.0\nBlock 5     0.00   0.000     0.0     0.0     0.5    0.00     0.0\nBlock 6     0.00   0.000     0.0     0.0     0.0    0.33     0.0\nBlock 7     0.00   0.000     0.0     0.0     0.0    0.00     0.5\nBlock 8     0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 9     0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 10    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 11    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 12    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 13    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 14    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 15    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 16    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 17    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 18    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 19    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 20    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 21    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 22    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 23    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 24    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 25    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 26    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 27    0.00   0.000     0.0     0.0     0.0    0.00     0.0\nBlock 28    0.00   0.000     0.0     0.0     0.0    0.00     0.0\n         Block 8 Block 9 Block 10 Block 11 Block 12 Block 13 Block 14\nBlock 1     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 2     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 3     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 4     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 5     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 6     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 7     0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 8     0.11    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 9     0.00    0.33      0.0    0.000      0.0      0.0      0.0\nBlock 10    0.00    0.00      0.5    0.000      0.0      0.0      0.0\nBlock 11    0.00    0.00      0.0    0.059      0.0      0.0      0.0\nBlock 12    0.00    0.00      0.0    0.000      0.5      0.0      0.0\nBlock 13    0.00    0.00      0.0    0.000      0.0      0.5      0.0\nBlock 14    0.00    0.00      0.0    0.000      0.0      0.0      0.5\nBlock 15    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 16    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 17    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 18    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 19    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 20    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 21    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 22    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 23    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 24    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 25    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 26    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 27    0.00    0.00      0.0    0.000      0.0      0.0      0.0\nBlock 28    0.00    0.00      0.0    0.000      0.0      0.0      0.0\n         Block 15 Block 16 Block 17 Block 18 Block 19 Block 20\nBlock 1      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 2      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 3      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 4      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 5      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 6      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 7      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 8      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 9      0.00      0.0     0.00      0.0      0.0      0.0\nBlock 10     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 11     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 12     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 13     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 14     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 15     0.33      0.0     0.00      0.0      0.0      0.0\nBlock 16     0.00      0.5     0.00      0.0      0.0      0.0\nBlock 17     0.00      0.0     0.33      0.0      0.0      0.0\nBlock 18     0.00      0.0     0.00      0.5      0.0      0.0\nBlock 19     0.00      0.0     0.00      0.0      0.5      0.0\nBlock 20     0.00      0.0     0.00      0.0      0.0      0.5\nBlock 21     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 22     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 23     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 24     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 25     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 26     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 27     0.00      0.0     0.00      0.0      0.0      0.0\nBlock 28     0.00      0.0     0.00      0.0      0.0      0.0\n         Block 21 Block 22 Block 23 Block 24 Block 25 Block 26\nBlock 1       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 2       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 3       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 4       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 5       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 6       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 7       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 8       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 9       0.0     0.00      0.0      0.0      0.0      0.0\nBlock 10      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 11      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 12      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 13      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 14      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 15      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 16      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 17      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 18      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 19      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 20      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 21      0.5     0.00      0.0      0.0      0.0      0.0\nBlock 22      0.0     0.33      0.0      0.0      0.0      0.0\nBlock 23      0.0     0.00      0.5      0.0      0.0      0.0\nBlock 24      0.0     0.00      0.0      0.5      0.0      0.0\nBlock 25      0.0     0.00      0.0      0.0      0.5      0.0\nBlock 26      0.0     0.00      0.0      0.0      0.0      0.5\nBlock 27      0.0     0.00      0.0      0.0      0.0      0.0\nBlock 28      0.0     0.00      0.0      0.0      0.0      0.0\n         Block 27 Block 28\nBlock 1      0.00    0.000\nBlock 2      0.00    0.000\nBlock 3      0.00    0.000\nBlock 4      0.00    0.000\nBlock 5      0.00    0.000\nBlock 6      0.00    0.000\nBlock 7      0.00    0.000\nBlock 8      0.00    0.000\nBlock 9      0.00    0.000\nBlock 10     0.00    0.000\nBlock 11     0.00    0.000\nBlock 12     0.00    0.000\nBlock 13     0.00    0.000\nBlock 14     0.00    0.000\nBlock 15     0.00    0.000\nBlock 16     0.00    0.000\nBlock 17     0.00    0.000\nBlock 18     0.00    0.000\nBlock 19     0.00    0.000\nBlock 20     0.00    0.000\nBlock 21     0.00    0.000\nBlock 22     0.00    0.000\nBlock 23     0.00    0.000\nBlock 24     0.00    0.000\nBlock 25     0.00    0.000\nBlock 26     0.00    0.000\nBlock 27     0.33    0.000\nBlock 28     0.00    0.091\n\n\n\n\n\n\n$`1`\n [1] \"Harvard\"                   \"John Roberts\"             \n [3] \"Anthony Kennedy\"           \"Horace Gray\"              \n [5] \"Oliver Wendell Holmes Jr.\" \"Felix Frankfurter\"        \n [7] \"Harry Blackmun\"            \"Stephen Breyer\"           \n [9] \"William Brennan Jr.\"       \"David Souter\"             \n[11] \"William Moody\"             \"Louis Brandeis\"           \n[13] \"Elena Kagan\"               \"Harold Burton\"            \n[15] \"Antonin Scalia\"            \"Neil Gorsuch\"             \n\n$`2`\n[1] \"Edward Sanford\"\n\n\n        Block 1 Block 2\nBlock 1  0.0074  0.0085\nBlock 2  0.0017  0.0000\n\n\n\n\n\n\n\n",
    "preview": "posts/httpsrpubscomburnworthj881541/distill-preview.png",
    "last_modified": "2022-03-27T15:50:31-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsyli210813githubiosocialnetworkanalysishw7/",
    "title": "Social Network Analysis Homework 7",
    "description": "Roles & Communities.",
    "author": [
      {
        "name": "Yifan Li",
        "url": {}
      }
    ],
    "date": "2022-03-27",
    "categories": [],
    "contents": "\n\n\n\n##Description of Game of Throne marriage network.\n\n\n\n\n Network attributes:\n  vertices = 18 \n  directed = FALSE \n  hyper = FALSE \n  loops = TRUE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 61 \n    missing edges= 0 \n    non-missing edges= 61 \n\n Vertex attribute names: \n    color region vertex.names \n\n Edge attribute names: \n    weight \n[1] 0.3267974\n[1] 0.3787375\n[1] 1\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.00    1.00    2.00    3.59    4.00   17.00 \n\nSince blockmodel works better with small network, I use the Game of Throne marriage network (instead of the huge world trade network) for homework 6 & 7.\nThis network is a undirected network showing the marriage between important families in Westeros. (I think if we distinguish which family the bride and groom belong to in each marriage, we can also create a directed network. I may try it later.) Each node represents a family (or a set of less important families of one region), while each tie indicates there are one or more marriage between the two families. The weights represents how many marriages have occurred between the family. There is only one component in this network, indicating all the important Westeros ruling families are connected by marriage.\n##Roles & blockmodels.\n\n\n\n\n\n\n\n\n\nExcept for using single clustering method, the three other methods give a clear hierarchical structures which capture differences in network position between the families. All the four method identify Targaryen as an unique role to some extent, which is bery reasonable due to its status in the book.\n\n\n\nFor me, it’s a little confusing what these red rectangles mean. The partition is crossing the branches. The role values assigned by blockmodels are also different from the division in those plots. So I will focus more on the blocks partitioned by the blockmodels, and use the cluster dendrograms just as visual reference.\n\n\n\n\n           Block 1    Block 2   Block 3   Block 4\nBlock 1 0.40000000 0.04166667 0.6666667 0.8333333\nBlock 2 0.04166667 0.17857143 0.5000000 0.6250000\nBlock 3 0.66666667 0.50000000 0.3333333 0.6666667\nBlock 4 0.83333333 0.62500000 0.6666667       NaN\n\n          Block 1   Block 2   Block 3   Block 4\nBlock 1 0.1153846 0.3846154 0.6153846 0.6923077\nBlock 2 0.3846154 1.0000000 0.5000000 1.0000000\nBlock 3 0.6153846 0.5000000 0.0000000 0.5000000\nBlock 4 0.6923077 1.0000000 0.5000000       NaN\n\n          Block 1   Block 2   Block 3   Block 4\nBlock 1 0.1904762 0.5333333 0.6666667 0.7333333\nBlock 2 0.5333333       NaN 0.0000000 1.0000000\nBlock 3 0.6666667 0.0000000       NaN 0.0000000\nBlock 4 0.7333333 1.0000000 0.0000000       NaN\n\n           Block 1   Block 2    Block 3   Block 4\nBlock 1 1.00000000 0.0000000 0.03333333 0.6666667\nBlock 2 0.00000000 1.0000000 0.50000000 0.6666667\nBlock 3 0.03333333 0.5000000 0.11111111 0.6333333\nBlock 4 0.66666667 0.6666667 0.63333333 0.3333333\n\n\nAgain, the single clustering method makes the least sense. 3 families get one block for each, and the others are all in the same block.\nAmong the other three, the Ward D method give the most 0s and 1s (or near 0 or 1). It seems to best capture differences in network position between the families. Let’s explore it further.\n\n\n\n\n           Block 1   Block 2    Block 3   Block 4\nBlock 1 1.00000000 0.0000000 0.03333333 0.6666667\nBlock 2 0.00000000 1.0000000 0.50000000 0.6666667\nBlock 3 0.03333333 0.5000000 0.11111111 0.6333333\nBlock 4 0.66666667 0.6666667 0.63333333 0.3333333\n\n\n\n          name role_wrd\n1        Arryn        1\n2        Tully        1\n3         Vale        1\n4    Baratheon        2\n5        Reach        2\n6    Lannister        3\n7      Martell        3\n8   Stormlands        3\n9       Tyrell        3\n10  Crownlands        3\n11       Essos        3\n12  Riverlands        3\n13 Westerlands        3\n14       North        3\n15       Dorne        3\n16       Stark        4\n17        Frey        4\n18   Targaryen        4\n\nBlock 1(Arryn, Tully, and Vale) and Block 2 (Baratheon and Reach) show a faction pattern. They are fully connected to each other within factions by marriage ties while have no marriage with the other faction. It’s understandable since the Arryn family rule the Vale, so they have close relation to nobles of the Vale. The Tully family rule the riverlands, which is next the Vale. And this part of Westoros has few connections to Baratheons and nobles in Reach. (Not quite sure why the Baratheon and the Reach are viewed as the same role and a faction. Maybe I’m not familiar enough with the book.)\nBlock 3 consists of most other families. They are loosely connected to each other. The block 1 or faction of Vale and Riverlands has very limited connections with block 3, indicating that they are not deeply involved in other affairs in Westeros. The Baratheon block have some relation with them, which might provide the support for the throne. Sadly, this connection is not enough. Perhaps this is one of the causes of the War of the Five Kings.\nBlock 4 (Targaryen, Stark and Frey) is loosely self connected, but have a relative high connection to all the other 3 blocks. It is quite interesting since these there families (especially the Targaryen and the Stark) are the central families to the story of the book. The three families have extensive and similar political resources in Westeros. They marry each other and compete with each other at the same time. The most important marriages in the story take place between these three families. Meanwhile, House Stark’s war to help Baratheon against Targaryen, and Frey’s betrayal of Stark, are two of the most significant turning points in Westeros history. The role analysis shows us they fight each other because they occupy similar roles.\nInterestingly, one of the other major family for the book, the Lannister has no unique roles in all four methods. This fact might help explain why the Lannisters try to grasp the power and make many political enemies on the one hand, and struggling so much in the process on the other hand.\n\n\n\nThe plot show the pattern more clearly. The Stark, Frey and Targaryen sit in the center of the network and compete with each other. Baratheon and Reach sit near the center. Other families are surrounding around the core five, while Tully, Vale and Arryn are located at the periphery. (Dorne is also quite periphery, which is align with the book.)\n\n     role_wrd degree degree.wt bonpow betweenness close constraint\n[1,]        1    4.3        16  -1.08         1.8  0.53       0.45\n[2,]        2    8.0        28  -1.10        13.3  0.65       0.35\n[3,]        3    4.0        18  -0.74         1.1  0.54       0.63\n[4,]        4   10.3        51  -0.90        24.5  0.71       0.27\n     eigen eigen.rc eigen.dc role_cmpl role_avg role_sing  n\n[1,]  0.17    0.018     0.15       1.0      1.0         1  3\n[2,]  0.28    0.044     0.24       2.5      2.0         1  2\n[3,]  0.18    0.046     0.13       1.7      1.0         1 10\n[4,]  0.35    0.142     0.21       3.3      3.3         3  3\n     role_cmpl degree degree.wt bonpow betweenness close constraint\n[1,]         1   1.17      12.1   0.40        0.76 0.043      0.056\n[2,]         2   1.85      11.5   0.53        3.66 0.062      0.193\n[3,]         3   0.58       8.1   0.89        2.21 0.000      0.084\n[4,]         4     NA        NA     NA          NA    NA         NA\n      eigen eigen.rc eigen.dc role_avg role_sing role_wrd  n\n[1,] 0.0636    0.035    0.041     0.00         0     1.10  0\n[2,] 0.0663    0.030    0.059     0.35         0     0.35  0\n[3,] 0.0066    0.051    0.047     0.58         1     1.15  0\n[4,]     NA       NA       NA       NA        NA       NA NA\n\nBy summarising the centrality scores by roles, we can identify their characteristics to some extent. The block 1 is in the periphery, and have the lowerst weighted degree, closeness and eigenvector centrality score, and have relatively low degree, Bonacich power and betweenness.\nBlock 2, the Baratheon and Reach, has the second high degree, weighted degree, betweenness, closeness and eigenvector centrality score (just next to block 4), and have the second low constraint, indicating their central position (not central enough though). Their reflected centrality is quite low compared with the derived centrality, indicating that they may actually only have limited direct resources and instead rely on indirect relationships (probably especially on Stark). This further explain the failure of the rule of Baratheon. Robert had to rule by compromise.They have the lowest Bonacich power.(DOn’t know how to interpret a negative value.)\nBlock 3, the collection of “normal” noble families, have low scores for almost every parameters and high constraint as expected.\nBlock 4, the collection of the most important families, have highest centrality scores and lowest constraint as expected. Moreoever, compared with other blocks, they have quite high reflected - derived centrality ratio, indicating they have the most direct political resources. Combined with the low constrain, we can easily identify them as structural holes. This is the origin of their power.\n——————————————–\n##Community\n##Fast and Greedy Community Detection\n\n$`1`\n[1] \"Arryn\" \"Tully\" \"Vale\" \n\n$`2`\n[1] \"Martell\"    \"Crownlands\" \"Essos\"      \"Targaryen\"  \"Dorne\"     \n\n$`3`\n[1] \"Baratheon\" \"Reach\"     \"Tyrell\"   \n\n$`4`\n[1] \"Stormlands\" \"Riverlands\" \"Frey\"      \n\n$`5`\n[1] \"Lannister\"   \"Westerlands\"\n\n$`6`\n[1] \"Stark\" \"North\"\n\n\n        Block 1 Block 2 Block 3 Block 4 Block 5 Block 6\nBlock 1    1.00    0.13    0.00    0.33    0.00    0.33\nBlock 2    0.13    0.60    0.20    0.33    0.20    0.20\nBlock 3    0.00    0.20    1.00    0.44    0.50    0.33\nBlock 4    0.33    0.33    0.44    0.67    0.33    0.33\nBlock 5    0.00    0.20    0.50    0.33    1.00    0.50\nBlock 6    0.33    0.20    0.33    0.33    0.50    1.00\n\n\n\n\n\n     comm.fg degree degree.wt bonpow betweenness close constraint\n[1,]       1    4.3        16  -1.08         1.8  0.53       0.45\n[2,]       2    5.2        22  -0.79         9.3  0.57       0.62\n[3,]       3    6.0        22  -0.96         8.9  0.59       0.45\n[4,]       4    6.7        30  -1.54         7.1  0.62       0.37\n[5,]       5    5.5        25  -0.15         1.4  0.58       0.57\n[6,]       6    6.0        36  -0.29         6.9  0.59       0.53\n     eigen eigen.rc eigen.dc role_cmpl role_avg role_sing role_wrd n\n[1,]  0.17    0.018     0.15       1.0      1.0       1.0      1.0 3\n[2,]  0.20    0.041     0.16       2.2      1.6       1.6      3.2 5\n[3,]  0.22    0.039     0.18       2.3      1.7       1.0      2.3 3\n[4,]  0.27    0.076     0.19       2.0      1.7       1.7      3.3 3\n[5,]  0.25    0.095     0.16       1.5      1.0       1.0      3.0 2\n[6,]  0.24    0.114     0.12       2.5      2.0       1.5      3.5 2\n\n\n\n\nIn this partition, most major families are in the same community with their ruling territories, which is very reasonable. The block model clear 0-1 pattern. The within-community density is mostly 1, with two of them are 0.60 and 0.67. Density of ties between communities are relatively low.\nThe means of centrality scores by community don’t show a clear pattern. Compared with roles, communities focus on the within-group connection. To some extent, each community is a combination of different roles (core + periphery.) Each community has similar means of centrality scores, since they are averages of core roles (high value) and periphery(low value). Roughly, we can say community one has lower influence, which align with conclusio I got in last assignment (about roles.)\n##Walktrap Community Detection\n\n$`1`\n[1] \"Arryn\"      \"Tully\"      \"Vale\"       \"Stormlands\" \"Riverlands\"\n[6] \"Frey\"      \n\n$`2`\n[1] \"Martell\"    \"Crownlands\" \"Essos\"      \"Targaryen\"  \"Dorne\"     \n\n$`3`\n[1] \"Baratheon\" \"Reach\"     \"Tyrell\"   \n\n$`4`\n[1] \"Stark\" \"North\"\n\n$`5`\n[1] \"Lannister\"   \"Westerlands\"\n        Block 1 Block 2 Block 3 Block 4 Block 5\nBlock 1    0.53    0.23    0.22    0.33    0.17\nBlock 2    0.23    0.60    0.20    0.20    0.20\nBlock 3    0.22    0.20    1.00    0.33    0.50\nBlock 4    0.33    0.20    0.33    1.00    0.50\nBlock 5    0.17    0.20    0.50    0.50    1.00\n     comm.wt degree degree.wt bonpow betweenness close constraint\n[1,]       1    5.5        23  -1.31         4.5  0.58       0.41\n[2,]       2    5.2        22  -0.79         9.3  0.57       0.62\n[3,]       3    6.0        22  -0.96         8.9  0.59       0.45\n[4,]       4    6.0        36  -0.29         6.9  0.59       0.53\n[5,]       5    5.5        25  -0.15         1.4  0.58       0.57\n     eigen eigen.rc eigen.dc role_cmpl role_avg role_sing role_wrd\n[1,]  0.22    0.047     0.17       1.5      1.3       1.3      2.2\n[2,]  0.20    0.041     0.16       2.2      1.6       1.6      3.2\n[3,]  0.22    0.039     0.18       2.3      1.7       1.0      2.3\n[4,]  0.24    0.114     0.12       2.5      2.0       1.5      3.5\n[5,]  0.25    0.095     0.16       1.5      1.0       1.0      3.0\n     comm.fg n\n[1,]     2.5 6\n[2,]     2.0 5\n[3,]     3.0 3\n[4,]     6.0 2\n[5,]     5.0 2\n\n\nSimilarly, communities partitioned by Walktrap algorithm also show (roughly) major family + ruling territory pattern. The difference is, that community 1 & 4 are combined together.\n##Leading Label Propagation Community Detection\n\n$`1`\n[1] \"Arryn\" \"Vale\" \n\n$`2`\n[1] \"Tully\"      \"Stormlands\" \"Riverlands\" \"Frey\"      \n\n$`3`\n[1] \"Baratheon\" \"Reach\"     \"Tyrell\"   \n\n$`4`\n[1] \"Lannister\"   \"Westerlands\"\n\n$`5`\n[1] \"Martell\"    \"Crownlands\" \"Essos\"      \"Targaryen\"  \"Dorne\"     \n\n$`6`\n[1] \"Stark\" \"North\"\n        Block 1 Block 2 Block 3 Block 4 Block 5 Block 6\nBlock 1    1.00    0.38    0.00    0.00    0.20    0.25\nBlock 2    0.38    0.67    0.33    0.25    0.25    0.38\nBlock 3    0.00    0.33    1.00    0.50    0.20    0.33\nBlock 4    0.00    0.25    0.50    1.00    0.20    0.50\nBlock 5    0.20    0.25    0.20    0.20    0.60    0.20\nBlock 6    0.25    0.38    0.33    0.50    0.20    1.00\n     comm.lab degree degree.wt bonpow betweenness close constraint\n[1,]        1    4.0        22  -1.10         1.6  0.53       0.44\n[2,]        2    6.2        24  -1.42         5.9  0.60       0.40\n[3,]        3    6.0        22  -0.96         8.9  0.59       0.45\n[4,]        4    5.5        25  -0.15         1.4  0.58       0.57\n[5,]        5    5.2        22  -0.79         9.3  0.57       0.62\n[6,]        6    6.0        36  -0.29         6.9  0.59       0.53\n     eigen eigen.rc eigen.dc role_cmpl role_avg role_sing role_wrd\n[1,]  0.16    0.024     0.13       1.0      1.0       1.0      1.0\n[2,]  0.25    0.059     0.19       1.8      1.5       1.5      2.8\n[3,]  0.22    0.039     0.18       2.3      1.7       1.0      2.3\n[4,]  0.25    0.095     0.16       1.5      1.0       1.0      3.0\n[5,]  0.20    0.041     0.16       2.2      1.6       1.6      3.2\n[6,]  0.24    0.114     0.12       2.5      2.0       1.5      3.5\n     comm.fg comm.wt n\n[1,]     1.0       1 2\n[2,]     3.2       1 4\n[3,]     3.0       3 3\n[4,]     5.0       5 2\n[5,]     2.0       2 5\n[6,]     6.0       4 2\n\n\nLeading label propagation algorithm gives the same partition with the fast and greedy one.\n##Edge Betweenness Community Detection\n\n$`1`\n[1] \"Arryn\" \"Vale\" \n\n$`2`\n[1] \"Tully\"      \"Stormlands\" \"Riverlands\" \"Frey\"      \n\n$`3`\n[1] \"Baratheon\" \"Reach\"     \"Tyrell\"   \n\n$`4`\n[1] \"Lannister\"   \"Westerlands\"\n\n$`5`\n[1] \"Martell\"    \"Crownlands\" \"Essos\"      \"Targaryen\"  \"Dorne\"     \n\n$`6`\n[1] \"Stark\" \"North\"\n        Block 1 Block 2 Block 3 Block 4 Block 5 Block 6\nBlock 1    1.00    0.38    0.00    0.00    0.20    0.25\nBlock 2    0.38    0.67    0.33    0.25    0.25    0.38\nBlock 3    0.00    0.33    1.00    0.50    0.20    0.33\nBlock 4    0.00    0.25    0.50    1.00    0.20    0.50\nBlock 5    0.20    0.25    0.20    0.20    0.60    0.20\nBlock 6    0.25    0.38    0.33    0.50    0.20    1.00\n     comm.edge degree degree.wt bonpow betweenness close constraint\n[1,]         1    4.0        22  -1.10         1.6  0.53       0.44\n[2,]         2    6.2        24  -1.42         5.9  0.60       0.40\n[3,]         3    6.0        22  -0.96         8.9  0.59       0.45\n[4,]         4    5.5        25  -0.15         1.4  0.58       0.57\n[5,]         5    5.2        22  -0.79         9.3  0.57       0.62\n[6,]         6    6.0        36  -0.29         6.9  0.59       0.53\n     eigen eigen.rc eigen.dc role_cmpl role_avg role_sing role_wrd\n[1,]  0.16    0.024     0.13       1.0      1.0       1.0      1.0\n[2,]  0.25    0.059     0.19       1.8      1.5       1.5      2.8\n[3,]  0.22    0.039     0.18       2.3      1.7       1.0      2.3\n[4,]  0.25    0.095     0.16       1.5      1.0       1.0      3.0\n[5,]  0.20    0.041     0.16       2.2      1.6       1.6      3.2\n[6,]  0.24    0.114     0.12       2.5      2.0       1.5      3.5\n     comm.fg comm.wt comm.lab n\n[1,]     1.0       1        1 2\n[2,]     3.2       1        2 4\n[3,]     3.0       3        3 3\n[4,]     5.0       5        4 2\n[5,]     2.0       2        5 5\n[6,]     6.0       4        6 2\n\n\nEdge betweenness algorithm gives very similar results. The only difference is that the Tully family is divided into Frey’s community.\n##Eigenvector Community Detection\n\n$`1`\n[1] \"Arryn\"      \"Baratheon\"  \"Martell\"    \"Stormlands\" \"Crownlands\"\n[6] \"Essos\"      \"Targaryen\"  \"Dorne\"     \n\n$`2`\n[1] \"Tully\"      \"Vale\"       \"Riverlands\" \"Frey\"      \n\n$`3`\n[1] \"Reach\"\n\n$`4`\n[1] \"Stark\" \"North\"\n\n$`5`\n[1] \"Lannister\"   \"Westerlands\"\n\n$`6`\n[1] \"Tyrell\"\n        Block 1 Block 2 Block 3 Block 4 Block 5 Block 6\nBlock 1    0.39    0.25    0.38    0.19    0.19    0.12\nBlock 2    0.25    0.83    0.50    0.50    0.25    0.00\nBlock 3    0.38    0.50     NaN    0.50    1.00    1.00\nBlock 4    0.19    0.50    0.50    1.00    0.50    0.00\nBlock 5    0.19    0.25    1.00    0.50    1.00    0.00\nBlock 6    0.12    0.00    1.00    0.00    0.00     NaN\n     comm.eigen degree degree.wt bonpow betweenness close constraint\n[1,]          1    5.0        18  -0.97         7.4  0.57       0.55\n[2,]          2    6.5        30  -1.20         6.4  0.60       0.38\n[3,]          3    9.0        46  -1.44        15.8  0.68       0.32\n[4,]          4    6.0        36  -0.29         6.9  0.59       0.53\n[5,]          5    5.5        25  -0.15         1.4  0.58       0.57\n[6,]          6    2.0        11  -0.69         0.0  0.45       0.66\n     eigen eigen.rc eigen.dc role_cmpl role_avg role_sing role_wrd\n[1,] 0.192    0.033    0.159       2.0      1.5       1.4      2.8\n[2,] 0.249    0.062    0.186       1.5      1.5       1.5      2.2\n[3,] 0.323    0.065    0.258       3.0      2.0       1.0      2.0\n[4,] 0.238    0.114    0.123       2.5      2.0       1.5      3.5\n[5,] 0.251    0.095    0.156       1.5      1.0       1.0      3.0\n[6,] 0.085    0.030    0.055       2.0      1.0       1.0      3.0\n     comm.fg comm.wt comm.lab comm.edge n\n[1,]     2.2     1.9      3.9       3.9 8\n[2,]     2.5     1.0      1.8       1.8 4\n[3,]     3.0     3.0      3.0       3.0 1\n[4,]     6.0     4.0      6.0       6.0 2\n[5,]     5.0     5.0      4.0       4.0 2\n[6,]     3.0     3.0      3.0       3.0 1\n\n\nEigenvector algorithm gives quite a different result, which seems not to make sense according to the novel. The within-community density is not as high, and have some 1-value for between communities density.\n##Spinglass Community Detection\n\n$`1`\n[1] \"Baratheon\" \"Reach\"     \"Tyrell\"   \n\n$`2`\n[1] \"Stark\" \"North\"\n\n$`3`\n[1] \"Arryn\"      \"Tully\"      \"Vale\"       \"Stormlands\" \"Riverlands\"\n[6] \"Frey\"      \n\n$`4`\n[1] \"Lannister\"   \"Westerlands\"\n\n$`5`\n[1] \"Martell\"    \"Crownlands\" \"Essos\"      \"Targaryen\"  \"Dorne\"     \n        Block 1 Block 2 Block 3 Block 4 Block 5\nBlock 1    1.00    0.33    0.22    0.50    0.20\nBlock 2    0.33    1.00    0.33    0.50    0.20\nBlock 3    0.22    0.33    0.53    0.17    0.23\nBlock 4    0.50    0.50    0.17    1.00    0.20\nBlock 5    0.20    0.20    0.23    0.20    0.60\n     comm.spin degree degree.wt bonpow betweenness close constraint\n[1,]         1    6.0        22  -0.96         8.9  0.59       0.45\n[2,]         2    6.0        36  -0.29         6.9  0.59       0.53\n[3,]         3    5.5        23  -1.31         4.5  0.58       0.41\n[4,]         4    5.5        25  -0.15         1.4  0.58       0.57\n[5,]         5    5.2        22  -0.79         9.3  0.57       0.62\n     eigen eigen.rc eigen.dc role_cmpl role_avg role_sing role_wrd\n[1,]  0.22    0.039     0.18       2.3      1.7       1.0      2.3\n[2,]  0.24    0.114     0.12       2.5      2.0       1.5      3.5\n[3,]  0.22    0.047     0.17       1.5      1.3       1.3      2.2\n[4,]  0.25    0.095     0.16       1.5      1.0       1.0      3.0\n[5,]  0.20    0.041     0.16       2.2      1.6       1.6      3.2\n     comm.fg comm.wt comm.lab comm.edge comm.eigen n\n[1,]     3.0       3      3.0       3.0        3.3 3\n[2,]     6.0       4      6.0       6.0        4.0 2\n[3,]     2.5       1      1.7       1.7        1.7 6\n[4,]     5.0       5      4.0       4.0        5.0 2\n[5,]     2.0       2      5.0       5.0        1.0 5\n\n\nSpinglass algorithm gives the same result with walktrap one.\n##Compare Community Partitions\n\n\n\n\nfastgreedy   walktrap      label       edge      eigen       spin \n 0.5173683  0.3289444  0.5149705  0.5149705  0.4572361  0.0744876 \n    alg.a   alg.b          meth    result\n1 comm.fg comm.wt            vi 0.2310491\n2 comm.fg comm.wt           nmi 0.9288836\n3 comm.fg comm.wt    split.join 3.0000000\n4 comm.fg comm.wt          rand 0.9411765\n5 comm.fg comm.wt adjusted.rand 0.7895461\n    alg.a    alg.b          meth    result\n1 comm.fg comm.lab            vi 0.2310491\n2 comm.fg comm.lab           nmi 0.9332432\n3 comm.fg comm.lab    split.join 2.0000000\n4 comm.fg comm.lab          rand 0.9673203\n5 comm.fg comm.lab adjusted.rand 0.8647215\n    alg.a     alg.b          meth    result\n1 comm.fg comm.edge            vi 0.2310491\n2 comm.fg comm.edge           nmi 0.9332432\n3 comm.fg comm.edge    split.join 2.0000000\n4 comm.fg comm.edge          rand 0.9673203\n5 comm.fg comm.edge adjusted.rand 0.8647215\n    alg.a      alg.b          meth    result\n1 comm.fg comm.eigen            vi 1.0264363\n2 comm.fg comm.eigen           nmi 0.6835936\n3 comm.fg comm.eigen    split.join 9.0000000\n4 comm.fg comm.eigen          rand 0.8104575\n5 comm.fg comm.eigen adjusted.rand 0.3845194\n    alg.a     alg.b          meth    result\n1 comm.fg comm.spin            vi 0.2310491\n2 comm.fg comm.spin           nmi 0.9288836\n3 comm.fg comm.spin    split.join 3.0000000\n4 comm.fg comm.spin          rand 0.9411765\n5 comm.fg comm.spin adjusted.rand 0.7895461\n\nThe comparison also shows that the fast and greedy method and leading label propagation give the same partition, and waltrap and edge betweenness give very similar ones. All these 4 partitions make sense.\n(Can’t understand why spinglass algorithm get such a low modularity score, since it has exactly the same partition with walktrap algorithm.)\n\n\n\n",
    "preview": "posts/httpsyli210813githubiosocialnetworkanalysishw7/distill-preview.png",
    "last_modified": "2022-03-27T15:50:36-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsrpubscombean22z881579/",
    "title": "Assignment7",
    "description": "assignment for political and social network analysis",
    "author": [
      {
        "name": "Zoe Bean",
        "url": {}
      }
    ],
    "date": "2022-03-27",
    "categories": [],
    "contents": "\r\n\r\n\r\nlibrary(tidyverse)\r\nlibrary(GGally)\r\n\r\nsource(\"./Import Scripts/Game of Thrones Interactions.R\")\r\n\r\n\r\n\r\nThe Network\r\nThis is an edgelist dataset. It has 298 vertices and 9131 edges, it is not directed or bipartite, and it is weighted. The vertices are the people, with attributes regarding the time and location of their appearances, as well as the point of view the story is in for these appearances.\r\nThe dataset is the Game of Thrones Interactions dataset, with characters as nodes, and instances of characters being mentioned in the same vicinity are the edges.\r\nHere is the network plots that I have managed to create with this data so far:\r\n\r\n\r\nV(network_igraph)$size<-5\r\nV(network_igraph)$label.cex = 1/2\r\nplot(network_igraph, layout_with_lgl(network_igraph), vertex.label=NA)\r\n\r\n\r\n\r\n#a subset of the data with a lot of weight on the edges- meaning more interactions between the characters\r\n#weight chosen by rerunning until the plot is somewhat readable \r\nsub_stat<-get.inducedSubgraph(network_statnet,eid=which(network_statnet%e%'weight'>10))\r\nplot(sub_stat)\r\n\r\n\r\n\r\n#create the same igrpah subset\r\nsub_igraph <- subgraph.edges(network_igraph, E(network_igraph)[E(network_igraph)$weight>10], del=F)\r\nsub_igraph <- delete_vertices(sub_igraph, degree(sub_igraph, mode = \"in\")==0)\r\n\r\n#format igrpah subset to be more readable\r\nV(sub_igraph)$size<-5\r\nV(sub_igraph)$label.cex = 1/2\r\n#plot igrpah\r\nplot(sub_igraph, layout=layout_nicely)\r\n\r\n\r\n\r\n\r\nCommunity Clusters\r\nI know that this is a big mess, but I couldn’t figure out how to make a subset of the network_nodes variable such that it has the same nodes as the above subgraphs. Which means that it is very dfficult to actually see and understand the created communites. So this is the code I have for now… I’ll hold off on analysis until I can figure out the nodes thing\r\n\r\n\r\n#function to summarize the node statistics by community group\r\nnodes.by.gp<-function(network.nodes, groupvar){\r\n  network.nodes%>%\r\n  select(-Name)%>%\r\n  group_by_(groupvar) %>%\r\n  mutate(n=n())%>%\r\n  summarise_all(mean, na.rm=TRUE)%>%\r\n  as.matrix()%>%\r\n  print(digits=2)\r\n}\r\n\r\n\r\n\r\nFast and Greedy Detection\r\n\r\n\r\n#Run clustering algorithm: fast_greedy\r\ngot.fg<-cluster_fast_greedy(network_igraph)\r\n\r\n#to get an idea of who is in what group\r\nigraph::groups(network_igraph)\r\n\r\n\r\nlist()\r\n\r\n#blockmodel with community membership\r\nprint(blockmodel(network_statnet,got.fg$membership)$block.model, digits=2)\r\n\r\n\r\n        Block 1 Block 2 Block 3 Block 4\r\nBlock 1   0.303   0.090    0.13   0.055\r\nBlock 2   0.090   0.500    0.20   0.051\r\nBlock 3   0.134   0.203    0.41   0.117\r\nBlock 4   0.055   0.051    0.12   0.500\r\n\r\n#add community membership as a node attribute\r\nnetwork_nodes$got.fg<-got.fg$membership\r\n\r\n#summarize node statistics by community\r\nnodes.by.gp(network_nodes,\"got.fg\")\r\n\r\n\r\n     got.fg Appear   pov majorpov major   n\r\n[1,]      1   12.7 0.118    0.094  0.14 127\r\n[2,]      2   14.0 0.153    0.119  0.19  59\r\n[3,]      3   15.0 0.071    0.071  0.13  99\r\n[4,]      4    5.4 0.000    0.000  0.00  13\r\n\r\n#plot network with community coloringy\r\nplot(got.fg,network_igraph, layout=layout_with_graphopt, max.sa.movement=10 )\r\n\r\n\r\n\r\n\r\nWalktrap Detection\r\n\r\n\r\n#Run clustering algorithm: walktrap\r\ngot.wt<-walktrap.community(network_igraph,steps=55)\r\n\r\n#to get an idea of who is in what group\r\nigraph::groups(got.wt)\r\n\r\n\r\n$`1`\r\n [1] \"Aegon Frey (Jinglebell)\" \"Aegon Targaryen\"        \r\n [3] \"Allar Deem\"              \"Barra\"                  \r\n [5] \"Benjen Stark\"            \"Beric Dondarrion\"       \r\n [7] \"Bronn\"                   \"Cersei Lannister\"       \r\n [9] \"Chiswyck\"                \"Colemon\"                \r\n[11] \"Cortnay Penrose\"         \"Dick Crabb\"             \r\n[13] \"Dontos Hollard\"          \"Eddard Karstark\"        \r\n[15] \"Edmure Tully\"            \"Emmon Frey\"             \r\n[17] \"Garlan Tyrell\"           \"Gerris Drinkwater\"      \r\n[19] \"Gladden Wylde\"           \"Gregor Clegane\"         \r\n[21] \"Guyard Morrigen\"         \"Harlan Hunter\"          \r\n[23] \"Hizdahr zo Loraq\"        \"Hugh\"                   \r\n[25] \"Illyrio Mopatis\"         \"Ilyn Payne\"             \r\n[27] \"Jaqen H'ghar\"            \"Jeyne Westerling\"       \r\n[29] \"Kindly Man\"              \"Lollys Stokeworth\"      \r\n[31] \"Lommy Greenhands\"        \"Walder Frey\"            \r\n[33] \"Lothar Mallery\"          \"Lothor Brune\"           \r\n[35] \"Lucas Blackwood\"         \"Lymond Vikary\"          \r\n[37] \"Mace Tyrell\"             \"Meryn Trant\"            \r\n[39] \"Moqorro\"                 \"Mycah\"                  \r\n[41] \"Nan\"                     \"Nymeria\"                \r\n[43] \"Osha\"                    \"Osmund Kettleblack\"     \r\n[45] \"Pate\"                    \"Penny\"                  \r\n[47] \"Polliver\"                \"Raymun Darry\"           \r\n[49] \"Raymund Frey\"            \"Rickard Karstark\"       \r\n[51] \"Sandor Clegane\"          \"Satin\"                  \r\n[53] \"Stiv\"                    \"Styr\"                   \r\n[55] \"Tickler\"                 \"Vardis Egen\"            \r\n[57] \"Varly\"                   \"Oppo\"                   \r\n[59] \"Yurkhaz zo Yunzak\"      \r\n\r\n$`2`\r\n  [1] \"Addam Marbrand\"       \"Aemon Targaryen\"     \r\n  [3] \"Alester Florent\"      \"Alfyn\"               \r\n  [5] \"Amory Lorch\"          \"Areo Hotah\"          \r\n  [7] \"Arthur Dayne\"         \"Arya Stark\"          \r\n  [9] \"Asha Greyjoy\"         \"Balon Greyjoy\"       \r\n [11] \"Bowen Marsh\"          \"Bran Stark\"          \r\n [13] \"Brandon Stark\"        \"Catelyn Tully\"       \r\n [15] \"Chayle\"               \"Coldhands\"           \r\n [17] \"Craster\"              \"Dareon\"              \r\n [19] \"Daryn Hornwood\"       \"Davos Seaworth\"      \r\n [21] \"Doran Martell\"        \"Khal Drogo\"          \r\n [23] \"Dywen\"                \"Edric Storm\"         \r\n [25] \"Emmon Cuy\"            \"Eon Hunter\"          \r\n [27] \"Garse Goodbrook\"      \"Gilly\"               \r\n [29] \"Haldon\"               \"Harwin\"              \r\n [31] \"Helman Tallhart\"      \"Hodor\"               \r\n [33] \"Hoster Tully\"         \"Janos Slynt\"         \r\n [35] \"Jared Frey\"           \"Joffrey Baratheon\"   \r\n [37] \"Jojen Reed\"           \"Jon Arryn\"           \r\n [39] \"Jon Connington\"       \"Jon Snow\"            \r\n [41] \"Jory Cassel\"          \"Lark\"                \r\n [43] \"Loras Tyrell\"         \"Luton\"               \r\n [45] \"Luwin\"                \"Lyanna Stark\"        \r\n [47] \"Aemon\"                \"Cressen\"             \r\n [49] \"Mag Mar Tun Doh Weg\"  \"Mance Rayder\"        \r\n [51] \"Merrett Frey\"         \"Mordane\"             \r\n [53] \"Myrcella Baratheon\"   \"Olenna Redwyne\"      \r\n [55] \"Ollo Lophand\"         \"Orton Merryweather\"  \r\n [57] \"Osney Kettleblack\"    \"Paul\"                \r\n [59] \"Podrick Payne\"        \"Pypar\"               \r\n [61] \"Quentyn Martell\"      \"Qyburn\"              \r\n [63] \"Ralf Kenning\"         \"Ramsay Snow\"         \r\n [65] \"Randyll Tarly\"        \"Rattleshirt\"         \r\n [67] \"Rhaegar Frey\"         \"Rickon Stark\"        \r\n [69] \"Robar Royce\"          \"Rodrik Cassel\"       \r\n [71] \"Roose Bolton\"         \"Rorge\"               \r\n [73] \"Ryman Frey\"           \"Salladhor Saan\"      \r\n [75] \"Samwell Tarly\"        \"Sansa Stark\"         \r\n [77] \"Sawane Botley\"        \"Selyse Florent\"      \r\n [79] \"Senelle\"              \"Shireen Baratheon\"   \r\n [81] \"Softfoot\"             \"Symond Frey\"         \r\n [83] \"Theon Greyjoy\"        \"Thoros of Myr\"       \r\n [85] \"Timeon\"               \"Timett\"              \r\n [87] \"Tion Frey\"            \"Tytos Frey\"          \r\n [89] \"Tywin Lannister\"      \"Vargo Hoat\"          \r\n [91] \"Vayon Poole\"          \"Viserys Targaryen\"   \r\n [93] \"Walder Frey (Little)\" \"Waymar Royce\"        \r\n [95] \"Willem Lannister\"     \"Wyman Manderly\"      \r\n [97] \"Ygritte\"              \"Yohn Royce\"          \r\n [99] \"Yoren\"                \"Dagon Codd\"          \r\n[101] \"Adrack Humble\"        \"the Others\"          \r\n\r\n$`3`\r\n [1] \"Aegon I Targaryen\"              \r\n [2] \"Aron Santagar\"                  \r\n [3] \"Arys Oakheart\"                  \r\n [4] \"Balman Byrch\"                   \r\n [5] \"Balon Swann\"                    \r\n [6] \"Belwas\"                         \r\n [7] \"Ben Plumm\"                      \r\n [8] \"Boros Blount\"                   \r\n [9] \"Brienne of Tarth\"               \r\n[10] \"Daario Naharis\"                 \r\n[11] \"Elia Martell\"                   \r\n[12] \"Groleo\"                         \r\n[13] \"Guncer Sunglass\"                \r\n[14] \"Hubard Rambton\"                 \r\n[15] \"Irri\"                           \r\n[16] \"Jhiqui\"                         \r\n[17] \"Jhogo\"                          \r\n[18] \"Kevan Lannister\"                \r\n[19] \"Kraznys mo Nakloz\"              \r\n[20] \"Lancel Lannister\"               \r\n[21] \"Mero\"                           \r\n[22] \"Mirri Maz Duur\"                 \r\n[23] \"Missandei\"                      \r\n[24] \"Oznak zo Pahl\"                  \r\n[25] \"Paxter Redwyne\"                 \r\n[26] \"Petyr Baelish\"                  \r\n[27] \"Pycelle\"                        \r\n[28] \"Qotho\"                          \r\n[29] \"Quaithe\"                        \r\n[30] \"Quaro\"                          \r\n[31] \"Renly Baratheon\"                \r\n[32] \"Reznak mo Reznak\"               \r\n[33] \"Rhaegar Targaryen\"              \r\n[34] \"Rhaego\"                         \r\n[35] \"Rhaenys Targaryen\"              \r\n[36] \"Robert Arryn\"                   \r\n[37] \"Skahaz mo Kandaq\"               \r\n[38] \"Tommen Baratheon\"               \r\n[39] \"Tyrion Lannister\"               \r\n[40] \"Tysha\"                          \r\n[41] \"Willas Tyrell\"                  \r\n[42] \"First High Septon (the fat one)\"\r\n[43] \"Khrazz\"                         \r\n\r\n$`4`\r\n [1] \"Aeron Greyjoy\"        \"Antario Jast\"        \r\n [3] \"Arnolf Karstark\"      \"Aurane Waters\"       \r\n [5] \"Axell Florent\"        \"Biter\"               \r\n [7] \"Chett\"                \"Cleos Frey\"          \r\n [9] \"Cotter Pyke\"          \"Cragorn\"             \r\n[11] \"Dacey Mormont\"        \"Daenerys Targaryen\"  \r\n[13] \"Dalla\"                \"Dirk\"                \r\n[15] \"Donal Noye\"           \"Ebben\"               \r\n[17] \"Eddard Stark\"         \"Eddison Tollett\"     \r\n[19] \"Gared\"                \"Garth Greyfeather\"   \r\n[21] \"Grenn\"                \"Hake\"                \r\n[23] \"Hal\"                  \"Hosteen Frey\"        \r\n[25] \"Hot Pie\"              \"Hullen\"              \r\n[27] \"Jacelyn Bywater\"      \"Jack Bulwer\"         \r\n[29] \"Jafer Flowers\"        \"Jaremy Rykker\"       \r\n[31] \"Jeyne Poole\"          \"Jon Umber (Greatjon)\"\r\n[33] \"Kyra\"                 \"Mandon Moore\"        \r\n[35] \"Othor\"                \"Prendahl na Ghezn\"   \r\n[37] \"Pyg\"                  \"Qhorin Halfhand\"     \r\n[39] \"Reek\"                 \"Rickard Stark\"       \r\n[41] \"Robb Stark\"           \"Roland Crakehall\"    \r\n[43] \"Rupert Brax\"          \"Ryles\"               \r\n[45] \"Sallor the Bald\"      \"Shae\"                \r\n[47] \"Shagwell\"             \"Stafford Lannister\"  \r\n[49] \"Stannis Baratheon\"    \"Stevron Frey\"        \r\n[51] \"Tom of Sevenstreams\"  \"Tormund\"             \r\n[53] \"Utt\"                  \"Varamyr\"             \r\n[55] \"Varys\"                \"Weese\"               \r\n[57] \"Yellow Dick\"          \"Talbert Serry\"       \r\n[59] \"Alliser Thorne\"      \r\n\r\n$`5`\r\n [1] \"Aerys II Targaryen\" \"Alebelly\"           \"Arianne Martell\"   \r\n [4] \"Barristan Selmy\"    \"Benfred Tallhart\"   \"Brynden Tully\"     \r\n [7] \"Donella Manderly\"   \"Euron Greyjoy\"      \"Falyse Stokeworth\" \r\n[10] \"Gendry\"             \"Iggo\"               \"Jaime Lannister\"   \r\n[13] \"Jeor Mormont\"       \"Jorah Mormont\"      \"Lyman Darry\"       \r\n[16] \"Lysa Tully\"         \"Margaery Tyrell\"    \"Meera Reed\"        \r\n[19] \"Melisandre\"         \"Mikken\"             \"Oberyn Martell\"    \r\n[22] \"Rafford\"            \"Robert Baratheon\"   \"Robett Glover\"     \r\n[25] \"Shagga\"             \"Syrio Forel\"        \"Taena of Myr\"      \r\n[28] \"Thistle\"            \"Torrhen Karstark\"   \"Val\"               \r\n[31] \"Victarion Greyjoy\"  \"Weeper\"             \"Will\"              \r\n[34] \"Wylis Manderly\"     \"Kerwin\"            \r\n\r\n#blockmodel with community membership\r\nprint(blockmodel(network_statnet,got.wt$membership)$block.model, digits=2)\r\n\r\n\r\n        Block 1 Block 2 Block 3 Block 4 Block 5\r\nBlock 1    0.18    0.18    0.19    0.13    0.20\r\nBlock 2    0.18    0.27    0.20    0.22    0.26\r\nBlock 3    0.19    0.20    0.39    0.12    0.24\r\nBlock 4    0.13    0.22    0.12    0.19    0.19\r\nBlock 5    0.20    0.26    0.24    0.19    0.24\r\n\r\n#add community membership as a node attribute\r\nnetwork_nodes$got.wt<-got.wt$membership\r\n\r\n#summarize node statistics by community\r\nnodes.by.gp(network_nodes,\"got.wt\")\r\n\r\n\r\n     got.wt Appear   pov majorpov major got.fg   n\r\n[1,]      1     10 0.034    0.017 0.051    2.5  59\r\n[2,]      2     16 0.137    0.118 0.176    1.7 102\r\n[3,]      3     14 0.093    0.093 0.186    2.3  43\r\n[4,]      4     12 0.085    0.068 0.119    1.7  59\r\n[5,]      5     15 0.171    0.143 0.171    2.0  35\r\n\r\n#plot network with community coloring\r\nplot(got.wt,network_igraph, layout=layout_with_graphopt, max.sa.movement=10 )\r\n\r\n\r\n\r\n\r\nLeading Label Propagation Detection\r\n\r\n\r\n#Run clustering algorithm: llp\r\ngot.lab<-label.propagation.community(network_igraph)\r\n\r\n#to get an idea of who is in what group\r\nigraph::groups(got.lab)\r\n\r\n\r\n$`1`\r\n  [1] \"Addam Marbrand\"                 \r\n  [2] \"Aegon Frey (Jinglebell)\"        \r\n  [3] \"Aegon I Targaryen\"              \r\n  [4] \"Aegon Targaryen\"                \r\n  [5] \"Aemon Targaryen\"                \r\n  [6] \"Aeron Greyjoy\"                  \r\n  [7] \"Aerys II Targaryen\"             \r\n  [8] \"Alebelly\"                       \r\n  [9] \"Alester Florent\"                \r\n [10] \"Alfyn\"                          \r\n [11] \"Allar Deem\"                     \r\n [12] \"Amory Lorch\"                    \r\n [13] \"Antario Jast\"                   \r\n [14] \"Areo Hotah\"                     \r\n [15] \"Arianne Martell\"                \r\n [16] \"Arnolf Karstark\"                \r\n [17] \"Aron Santagar\"                  \r\n [18] \"Arthur Dayne\"                   \r\n [19] \"Arya Stark\"                     \r\n [20] \"Arys Oakheart\"                  \r\n [21] \"Asha Greyjoy\"                   \r\n [22] \"Aurane Waters\"                  \r\n [23] \"Axell Florent\"                  \r\n [24] \"Balman Byrch\"                   \r\n [25] \"Balon Greyjoy\"                  \r\n [26] \"Balon Swann\"                    \r\n [27] \"Barra\"                          \r\n [28] \"Barristan Selmy\"                \r\n [29] \"Belwas\"                         \r\n [30] \"Ben Plumm\"                      \r\n [31] \"Benfred Tallhart\"               \r\n [32] \"Benjen Stark\"                   \r\n [33] \"Beric Dondarrion\"               \r\n [34] \"Biter\"                          \r\n [35] \"Boros Blount\"                   \r\n [36] \"Bowen Marsh\"                    \r\n [37] \"Bran Stark\"                     \r\n [38] \"Brandon Stark\"                  \r\n [39] \"Brienne of Tarth\"               \r\n [40] \"Bronn\"                          \r\n [41] \"Brynden Tully\"                  \r\n [42] \"Catelyn Tully\"                  \r\n [43] \"Cersei Lannister\"               \r\n [44] \"Chayle\"                         \r\n [45] \"Chett\"                          \r\n [46] \"Chiswyck\"                       \r\n [47] \"Cleos Frey\"                     \r\n [48] \"Coldhands\"                      \r\n [49] \"Colemon\"                        \r\n [50] \"Cortnay Penrose\"                \r\n [51] \"Cotter Pyke\"                    \r\n [52] \"Cragorn\"                        \r\n [53] \"Craster\"                        \r\n [54] \"Daario Naharis\"                 \r\n [55] \"Dacey Mormont\"                  \r\n [56] \"Daenerys Targaryen\"             \r\n [57] \"Dalla\"                          \r\n [58] \"Dareon\"                         \r\n [59] \"Daryn Hornwood\"                 \r\n [60] \"Davos Seaworth\"                 \r\n [61] \"Dick Crabb\"                     \r\n [62] \"Dirk\"                           \r\n [63] \"Donal Noye\"                     \r\n [64] \"Donella Manderly\"               \r\n [65] \"Dontos Hollard\"                 \r\n [66] \"Doran Martell\"                  \r\n [67] \"Khal Drogo\"                     \r\n [68] \"Dywen\"                          \r\n [69] \"Ebben\"                          \r\n [70] \"Eddard Karstark\"                \r\n [71] \"Eddard Stark\"                   \r\n [72] \"Eddison Tollett\"                \r\n [73] \"Edmure Tully\"                   \r\n [74] \"Edric Storm\"                    \r\n [75] \"Elia Martell\"                   \r\n [76] \"Emmon Cuy\"                      \r\n [77] \"Emmon Frey\"                     \r\n [78] \"Eon Hunter\"                     \r\n [79] \"Euron Greyjoy\"                  \r\n [80] \"Falyse Stokeworth\"              \r\n [81] \"Gared\"                          \r\n [82] \"Garlan Tyrell\"                  \r\n [83] \"Garse Goodbrook\"                \r\n [84] \"Garth Greyfeather\"              \r\n [85] \"Gendry\"                         \r\n [86] \"Gerris Drinkwater\"              \r\n [87] \"Gilly\"                          \r\n [88] \"Gladden Wylde\"                  \r\n [89] \"Gregor Clegane\"                 \r\n [90] \"Grenn\"                          \r\n [91] \"Groleo\"                         \r\n [92] \"Guncer Sunglass\"                \r\n [93] \"Guyard Morrigen\"                \r\n [94] \"Hake\"                           \r\n [95] \"Hal\"                            \r\n [96] \"Haldon\"                         \r\n [97] \"Harlan Hunter\"                  \r\n [98] \"Harwin\"                         \r\n [99] \"Helman Tallhart\"                \r\n[100] \"Hizdahr zo Loraq\"               \r\n[101] \"Hodor\"                          \r\n[102] \"Hosteen Frey\"                   \r\n[103] \"Hoster Tully\"                   \r\n[104] \"Hot Pie\"                        \r\n[105] \"Hubard Rambton\"                 \r\n[106] \"Hugh\"                           \r\n[107] \"Hullen\"                         \r\n[108] \"Iggo\"                           \r\n[109] \"Illyrio Mopatis\"                \r\n[110] \"Ilyn Payne\"                     \r\n[111] \"Irri\"                           \r\n[112] \"Jacelyn Bywater\"                \r\n[113] \"Jack Bulwer\"                    \r\n[114] \"Jafer Flowers\"                  \r\n[115] \"Jaime Lannister\"                \r\n[116] \"Janos Slynt\"                    \r\n[117] \"Jaqen H'ghar\"                   \r\n[118] \"Jared Frey\"                     \r\n[119] \"Jaremy Rykker\"                  \r\n[120] \"Jeor Mormont\"                   \r\n[121] \"Jeyne Poole\"                    \r\n[122] \"Jeyne Westerling\"               \r\n[123] \"Jhiqui\"                         \r\n[124] \"Jhogo\"                          \r\n[125] \"Joffrey Baratheon\"              \r\n[126] \"Jojen Reed\"                     \r\n[127] \"Jon Arryn\"                      \r\n[128] \"Jon Connington\"                 \r\n[129] \"Jon Snow\"                       \r\n[130] \"Jon Umber (Greatjon)\"           \r\n[131] \"Jorah Mormont\"                  \r\n[132] \"Jory Cassel\"                    \r\n[133] \"Kevan Lannister\"                \r\n[134] \"Kindly Man\"                     \r\n[135] \"Kraznys mo Nakloz\"              \r\n[136] \"Kyra\"                           \r\n[137] \"Lancel Lannister\"               \r\n[138] \"Lark\"                           \r\n[139] \"Lollys Stokeworth\"              \r\n[140] \"Lommy Greenhands\"               \r\n[141] \"Loras Tyrell\"                   \r\n[142] \"Walder Frey\"                    \r\n[143] \"Lothar Mallery\"                 \r\n[144] \"Lothor Brune\"                   \r\n[145] \"Lucas Blackwood\"                \r\n[146] \"Luton\"                          \r\n[147] \"Luwin\"                          \r\n[148] \"Lyanna Stark\"                   \r\n[149] \"Lyman Darry\"                    \r\n[150] \"Lymond Vikary\"                  \r\n[151] \"Lysa Tully\"                     \r\n[152] \"Mace Tyrell\"                    \r\n[153] \"Aemon\"                          \r\n[154] \"Cressen\"                        \r\n[155] \"Mag Mar Tun Doh Weg\"            \r\n[156] \"Mance Rayder\"                   \r\n[157] \"Mandon Moore\"                   \r\n[158] \"Margaery Tyrell\"                \r\n[159] \"Meera Reed\"                     \r\n[160] \"Melisandre\"                     \r\n[161] \"Mero\"                           \r\n[162] \"Merrett Frey\"                   \r\n[163] \"Meryn Trant\"                    \r\n[164] \"Mikken\"                         \r\n[165] \"Mirri Maz Duur\"                 \r\n[166] \"Missandei\"                      \r\n[167] \"Moqorro\"                        \r\n[168] \"Mordane\"                        \r\n[169] \"Mycah\"                          \r\n[170] \"Myrcella Baratheon\"             \r\n[171] \"Nan\"                            \r\n[172] \"Nymeria\"                        \r\n[173] \"Oberyn Martell\"                 \r\n[174] \"Olenna Redwyne\"                 \r\n[175] \"Ollo Lophand\"                   \r\n[176] \"Orton Merryweather\"             \r\n[177] \"Osha\"                           \r\n[178] \"Osmund Kettleblack\"             \r\n[179] \"Osney Kettleblack\"              \r\n[180] \"Othor\"                          \r\n[181] \"Oznak zo Pahl\"                  \r\n[182] \"Pate\"                           \r\n[183] \"Paxter Redwyne\"                 \r\n[184] \"Paul\"                           \r\n[185] \"Penny\"                          \r\n[186] \"Petyr Baelish\"                  \r\n[187] \"Podrick Payne\"                  \r\n[188] \"Polliver\"                       \r\n[189] \"Prendahl na Ghezn\"              \r\n[190] \"Pycelle\"                        \r\n[191] \"Pyg\"                            \r\n[192] \"Pypar\"                          \r\n[193] \"Qhorin Halfhand\"                \r\n[194] \"Qotho\"                          \r\n[195] \"Quaithe\"                        \r\n[196] \"Quaro\"                          \r\n[197] \"Quentyn Martell\"                \r\n[198] \"Qyburn\"                         \r\n[199] \"Rafford\"                        \r\n[200] \"Ralf Kenning\"                   \r\n[201] \"Ramsay Snow\"                    \r\n[202] \"Randyll Tarly\"                  \r\n[203] \"Rattleshirt\"                    \r\n[204] \"Raymun Darry\"                   \r\n[205] \"Raymund Frey\"                   \r\n[206] \"Reek\"                           \r\n[207] \"Renly Baratheon\"                \r\n[208] \"Reznak mo Reznak\"               \r\n[209] \"Rhaegar Frey\"                   \r\n[210] \"Rhaegar Targaryen\"              \r\n[211] \"Rhaego\"                         \r\n[212] \"Rhaenys Targaryen\"              \r\n[213] \"Rickard Karstark\"               \r\n[214] \"Rickard Stark\"                  \r\n[215] \"Rickon Stark\"                   \r\n[216] \"Robar Royce\"                    \r\n[217] \"Robb Stark\"                     \r\n[218] \"Robert Arryn\"                   \r\n[219] \"Robert Baratheon\"               \r\n[220] \"Robett Glover\"                  \r\n[221] \"Rodrik Cassel\"                  \r\n[222] \"Roland Crakehall\"               \r\n[223] \"Roose Bolton\"                   \r\n[224] \"Rorge\"                          \r\n[225] \"Rupert Brax\"                    \r\n[226] \"Ryles\"                          \r\n[227] \"Ryman Frey\"                     \r\n[228] \"Salladhor Saan\"                 \r\n[229] \"Sallor the Bald\"                \r\n[230] \"Samwell Tarly\"                  \r\n[231] \"Sandor Clegane\"                 \r\n[232] \"Sansa Stark\"                    \r\n[233] \"Satin\"                          \r\n[234] \"Sawane Botley\"                  \r\n[235] \"Selyse Florent\"                 \r\n[236] \"Senelle\"                        \r\n[237] \"Shae\"                           \r\n[238] \"Shagga\"                         \r\n[239] \"Shagwell\"                       \r\n[240] \"Shireen Baratheon\"              \r\n[241] \"Skahaz mo Kandaq\"               \r\n[242] \"Softfoot\"                       \r\n[243] \"Stafford Lannister\"             \r\n[244] \"Stannis Baratheon\"              \r\n[245] \"Stevron Frey\"                   \r\n[246] \"Stiv\"                           \r\n[247] \"Styr\"                           \r\n[248] \"Symond Frey\"                    \r\n[249] \"Syrio Forel\"                    \r\n[250] \"Taena of Myr\"                   \r\n[251] \"Theon Greyjoy\"                  \r\n[252] \"Thistle\"                        \r\n[253] \"Thoros of Myr\"                  \r\n[254] \"Tickler\"                        \r\n[255] \"Timeon\"                         \r\n[256] \"Timett\"                         \r\n[257] \"Tion Frey\"                      \r\n[258] \"Tom of Sevenstreams\"            \r\n[259] \"Tommen Baratheon\"               \r\n[260] \"Tormund\"                        \r\n[261] \"Torrhen Karstark\"               \r\n[262] \"Tyrion Lannister\"               \r\n[263] \"Tysha\"                          \r\n[264] \"Tytos Frey\"                     \r\n[265] \"Tywin Lannister\"                \r\n[266] \"Utt\"                            \r\n[267] \"Val\"                            \r\n[268] \"Varamyr\"                        \r\n[269] \"Vardis Egen\"                    \r\n[270] \"Vargo Hoat\"                     \r\n[271] \"Varly\"                          \r\n[272] \"Varys\"                          \r\n[273] \"Vayon Poole\"                    \r\n[274] \"Victarion Greyjoy\"              \r\n[275] \"Viserys Targaryen\"              \r\n[276] \"Walder Frey (Little)\"           \r\n[277] \"Waymar Royce\"                   \r\n[278] \"Weeper\"                         \r\n[279] \"Weese\"                          \r\n[280] \"Will\"                           \r\n[281] \"Willas Tyrell\"                  \r\n[282] \"Willem Lannister\"               \r\n[283] \"Wylis Manderly\"                 \r\n[284] \"Wyman Manderly\"                 \r\n[285] \"Yellow Dick\"                    \r\n[286] \"Ygritte\"                        \r\n[287] \"Yohn Royce\"                     \r\n[288] \"Yoren\"                          \r\n[289] \"First High Septon (the fat one)\"\r\n[290] \"Talbert Serry\"                  \r\n[291] \"Dagon Codd\"                     \r\n[292] \"Adrack Humble\"                  \r\n[293] \"Oppo\"                           \r\n[294] \"Kerwin\"                         \r\n[295] \"Khrazz\"                         \r\n[296] \"Yurkhaz zo Yunzak\"              \r\n[297] \"the Others\"                     \r\n[298] \"Alliser Thorne\"                 \r\n\r\n#blockmodel with community membership- doesn't work bc it is one group\r\n#print(blockmodel(network_statnet, got.lab$membership)$block.model, digits=2)\r\n\r\n#add community membership as a node attribute\r\nnetwork_nodes$got.lab<-got.lab$membership\r\n\r\n#summarize node statistics by community\r\nnodes.by.gp(network_nodes,\"got.lab\")\r\n\r\n\r\n     got.lab Appear pov majorpov major got.fg got.wt   n\r\n[1,]       1     13 0.1    0.087  0.14      2    2.7 298\r\n\r\n#plot network with community coloring\r\nplot(got.lab,network_igraph, layout=layout_with_graphopt, max.sa.movement=10 )\r\n\r\n\r\n\r\n\r\nEdge Betweenness Detection\r\nLook, I tried (see code below if you want to figure out what went wrong) but this amost crashed my computer and it created over 100 groups, so I think its safe to say that this will not be a valid set of communities.\r\n\r\n\r\n#Run clustering algorithm: edge betweeness\r\ngot.edge<-edge.betweenness.community(network_igraph)\r\n\r\n#to get an idea of who is in what group\r\nigraph::groups(network_igraph)\r\n\r\n#blockmodel with community membership\r\nprint(blockmodel(network_statnet,got.edge$membership)$block.model, digits=2)\r\n\r\n#add community membership as a node attribute\r\nnetwork_nodes$got.edge<-got.edge$membership\r\n\r\n#summarize node statistics by community\r\nnodes.by.gp(network_nodes,\"got.edge\")\r\n\r\n#plot network with community coloringy\r\nplot(got.edge,network_igraph, layout=layout_with_graphopt, max.sa.movement=10 )\r\n\r\n\r\n\r\nEigenvector Detection\r\n\r\n\r\n#Run clustering algorithm: eigenvector\r\ngot.eigen<-leading.eigenvector.community(network_igraph)\r\n\r\n#to get an idea of who is in what group\r\nigraph::groups(got.eigen)\r\n\r\n\r\n$`1`\r\n  [1] \"Addam Marbrand\"                 \r\n  [2] \"Alester Florent\"                \r\n  [3] \"Allar Deem\"                     \r\n  [4] \"Amory Lorch\"                    \r\n  [5] \"Antario Jast\"                   \r\n  [6] \"Aron Santagar\"                  \r\n  [7] \"Arys Oakheart\"                  \r\n  [8] \"Aurane Waters\"                  \r\n  [9] \"Balman Byrch\"                   \r\n [10] \"Balon Swann\"                    \r\n [11] \"Barra\"                          \r\n [12] \"Beric Dondarrion\"               \r\n [13] \"Biter\"                          \r\n [14] \"Boros Blount\"                   \r\n [15] \"Brienne of Tarth\"               \r\n [16] \"Bronn\"                          \r\n [17] \"Brynden Tully\"                  \r\n [18] \"Catelyn Tully\"                  \r\n [19] \"Cersei Lannister\"               \r\n [20] \"Cleos Frey\"                     \r\n [21] \"Colemon\"                        \r\n [22] \"Cortnay Penrose\"                \r\n [23] \"Dick Crabb\"                     \r\n [24] \"Dontos Hollard\"                 \r\n [25] \"Edmure Tully\"                   \r\n [26] \"Edric Storm\"                    \r\n [27] \"Emmon Cuy\"                      \r\n [28] \"Emmon Frey\"                     \r\n [29] \"Eon Hunter\"                     \r\n [30] \"Falyse Stokeworth\"              \r\n [31] \"Garlan Tyrell\"                  \r\n [32] \"Gendry\"                         \r\n [33] \"Gladden Wylde\"                  \r\n [34] \"Gregor Clegane\"                 \r\n [35] \"Guyard Morrigen\"                \r\n [36] \"Harlan Hunter\"                  \r\n [37] \"Helman Tallhart\"                \r\n [38] \"Hoster Tully\"                   \r\n [39] \"Hugh\"                           \r\n [40] \"Ilyn Payne\"                     \r\n [41] \"Jacelyn Bywater\"                \r\n [42] \"Jaime Lannister\"                \r\n [43] \"Jeyne Westerling\"               \r\n [44] \"Joffrey Baratheon\"              \r\n [45] \"Jon Arryn\"                      \r\n [46] \"Kevan Lannister\"                \r\n [47] \"Lancel Lannister\"               \r\n [48] \"Lollys Stokeworth\"              \r\n [49] \"Loras Tyrell\"                   \r\n [50] \"Walder Frey\"                    \r\n [51] \"Lothar Mallery\"                 \r\n [52] \"Lothor Brune\"                   \r\n [53] \"Lucas Blackwood\"                \r\n [54] \"Lyman Darry\"                    \r\n [55] \"Lymond Vikary\"                  \r\n [56] \"Lysa Tully\"                     \r\n [57] \"Mace Tyrell\"                    \r\n [58] \"Mandon Moore\"                   \r\n [59] \"Margaery Tyrell\"                \r\n [60] \"Meryn Trant\"                    \r\n [61] \"Mordane\"                        \r\n [62] \"Mycah\"                          \r\n [63] \"Myrcella Baratheon\"             \r\n [64] \"Olenna Redwyne\"                 \r\n [65] \"Orton Merryweather\"             \r\n [66] \"Osmund Kettleblack\"             \r\n [67] \"Osney Kettleblack\"              \r\n [68] \"Paxter Redwyne\"                 \r\n [69] \"Petyr Baelish\"                  \r\n [70] \"Podrick Payne\"                  \r\n [71] \"Polliver\"                       \r\n [72] \"Pycelle\"                        \r\n [73] \"Pyg\"                            \r\n [74] \"Qyburn\"                         \r\n [75] \"Randyll Tarly\"                  \r\n [76] \"Raymun Darry\"                   \r\n [77] \"Renly Baratheon\"                \r\n [78] \"Rickard Karstark\"               \r\n [79] \"Robar Royce\"                    \r\n [80] \"Robert Arryn\"                   \r\n [81] \"Robert Baratheon\"               \r\n [82] \"Robett Glover\"                  \r\n [83] \"Roland Crakehall\"               \r\n [84] \"Rorge\"                          \r\n [85] \"Rupert Brax\"                    \r\n [86] \"Ryman Frey\"                     \r\n [87] \"Sandor Clegane\"                 \r\n [88] \"Sansa Stark\"                    \r\n [89] \"Senelle\"                        \r\n [90] \"Shae\"                           \r\n [91] \"Shagga\"                         \r\n [92] \"Shagwell\"                       \r\n [93] \"Stafford Lannister\"             \r\n [94] \"Taena of Myr\"                   \r\n [95] \"Thoros of Myr\"                  \r\n [96] \"Tickler\"                        \r\n [97] \"Timeon\"                         \r\n [98] \"Timett\"                         \r\n [99] \"Tom of Sevenstreams\"            \r\n[100] \"Tommen Baratheon\"               \r\n[101] \"Tyrion Lannister\"               \r\n[102] \"Tywin Lannister\"                \r\n[103] \"Vardis Egen\"                    \r\n[104] \"Vargo Hoat\"                     \r\n[105] \"Varly\"                          \r\n[106] \"Varys\"                          \r\n[107] \"Weese\"                          \r\n[108] \"Willas Tyrell\"                  \r\n[109] \"Wylis Manderly\"                 \r\n[110] \"Yohn Royce\"                     \r\n[111] \"First High Septon (the fat one)\"\r\n\r\n$`2`\r\n [1] \"Aegon Frey (Jinglebell)\" \"Aeron Greyjoy\"          \r\n [3] \"Alebelly\"                \"Arya Stark\"             \r\n [5] \"Asha Greyjoy\"            \"Balon Greyjoy\"          \r\n [7] \"Benfred Tallhart\"        \"Bran Stark\"             \r\n [9] \"Brandon Stark\"           \"Chayle\"                 \r\n[11] \"Chiswyck\"                \"Cragorn\"                \r\n[13] \"Dacey Mormont\"           \"Donella Manderly\"       \r\n[15] \"Eddard Stark\"            \"Garse Goodbrook\"        \r\n[17] \"Harwin\"                  \"Hodor\"                  \r\n[19] \"Hosteen Frey\"            \"Hot Pie\"                \r\n[21] \"Hullen\"                  \"Iggo\"                   \r\n[23] \"Jaqen H'ghar\"            \"Jared Frey\"             \r\n[25] \"Jeyne Poole\"             \"Jojen Reed\"             \r\n[27] \"Jon Umber (Greatjon)\"    \"Jory Cassel\"            \r\n[29] \"Kindly Man\"              \"Kyra\"                   \r\n[31] \"Lommy Greenhands\"        \"Luton\"                  \r\n[33] \"Luwin\"                   \"Meera Reed\"             \r\n[35] \"Merrett Frey\"            \"Mikken\"                 \r\n[37] \"Osha\"                    \"Rafford\"                \r\n[39] \"Ralf Kenning\"            \"Ramsay Snow\"            \r\n[41] \"Raymund Frey\"            \"Reek\"                   \r\n[43] \"Rhaegar Frey\"            \"Rickard Stark\"          \r\n[45] \"Rickon Stark\"            \"Robb Stark\"             \r\n[47] \"Rodrik Cassel\"           \"Roose Bolton\"           \r\n[49] \"Sawane Botley\"           \"Stevron Frey\"           \r\n[51] \"Stiv\"                    \"Symond Frey\"            \r\n[53] \"Syrio Forel\"             \"Theon Greyjoy\"          \r\n[55] \"Tion Frey\"               \"Tytos Frey\"             \r\n[57] \"Utt\"                     \"Vayon Poole\"            \r\n[59] \"Victarion Greyjoy\"       \"Walder Frey (Little)\"   \r\n[61] \"Willem Lannister\"        \"Wyman Manderly\"         \r\n[63] \"Yellow Dick\"             \"Yoren\"                  \r\n[65] \"Talbert Serry\"           \"Dagon Codd\"             \r\n[67] \"Adrack Humble\"          \r\n\r\n$`3`\r\n [1] \"Aegon I Targaryen\"  \"Aegon Targaryen\"    \"Aerys II Targaryen\"\r\n [4] \"Areo Hotah\"         \"Arianne Martell\"    \"Arthur Dayne\"      \r\n [7] \"Barristan Selmy\"    \"Belwas\"             \"Ben Plumm\"         \r\n[10] \"Daario Naharis\"     \"Daenerys Targaryen\" \"Doran Martell\"     \r\n[13] \"Khal Drogo\"         \"Elia Martell\"       \"Euron Greyjoy\"     \r\n[16] \"Gerris Drinkwater\"  \"Groleo\"             \"Haldon\"            \r\n[19] \"Hizdahr zo Loraq\"   \"Illyrio Mopatis\"    \"Irri\"              \r\n[22] \"Jhiqui\"             \"Jhogo\"              \"Jon Connington\"    \r\n[25] \"Jorah Mormont\"      \"Kraznys mo Nakloz\"  \"Lyanna Stark\"      \r\n[28] \"Cressen\"            \"Mirri Maz Duur\"     \"Missandei\"         \r\n[31] \"Moqorro\"            \"Oberyn Martell\"     \"Pate\"              \r\n[34] \"Penny\"              \"Prendahl na Ghezn\"  \"Qotho\"             \r\n[37] \"Quaithe\"            \"Quaro\"              \"Quentyn Martell\"   \r\n[40] \"Reznak mo Reznak\"   \"Rhaegar Targaryen\"  \"Rhaego\"            \r\n[43] \"Rhaenys Targaryen\"  \"Sallor the Bald\"    \"Skahaz mo Kandaq\"  \r\n[46] \"Tysha\"              \"Viserys Targaryen\"  \"Oppo\"              \r\n[49] \"Kerwin\"             \"Khrazz\"             \"Yurkhaz zo Yunzak\" \r\n\r\n$`4`\r\n [1] \"Aemon Targaryen\"     \"Alfyn\"               \"Arnolf Karstark\"    \r\n [4] \"Axell Florent\"       \"Benjen Stark\"        \"Bowen Marsh\"        \r\n [7] \"Chett\"               \"Coldhands\"           \"Cotter Pyke\"        \r\n[10] \"Craster\"             \"Dalla\"               \"Dareon\"             \r\n[13] \"Daryn Hornwood\"      \"Davos Seaworth\"      \"Dirk\"               \r\n[16] \"Donal Noye\"          \"Dywen\"               \"Ebben\"              \r\n[19] \"Eddard Karstark\"     \"Eddison Tollett\"     \"Gared\"              \r\n[22] \"Garth Greyfeather\"   \"Gilly\"               \"Grenn\"              \r\n[25] \"Guncer Sunglass\"     \"Hake\"                \"Hal\"                \r\n[28] \"Hubard Rambton\"      \"Jack Bulwer\"         \"Jafer Flowers\"      \r\n[31] \"Janos Slynt\"         \"Jaremy Rykker\"       \"Jeor Mormont\"       \r\n[34] \"Jon Snow\"            \"Lark\"                \"Aemon\"              \r\n[37] \"Mag Mar Tun Doh Weg\" \"Mance Rayder\"        \"Melisandre\"         \r\n[40] \"Nan\"                 \"Nymeria\"             \"Ollo Lophand\"       \r\n[43] \"Othor\"               \"Paul\"                \"Pypar\"              \r\n[46] \"Qhorin Halfhand\"     \"Rattleshirt\"         \"Ryles\"              \r\n[49] \"Salladhor Saan\"      \"Samwell Tarly\"       \"Satin\"              \r\n[52] \"Selyse Florent\"      \"Shireen Baratheon\"   \"Softfoot\"           \r\n[55] \"Stannis Baratheon\"   \"Styr\"                \"Thistle\"            \r\n[58] \"Tormund\"             \"Torrhen Karstark\"    \"Val\"                \r\n[61] \"Varamyr\"             \"Waymar Royce\"        \"Weeper\"             \r\n[64] \"Will\"                \"Ygritte\"             \"the Others\"         \r\n[67] \"Alliser Thorne\"     \r\n\r\n$`5`\r\n[1] \"Mero\"          \"Oznak zo Pahl\"\r\n\r\n#blockmodel with community membership\r\nprint(blockmodel(network_statnet,got.eigen$membership)$block.model, digits=2)\r\n\r\n\r\n        Block 1 Block 2 Block 3 Block 4 Block 5\r\nBlock 1   0.411   0.174   0.180   0.100   0.018\r\nBlock 2   0.174   0.319   0.074   0.160   0.000\r\nBlock 3   0.180   0.074   0.518   0.052   0.137\r\nBlock 4   0.100   0.160   0.052   0.465   0.015\r\nBlock 5   0.018   0.000   0.137   0.015   1.000\r\n\r\n#add community membership as a node attribute\r\nnetwork_nodes$got.eigen<-got.eigen$membership\r\n\r\n#summarize node statistics by community\r\nnodes.by.gp(network_nodes,\"got.eigen\")\r\n\r\n\r\n     got.eigen Appear   pov majorpov major got.fg got.wt got.lab   n\r\n[1,]         1     16 0.072    0.072  0.15    3.0    2.4       1 111\r\n[2,]         2     13 0.119    0.104  0.15    1.4    2.8       1  67\r\n[3,]         3     11 0.157    0.118  0.14    2.0    2.8       1  51\r\n[4,]         4     12 0.104    0.075  0.12    1.0    3.0       1  67\r\n[5,]         5      1 0.000    0.000  0.00    2.0    3.0       1   2\r\n\r\n#plot network with community coloring\r\nplot(got.eigen,network_igraph, layout=layout_with_graphopt, max.sa.movement=10 )\r\n\r\n\r\n\r\n\r\nSpinglass Community Detection\r\n\r\n\r\n#Run clustering algorithm: spinglass\r\ngot.spin<-spinglass.community(network_igraph)\r\n\r\n#to get an idea of who is in what group\r\nigraph::groups(got.spin)\r\n\r\n\r\n$`1`\r\n [1] \"Addam Marbrand\"                 \r\n [2] \"Aegon Targaryen\"                \r\n [3] \"Aerys II Targaryen\"             \r\n [4] \"Allar Deem\"                     \r\n [5] \"Antario Jast\"                   \r\n [6] \"Areo Hotah\"                     \r\n [7] \"Arianne Martell\"                \r\n [8] \"Aron Santagar\"                  \r\n [9] \"Arys Oakheart\"                  \r\n[10] \"Aurane Waters\"                  \r\n[11] \"Balman Byrch\"                   \r\n[12] \"Balon Swann\"                    \r\n[13] \"Barra\"                          \r\n[14] \"Boros Blount\"                   \r\n[15] \"Brienne of Tarth\"               \r\n[16] \"Bronn\"                          \r\n[17] \"Cersei Lannister\"               \r\n[18] \"Colemon\"                        \r\n[19] \"Cortnay Penrose\"                \r\n[20] \"Dick Crabb\"                     \r\n[21] \"Dontos Hollard\"                 \r\n[22] \"Doran Martell\"                  \r\n[23] \"Elia Martell\"                   \r\n[24] \"Emmon Cuy\"                      \r\n[25] \"Eon Hunter\"                     \r\n[26] \"Falyse Stokeworth\"              \r\n[27] \"Garlan Tyrell\"                  \r\n[28] \"Gregor Clegane\"                 \r\n[29] \"Guyard Morrigen\"                \r\n[30] \"Haldon\"                         \r\n[31] \"Harlan Hunter\"                  \r\n[32] \"Hugh\"                           \r\n[33] \"Ilyn Payne\"                     \r\n[34] \"Jacelyn Bywater\"                \r\n[35] \"Jaime Lannister\"                \r\n[36] \"Joffrey Baratheon\"              \r\n[37] \"Jon Arryn\"                      \r\n[38] \"Jon Connington\"                 \r\n[39] \"Kevan Lannister\"                \r\n[40] \"Lancel Lannister\"               \r\n[41] \"Lollys Stokeworth\"              \r\n[42] \"Loras Tyrell\"                   \r\n[43] \"Lothor Brune\"                   \r\n[44] \"Lyanna Stark\"                   \r\n[45] \"Lymond Vikary\"                  \r\n[46] \"Lysa Tully\"                     \r\n[47] \"Mace Tyrell\"                    \r\n[48] \"Mandon Moore\"                   \r\n[49] \"Margaery Tyrell\"                \r\n[50] \"Meryn Trant\"                    \r\n[51] \"Myrcella Baratheon\"             \r\n[52] \"Oberyn Martell\"                 \r\n[53] \"Olenna Redwyne\"                 \r\n[54] \"Orton Merryweather\"             \r\n[55] \"Osmund Kettleblack\"             \r\n[56] \"Osney Kettleblack\"              \r\n[57] \"Paxter Redwyne\"                 \r\n[58] \"Petyr Baelish\"                  \r\n[59] \"Podrick Payne\"                  \r\n[60] \"Pycelle\"                        \r\n[61] \"Pyg\"                            \r\n[62] \"Qyburn\"                         \r\n[63] \"Randyll Tarly\"                  \r\n[64] \"Renly Baratheon\"                \r\n[65] \"Rhaegar Targaryen\"              \r\n[66] \"Rhaenys Targaryen\"              \r\n[67] \"Robar Royce\"                    \r\n[68] \"Robert Arryn\"                   \r\n[69] \"Robert Baratheon\"               \r\n[70] \"Roland Crakehall\"               \r\n[71] \"Rupert Brax\"                    \r\n[72] \"Sandor Clegane\"                 \r\n[73] \"Sansa Stark\"                    \r\n[74] \"Senelle\"                        \r\n[75] \"Shae\"                           \r\n[76] \"Shagga\"                         \r\n[77] \"Shagwell\"                       \r\n[78] \"Stafford Lannister\"             \r\n[79] \"Taena of Myr\"                   \r\n[80] \"Timeon\"                         \r\n[81] \"Timett\"                         \r\n[82] \"Tommen Baratheon\"               \r\n[83] \"Tyrion Lannister\"               \r\n[84] \"Tysha\"                          \r\n[85] \"Tywin Lannister\"                \r\n[86] \"Vardis Egen\"                    \r\n[87] \"Varly\"                          \r\n[88] \"Varys\"                          \r\n[89] \"Willas Tyrell\"                  \r\n[90] \"Yohn Royce\"                     \r\n[91] \"First High Septon (the fat one)\"\r\n[92] \"Oppo\"                           \r\n\r\n$`2`\r\n  [1] \"Aegon Frey (Jinglebell)\" \"Aeron Greyjoy\"          \r\n  [3] \"Alebelly\"                \"Amory Lorch\"            \r\n  [5] \"Arthur Dayne\"            \"Arya Stark\"             \r\n  [7] \"Asha Greyjoy\"            \"Balon Greyjoy\"          \r\n  [9] \"Benfred Tallhart\"        \"Beric Dondarrion\"       \r\n [11] \"Biter\"                   \"Bran Stark\"             \r\n [13] \"Brandon Stark\"           \"Brynden Tully\"          \r\n [15] \"Catelyn Tully\"           \"Chayle\"                 \r\n [17] \"Chiswyck\"                \"Cleos Frey\"             \r\n [19] \"Cragorn\"                 \"Dacey Mormont\"          \r\n [21] \"Donella Manderly\"        \"Eddard Stark\"           \r\n [23] \"Edmure Tully\"            \"Emmon Frey\"             \r\n [25] \"Euron Greyjoy\"           \"Garse Goodbrook\"        \r\n [27] \"Gendry\"                  \"Gladden Wylde\"          \r\n [29] \"Harwin\"                  \"Helman Tallhart\"        \r\n [31] \"Hodor\"                   \"Hosteen Frey\"           \r\n [33] \"Hoster Tully\"            \"Hot Pie\"                \r\n [35] \"Hullen\"                  \"Iggo\"                   \r\n [37] \"Jaqen H'ghar\"            \"Jared Frey\"             \r\n [39] \"Jeyne Poole\"             \"Jeyne Westerling\"       \r\n [41] \"Jojen Reed\"              \"Jon Umber (Greatjon)\"   \r\n [43] \"Jory Cassel\"             \"Kindly Man\"             \r\n [45] \"Kyra\"                    \"Lommy Greenhands\"       \r\n [47] \"Walder Frey\"             \"Lothar Mallery\"         \r\n [49] \"Lucas Blackwood\"         \"Luton\"                  \r\n [51] \"Luwin\"                   \"Lyman Darry\"            \r\n [53] \"Meera Reed\"              \"Merrett Frey\"           \r\n [55] \"Mikken\"                  \"Mordane\"                \r\n [57] \"Mycah\"                   \"Osha\"                   \r\n [59] \"Polliver\"                \"Rafford\"                \r\n [61] \"Ralf Kenning\"            \"Ramsay Snow\"            \r\n [63] \"Raymun Darry\"            \"Raymund Frey\"           \r\n [65] \"Reek\"                    \"Rhaegar Frey\"           \r\n [67] \"Rickard Karstark\"        \"Rickard Stark\"          \r\n [69] \"Rickon Stark\"            \"Robb Stark\"             \r\n [71] \"Robett Glover\"           \"Rodrik Cassel\"          \r\n [73] \"Roose Bolton\"            \"Rorge\"                  \r\n [75] \"Ryman Frey\"              \"Sawane Botley\"          \r\n [77] \"Stevron Frey\"            \"Stiv\"                   \r\n [79] \"Symond Frey\"             \"Syrio Forel\"            \r\n [81] \"Theon Greyjoy\"           \"Thoros of Myr\"          \r\n [83] \"Tickler\"                 \"Tion Frey\"              \r\n [85] \"Tom of Sevenstreams\"     \"Tytos Frey\"             \r\n [87] \"Utt\"                     \"Vargo Hoat\"             \r\n [89] \"Vayon Poole\"             \"Victarion Greyjoy\"      \r\n [91] \"Walder Frey (Little)\"    \"Weese\"                  \r\n [93] \"Willem Lannister\"        \"Wylis Manderly\"         \r\n [95] \"Wyman Manderly\"          \"Yellow Dick\"            \r\n [97] \"Yoren\"                   \"Talbert Serry\"          \r\n [99] \"Dagon Codd\"              \"Adrack Humble\"          \r\n\r\n$`3`\r\n [1] \"Aegon I Targaryen\"  \"Barristan Selmy\"    \"Belwas\"            \r\n [4] \"Ben Plumm\"          \"Daario Naharis\"     \"Daenerys Targaryen\"\r\n [7] \"Khal Drogo\"         \"Gerris Drinkwater\"  \"Groleo\"            \r\n[10] \"Hizdahr zo Loraq\"   \"Illyrio Mopatis\"    \"Irri\"              \r\n[13] \"Jhiqui\"             \"Jhogo\"              \"Jorah Mormont\"     \r\n[16] \"Kraznys mo Nakloz\"  \"Mero\"               \"Mirri Maz Duur\"    \r\n[19] \"Missandei\"          \"Moqorro\"            \"Nymeria\"           \r\n[22] \"Oznak zo Pahl\"      \"Pate\"               \"Penny\"             \r\n[25] \"Prendahl na Ghezn\"  \"Qotho\"              \"Quaithe\"           \r\n[28] \"Quaro\"              \"Quentyn Martell\"    \"Reznak mo Reznak\"  \r\n[31] \"Rhaego\"             \"Sallor the Bald\"    \"Skahaz mo Kandaq\"  \r\n[34] \"Viserys Targaryen\"  \"Khrazz\"             \"Yurkhaz zo Yunzak\" \r\n\r\n$`4`\r\n[1] \"Kerwin\"\r\n\r\n$`5`\r\n [1] \"Aemon Targaryen\"     \"Alester Florent\"     \"Alfyn\"              \r\n [4] \"Arnolf Karstark\"     \"Axell Florent\"       \"Benjen Stark\"       \r\n [7] \"Bowen Marsh\"         \"Chett\"               \"Coldhands\"          \r\n[10] \"Cotter Pyke\"         \"Craster\"             \"Dalla\"              \r\n[13] \"Dareon\"              \"Daryn Hornwood\"      \"Davos Seaworth\"     \r\n[16] \"Dirk\"                \"Donal Noye\"          \"Dywen\"              \r\n[19] \"Ebben\"               \"Eddard Karstark\"     \"Eddison Tollett\"    \r\n[22] \"Edric Storm\"         \"Gared\"               \"Garth Greyfeather\"  \r\n[25] \"Gilly\"               \"Grenn\"               \"Guncer Sunglass\"    \r\n[28] \"Hake\"                \"Hal\"                 \"Hubard Rambton\"     \r\n[31] \"Jack Bulwer\"         \"Jafer Flowers\"       \"Janos Slynt\"        \r\n[34] \"Jaremy Rykker\"       \"Jeor Mormont\"        \"Jon Snow\"           \r\n[37] \"Lark\"                \"Aemon\"               \"Cressen\"            \r\n[40] \"Mag Mar Tun Doh Weg\" \"Mance Rayder\"        \"Melisandre\"         \r\n[43] \"Nan\"                 \"Ollo Lophand\"        \"Othor\"              \r\n[46] \"Paul\"                \"Pypar\"               \"Qhorin Halfhand\"    \r\n[49] \"Rattleshirt\"         \"Ryles\"               \"Salladhor Saan\"     \r\n[52] \"Samwell Tarly\"       \"Satin\"               \"Selyse Florent\"     \r\n[55] \"Shireen Baratheon\"   \"Softfoot\"            \"Stannis Baratheon\"  \r\n[58] \"Styr\"                \"Thistle\"             \"Tormund\"            \r\n[61] \"Torrhen Karstark\"    \"Val\"                 \"Varamyr\"            \r\n[64] \"Waymar Royce\"        \"Weeper\"              \"Will\"               \r\n[67] \"Ygritte\"             \"the Others\"          \"Alliser Thorne\"     \r\n\r\n#blockmodel with community membership\r\nprint(blockmodel(network_statnet,got.spin$membership)$block.model, digits=2)\r\n\r\n\r\n        Block 1 Block 2 Block 3 Block 4 Block 5\r\nBlock 1   0.496   0.197   0.168   0.011   0.116\r\nBlock 2   0.197   0.286   0.047   0.030   0.125\r\nBlock 3   0.168   0.047   0.576   0.056   0.035\r\nBlock 4   0.011   0.030   0.056     NaN   0.000\r\nBlock 5   0.116   0.125   0.035   0.000   0.445\r\n\r\n#add community membership as a node attribute\r\nnetwork_nodes$got.spin<-got.spin$membership\r\n\r\n#summarize node statistics by community\r\nnodes.by.gp(network_nodes,\"got.spin\")\r\n\r\n\r\n     got.spin Appear  pov majorpov major got.fg got.wt got.lab\r\n[1,]        1   17.8 0.11    0.109 0.217    2.8    2.5       1\r\n[2,]        2   11.9 0.09    0.080 0.110    1.9    2.7       1\r\n[3,]        3    9.9 0.11    0.083 0.083    2.0    2.7       1\r\n[4,]        4    1.0 0.00    0.000 0.000    2.0    5.0       1\r\n[5,]        5   11.7 0.12    0.072 0.116    1.1    3.0       1\r\n     got.eigen   n\r\n[1,]       1.3  92\r\n[2,]       1.7 100\r\n[3,]       3.1  36\r\n[4,]       3.0   1\r\n[5,]       3.9  69\r\n\r\n#plot network with community coloring\r\nplot(got.spin,network_igraph, layout=layout_with_graphopt, max.sa.movement=10 )\r\n\r\n\r\n\r\n\r\nCompare Modularity\r\n\r\n\r\nmods<-c(fastgreedy=modularity(got.fg), walktrap=modularity(got.wt), llp=modularity(got.lab), eigen=modularity(got.eigen), spinglass=modularity(got.spin))\r\n\r\nmods\r\n\r\n\r\nfastgreedy   walktrap        llp      eigen  spinglass \r\n0.25236488 0.02662821 0.00000000 0.26589769 0.14355753 \r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/httpsrpubscombean22z881579/distill-preview.png",
    "last_modified": "2022-03-27T15:50:41-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsnmilsteinumagithubioposts2022-03-21-blog-post-7/",
    "title": "Blog Post 7, Integrating ML",
    "description": "This post is an analysis of community structure and machine learning techniques on my medieval dataset.",
    "author": [
      {
        "name": "Noah Milstein",
        "url": {}
      }
    ],
    "date": "2022-03-27",
    "categories": [],
    "contents": "\n\n\n\n\n\n\nAn Introduction to\nthe Project and Dataset\nThe project that I am doing involves conflict in\nthe high middle ages. This was the period between 1000 and 1200\n\n\n\nPart 1:\nDescribe the Dataset You Are\nUsing:\nThe Dataset Being Used: The dataset that I am using\nis wikipedia list of wars throughout history, this article is the “List\nof wars: 1000–1499” which acts as a subset of the “2nd-millennium\nconflicts” I chose this dataset as an exemplar of popular history’s\ndepiction of the centralization of worldwide conflict. Wikipedia, being\nan accessible source generally created from relevant citations makes it\na good case study to see where historical writers and academics center\ntheir world are relevant conflicts.\nIdentify initial network\nformat:\nAnswer: The initial network format is as an edge\nlist, the first, in column contains the winners of each\nwar while the second, out column contains the losers of\neach. These sets of belligerents are directed\nNetwork\nStructure: Wars Startings in the 1000s\n\n Network attributes:\n  vertices = 111 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 153 \n    missing edges= 0 \n    non-missing edges= 153 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nNetwork\nStructure: Wars Startings in the 1100s\n\n Network attributes:\n  vertices = 97 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 238 \n    missing edges= 0 \n    non-missing edges= 238 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nNetwork Structure:\nWars Starting in the 1200s\n\n Network attributes:\n  vertices = 161 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 313 \n    missing edges= 0 \n    non-missing edges= 313 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nIdentify Nodes: Describe and identify the nodes\n(including how many nodes are in the dataset)\nAnswer: Nodes or vertices in these datasets\nrepresent belligerents in wars throughout history, the involved parties\nin each conflict can be a nation, province, individual, or group so long\nas they are listed as involved in the conflict. In the 1000s there are\n117, in the 1100s there are 78 and in the 1200s there are 161.\nWhat Constitutes a Tie: What constitutes a tie or\nedge (including how many ties, whether ties are directed/undirected and\nweighted/binary, and how to interpret the value of the tie if any)\nAnswer: A tie or edge in this dataset represents a\nwar, this war can be between two nations or groups within a nation.\nThese edges can represent a war that involved many more nations but are\nalways tied to each and every party involved on both sides. These edges\nare directed and the direction indicates which side “won” the conflict\n(if an edge has an arrow pointing to another the node that originated\nthat arrow won the war against them. There are 153 edges in the 1000s,\n225 edges in 1100s and 313 edges in the 1200s.\nEdge Attributes and Subset: Whether or not there are\nedge attributes that might be used to subset data or stack multiple\nnetworks (e.g., tie type, year, etc).\nAnswer: There are a number of attributes that could\nbe used to subset the data, year that the conflict began or the length\nof time it lasted are available. Aspects like each side’s religion and\nthe area where the conflict took place could be used to subset the data\nitself.\nPart 2:\nBrokerage and Betweeness\ncentrality\nWhat are betweeness and brokerage cenrrality\nCalculate brokerage and betweenneess centrality measures for one or more\nsubsets of your network data, and write up the results and your\ninterpretation of them.\nAnswer: I will be calculating these measures for\nwars in 1000-1099, 1100-1199, and 1200-1399.\n\n\n\nBrokerage scores in the\n1000s\n\n\n\n\n\n(wars_in_1000s.nodes.stat_2%>%\n  arrange(desc(broker.tot))%>%\n  slice(1:10))[,c(1,11:15)] %>%kable()\n\n\nname\nbroker.tot\nbroker.coord\nbroker.itin\nbroker.rep\nbroker.gate\nByzantine Empire\n22.7376579\nNaN\n3.1654785\nNaN\nNaN\nHoly Roman Empire\n9.2813605\nNaN\n2.2468427\nNaN\nNaN\nSultanate of Rum\n9.2813605\nNaN\n-0.5090648\nNaN\nNaN\nEngland\n6.9745666\nNaN\n5.0036896\n-0.0853606\n-0.0853606\nKingdom of Sicily\n5.0522384\n-0.0176111\n4.0866123\n-0.1201631\n-0.1201631\nSeljuk Empire\n1.9765133\n-0.0176111\n-0.5084146\n3.4677529\n-0.1201631\nKingdom of France\n1.9765133\nNaN\n-0.5090648\nNaN\nNaN\nKingdom of Georgia\n0.8231164\n-0.0176111\n-0.5084146\n-0.1201631\n-0.1201631\nPapal States\n0.4386507\n-0.0176111\n-0.5084146\n-0.1201631\n10.6435850\nGhaznavids\n0.0541851\n-0.1380791\n-0.4907567\n-0.2903366\n-0.2903366\n\nBrokerage scores in the\n1100s\n\n\n\n\n\n\n\n\n(wars_in_1100s.nodes.stat_2%>%\n  arrange(desc(broker.tot))%>%\n  slice(1:10))[,c(1,10:14)] %>%kable()\n\n\nname\nbroker.tot\nbroker.coord\nbroker.itin\nbroker.rep\nbroker.gate\nKingdom of Jerusalem\n17.1050061\nNaN\n2.8705599\n24.5610650\n-0.1357675\nFatimid Caliphate\n10.2415178\nNaN\n-0.6472506\nNaN\nNaN\nAyyubid Dynasty\n9.3615834\nNaN\n-0.6465587\n-0.1357675\n-0.1357675\nZengid Dynasty\n7.4257278\nNaN\n0.7591543\nNaN\nNaN\nByzantine Empire\n6.8977671\nNaN\n0.7602887\n-0.1357675\n-0.1357675\nEngland\n5.8418459\nNaN\n-0.6465587\n-0.1357675\n-0.1357675\nHoly Roman Empire\n3.0260558\nNaN\n-0.6465587\n-0.1357675\n-0.1357675\nKingdom of France\n1.6181608\nNaN\n-0.6465587\n-0.1357675\n-0.1357675\nKingdom of Sicily\n0.5622395\n-0.1467125\n-0.6293842\n-0.3476788\n-0.3476788\nPapal States\n0.0342789\n-0.1264908\n-0.6336748\n-0.3236913\n2.5014147\n\nBrokerage scores in the\n1200s\n\n\n\n\n\n\n\n\n\n\nname\nbroker.tot\nbroker.coord\nbroker.itin\nbroker.rep\nbroker.gate\nMongol Empire\n47.964825\nNaN\n-0.5966483\nNaN\nNaN\nKingdom of France\n28.663539\nNaN\n-0.5966483\nNaN\nNaN\nAyyubid Dynasty\n26.995527\nNaN\n2.3528915\nNaN\nNaN\nKingdom of England\n21.991489\nNaN\n8.9893561\nNaN\nNaN\nRepublic of Genoa\n11.983415\nNaN\n-0.5966483\nNaN\nNaN\nKnights Templar\n10.077115\nNaN\n1.6155066\nNaN\nNaN\nHoly Roman Empire\n4.834790\n-0.0170801\n-0.5961482\n10.865523\n10.865523\nPrincipality of Antioch\n4.834790\n-0.0170801\n2.3541101\n13.613565\n-0.126648\nKingdom of Cyprus\n4.596503\n58.5391124\n0.1414163\n13.613565\n10.865523\nArmenian Kingdom of Cilicia\n3.881640\n-0.0170801\n-0.5961482\n-0.126648\n-0.126648\n\n\nname\nbroker.gate\nPapal States\n10.6435850\nCounty of Aversa\n-0.0853606\nCounty of Sicily\n-0.0853606\nEngland\n-0.0853606\nChola Empire\n-0.0853606\nCounty of Apulia\n-0.1201631\nKingdom of Sicily\n-0.1201631\nKingdom of Georgia\n-0.1201631\nGreat Seljuq Empire\n-0.1201631\nSeljuk Empire\n-0.1201631\nname\nbroker.tot\nByzantine Empire\n22.7376579\nHoly Roman Empire\n9.2813605\nSultanate of Rum\n9.2813605\nEngland\n6.9745666\nKingdom of Sicily\n5.0522384\nSeljuk Empire\n1.9765133\nKingdom of France\n1.9765133\nKingdom of Georgia\n0.8231164\nPapal States\n0.4386507\nGhaznavids\n0.0541851\n\nOption 2.A\nFor a Specific Research Question: If you have a\nspecific research question, please feel free to use that to guide your\nanalysis. Otherwise, you may want to orient your analysis as follows in\norder to identify a compelling question or noteworthy pattern in the\ndata that can be interpreted.\nAnswer: Since I am interested in the relative power\nof nations by their relative position ad centrality in the worldwide\nconflict, network brokerage can be used to illustrate significant\npositions in global conflict. Below I wanted to look at 4 kinds of\nbrokerage, these are broker.gate or gatekeeper, coordinator, liason, and\nitinerant. I am interested to see if these specific coordination types\nare primarily done by specific nations.\n\n\n\n\n\n\n\n\n\nTotal Brokerage\nExplanation: Looking at total brokerage in this\ndataset gives a sense of which factions were responsible for highest\nconnection of unconnected actors through conflict. Given the crusades\nigniting conflict between Europe and the middle east it is sensible that\nthe Byzantine Empire in the center of both connects the most unconnected\nactors through conflict closely followed by the Sultanate of Rum, a\nmajor Muslim faction that fought against the crusades and third being\nthe Holy Roman Empire who participated in many conflicts including the\ncrusades. These are followed by England who centered the wars in the\nBritish isles and the Kingdom of Sicily who were also in a position of\nconflict.\n\nname\nbroker.tot\nByzantine Empire\n22.737658\nHoly Roman Empire\n9.281360\nSultanate of Rum\n9.281360\nEngland\n6.974567\nKingdom of Sicily\n5.052238\n\nCoordinator Brokerage\nExplanation: In this case no particular country is\nvery high above any other in terms of their coordinator brokerage,\nmeaning that within groups no particular nations appear to be brokering\nmore within the groups.\n\nname\nbroker.coord\nCounty of Apulia\n-0.0176111\nKingdom of Sicily\n-0.0176111\nKingdom of Georgia\n-0.0176111\nGreat Seljuq Empire\n-0.0176111\nPapal States\n-0.0176111\n\nItinerant Brokerage\nExplanation: Itinerant brokerage represents when a\nnon-group actor connects 2 actors in a group it is no in to each other,\nin this case England has the highest score. Looking at the network graph\nthey do appear to connect 2 actors in a group together.\n\nname\nbroker.itin\nEngland\n5.0036896\nKingdom of Sicily\n4.0866123\nByzantine Empire\n3.1654785\nHoly Roman Empire\n2.2468427\nPrincipality of Kiev\n0.4812412\n\nRepresentative Brokerage\nExplanation: Representative brokerage indicates that\nthe broker, or nation in question loses a war to another in their group,\nbut wins another against a faction outside of their group. This can be\nthough of as their directed connections to them. In this case the Seljuk\nEmpire and Kingdom of Aragon have instances in which they lose to\nfactions within their group before beating those outside of it.\n\nname\nbroker.rep\nSeljuk Empire\n3.4677529\nKingdom of Aragon\n0.9281821\nCounty of Aversa\n-0.0853606\nCounty of Sicily\n-0.0853606\nEngland\n-0.0853606\n\nGatekeeper Brokerage\nExplanation: The Papal states being ranked highest\nin gatekeeper brokerage is an interesting observation as no other nation\nin the dataset appears to be close to their level as most are negative\nin this category. In this cae being a gatekeeper means that they are in\nat conflict in a group with another while the nation in a different\ngroup of conflicts is only at war with them from the group. This is an\ninteresting observation given the Papal states role as a coordinator of\nthe war, but not a participant in the conflcit as directly as other\nbelligerents. (This being the crusade given the period)\n\nname\nbroker.gate\nPapal States\n10.6435850\nCounty of Aversa\n-0.0853606\nCounty of Sicily\n-0.0853606\nEngland\n-0.0853606\nChola Empire\n-0.0853606\n\nLiaison Brokerage\nExplanation: A liaison broker, in this case, is a\nfaction that loses a war to a group they do not belong to and wins a war\nagainst a different group than the first that they also do not belong\nto. The Byzantine Empire, Sultanate of Rum, and Holy Roman Empire are\nhighest in this category likely owing to their frequent states of\nconflict beyond the crusades against a variety of groups.\n\nname\nbroker.lia\nByzantine Empire\n28.140866\nSultanate of Rum\n12.477603\nHoly Roman Empire\n10.961803\nEngland\n6.548214\nKingdom of Sicily\n4.589419\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNetwork\n1000s Plot Grouping Determined with No Cluster Method\n\n\n\nNetwork\n1000s Plot Grouping Determined with the Average Cluster Method\n\n\n\nNetwork\n1000s Plot Grouping Determined with the Single Cluster Method\n\n\n\nNetwork\n1000s Plot Grouping Determined with the Ward.D Cluster Method\n\n\n\nNetwork 1000s Plot igraph\n\n\n\nNetwork Graphing 1100s\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNetwork\n1100s Plot Grouping Determined with No Cluster Method\n\n\n\nNetwork\n1100s Plot Grouping Determined with the Average Cluster Method\n\n\n\nNetwork\n1100s Plot Grouping Determined with the Single Cluster Method\n\n\n\nNetwork\n1100s Plot Grouping Determined with the Ward.D Cluster Method\n\n\n\nNetwork 1100s Plot igraph\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwars_in_1000s_edgelist <- as.matrix(wars_in_1000s)\n\nwars_in_1000s_edgelist_network_edgelist <- graph.edgelist(wars_in_1000s_edgelist, directed=TRUE)\n\nwars_in_1000s.ig<-graph_from_data_frame(wars_in_1000s)\n\nwars_in_1000s_network <- asNetwork(wars_in_1000s.ig)\n\n\n\n\n\naspects_of_1000s_states <- read_excel(\"~/Desktop/Spring 2022/Networks/aspects_of_1000s_states.xlsx\")\n\ntotal_1000s <- merge(aspects_of_1000s_states, wars_in_1000s.nodes.stat_2, by=\"name\")\n\n\n\n\n\ntotal_1000s_brokerag_reg<-total_1000s\n\ntotal_1000s_brokerag_reg$win_rate <- (total_1000s_brokerag_reg$outdegree/total_1000s_brokerag_reg$totdegree)\n\ntotal_1000s_brokerag_reg$loss_rate <- (total_1000s_brokerag_reg$indegree/total_1000s_brokerag_reg$totdegree)\n\ntotal_1000s_brokerag_reg_binom <- total_1000s_brokerag_reg %>% mutate(more_win_or_loss = case_when(\n  win_rate < 0.5 ~ 0,\n    win_rate >= 0.5 ~ 1))\n\nFirst_1000s_regression <- glm(more_win_or_loss~.-name-totdegree-indegree-outdegree-dc-eigen.dc-win_rate-loss_rate, total_1000s_brokerag_reg_binom, family=binomial)\n\nFirst_1000s_regression\n\n\n\nCall:  glm(formula = more_win_or_loss ~ . - name - totdegree - indegree - \n    outdegree - dc - eigen.dc - win_rate - loss_rate, family = binomial, \n    data = total_1000s_brokerag_reg_binom)\n\nCoefficients:\n (Intercept)      Catholic         Islam      Orthodox      Buddhist  \n  -2.090e+01     1.446e-01    -7.108e-02    -4.043e-01    -8.572e-02  \n       Pagan      Tengrism        Shinto         Hindu     Shamanism  \n   5.506e-01    -5.656e+01     1.820e+00    -2.142e+00    -1.506e+00  \n       eigen         close            rc      eigen.rc    broker.tot  \n  -1.877e+03     5.146e+03    -3.979e+00     1.574e+03     2.378e+02  \nbroker.coord   broker.itin    broker.rep   broker.gate    broker.lia  \n  -9.610e+01    -9.449e+01    -7.164e+01    -2.810e+01    -1.298e+02  \n\nDegrees of Freedom: 101 Total (i.e. Null);  82 Residual\n  (8 observations deleted due to missingness)\nNull Deviance:      140.8 \nResidual Deviance: 4.53e-09     AIC: 40\n\n\n\nset.seed(292)\n\ntotal_1000s_for_regression <- total_1000s[,-c(1, 20:25)]\n\ntotal_1000s_for_regression$win_rate <- (total_1000s_for_regression$outdegree/total_1000s_for_regression$totdegree)\n\ntotal_1000s_for_regression$loss_rate <- (total_1000s_for_regression$indegree/total_1000s_for_regression$totdegree)\n\ntotal_1000s_for_regression <- total_1000s_for_regression %>% mutate(more_win_or_loss = case_when(\n  win_rate < 0.5 ~ 0,\n    win_rate >= 0.5 ~ 1))\n\nFirst_1000s_regression <- glm(more_win_or_loss~.-loss_rate-win_rate-totdegree-indegree-outdegree-dc-eigen.dc, total_1000s_for_regression, family=binomial)\n\nFirst_1000s_regression\n\n\n\nCall:  glm(formula = more_win_or_loss ~ . - loss_rate - win_rate - totdegree - \n    indegree - outdegree - dc - eigen.dc, family = binomial, \n    data = total_1000s_for_regression)\n\nCoefficients:\n(Intercept)     Catholic        Islam     Orthodox     Buddhist  \n   -15.1948      13.9008      12.7531      14.6893      15.0858  \n      Pagan     Tengrism       Shinto        Hindu    Shamanism  \n     0.9610      11.6691      16.0623       9.1358      -0.1497  \n      eigen        close           rc     eigen.rc  \n   -82.1100     256.5294      -3.3322     -17.3152  \n\nDegrees of Freedom: 109 Total (i.e. Null);  96 Residual\nNull Deviance:      152.3 \nResidual Deviance: 58.4     AIC: 86.4\n\n\n\nset.seed(6738)\n\nin_training<- sample(1:nrow(total_1000s_for_regression),  nrow(total_1000s_for_regression) * 0.7 )\n\ntraining_1000s <- total_1000s_for_regression[in_training,]\n\ntest_1000s <- total_1000s_for_regression[-in_training,]\n\nlm_1000s_binom_subset_1 <- glm(more_win_or_loss~.-loss_rate-win_rate-totdegree-indegree-outdegree-dc-eigen.dc, total_1000s_for_regression, family=binomial, subset = in_training )\n\nlogsitic_1_1000s_prob <- predict(lm_1000s_binom_subset_1, test_1000s,\ntype = \"response\")\n\nlog_preds_1<-ifelse(logsitic_1_1000s_prob >= 0.5, 1, 0)\n\nprediction_1_logs <-mean(log_preds_1 == test_1000s$more_win_or_loss)\n\nprediction_1_logs %>% kable()\n\n\nx\n0.9090909\n\n\n\nlibrary(glmnet)\nlibrary(MASS)\n\n\n\n\n\nset.seed(246)\n\nx_ridge <- model.matrix(more_win_or_loss ~ .-loss_rate-win_rate-totdegree-indegree-outdegree-dc-eigen.dc, total_1000s_for_regression)[, -1] \n\ny_ridge <- total_1000s_for_regression$more_win_or_loss\n\ngrid <- 10^seq(10, -2, length = 100)\n\nridge.mod <- glmnet(x_ridge, y_ridge, alpha = 0, lambda = grid)\n\ndim(coef(ridge.mod))\n\n\n[1]  14 100\n\n\n\nset.seed(729)\ntrain_ridge <- sample(1:nrow(x_ridge), nrow(x_ridge)*0.8 ) \n\ntest_ridge <- (-train_ridge)\n\ny.test_ridge <- y_ridge[test_ridge]\n\n\n\n\n\nset.seed(9292)\n\nridge.mod <- glmnet(x_ridge[train_ridge, ], y_ridge[train_ridge], \n                    alpha = 0, lambda = grid, thresh = 1e-12)\n\nridge.pred <- predict(ridge.mod, s = 4, newx = x_ridge[test_ridge,])\n\nmean((ridge.pred - y.test_ridge)^2) %>% kable()\n\n\nx\n0.2416376\n\n\n\nset.seed(231)\nridge.pred <- predict(ridge.mod, s = 0, newx = x_ridge[test_ridge, ], \n                      exact = T, x = x_ridge[train_ridge, ], y = y_ridge[train_ridge])\n\npredict(ridge.mod, s = 0, exact = T, type = \"coefficients\", \n        x = x_ridge[train_ridge, ], y = y_ridge[train_ridge])[1:14, ]\n\n\n(Intercept)    Catholic       Islam    Orthodox    Buddhist \n 0.21024033  0.21827317 -0.01160454  0.21312966  0.35601806 \n      Pagan    Tengrism      Shinto       Hindu   Shamanism \n 0.08955257  0.14069809  0.38278477 -0.07034364 -0.01038790 \n      eigen       close          rc    eigen.rc \n-4.61480591 12.51011844 -0.29977861  4.64835194 \n\n\n\nset.seed(9292)\n\ncv.out <- cv.glmnet(x_ridge[train_ridge, ], y_ridge[train_ridge], alpha = 0) \n\nplot(cv.out)\n\n\n\n\n\n\nset.seed(9292)\n\nbestlam <- cv.out$lambda.min\n\nbestlam\n\n\n[1] 0.415338\n\n\n\nset.seed(9292)\n\nridge.pred <- predict(cv.out, s = bestlam, newx = x_ridge[test_ridge,])\n\nmean((ridge.pred - y.test_ridge)^2) %>% kable()\n\n\nx\n0.174632\n\n\n\nset.seed(2897)\n\nx_lasso <- model.matrix(more_win_or_loss ~ .-loss_rate-win_rate-totdegree-indegree-outdegree-dc-eigen.dc, total_1000s_for_regression)[, -1] \n\ny_lasso <- total_1000s_for_regression$more_win_or_loss\n\ngrid <- 10^seq(10, -2, length = 100)\n\nlasso.mod <- glmnet(x_lasso, y_lasso, alpha = 0, lambda = grid)\n\ndim(coef(lasso.mod))\n\n\n[1]  14 100\n\n\n\nset.seed(729)\n\ntrain_lasso <- sample(1:nrow(x_ridge), nrow(x_ridge)*0.8 ) \n\ntest_lasso <- (-train_lasso)\n\ny.test_lasso <- y_lasso[test_lasso]\n\n\n\n\n\nset.seed(9292)\n\nlasso.mod <- glmnet(x_lasso[train_lasso, ], y_lasso[train_lasso], \n                    alpha = 1, lambda = grid)\n\nplot(lasso.mod)\n\n\n\n\n\n\nset.seed(1029)\n\ncv.out_2 <- cv.glmnet(x_lasso[train_lasso, ], y_lasso[train_lasso], alpha = 1) \n\nplot(cv.out_2)\n\n\n\n\n\n\nset.seed(1920)\n\nbestlam_2 <- cv.out_2$lambda.min\n\nlasso.pred <- predict(cv.out_2, s = bestlam_2, newx = x_ridge[test_ridge,])\n\nmean((lasso.pred - y.test_ridge)^2) %>% kable()\n\n\nx\n0.1749583\n\n\n\nset.seed(2739)\n\nout <- glmnet(x_lasso[train_lasso, ], y_lasso[train_lasso], \n              alpha = 1, lambda = grid)\n\nlasso.coef <- predict(out, type = \"coefficients\", s = bestlam_2)[1:14, ]\n\nlasso.coef\n\n\n(Intercept)    Catholic       Islam    Orthodox    Buddhist \n 0.42561685  0.05577020 -0.09275344  0.00000000  0.00000000 \n      Pagan    Tengrism      Shinto       Hindu   Shamanism \n 0.00000000  0.00000000  0.00000000  0.00000000  0.00000000 \n      eigen       close          rc    eigen.rc \n 0.00000000  3.22570629 -0.21240622  0.00000000 \n\n\n\naspects_of_1100s_states <- read_excel(\"~/Desktop/Spring 2022/Networks/aspects_of_1100s_states.xlsx\")\n\ntotal_1100s <- merge(aspects_of_1100s_states, wars_in_1100s.nodes.stat_2, by=\"name\")\n\n\n\n\n\naspects_of_1200s_states <- read_excel(\"~/Desktop/Spring 2022/Networks/aspects_of_1200s_states.xlsx\")\n\ntotal_1200s <- merge(aspects_of_1200s_states, wars_in_1200s.nodes.stat_2, by=\"name\")\n\n\n\nCommunity Grouping\nLabel Propagation 1000s:\nThe first community cluster below is done using label propagation.\nThis results in 39 groups\n\n\nset.seed(23)\ncomm.lab<-label.propagation.community(wars_in_1000s.ig)\n#Inspect clustering object\n# igraph::groups(comm.lab)\n\n\n\n\n\n\nWalktrap 1000s:\nWalktrap classification as seen below results in 19 distinct\ncommunities.\n\n\nset.seed(238)\n#Run clustering algorithm: fast_greedy\nwars_in_1000s.wt<-walktrap.community(wars_in_1000s.ig)\n\n#igraph::groups(wars_in_1000s.wt)\n\n\n\nAdding more steps resulted in 19 groups for both 10 and 20 steps.\n\n\n#Run & inspect clustering algorithm: 10 steps\n#igraph::groups(walktrap.community(wars_in_1000s.ig, steps=10)) \n#Run & inspect clustering algorithm: 20 steps\n#igraph::groups(walktrap.community(wars_in_1000s.ig ,steps=20))\n#Run & inspect clustering algorithm\n\n\n\n\n\n\nMachine\nLearning, Regression and Principle Components:\n\n\ntotal_1000s_for_PCA <- total_1000s_brokerag_reg_binom[-c(20:27)]\n\napply(total_1000s_for_PCA[-1], 2, mean)\n\n\n        Catholic            Islam         Orthodox         Buddhist \n     0.454545455      0.181818182      0.154545455      0.063636364 \n           Pagan         Tengrism           Shinto            Hindu \n     0.036363636      0.018181818      0.054545455      0.045454545 \n       Shamanism        totdegree         indegree        outdegree \n     0.009090909      2.754545455      1.336363636      1.418181818 \n           eigen            close               rc         eigen.rc \n     0.028058711      0.023546832      0.287358773      0.003637773 \n              dc         eigen.dc more_win_or_loss \n     0.712641227      0.024420939      0.481818182 \n\n\n\napply(total_1000s_for_PCA[-1], 2, var)\n\n\n        Catholic            Islam         Orthodox         Buddhist \n    0.2502085071     0.1501251043     0.1318598832     0.0601334445 \n           Pagan         Tengrism           Shinto            Hindu \n    0.0353628023     0.0180150125     0.0520433695     0.0437864887 \n       Shamanism        totdegree         indegree        outdegree \n    0.0090909091     8.9208507089     2.6656380317     6.3189324437 \n           eigen            close               rc         eigen.rc \n    0.0076304265     0.0019575460     0.1260782284     0.0004728954 \n              dc         eigen.dc more_win_or_loss \n    0.1260782284     0.0056490031     0.2519599666 \n\n\n\npr.out <- prcomp(total_1000s_for_PCA[-1], scale = TRUE)\n\n\n\n\n\nnames(pr.out)\n\n\n[1] \"sdev\"     \"rotation\" \"center\"   \"scale\"    \"x\"       \n\n\n\npr.out$center\n\n\n        Catholic            Islam         Orthodox         Buddhist \n     0.454545455      0.181818182      0.154545455      0.063636364 \n           Pagan         Tengrism           Shinto            Hindu \n     0.036363636      0.018181818      0.054545455      0.045454545 \n       Shamanism        totdegree         indegree        outdegree \n     0.009090909      2.754545455      1.336363636      1.418181818 \n           eigen            close               rc         eigen.rc \n     0.028058711      0.023546832      0.287358773      0.003637773 \n              dc         eigen.dc more_win_or_loss \n     0.712641227      0.024420939      0.481818182 \n\n\n\npr.out$scale\n\n\n        Catholic            Islam         Orthodox         Buddhist \n      0.50020846       0.38745981       0.36312516       0.24522122 \n           Pagan         Tengrism           Shinto            Hindu \n      0.18805000       0.13422002       0.22813016       0.20925221 \n       Shamanism        totdegree         indegree        outdegree \n      0.09534626       2.98677932       1.63267818       2.51374868 \n           eigen            close               rc         eigen.rc \n      0.08735231       0.04424416       0.35507496       0.02174616 \n              dc         eigen.dc more_win_or_loss \n      0.35507496       0.07515985       0.50195614 \n\n\n\n\n\n\nbiplot(pr.out, scale = 0)\n\n\n\n\n\n\npr.out$rotation = -pr.out$rotation \n\npr.out$x = -pr.out$x\n\nbiplot(pr.out, scale = 0)\n\n\n\n\n\n\npr.out$sdev\n\n\n [1] 2.217501e+00 1.681548e+00 1.239242e+00 1.211199e+00 1.065982e+00\n [6] 1.037692e+00 1.029507e+00 1.011117e+00 1.005425e+00 9.514802e-01\n[11] 8.848499e-01 7.782431e-01 6.162540e-01 4.426224e-01 2.541422e-01\n[16] 1.091189e-01 7.597269e-16 6.258811e-16 2.174635e-16\n\n\n\npr.var <- pr.out$sdev^2\n\npr.var\n\n\n [1] 4.917311e+00 2.827605e+00 1.535720e+00 1.467004e+00 1.136318e+00\n [6] 1.076804e+00 1.059884e+00 1.022359e+00 1.010879e+00 9.053146e-01\n[11] 7.829594e-01 6.056623e-01 3.797690e-01 1.959146e-01 6.458828e-02\n[16] 1.190694e-02 5.771849e-31 3.917271e-31 4.729037e-32\n\n\n\npve <- pr.var / sum(pr.var)\n\npve\n\n\n [1] 2.588059e-01 1.488213e-01 8.082739e-02 7.721075e-02 5.980622e-02\n [6] 5.667390e-02 5.578337e-02 5.380835e-02 5.320417e-02 4.764814e-02\n[11] 4.120839e-02 3.187696e-02 1.998784e-02 1.031129e-02 3.399383e-03\n[16] 6.266808e-04 3.037815e-32 2.061722e-32 2.488967e-33\n\n\n\npar(mfrow = c(1, 2))\nplot(pve, xlab = \"Principal Component\",\nylab = \"Proportion of Variance Explained\", ylim = c(0, 1),\ntype = \"b\")\n\nplot(cumsum(pve), xlab = \"Principal Component\",\nylab = \"Cumulative Proportion of Variance Explained\", ylim = c(0, 1), type = \"b\")\n\n\n\n\n\n\nnames(total_1200s)\n\n\n [1] \"name\"         \"Catholic\"     \"Islam\"        \"Orthodox\"    \n [5] \"Buddhist\"     \"Pagan\"        \"Tengrism\"     \"Shinto\"      \n [9] \"Hindu\"        \"Shamanism\"    \"totdegree\"    \"indegree\"    \n[13] \"outdegree\"    \"eigen\"        \"rc\"           \"eigen.rc\"    \n[17] \"dc\"           \"eigen.dc\"     \"broker.tot\"   \"broker.coord\"\n[21] \"broker.itin\"  \"broker.rep\"   \"broker.gate\"  \"broker.lia\"  \n\n\n\ntotal_1200s_brokerag_reg<-total_1200s\n\n\n\n\n\ntotal_1200s_brokerag_reg$win_rate <- (total_1200s_brokerag_reg$outdegree/total_1200s_brokerag_reg$totdegree)\n\n\n\n\n\ntotal_1200s_brokerag_reg$loss_rate <- (total_1200s_brokerag_reg$indegree/total_1200s_brokerag_reg$totdegree)\n\n\n\n\n\ntotal_1200s_brokerag_reg_binom <- total_1200s_brokerag_reg %>% mutate(more_win_or_loss = case_when(\n  win_rate < 0.5 ~ 0,\n    win_rate >= 0.5 ~ 1))\n\n\n\n\n\ntotal_1200s_for_PCA <- total_1200s_brokerag_reg_binom[-c(20:27)]\n\n\napply(total_1200s_for_PCA[-1], 2, mean)\n\n\n   Catholic       Islam    Orthodox    Buddhist       Pagan \n0.714285714 0.068322981 0.086956522 0.086956522 0.012422360 \n   Tengrism      Shinto       Hindu   Shamanism   totdegree \n0.024844720 0.000000000 0.006211180 0.000000000 3.900621118 \n   indegree   outdegree       eigen          rc    eigen.rc \n1.956521739 1.944099379 0.025409148 0.158212220 0.002179127 \n         dc    eigen.dc  broker.tot \n0.841787780 0.023230021 0.333968821 \n\n\n\napply(total_1200s_for_PCA[-1], 2, var)\n\n\n    Catholic        Islam     Orthodox     Buddhist        Pagan \n2.053571e-01 6.405280e-02 7.989130e-02 7.989130e-02 1.234472e-02 \n    Tengrism       Shinto        Hindu    Shamanism    totdegree \n2.437888e-02 0.000000e+00 6.211180e-03 0.000000e+00 2.655256e+01 \n    indegree    outdegree        eigen           rc     eigen.rc \n6.204348e+00 1.587811e+01 5.600340e-03 7.101398e-02 7.273423e-05 \n          dc     eigen.dc   broker.tot \n7.101398e-02 4.549154e-03 2.983411e+01 \n\n\n\n# I cannot scale variables with \n\ntotal_1200s_for_PCA<-total_1200s_for_PCA[-c(8,10)]\n\n\n\n\n\npr.out_2 <- prcomp(total_1200s_for_PCA[-1], scale = TRUE)\n\n\n\n\n\nnames(pr.out_2)\n\n\n[1] \"sdev\"     \"rotation\" \"center\"   \"scale\"    \"x\"       \n\n\n\npr.out_2$center\n\n\n   Catholic       Islam    Orthodox    Buddhist       Pagan \n0.714285714 0.068322981 0.086956522 0.086956522 0.012422360 \n   Tengrism       Hindu   totdegree    indegree   outdegree \n0.024844720 0.006211180 3.900621118 1.956521739 1.944099379 \n      eigen          rc    eigen.rc          dc    eigen.dc \n0.025409148 0.158212220 0.002179127 0.841787780 0.023230021 \n broker.tot \n0.333968821 \n\n\n\npr.out_2$scale\n\n\n   Catholic       Islam    Orthodox    Buddhist       Pagan \n0.453163484 0.253086537 0.282650499 0.282650499 0.111106798 \n   Tengrism       Hindu   totdegree    indegree   outdegree \n0.156137382 0.078811041 5.152917825 2.490852831 3.984734068 \n      eigen          rc    eigen.rc          dc    eigen.dc \n0.074835420 0.266484487 0.008528436 0.266484487 0.067447414 \n broker.tot \n5.462061318 \n\n\n\n\n\n\nbiplot(pr.out_2, scale = 0)\n\n\n\n\n\n\npr.out_2$rotation = -pr.out_2$rotation \n\npr.out_2$x = -pr.out_2$x\n\nbiplot(pr.out_2, scale = 0)\n\n\n\n\n\n\npr.out$sdev\n\n\n [1] 2.217501e+00 1.681548e+00 1.239242e+00 1.211199e+00 1.065982e+00\n [6] 1.037692e+00 1.029507e+00 1.011117e+00 1.005425e+00 9.514802e-01\n[11] 8.848499e-01 7.782431e-01 6.162540e-01 4.426224e-01 2.541422e-01\n[16] 1.091189e-01 7.597269e-16 6.258811e-16 2.174635e-16\n\n\n\npr.var_2 <- pr.out_2$sdev^2\n\npr.var_2\n\n\n [1] 4.904685e+00 2.342837e+00 1.673460e+00 1.249477e+00 1.132262e+00\n [6] 1.097150e+00 1.011239e+00 9.459795e-01 8.660928e-01 5.136566e-01\n[11] 1.660835e-01 9.707769e-02 1.227998e-30 9.288233e-31 4.378653e-31\n[16] 1.136377e-31\n\n\n\npve_2 <- pr.var_2 / sum(pr.var_2)\n\npve_2\n\n\n [1] 3.065428e-01 1.464273e-01 1.045912e-01 7.809228e-02 7.076635e-02\n [6] 6.857190e-02 6.320245e-02 5.912372e-02 5.413080e-02 3.210354e-02\n[11] 1.038022e-02 6.067356e-03 7.674985e-32 5.805145e-32 2.736658e-32\n[16] 7.102355e-33\n\n\n\npar(mfrow = c(1, 2))\nplot(pve_2, xlab = \"Principal Component\",\nylab = \"Proportion of Variance Explained\", ylim = c(0, 1),\ntype = \"b\")\n\nplot(cumsum(pve_2), xlab = \"Principal Component\",\nylab = \"Cumulative Proportion of Variance Explained\", ylim = c(0, 1), type = \"b\")\n\n\n\n\n(information regarding the meaning of each type of brokerage was\nacquired from https://edis.ifas.ufl.edu/publication/WC197)\n\n\n\n",
    "preview": "posts/httpsnmilsteinumagithubioposts2022-03-21-blog-post-7/images/silly_cat.png",
    "last_modified": "2022-03-27T15:51:30-04:00",
    "input_file": {},
    "preview_width": 1022,
    "preview_height": 1064
  },
  {
    "path": "posts/httpsnmilsteinumagithubioposts2022-03-07-into-the-20th-century-conflict-data/",
    "title": "Into the 20th Century (Conflict Data) Homework 6",
    "description": "In this post I begin my analysis of the 20th century conflicts dataset.",
    "author": [
      {
        "name": "Noah Milstein",
        "url": {}
      }
    ],
    "date": "2022-03-12",
    "categories": [],
    "contents": "\n\n\n\nLoading and Summarizing Data\nLoading: Similarly to the datasets I used for the\nprior assignments, this one will involve the use of a conflict dataset.\nGiven the relative success of the analysis techniques on dyadic conflict\nin the 9th, 10th, and 11th centuries I decided to try it on a much more\nrecent period, that being the height of the cold war beginning in 1945\nand officially ending with the dissolution of the Soviet Union in 1992,\nhowever the dataset in question ends in 1989.\n\n\n\n\n\n\n\n\n\nInterpretation and Inital\nAnalysis\nInitial Interpretation: After briefly cleaning the\ndataset to remove excess spaces resulting in nations, or factions being\ncounted twice, I then converted my data in 4 different kinds of network\nobjects, being a matrix, edgelist graph, igraph, and network. A ggplot\nobject of the initial network can be seen below.\n\n\n\nContinued Visualization\nVisuals Though not necessarily practical for\nunderstanding the nature of the network the two visualization below are\nused to exhibit the increased complexity of this dataset relative to\nprior ones, as in previous models of conflict there were under 200 nodes\n(or factions) being visualized, as will be illustrated in subsequent\nanalysis there were about 600 nations, rebel groups, factions, and\nwarring parties considered direct belligerents in this dataset. It is\nalso important to note that this network does not include direct\nmilitary support that did did not constitute direct\ninvolvement, this will later be included as a grouping dummy variable,\nbut in its current form military support that is not directly\nintervention will not be considered.\n\n\nset.seed(2)\n\nggraph(Wars_in_latter_half_of_20th_network, 'dendrogram', circular = TRUE) + \n    geom_edge_elbow() + \n    coord_fixed() +\n    geom_edge_link0(edge_alpha = 0.001)+\n    geom_node_text(aes(label = name), size=1, repel=FALSE)\n\n\n\n\n\n\nggraph(Wars_in_latter_half_of_20th_network, layout = \"treemap\") + \n  geom_node_tile(aes(fill = depth))+    \n  geom_node_text(aes(label = name), size=1, repel=FALSE)\n\n\n\n\ninterpret the data, identifying at least two results of interest.\nQuestions you may want to consider include (but are not limited to) the\nfollowing. Calculate structural equivalence models for your network\ndata, and use clustering and blockmodeling to identify nodes in similar\npositions. Can you find any patterns in the data, and do the blocks\n“make sense.” What types of behavior would we expect to see (or do we\nsee) on the basis of equivalence and block assignment? Do different\nclustering methods and/or the use of weights make a difference? How much\ninsight can you get from plotting the block role assignments. You may\nalso want to see if nodes that are equivalent (and/or belong to same\nblock) are similar on measures of centrality introduced in earlier\nweeks.\nInital Analysis and\nInterpretation\nNetwork Summary: As can be seen by the network print\nbelow the conflict dataset comprises 599 nodes, factions, or\nbelligerents that are direct combatants in each\nconflict, these are directed with an in-degree being a lost war, and an\nout-degree being a won war. There are loops as many factions fight each\nother multiple times and amongst different sets of allies losing some\nwars and winning others.\n\n Network attributes:\n  vertices = 599 \n  directed = TRUE \n  hyper = FALSE \n  loops = TRUE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 1090 \n    missing edges= 0 \n    non-missing edges= 1090 \n\n Vertex attribute names: \n    vertex.names \n\n Edge attribute names not shown \n\n\n\n\n\n\ntemp<-data.frame(brokerage(Wars_in_latter_half_of_20th_network, cl = Wars_in_latter_half_of_20th_network.nodes.stat$totdegree)$z.nli)\n\nWars_in_latter_half_of_20th_network.nodes.stat_2 <- Wars_in_latter_half_of_20th_network.nodes.stat %>%\n  mutate(broker.tot = temp$t,\n         broker.coord = temp$w_I,\n         broker.itin = temp$w_O,\n         broker.rep = temp$b_IO,\n         broker.gate = temp$b_OI,\n         broker.lia = temp$b_O)\n\n\n\nBrokerage and Network\nAttributes\nBrokerage Scores: In this case brokerage scores are\ncalculated using the function brokerage() and appended to the data frame\nwith the these measures\nTotal Degree\n\n\n(Wars_in_latter_half_of_20th_network.nodes.stat_2%>%\n  arrange(desc(totdegree))%>%\n  slice(1:10))[,c(1,2)] %>%kable()\n\n\nname\ntotdegree\nUnited States\n63\nIsrael\n47\nChina\n47\nSoviet Union\n39\nFrance\n38\nPhilippines\n35\nIndia\n34\nUnited Kingdom\n31\nNorth Korea\n30\nThailand\n27\n\nIn-Degree\n\n\n(Wars_in_latter_half_of_20th_network.nodes.stat_2%>%\n  arrange(desc(indegree))%>%\n  slice(1:10))[,c(1,3)] %>%kable()\n\n\nname\nindegree\nSoviet Union\n25\nUnited States\n23\nNorth Korea\n21\nChina\n20\nSyria\n17\nCuba\n16\nSouth Vietnam\n15\nSLA\n13\nIsreal\n13\nLebanese Front\n13\n\nOut-Degree\n\n\n(Wars_in_latter_half_of_20th_network.nodes.stat_2%>%\n  arrange(desc(outdegree))%>%\n  slice(1:10))[,c(1,4)] %>%kable()\n\n\nname\noutdegree\nIsrael\n47\nUnited States\n40\nIndia\n32\nFrance\n31\nChina\n27\nPhilippines\n27\nItaly\n26\nUnited Kingdom\n20\nIran\n19\nNorth Vietnam\n19\n\n\n\n(Wars_in_latter_half_of_20th_network.nodes.stat_2%>%\n  arrange(desc(broker.coord))%>%\n  slice(0:5))[,c(1,12)] %>%kable()\n\n\nname\nbroker.coord\nKhmer Issarak\n-0.0042969\nSouth Africa\n-0.0042969\nKhmer Rouge\n-0.0042969\nPLO\n-0.0042969\nKhmer Republic\n-0.0042969\n\n\n\n(Wars_in_latter_half_of_20th_network.nodes.stat_2%>%\n  arrange(desc(broker.itin))%>%\n  slice(0:5))[,c(1,13)] %>%kable()\n\n\nname\nbroker.itin\nUnited States\n30.978006\nEthiopia\n20.451964\nChina\n13.215216\nFrance\n11.241500\nUnited Kingdom\n7.294199\n\n\nname\nbroker.rep\nPKK\n6.358704\nSouth Yemen\n3.288637\nIran\n-0.044345\nIsrael\n-0.044345\nAustralia\n-0.044345\n\n\nname\nbroker.gate\nMorocco\n9.0531209\nPUK\n4.1844336\nArab Socialist Ba’ath Party\n0.7091118\nSenegal\n0.7091118\nPapua New Guinea\n0.5196169\n\n\nname\nbroker.lia\nUnited States\n286.23524\nChina\n167.99725\nSoviet Union\n110.36960\nPhilippines\n69.88732\nUnited Kingdom\n67.23274\n\n\n\n\n\n\n\n\n\n\nExamining Centrality\n\n\nsna::dyad.census(Wars_in_latter_half_of_20th_network)\n\n\n     Mut Asym   Null\n[1,] 115  859 178127\n\nsna::triad.census(Wars_in_latter_half_of_20th_network)\n\n\n          003    012   102 021D 021U 021C 111D 111U 030T 030C 201\n[1,] 35068530 545959 17760 3817 1904 1822  526  639   46    0  83\n     120D 120U 120C 210 300\n[1,]    0    3   10   0   0\n\n\n\n(Wars_in_latter_half_of_20th_network.nodes.stat_2%>%\n  arrange(desc(eigen))%>%\n  slice(0:5))[,c(1,5)] %>%kable()\n\n\nname\neigen\nChina\n0.3435636\nNorth Vietnam\n0.2973257\nPathet Lao\n0.2836275\nKhmer Rouge\n0.2223014\nKhmer Issarak\n0.2153606\n\n\n\n(Wars_in_latter_half_of_20th_network.nodes.stat_2%>%\n  arrange(desc(close))%>%\n  slice(0:5))[,c(1,6)] %>%kable()\n\n\nname\nclose\nIsrael\n0.1664994\nUnited States\n0.1536232\nChina\n0.1497492\nFrance\n0.1449833\nPathet Lao\n0.1380435\n\n\n\n(Wars_in_latter_half_of_20th_network.nodes.stat_2%>%\n  arrange(desc(eigen.rc))%>%\n  slice(0:5))[,c(1,8)] %>%kable()\n\n\nname\neigen.rc\nEthiopia\n0.0801873\nFrance\n0.0627097\nSouth Africa\n0.0451530\nUnited Kingdom\n0.0303952\nUnited States\n0.0294664\n\n\n\n(Wars_in_latter_half_of_20th_network.nodes.stat_2%>%\n  arrange(desc(eigen.dc))%>%\n  slice(0:5))[,c(1,10)] %>%kable()\n\n\nname\neigen.dc\nChina\n0.3166654\nNorth Vietnam\n0.2973257\nPathet Lao\n0.2836275\nKhmer Rouge\n0.2223014\nKhmer Issarak\n0.2153606\n\n\n\nWars_in_latter_half_of_20th_network.nodes.stat_2%>%\n  select(-name) %>% \n  gather() %>% \n  ggplot(aes(value)) +\n    geom_histogram() +\n    facet_wrap(~key, scales = \"free\")\n\n\n\n\n\n\nwars_correlation_latter_half<-Wars_in_latter_half_of_20th_network.nodes.stat_2 %>% \n  select(totdegree,indegree,outdegree,eigen,eigen.rc,eigen.dc)%>%\n  correlate() \nfashion(wars_correlation_latter_half)\n\n\n       term totdegree indegree outdegree eigen eigen.rc eigen.dc\n1 totdegree                .71       .87   .64      .55      .60\n2  indegree       .71                .28   .34      .45      .30\n3 outdegree       .87      .28             .64      .45      .62\n4     eigen       .64      .34       .64            .53      .99\n5  eigen.rc       .55      .45       .45   .53               .42\n6  eigen.dc       .60      .30       .62   .99      .42         \n\n\n\nrplot(wars_correlation_latter_half)\n\n\n\n\n\n\nlibrary(threejs)\nlibrary(htmlwidgets)\nlibrary(igraph)\n\n\n\n\n\n#net.js <- Wars_in_latter_half_of_20th.ig\n#graph_attr(net.js, \"layout\") <- NULL \n\n\n\n\n\n#gjs <- graphjs(net.js, main=\"Cold War Interactive Network\", bg=\"gray10\", #vertex.size=0.5, showLabels=T, vertex.label = V(net.js)$name, stroke=F, curvature=0.1, #attraction=0.9, repulsion=0.7, opacity=0.9)\n#print(gjs)\n#saveWidget(gjs, file=\"Media-Network-gjs.html\")\n#browseURL(\"Media-Network-gjs.html\")\n\n\n\n\n\n\n",
    "preview": "posts/httpsnmilsteinumagithubioposts2022-03-07-into-the-20th-century-conflict-data/into-the-20th-century-conflict-data_files/figure-html5/unnamed-chunk-5-1.png",
    "last_modified": "2022-03-12T20:07:27-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsrpubscombean22z875971/",
    "title": "Assignment6",
    "description": "assignment for political and social network analysis",
    "author": [
      {
        "name": "Zoe Bean",
        "url": {}
      }
    ],
    "date": "2022-03-12",
    "categories": [],
    "contents": "\r\n\r\n\r\nlibrary(tidyverse)\r\nlibrary(GGally)\r\n\r\nsource(\"./Import Scripts/Game of Thrones Interactions.R\")\r\n\r\n\r\n\r\nThe Network\r\nThis is an edgelist dataset. It has 298 vertices and 9131 edges, it is not directed or bipartite, and it is weighted. The vertices are the people, with attributes regarding the time and location of their appearances, as well as the point of view the story is in for these appearances.\r\nThe dataset is the Game of Thrones Interactions dataset, with characters as nodes, and instances of characters being mentioned in the same vicinity are the edges.\r\nHere is the network plots that I have managed to create with this data so far:\r\n\r\n\r\nV(network_igraph)$size<-5\r\nplot(network_igraph, layout_with_lgl(network_igraph), vertex.label=NA)\r\n\r\n\r\n\r\n#a subset of the data with a lot of weight on the edges- meaning more interactions between the characters\r\n#weight chosen by rerunning until the cluster dendrogram was somewhat readable \r\nsub_stat<-get.inducedSubgraph(network_statnet,eid=which(network_statnet%e%'weight'>=18))\r\nplot(sub_stat)\r\n\r\n\r\n\r\n\r\nStructural Equivalence\r\n\r\n\r\ngot_net_se<-equiv.clust(sub_stat, equiv.fun=\"sedist\", method=\"hamming\",mode=\"graph\")\r\nplot(got_net_se, labels=got_net_se$glabels)\r\n\r\n\r\n\r\n\r\nFor this network, I found that clustering remains the same regardless of equivalence method, so I only need the default method.\r\nClustering\r\n\r\n\r\nplot(got_net_se, labels=got_net_se$glabels)\r\nrect.hclust(got_net_se$cluster,h=20)\r\n\r\n\r\n\r\n\r\nThis dendrogram does seem to be split up in a way that makes sense. The first partition is Jon Snow + the Others, which makes sense because the Others are almost solely Jon’s plotline. Bran Stark in on his own, and has a unique storyline. The third partition does seem to be more of an ‘and everyone else’ category so it is hard to say much about it other than to be a little surprised that Daenerys Targaryen is in this category. Next, we have Cersei Lannister, also on her own, also uniquely powerful throughout the story. My memory of the plot is not good enough for me to come up with the reason why Robb Stark, Stannis Baratheon, Eddard Stark, and Robert Baratheon are ‘related’ by this measure, but I am unsurprised by it. This next cluster has people I would consider to be powerful BECAUSE they serve more powerful people, whilst managing to appease them even as the people in those more powerful positions change rapidly due to the political upheaval that occurs constantly throughout the novels.\r\nBlockmodeling\r\n\r\n\r\nplot.block<-function(x=blk_mod, main=NULL, cex.lab=1){\r\n  plot.sociomatrix(x$blocked.data, labels=list(x$plabels,x$plabels),\r\n                   main=main, drawlines = FALSE, cex.lab=cex.lab)\r\n  for (j in 2:length(x$plabels)) if (x$block.membership[j] !=\r\n                                     x$block.membership[j-1]) \r\n    abline(v = j - 0.5, h = j - 0.5, lty = 3, xpd=FALSE)\r\n}\r\n\r\nblk_mod<-blockmodel(sub_stat,got_net_se,k=5)\r\nblk_mod$block.model\r\n\r\n\r\n           Block 1    Block 2   Block 3   Block 4    Block 5\r\nBlock 1 0.01846154 0.02564103 0.2307692 0.1153846 0.23076923\r\nBlock 2 0.02564103 0.50000000 1.0000000 0.7291667 0.04166667\r\nBlock 3 0.23076923 1.00000000       NaN 1.0000000 0.00000000\r\nBlock 4 0.11538462 0.72916667 1.0000000 1.0000000 1.00000000\r\nBlock 5 0.23076923 0.04166667 0.0000000 1.0000000 1.00000000\r\n\r\nplot.block(blk_mod,main=\"Game of Thrones Interactions, 5 Partitions\", cex.lab=.3)\r\n\r\n\r\n\r\n\r\nSince this is an undirected graph, every relationship is mirrored, and there are no self-loops so there is not much that can be said about the relationships themselves that are shown here. As for the blocks, there are a few block that are almost completely full, but even the most empty[Block 2-1 aka Block 1-2] have a few relationships within them.\r\nRoles\r\n\r\n\r\nsub_stat%v%\"role\"<-blk_mod$block.membership[match(sub_stat%v%\"vertex.names\", blk_mod$glabels)]\r\nGGally::ggnet2(sub_stat,\r\n               node.color=\"role\", \r\n               node.size=sna::degree(sub_stat, gmode=\"graph\"),\r\n               node.label = \"vertex.names\",\r\n               node.alpha = .5,\r\n               label.size = 2.5)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/httpsrpubscombean22z875971/distill-preview.png",
    "last_modified": "2022-03-12T20:07:06-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsrpubscomburnworthj876640/",
    "title": "How Elite is the Supreme Court?",
    "description": "\"After struggling most weeks trying to work with my dataset, I realized from our classes that I was looking at my dataset the wrong way. So, I decided to flip the format. I am now looking at just how elite the Supreme Court has been over its history. I do this by grouping Justices to the school they attended. It was such a relief to be able to run the different network commands and actually get graphs or data. I will save working on formating the graphs for the future when my brain recovers.\n\nThe new version of my dataset has 104 vertices. It is a directed network. It is not bipartite and there are a total of 76 edges.\"",
    "author": [
      {
        "name": "Justin Burnworth",
        "url": {}
      }
    ],
    "date": "2022-03-12",
    "categories": [],
    "contents": "\n\n\n\n\n\n\n\n\n\n\n Network attributes:\n  vertices = 104 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 76 \n    missing edges= 0 \n    non-missing edges= 76 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\n\n               Length Class  Mode     \ncluster          7    hclust list     \nmetric           1    -none- character\nequiv.fun        1    -none- character\ncluster.method   1    -none- character\nglabels        104    -none- character\nplabels        104    -none- character\n\n\n\n\n\n\nNetwork Blockmodel:\n\nBlock membership:\n\n                   Albany            Apprenticeship \n                        1                         2 \n                 Berkeley           Bowdoin College \n                        1                         1 \n          Centre Colllege                Cincinnati \n                        1                         1 \n                 Colorado                  Columbia \n                        1                         3 \n Cumberland School of Law          Emory University \n                        1                         1 \n                  Harvard                    Howard \n                        4                         1 \n                  Indiana               Kansas City \n                        1                         1 \n                 Michigan       New York Law School \n                        1                         1 \n             Northwestern                Notre Dame \n                        1                         1 \n                     Penn                    School \n                        1                         1 \n  St. Paul College of Law                  Stanford \n                        1                         1 \n                    Texas   Transylvania University \n                        1                         1 \n                   Tulane                  Virginia \n                        1                         1 \n       Washington and Lee                      Yale \n                        1                         5 \n             David Brewer         Robert H. Jackson \n                        1                         1 \n         Rufus W. Peckham           James F. Byrnes \n                        1                         1 \n    Samuel Freeman Miller          Stanley Matthews \n                        1                         1 \n              John Clarke              Mahon Pitney \n                        1                         1 \n            Stephen Field         George Shiras Jr. \n                        1                         1 \n            Wiliam R. Day             Pierce Butler \n                        1                         1 \n           Joseph Bradley               Earl Warren \n                        1                         1 \n          Melville Fuller            Fred M. Vinson \n                        1                         1 \n      William Howard Taft       Willis Van Devanter \n                        1                         1 \n           Wiley Rutledge      Charles Evans Hughes \n                        1                         1 \n         Harland F. Stone         Samuel Blatchford \n                        1                         1 \n      Benjamin N. Cardozo        William O. Douglas \n                        1                         1 \n             Stanley Reed       Ruth Bader Ginsburg \n                        1                         1 \n           Joseph McKenna    Howell Edmunds Jackson \n                        1                         1 \n            Horace Lurton              Lucius Lamar \n                        1                         1 \n             John Roberts           Anthony Kennedy \n                        1                         1 \n              Horace Gray Oliver Wendell Holmes Jr. \n                        1                         1 \n        Felix Frankfurter            Harry Blackmun \n                        1                         1 \n           Stephen Breyer       William Brennan Jr. \n                        1                         1 \n             David Souter             William Moody \n                        1                         1 \n           Louis Brandeis               Elena Kagan \n                        1                         1 \n           Edward Sanford             Harold Burton \n                        1                         1 \n           Antonin Scalia              Neil Gorsuch \n                        1                         1 \n        Thurgood Marhsall            Sherman Minton \n                        1                         1 \n        Charles Whittaker         George Sutherland \n                        1                         1 \n             Frank Murphy   John Marshall Harlan II \n                        1                         1 \n          Arthur Goldberg         John Paul Stevens \n                        1                         1 \n        Amy Coney Barrett              Owen Roberts \n                        1                         1 \n                  Justice          Warren E. Burger \n                        1                         1 \n        William Rehnquist       Sandra Day O'Connor \n                        1                         1 \n                Tom Clark      John Marshall Harlan \n                        1                         1 \n     Edward Douglas White          James McReynolds \n                        1                         1 \n      Lewis F. Powell Jr.              Joseph Lamar \n                        1                         1 \n           Morrison White           Brett Kavanaugh \n                        1                         1 \n               Abe Fortas     William Burnham Woods \n                        1                         1 \n          Sonia Sotomayor      Henry Billings Brown \n                        1                         1 \n              Byron White            Potter Stewart \n                        1                         1 \n             Samuel Alito           Clarence Thomas \n                        1                         1 \n\nReduced form blockmodel:\n\n     Albany Apprenticeship Berkeley Bowdoin College Centre Colllege Cincinnati Colorado Columbia Cumberland School of Law Emory University Harvard Howard Indiana Kansas City Michigan New York Law School Northwestern Notre Dame Penn School St. Paul College of Law Stanford Texas Transylvania University Tulane Virginia Washington and Lee Yale David Brewer Robert H. Jackson Rufus W. Peckham James F. Byrnes Samuel Freeman Miller Stanley Matthews John Clarke Mahon Pitney Stephen Field George Shiras Jr. Wiliam R. Day Pierce Butler Joseph Bradley Earl Warren Melville Fuller Fred M. Vinson William Howard Taft Willis Van Devanter Wiley Rutledge Charles Evans Hughes Harland F. Stone Samuel Blatchford Benjamin N. Cardozo William O. Douglas Stanley Reed Ruth Bader Ginsburg Joseph McKenna Howell Edmunds Jackson Horace Lurton Lucius Lamar John Roberts Anthony Kennedy Horace Gray Oliver Wendell Holmes Jr. Felix Frankfurter Harry Blackmun Stephen Breyer William Brennan Jr. David Souter William Moody Louis Brandeis Elena Kagan Edward Sanford Harold Burton Antonin Scalia Neil Gorsuch Thurgood Marhsall Sherman Minton Charles Whittaker George Sutherland Frank Murphy John Marshall Harlan II Arthur Goldberg John Paul Stevens Amy Coney Barrett Owen Roberts Justice Warren E. Burger William Rehnquist Sandra Day O'Connor Tom Clark John Marshall Harlan Edward Douglas White James McReynolds Lewis F. Powell Jr. Joseph Lamar Morrison White Brett Kavanaugh Abe Fortas William Burnham Woods Sonia Sotomayor Henry Billings Brown Byron White Potter Stewart Samuel Alito Clarence Thomas \n            Block 1 Block 2 Block 3 Block 4 Block 5\nBlock 1 0.003131313       0       0       0       0\nBlock 2 0.110000000     NaN       0       0       0\nBlock 3 0.080000000       0     NaN       0       0\nBlock 4 0.160000000       0       0     NaN       0\nBlock 5 0.100000000       0       0       0     NaN\n\n\n\n\n\n\n\n\n",
    "preview": "posts/httpsrpubscomburnworthj876640/distill-preview.png",
    "last_modified": "2022-03-12T20:07:37-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsyli210813githubiosocialnetworkhomework6/",
    "title": "Social Network Analysis Homework 6",
    "description": "Roles & blockmodels.",
    "author": [
      {
        "name": "Yifan Li",
        "url": {}
      }
    ],
    "date": "2022-03-12",
    "categories": [],
    "contents": "\nDistill is a publication format for scientific and technical writing, native to the web.\nLearn more about using Distill for R Markdown at https://rstudio.github.io/distill.\n\n\n\n\n\n\n\n Network attributes:\n  vertices = 18 \n  directed = FALSE \n  hyper = FALSE \n  loops = TRUE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 61 \n    missing edges= 0 \n    non-missing edges= 61 \n\n Vertex attribute names: \n    color region vertex.names \n\n Edge attribute names: \n    weight \n[1] 0.3267974\n[1] 0.3787375\n[1] 1\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.00    1.00    2.00    3.59    4.00   17.00 \n\nSince blockmodel works better with small network, I use the Game of Throne marriage network (instead of the huge world trade network) for homework this week.\nThis network is a undirected network showing the marriage between important families in Westeros. (I think if we distinguish which family the bride and groom belong to in each marriage, we can also create a directed network. I may try it later.) Each node represents a family (or a set of less important families of one region), while each tie indicates there are one or more marriage between the two families. The weights represents how many marriages have occurred between the family. There is only one component in this network, indicating all the important Westeros ruling families are connected by marriage.\n\n\n\n\n\n\n\n\n\nExcept for using single clustering method, the three other methods give a clear hierarchical structures which capture differences in network position between the families. All the four method identify Targaryen as an unique role to some extent, which is bery reasonable due to its status in the book.\n\n\n\nFor me, it’s a little confusing what these red rectangles mean. The partition is crossing the branches. The role values assigned by blockmodels are also different from the division in those plots. So I will focus more on the blocks partitioned by the blockmodels, and use the cluster dendrograms just as visual reference.\n\n\n\n\n           Block 1    Block 2   Block 3   Block 4\nBlock 1 0.40000000 0.04166667 0.6666667 0.8333333\nBlock 2 0.04166667 0.17857143 0.5000000 0.6250000\nBlock 3 0.66666667 0.50000000 0.3333333 0.6666667\nBlock 4 0.83333333 0.62500000 0.6666667       NaN\n\n          Block 1   Block 2   Block 3   Block 4\nBlock 1 0.1153846 0.3846154 0.6153846 0.6923077\nBlock 2 0.3846154 1.0000000 0.5000000 1.0000000\nBlock 3 0.6153846 0.5000000 0.0000000 0.5000000\nBlock 4 0.6923077 1.0000000 0.5000000       NaN\n\n          Block 1   Block 2   Block 3   Block 4\nBlock 1 0.1904762 0.5333333 0.6666667 0.7333333\nBlock 2 0.5333333       NaN 0.0000000 1.0000000\nBlock 3 0.6666667 0.0000000       NaN 0.0000000\nBlock 4 0.7333333 1.0000000 0.0000000       NaN\n\n           Block 1   Block 2    Block 3   Block 4\nBlock 1 1.00000000 0.0000000 0.03333333 0.6666667\nBlock 2 0.00000000 1.0000000 0.50000000 0.6666667\nBlock 3 0.03333333 0.5000000 0.11111111 0.6333333\nBlock 4 0.66666667 0.6666667 0.63333333 0.3333333\n\n\nAgain, the single clustering method makes the least sense. 3 families get one block for each, and the others are all in the same block.\nAmong the other three, the Ward D method give the most 0s and 1s (or near 0 or 1). It seems to best capture differences in network position between the families. Let’s explore it further.\n\n\n\n\n           Block 1   Block 2    Block 3   Block 4\nBlock 1 1.00000000 0.0000000 0.03333333 0.6666667\nBlock 2 0.00000000 1.0000000 0.50000000 0.6666667\nBlock 3 0.03333333 0.5000000 0.11111111 0.6333333\nBlock 4 0.66666667 0.6666667 0.63333333 0.3333333\n\n\n\n          name role_wrd\n1        Arryn        1\n2        Tully        1\n3         Vale        1\n4    Baratheon        2\n5        Reach        2\n6    Lannister        3\n7      Martell        3\n8   Stormlands        3\n9       Tyrell        3\n10  Crownlands        3\n11       Essos        3\n12  Riverlands        3\n13 Westerlands        3\n14       North        3\n15       Dorne        3\n16       Stark        4\n17        Frey        4\n18   Targaryen        4\n\nBlock 1(Arryn, Tully, and Vale) and Block 2 (Baratheon and Reach) show a faction pattern. They are fully connected to each other within factions by marriage ties while have no marriage with the other faction. It’s understandable since the Arryn family rule the Vale, so they have close relation to nobles of the Vale. The Tully family rule the riverlands, which is next the Vale. And this part of Westoros has few connections to Baratheons and nobles in Reach. (Not quite sure why the Baratheon and the Reach are viewed as the same role and a faction. Maybe I’m not familiar enough with the book.)\nBlock 3 consists of most other families. They are loosely connected to each other. The block 1 or faction of Vale and Riverlands has very limited connections with block 3, indicating that they are not deeply involved in other affairs in Westeros. The Baratheon block have some relation with them, which might provide the support for the throne. Sadly, this connection is not enough. Perhaps this is one of the causes of the War of the Five Kings.\nBlock 4 (Targaryen, Stark and Frey) is loosely self connected, but have a relative high connection to all the other 3 blocks. It is quite interesting since these there families (especially the Targaryen and the Stark) are the central families to the story of the book. The three families have extensive and similar political resources in Westeros. They marry each other and compete with each other at the same time. The most important marriages in the story take place between these three families. Meanwhile, House Stark’s war to help Baratheon against Targaryen, and Frey’s betrayal of Stark, are two of the most significant turning points in Westeros history. The role analysis shows us they fight each other because they occupy similar roles.\nInterestingly, one of the other major family for the book, the Lannister has no unique roles in all four methods. This fact might help explain why the Lannisters try to grasp the power and make many political enemies on the one hand, and struggling so much in the process on the other hand.\n\n\n\nThe plot show the pattern more clearly. The Stark, Frey and Targaryen sit in the center of the network and compete with each other. Baratheon and Reach sit near the center. Other families are surrounding around the core five, while Tully, Vale and Arryn are located at the periphery. (Dorne is also quite periphery, which is align with the book.)\n\n     role_wrd degree degree.wt bonpow betweenness close constraint\n[1,]        1    4.3        16  -1.08         1.8  0.53       0.45\n[2,]        2    8.0        28  -1.10        13.3  0.65       0.35\n[3,]        3    4.0        18  -0.74         1.1  0.54       0.63\n[4,]        4   10.3        51  -0.90        24.5  0.71       0.27\n     eigen eigen.rc eigen.dc role_cmpl role_avg role_sing  n\n[1,]  0.17    0.018     0.15       1.0      1.0         1  3\n[2,]  0.28    0.044     0.24       2.5      2.0         1  2\n[3,]  0.18    0.046     0.13       1.7      1.0         1 10\n[4,]  0.35    0.142     0.21       3.3      3.3         3  3\n     role_cmpl degree degree.wt bonpow betweenness close constraint\n[1,]         1   1.17      12.1   0.40        0.76 0.043      0.056\n[2,]         2   1.85      11.5   0.53        3.66 0.062      0.193\n[3,]         3   0.58       8.1   0.89        2.21 0.000      0.084\n[4,]         4     NA        NA     NA          NA    NA         NA\n      eigen eigen.rc eigen.dc role_avg role_sing role_wrd  n\n[1,] 0.0636    0.035    0.041     0.00         0     1.10  0\n[2,] 0.0663    0.030    0.059     0.35         0     0.35  0\n[3,] 0.0066    0.051    0.047     0.58         1     1.15  0\n[4,]     NA       NA       NA       NA        NA       NA NA\n\nBy summarising the centrality scores by roles, we can identify their characteristics to some extent. The block 1 is in the periphery, and have the lowerst weighted degree, closeness and eigenvector centrality score, and have relatively low degree, Bonacich power and betweenness.\nBlock 2, the Baratheon and Reach, has the second high degree, weighted degree, betweenness, closeness and eigenvector centrality score (just next to block 4), and have the second low constraint, indicating their central position (not central enough though). Their reflected centrality is quite low compared with the derived centrality, indicating that they may actually only have limited direct resources and instead rely on indirect relationships (probably especially on Stark). This further explain the failure of the rule of Baratheon. Robert had to rule by compromise.They have the lowest Bonacich power.(DOn’t know how to interpret a negative value.)\nBlock 3, the collection of “normal” noble families, have low scores for almost every parameters and high constraint as expected.\nBlock 4, the collection of the most important families, have highest centrality scores and lowest constraint as expected. Moreoever, compared with other blocks, they have quite high reflected - derived centrality ratio, indicating they have the most direct political resources. Combined with the low constrain, we can easily identify them as structural holes. This is the origin of their power.\n\n\n\n",
    "preview": "posts/httpsyli210813githubiosocialnetworkhomework6/distill-preview.png",
    "last_modified": "2022-03-12T20:07:32-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsnmilsteinumagithubioposts2022-02-21-week-5-interpretaive-assignment/",
    "title": "Week 5 Interpretaive Assignment",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Noah Milstein",
        "url": {}
      }
    ],
    "date": "2022-03-03",
    "categories": [],
    "contents": "\n\n\n\n\n\n\nBackground and Research\nQuestion:\nWikipedia is self-described as a “free content, multilingual online\nencyclopedia written and maintained by a community of volunteers through\na model of open collaboration,” information on the website i shared and\nmaintained “using a wiki-based editing system. [and] Individual\ncontributors,” being the 5th most visited website in the world it is\nalso the largest and most-read reference work in history.” (“https://en.wikipedia.org/wiki/Wikipedia”) Because of\nWikipedia’s position, as an arbiter of information and reference for a\nnumber of subjects, it is essential to understand the nature of the\nrequired citations and how they inform the websites portrayal of history\nand information. (Chase 2021)\nConflict is a defining feature of history, the results of war and the\ngroups involved are essential to understanding dynamics of power\nglobally. A war can represent the transfer of material, territorial, and\nstrategic power between groups. As a result the networks of wars between\nnations can give some notion of power centrality among warring\nnations.\nSince wikipedia has become a widely accepted (if often critiqued)\nsource of information, its citations and the information resulting from\nthem can give us a sense of how where the center of global conflict, and\nthus the most central nations, according to popular and accessible\nacademic literature.\nhttps://www.visualcapitalist.com/the-50-most-visited-websites-in-the-world/\nChase, Matt. “Wikipedia is 20, and its reputation has never been\nhigher”. The Economist. January 9, 2021. Retrieved February 25,\n2021.\n\n\n\nPart 1:\nDescribe the Dataset You Are\nUsing:\nThe Dataset Being Used: The dataset that I am using\nis wikipedia list of wars throughout history, this article is the “List\nof wars: 1000–1499” which acts as a subset of the “2nd-millennium\nconflicts” I chose this dataset as an exemplar of popular history’s\ndepiction of the centralization of worldwide conflict. Wikipedia, being\nan accessible source generally created from relevant citations makes it\na good case study to see where historical writers and academics center\ntheir world are relevant conflicts.\nIdentify initial network\nformat:\nAnswer: The initial network format is as an edge\nlist, the first, in column contains the winners of each\nwar while the second, out column contains the losers of\neach. These sets of belligerents are directed\nNetwork\nStructure: Wars Startings in the 1000s\n\n Network attributes:\n  vertices = 117 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 153 \n    missing edges= 0 \n    non-missing edges= 153 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nNetwork\nStructure: Wars Startings in the 1100s\n\n Network attributes:\n  vertices = 78 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 225 \n    missing edges= 0 \n    non-missing edges= 225 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nNetwork\nStructure: Wars Startings in the 1200s\n\n Network attributes:\n  vertices = 161 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 313 \n    missing edges= 0 \n    non-missing edges= 313 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nIdentify Nodes: Describe and identify the nodes\n(including how many nodes are in the dataset)\nAnswer: Nodes or vertices in these datasets\nrepresent belligerents in wars throughout history, the involved parties\nin each conflict can be a nation, province, individual, or group so long\nas they are listed as involved in the conflict. In the 1000s there are\n117, in the 1100s there are 78 and in the 1200s there are 161.\nWhat Constitutes a Tie: What constitutes a tie or\nedge (including how many ties, whether ties are directed/undirected and\nweighted/binary, and how to interpret the value of the tie if any)\nAnswer: A tie or edge in this dataset represents a\nwar, this war can be between two nations or groups within a nation.\nThese edges can represent a war that involved many more nations but are\nalways tied to each and every party involved on both sides. These edges\nare directed and the direction indicates which side “won” the conflict\n(if an edge has an arrow pointing to another the node that originated\nthat arrow won the war against them. There are 153 edges in the 1000s,\n225 edges in 1100s and 313 edges in the 1200s.\nEdge Attributes and Subset: Whether or not there are\nedge attributes that might be used to subset data or stack multiple\nnetworks (e.g., tie type, year, etc).\nAnswer: There are a number of attributes that could\nbe used to subset the data, year that the conflict began or the length\nof time it lasted are available. Aspects like each side’s religion and\nthe area where the conflict took place could be used to subset the data\nitself.\nPart 2:\nBrokerage and Betweeness\ncentrality\nWhat are betweeness and brokerage cenrrality\nCalculate brokerage and betweenneess centrality measures for one or more\nsubsets of your network data, and write up the results and your\ninterpretation of them.\nAnswer: I will be calculating these measures for\nwars in 1000-1099, 1100-1199, and 1200-1399.\n\n\n\nBrokerage scores in the\n1000s\n\n\n\n\n\n(wars_in_1000s.nodes.stat_2%>%\n  arrange(desc(broker.tot))%>%\n  slice(1:10))[,c(1,11:15)] %>%kable()\n\n\nname\nbroker.tot\nbroker.coord\nbroker.itin\nbroker.rep\nbroker.gate\nByzantine Empire\n25.2728731\nNaN\n3.9930250\nNaN\nNaN\nSultanate of Rum\n10.4364880\nNaN\n-0.5014965\nNaN\nNaN\nHoly Roman Empire\n10.0243662\nNaN\n4.8919293\nNaN\nNaN\nEngland\n7.5516353\nNaN\n6.6906430\n-0.0800286\n-0.0800286\nKingdom of Sicily\n5.4910263\nNaN\n3.9930250\nNaN\nNaN\nKingdom of France\n2.1940518\nNaN\n-0.5014965\nNaN\nNaN\nSeljuk Empire\n1.7819300\n-0.0271615\n-0.5004595\n6.3140099\n-0.1374029\nKingdom of Georgia\n0.5455645\n-0.0158536\n-0.5009747\n-0.1126843\n-0.1126843\nPapal States\n0.5455645\n-0.0158536\n-0.5009747\n-0.1126843\n11.6872209\nNormandy\n0.1334427\n-0.1256118\n0.4229345\n-0.2730778\n-0.2730778\n\nBrokerage scores in the\n1100s\n\n\n\n\n\n\n\n\n(wars_in_1100s.nodes.stat_2%>%\n  arrange(desc(broker.tot))%>%\n  slice(1:10))[,c(1,10:14)] %>%kable()\n\n\nname\nbroker.tot\nbroker.coord\nbroker.itin\nbroker.rep\nbroker.gate\nKingdom of Jerusalem\n13.5778650\nNaN\n2.9379204\n17.9204822\n-0.1688321\nFatimid Caliphate\n8.0093472\nNaN\n-0.6987889\nNaN\nNaN\nAyyubid Dynasty\n7.2954347\nNaN\n-0.6973228\n-0.1688321\n-0.1688321\nZengid Dynasty\n5.7248271\nNaN\n0.7542726\nNaN\nNaN\nByzantine Empire\n5.2964795\nNaN\n0.7567745\n-0.1688321\n-0.1688321\nEngland\n4.4397845\nNaN\n-0.6973228\n-0.1688321\n-0.1688321\nHoly Roman Empire\n2.1552644\nNaN\n-0.6973228\n-0.1688321\n-0.1688321\nKingdom of France\n1.0130043\nNaN\n-0.6973228\n-0.1688321\n-0.1688321\nKingdom of Sicily\n0.1563093\n-0.2053296\n-0.6628278\n-0.4286929\n-0.4286929\nPapal States\n-0.2720383\n-0.1781918\n-0.6712334\n-0.3997174\n1.6840665\n\nBrokerage scores in the\n1200s\n\n\n\n\n\n\n\n\n\n\nname\nbroker.tot\nbroker.coord\nbroker.itin\nbroker.rep\nbroker.gate\nMongol Empire\n47.964825\nNaN\n-0.5953457\nNaN\nNaN\nKingdom of France\n28.663539\nNaN\n-0.5953457\nNaN\nNaN\nAyyubid Dynasty\n26.995527\nNaN\n1.6524957\nNaN\nNaN\nKingdom of England\n21.991489\nNaN\n8.3960200\nNaN\nNaN\nRepublic of Genoa\n11.983415\nNaN\n-0.5953457\nNaN\nNaN\nKnights Templar\n10.077115\nNaN\n1.6524957\nNaN\nNaN\nHoly Roman Empire\n4.834790\n-0.0170801\n-0.5948396\n10.86552\n10.8655226\nPrincipality of Antioch\n4.834790\n-0.0170801\n2.4030361\n13.61357\n-0.1266480\nKingdom of Cyprus\n4.596503\n58.5391124\n0.1546293\n13.61357\n10.8655226\nCounty of Tripoli\n3.643353\nNaN\n0.9035078\n19.28056\n-0.0898366\n\n\nname\nbroker.gate\nPapal States\n11.6872209\nCounty of Sicily\n-0.0800286\nEngland\n-0.0800286\nCounty of Aversa\n-0.1126843\nKingdom of Georgia\n-0.1126843\nGreat Seljuq Empire\n-0.1126843\nChola Empire\n-0.1126843\nTaifa of Lérida\n-0.1126843\nCounty of Apulia\n-0.1374029\nSeljuk Empire\n-0.1374029\nname\nbroker.tot\nByzantine Empire\n25.2728731\nSultanate of Rum\n10.4364880\nHoly Roman Empire\n10.0243662\nEngland\n7.5516353\nKingdom of Sicily\n5.4910263\nKingdom of France\n2.1940518\nSeljuk Empire\n1.7819300\nKingdom of Georgia\n0.5455645\nPapal States\n0.5455645\nNormandy\n0.1334427\n\nOption 2.A\nFor a Specific Research Question: If you have a\nspecific research question, please feel free to use that to guide your\nanalysis. Otherwise, you may want to orient your analysis as follows in\norder to identify a compelling question or noteworthy pattern in the\ndata that can be interpreted.\nAnswer: Since I am interested in the relative power\nof nations by their relative position ad centrality in the worldwide\nconflict, network brokerage can be used to illustrate significant\npositions in global conflict. Below I wanted to look at 4 kinds of\nbrokerage, these are broker.gate or gatekeeper, coordinator, liason, and\nitinerant. I am interested to see if these specific coordination types\nare primarily done by specific nations.\n\n\n\nTotal Brokerage\nExplanation: Looking at total brokerage in this\ndataset gives a sense of which factions were responsible for highest\nconnection of unconnected actors through conflict. Given the crusades\nigniting conflict between Europe and the middle east it is sensible that\nthe Byzantine Empire in the center of both connects the most unconnected\nactors through conflict closely followed by the Sultanate of Rum, a\nmajor Muslim faction that fought against the crusades and third being\nthe Holy Roman Empire who participated in many conflicts including the\ncrusades. These are followed by England who centered the wars in the\nBritish isles and the Kingdom of Sicily who were also in a position of\nconflict.\n\nname\nbroker.tot\nByzantine Empire\n25.272873\nSultanate of Rum\n10.436488\nHoly Roman Empire\n10.024366\nEngland\n7.551635\nKingdom of Sicily\n5.491026\n\nCoordinator Brokerage\nExplanation: In this case no particular country is\nvery high above any other in terms of their coordinator brokerage,\nmeaning that within groups no particular nations appear to be brokering\nmore within the groups.\n\nname\nbroker.coord\nCounty of Aversa\n-0.0158536\nKingdom of Georgia\n-0.0158536\nGreat Seljuq Empire\n-0.0158536\nPapal States\n-0.0158536\nChola Empire\n-0.0158536\n\nItinerant Brokerage\nExplanation: Itinerant brokerage represents when a\nnon-group actor connects 2 actors in a group it is no in to each other,\nin this case England has the highest score. Looking at the network graph\nthey do appear to connect 2 actors in a group together.\n\nname\nbroker.itin\nEngland\n6.6906430\nHoly Roman Empire\n4.8919293\nKingdom of Sicily\n3.9930250\nByzantine Empire\n3.9930250\nPrincipality of Kiev\n0.4413428\n\nRepresentative Brokerage\nExplanation: Representative brokerage indicates that\nthe broker, or nation in question loses a war to another in their group,\nbut wins another against a faction outside of their group. This can be\nthough of as their directed connections to them. In this case the Seljuk\nEmpire and Kingdom of Aragon have instances in which they lose to\nfactions within their group before beating those outside of it.\n\nname\nbroker.rep\nSeljuk Empire\n6.3140099\nKingdom of Aragon\n1.1415607\nCounty of Sicily\n-0.0800286\nEngland\n-0.0800286\nCounty of Aversa\n-0.1126843\n\nGatekeeper Brokerage\nExplanation: The Papal states being ranked highest\nin gatekeeper brokerage is an interesting observation as no other nation\nin the dataset appears to be close to their level as most are negative\nin this category. In this cae being a gatekeeper means that they are in\nat conflict in a group with another while the nation in a different\ngroup of conflicts is only at war with them from the group. This is an\ninteresting observation given the Papal states role as a coordinator of\nthe war, but not a participant in the conflcit as directly as other\nbelligerents. (This being the crusade given the period)\n\nname\nbroker.gate\nPapal States\n11.6872209\nCounty of Sicily\n-0.0800286\nEngland\n-0.0800286\nCounty of Aversa\n-0.1126843\nKingdom of Georgia\n-0.1126843\n\nLiaison Brokerage\nExplanation: A liaison broker, in this case, is a\nfaction that loses a war to a group they do not belong to and wins a war\nagainst a different group than the first that they also do not belong\nto. The Byzantine Empire, Sultanate of Rum, and Holy Roman Empire are\nhighest in this category likely owing to their frequent states of\nconflict beyond the crusades against a variety of groups.\n\nname\nbroker.lia\nByzantine Empire\n31.767840\nSultanate of Rum\n14.454659\nHoly Roman Empire\n10.545231\nEngland\n6.202342\nKingdom of Sicily\n4.960334\n\nwars_in_1000s_edgelist <- as.matrix(wars_in_1000s)\nwars_in_1000s_edgelist_network_edgelist <-\ngraph.edgelist(wars_in_1000s_edgelist, directed=TRUE)\nwars_in_1000s.ig<-graph_from_data_frame(wars_in_1000s)\nwars_in_1000s_network <- asNetwork(wars_in_1000s.ig)\n\n\npls_work<-as.network(wars_in_1000s_edgelist, matrix.type = \"edgelist\", directed = FALSE,  hyper = FALSE, loops = FALSE, multiple = FALSE, bipartite = FALSE, vertex.attrnames=wars_in_1000s_network%v%\"vertex.names\")\n\nflomarr.se<-equiv.clust(pls_work, equiv.fun=\"sedist\", method=\"hamming\",mode=\"graph\")\nplot(flomarr.se, labels=flomarr.se$glabels,  cex=0.3)\nrect.hclust(flomarr.se$cluster,h=5)\n\n\n\n?plot()\n\n\nHelp on topic 'plot' was found in the following packages:\n\n  Package               Library\n  base                  /Library/Frameworks/R.framework/Resources/library\n  graphics              /Library/Frameworks/R.framework/Versions/4.1/Resources/library\n\n\nUsing the first match ...\n\n\n\n#blockmodel and select partitions\nblk_mod<-blockmodel(pls_work,flomarr.se,k=5)\n#assign block membership to vertex attribute\nV(wars_in_1000s.ig)$role<-blk_mod$block.membership[match(V(wars_in_1000s.ig)$name,blk_mod$plabels)]\nwars_in_1000s_network%v%\"role\"<-blk_mod$block.membership[match(wars_in_1000s_network%v%\"vertex.names\", blk_mod$glabels)]\n\n\n\n\n\n?blockmodel()\nset.seed(2)\n#blockmodel and select partitions\nblk_mod<-blockmodel(pls_work, flomarr.se, k=5)\n#assign block membership to vertex attribute\npls_work%v%\"role\"<-blk_mod$block.membership[match(pls_work%v%\"vertex.names\", blk_mod$glabels)]\n#plot network using \"role\" to color nodes: statnet\nGGally::ggnet2(pls_work,\n               node.color=\"role\", \n               node.size=degree(pls_work, gmode=\"graph\"),\n               node.label = \"vertex.names\",\n               label.size= 1,\n               node.alpha = .5)\n\n\n\n?ggnet2()\n\n\n\n\n\nplot.block<-function(x=blk_mod, main=NULL, cex.lab=1){\n  plot.sociomatrix(x$blocked.data, labels=list(x$plabels,x$plabels),\n                   main=main, drawlines = FALSE, cex.lab=cex.lab)\n  for (j in 2:length(x$plabels)) if (x$block.membership[j] !=\n                                     x$block.membership[j-1]) \n    abline(v = j - 0.5, h = j - 0.5, lty = 3, xpd=FALSE)\n}\n\n\n\n\n\nplot.block(blk_mod, cex.lab=.35)\n\n\n\n\n(information regarding the meaning of each type of brokerage was\nacquired from https://edis.ifas.ufl.edu/publication/WC197)\n\n\n\n",
    "preview": "posts/httpsnmilsteinumagithubioposts2022-02-21-week-5-interpretaive-assignment/week-5-interpretaive-assignment_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2022-03-03T12:51:04-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsrpubscomburnworthj873118/",
    "title": "Betweeness Centrality",
    "description": "\"My dataset includes every Supreme Court Justice and the school that their clerks attended. There are 187 vertices which contstitute the Justices and the different universiteis. There are 2487 edges and an edge means there is a connection between a Justice and a school because they have hired a clerk that graduated with their law degree from the university.  \nI tried to calculate brokerage, but it says that my data is not proper and I get an error message. I am not sure if that it user error(most likely) or if I am just mixing the steps up.\nI was able to calcuate betweeness centrality, but I could not get dplyr to let me slice or arrange the data so I could tell which nodes were the highest. I will work further to make progress on working with the data.\"",
    "author": [
      {
        "name": "Justin Burnworth",
        "url": {}
      }
    ],
    "date": "2022-03-03",
    "categories": [],
    "contents": "\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-03-03T12:51:23-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httpssvirguezgithubioichrnetworksposts2022-02-23-brokerage-and-betweenness-in-the-amici-network/",
    "title": "Betweenness in the Amici Network",
    "description": "Brokerage, betweenness, and other centrality measures",
    "author": [
      {
        "name": "Santiago Virgüez",
        "url": {}
      }
    ],
    "date": "2022-03-03",
    "categories": [],
    "contents": "\nAmnesty Internation, an influential actorRecap affiliation and one-mode network\nLet’s organize the data one more time. I’m gonna work again with the one-matrix (actorxactor). As you might remember, this one-mode matrix is a projection of the affiliation network (actorxcase), which means that the actors (the nodes) are tied by virtue of their participation in the same cases.\n\n\n#Affiliation network data\nlibrary(igraph)\nlibrary(tidyr)\ndata <- read.csv(\"Cleaned_Data.csv\")\n##New column count\ndata$count <- 1\n\n##Gather the data at case level\nlev_data <- pivot_wider(data,id_cols = CaseID, names_from = `Name`, \n                        values_from = count, values_fn = list(count = length), \n                        values_fill = list(count = 0))\n\n##transpose lev_data to have amici grouped by case\nlibrary(data.table)\nT_lev_data <- transpose(lev_data,)\nrownames(T_lev_data) <- colnames(lev_data)\ncolnames(T_lev_data) <- lev_data$CaseID\nT_lev_data <- T_lev_data[-c(1),]\n\n##create affiliation network graph using 'igraph'\nAff_network <- graph.incidence(T_lev_data)\n\n############\n\n#One-Mode matrix (actor x actor)\n\n##extracting the one-mode projection\nAff_network.pr <- bipartite.projection(Aff_network)\n\n##Actor x actor adjacency matrix\n\namici_net <- Aff_network.pr$proj1\n\namici_ad <- graph.adjacency(get.adjacency(amici_net, sparse = FALSE,attr = \"weight\"))\n\n\n\nCentrality measures by node (amici)\nLet’s obtain the centrality measures by node in order to compare them with the betweenness scores:\n\n\nlibrary(dplyr)\n#dataframe for the nodes + degree\namici.nodes<-data.frame(name=V(amici_ad)$name, degree=igraph::degree(amici_ad))\namici.nodes <- subset(amici.nodes, select = -name)\n\n#eigenvector centrality\ntemp<-centr_eigen(amici_ad,directed=F)\namici.nodes$eigen<-temp$vector\n\n#bonacich power centrality\namici.nodes$bonpow <- power_centrality(amici_ad, exponent = 0.9)\n\n#top 5 eigenvector centrality\namici.nodes%>%\n  arrange(desc(eigen))%>%\n  slice(1:5)\n\n\n                               degree     eigen     bonpow\nYale University                   192 1.0000000 -0.6392321\nDEJUSTICIA                        218 0.9886959 -0.6535497\nCenter for Reproductive Rights    116 0.9051396 -0.5626440\nUNAM                              134 0.8920983 -0.5961262\nLoyola Law School                 114 0.8841434 -0.4763785\n\nFirst, the eigenvector centrality is showing what actors are linked to other well connected actors. In terms of this network, the eigenvector centrality allow us to see what amici actors focus their participation on ‘popular’ cases, cases that atract interventions from well connected amici. We cannot say if their ‘strategic’ behavior is driven by the other participants (du to their popularity) or the impact of the substantive matter discussed in these cases.\nOn the other hand, the bonacich power centrality shows the actors that participated on the cases were no other people participated (therefore the actors with greater power of influence). All of these actrs has the same bonachich power score probably because they all filed a brief only once, for a case which wasn’t of interest for other actors:\n\n\n#top 5 bonacich power centrality\namici.nodes%>%\n  arrange(desc(bonpow))%>%\n  slice(1:5)\n\n\n                                                    degree eigen\nInternational Legal Advisors Esq.                        2     0\nFoundation for the Development of International Law      2     0\nThe International Commission of Jurists                  2     0\nCatalina Martinez Coral                                  2     0\nFundacion Vida Solidaria                                 2     0\n                                                      bonpow\nInternational Legal Advisors Esq.                   3.927038\nFoundation for the Development of International Law 3.927038\nThe International Commission of Jurists             3.927038\nCatalina Martinez Coral                             3.927038\nFundacion Vida Solidaria                            3.927038\n\nBetwenness centrality and network constraint\nIn order to find the most influential actors in the amici network, it is is necessary to calculate both de closeness and betweenness centrality measures. The closeness centrality calculates the shortest paths between all nodes, then assigns each node a score based on its sum of shortest paths, this can help find good ‘broadcasters’. Meanwhile, betweenness centrality measures the number of times a node lies on the shortest path between other nodes, which can help us to find the actors who influence the flow around a system.\nWe might expect that international organizations and well-funded actors have a greater participation in the Inter-American system, with an influential role among local and less endowed actors.\n\n\n#Closeness centrality\namici.nodes$close <- igraph::closeness(amici_ad)\n\namici.nodes%>%\n  arrange(desc(close))%>%\n  slice(1:5)\n\n\n                               degree     eigen     bonpow\nWomen's Link Worldwide             66 0.0933683 -0.6017687\nYale University                   192 1.0000000 -0.6392321\nUNAM                              134 0.8920983 -0.5961262\nCenter for Reproductive Rights    116 0.9051396 -0.5626440\nInterights                        110 0.8835159 -1.4061725\n                                      close\nWomen's Link Worldwide         2.049516e-05\nYale University                2.049138e-05\nUNAM                           2.048509e-05\nCenter for Reproductive Rights 2.047251e-05\nInterights                     2.047167e-05\n\n#Betweenness centrality\namici.nodes$between<-igraph::betweenness(amici_ad, directed=FALSE)\n\namici.nodes%>%\n  arrange(desc(between))%>%\n  slice(1:5)\n\n\n                       degree       eigen     bonpow        close\nWomen's Link Worldwide     66 0.093368302 -0.6017687 2.049516e-05\nCEJIL                     138 0.003024349 -0.6255743 2.045617e-05\nYale University           192 1.000000000 -0.6392321 2.049138e-05\nAmnesty International      96 0.002862279 -0.7003592 2.044739e-05\nUNAM                      134 0.892098273 -0.5961262 2.048509e-05\n                         between\nWomen's Link Worldwide 14257.860\nCEJIL                   9557.596\nYale University         8762.995\nAmnesty International   8186.167\nUNAM                    7470.614\n\nAs expected, international actors such as Amnesty International, Women’s Link Worldwide, and Interights are among the most influential actors. Likewise, although local, Yale University and the National Autonomous University of Mexico (UNAM) are a good example of well-funded organization with enough capacity to influence the Inter-American system. Furthermore, CEJIL (Center for Justice and International Law) is precisely an organization aimed to contribute to the “full enjoyment of human rights in the Americas through the effective use of Inter-American System tools and other international human rights law protection mechanisms”.\nAs we can see, these centrality measures provide a better understanding of the most influential actors in the IAcHR network. Because this is a ‘undirected’ network, we cannot provide any measures of brockerage.\n\n\n\n",
    "preview": {},
    "last_modified": "2022-03-03T12:51:19-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httpswalidmedanigithubionetworks-blogposts2022-03-02-assignment5/",
    "title": "Assignment_5",
    "description": "Structural Holes\nauthor:\n- name: Walid Medani\n  url: https://walidmedani.github.io/networks-blog/",
    "author": [],
    "date": "2022-03-03",
    "categories": [],
    "contents": "\n\n\n\nGame of Thrones Like/Dislike\n\n\n\nNetwork Size\n\n[1] 11\n[1] 46\n\nAttributes\n\n[1] FALSE\n[1] TRUE\n[1] FALSE\n[1] \"name\"\n [1] \"Name\"                  \"Lysa.Arryn\"           \n [3] \"Petyr.Baelish\"         \"Joffrey.Baratheon\"    \n [5] \"Margaery.Tyrell\"       \"Renly.Baratheon\"      \n [7] \"Robert.Baratheon\"      \"Stannis.Baratheon\"    \n [9] \"Brienne.of.Tarth\"      \"Bronn\"                \n[11] \"Gregor.Clegane\"        \"Sandor.Clegane\"       \n[13] \"Xaro.Xhoan.Daxos\"      \"Gendry\"               \n[15] \"Balon.Greyjoy\"         \"Theon.Greyjoy\"        \n[17] \"Jaqen.H.ghar\"          \"Hodor\"                \n[19] \"Khal.Drogo\"            \"Cersei.Lannister\"     \n[21] \"Jaime.Lannister\"       \"Lancel.Lannister\"     \n[23] \"Tyrion.Lannister\"      \"Tywin.Lannister\"      \n[25] \"Maester.Luwin\"         \"Melisandre\"           \n[27] \"Jeor.Mormont\"          \"Jorah.Mormont\"        \n[29] \"Osha\"                  \"Podrick.Payne\"        \n[31] \"Pyat.Pree\"             \"Grand.Maester.Pycelle\"\n[33] \"Ros\"                   \"Davos.Seaworth\"       \n[35] \"Shae\"                  \"Jon.Snow\"             \n[37] \"Arya.Stark\"            \"Bran.Stark\"           \n[39] \"Catelyn.Stark\"         \"Robb.Stark\"           \n[41] \"Sansa.Stark\"           \"Daenerys.Targaryen\"   \n[43] \"Viserys.Targaryen\"     \"Samwell.Tarly\"        \n[45] \"Loras.Tyrell\"          \"Varys\"                \n[47] \"Eddard.Stark\"         \n\nCentrality Measures\nBetweenness Centrality\n\n        Arryn       Baelish     Lannister        Tyrell     Baratheon \n            0             0             0             0             0 \n        Stark                     Greyjoy Night's Watch     Targaryen \n            1             5             0             0             0 \n        Tully \n            0 \n\nEdge Betweeness plot\n\n\n\nBetweeness Centralization\n\n[1] 0.05444444\n\nCloseness Centralization\n\n[1] 0.03548935\n\nNetwork Constraint\n\n    Arryn   Baelish Lannister    Tyrell Baratheon     Stark \n1.0000000 1.0000000 0.9917431 1.0436180 0.9977808 0.8002717 \n\nGould-Fernandez Brokerage\n\n                     w_I        w_O       b_IO       b_OI       b_O\nArryn                NaN -0.9759951 -0.6715120 -0.6715120 -1.561299\nBaelish              NaN -0.9759951 -0.6715120 -0.6715120 -1.561299\nLannister            NaN -0.9759951 -0.6715120 -0.6715120 -1.561299\nTyrell        -0.4759641 -0.8243941 -0.8953493 -0.8953493 -1.458012\nBaratheon            NaN -1.0836066        NaN        NaN -1.672677\nStark                NaN -0.9759951 -0.6715120 -0.6715120 -1.313798\n                     NaN -1.0836066        NaN        NaN  1.910340\nGreyjoy       -0.4759641 -0.8243941 -0.8953493 -0.8953493 -1.458012\nNight's Watch        NaN -0.9759951 -0.6715120 -0.6715120 -1.561299\nTargaryen            NaN -0.9759951 -0.6715120 -0.6715120 -1.561299\nTully         -0.4759641 -0.8243941 -0.8953493 -0.8953493 -1.458012\n                      t\nArryn         -1.701438\nBaelish       -1.701438\nLannister     -1.701438\nTyrell        -1.701438\nBaratheon     -1.701438\nStark         -1.515633\n               1.457237\nGreyjoy       -1.701438\nNight's Watch -1.701438\nTargaryen     -1.701438\nTully         -1.701438\n\n\n\n\n",
    "preview": "posts/httpswalidmedanigithubionetworks-blogposts2022-03-02-assignment5/assignment5_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2022-03-03T12:51:30-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsyli210813githubiosocialnetworkanalysishw5/",
    "title": "Homework 5",
    "description": "Week 5 Assignment: Brokerage and Power.",
    "author": [
      {
        "name": "Yifan Li",
        "url": {}
      }
    ],
    "date": "2022-03-03",
    "categories": [],
    "contents": "\n\n\n#Load the libraries\n  library(dplyr)\n  library(igraph)\n  library(tidyr)\n  library(corrr)\n  library(ggplot2)\n\n\n\n\n\n#Read the network into the environment. This will import it as an edgelist\n  ##data_orig <- read.csv(\"C:/Users/Yifan Desktop/OneDrive/Social Network Analysis/COW_Trade_4.0/Dyadic_COW_4.0.csv\", header=T,stringsAsFactors=FALSE)\ndata_orig <- read.csv(\"C:/Users/LYF-YOGA14s/OneDrive/Social Network Analysis/COW_Trade_4.0/Dyadic_COW_4.0.csv\", header=T,stringsAsFactors=FALSE)\n  ##flow 1 is Imports of Country A from Country B, in US millions of current dollars\n  ##flow 2 is imports of country B from country A\n\n  ##trade.nodes <- read.csv(\"C:/Users/Yifan Desktop/OneDrive/Social Network Analysis/COW_Trade_4.0/National_COW_4.0.csv\", header = T, stringsAsFactors = F)\ntrade.nodes <- read.csv(\"C:/Users/LYF-YOGA14s/OneDrive/Social Network Analysis/COW_Trade_4.0/National_COW_4.0.csv\", header = T, stringsAsFactors = F)\n\n  trade2014 <- subset(data_orig, data_orig$year == 2014)\n  \n#Create weight column that holds the total trade on each edge. \n  temp <- trade2014 %>%\n    mutate(from = importer1,\n           to = importer2,\n           weight = flow1) %>%\n    select(from, to, weight, year)\n  temp2 <- trade2014 %>%\n    mutate(from = importer2,\n           to = importer1,\n           weight = flow2) %>%\n    select(from, to, weight, year)\n\n  temp_edgelist <- full_join(temp,temp2)\n  network_edgelist <- subset(temp_edgelist, temp_edgelist$weight > 0)\n  \n  #Create igraph objects from the edgelists\n  trade2014.ig <- graph.edgelist(as.matrix(network_edgelist[,c(\"from\",\"to\")]), directed = T)\n  \n  #Specify the weights values\n  E(trade2014.ig)$weight <- network_edgelist$weight \n\n  #Add in long and short versions of country names for reports\n    V(trade2014.ig)$long_name <- trade.nodes$statename[match(V(trade2014.ig)$name, trade.nodes$statename)]\n    V(trade2014.ig)$short_name <- trade.nodes$stateabb[match(V(trade2014.ig)$name, trade.nodes$statename)]\n    V(trade2014.ig)$ccode <- trade.nodes$ccode[match(V(trade2014.ig)$name, trade.nodes$statename)]\n    V(trade2014.ig)$continent <- trade.nodes$continent[match(V(trade2014.ig)$name, trade.nodes$statename)]\n\n  ##rm(data_orig)\n    trade2014.nodes <- data.frame(name = V(trade2014.ig)$long_name,\n                                  short_name = V(trade2014.ig)$short_name,\n                                  ccode = V(trade2014.ig)$ccode)\n    trade2014.nodes$continent <- V(trade2014.ig)$continent\n\n\n\n\n\n#Find network features: \nis_bipartite(trade2014.ig)\n\n\n[1] FALSE\n\nis_directed(trade2014.ig)\n\n\n[1] TRUE\n\nis_weighted(trade2014.ig)\n\n\n[1] TRUE\n\nThe original dataset is the trade dataset version 4 from the Correlates of War Project. In this subject I only use trade data of year 2014. The format is edgelist. The nodes are countries, and the ties are the trading relations between countries in 2014. The network is directed and weighted.\nLet’s look at some basic descriptive facts.\n\n\n#Original network size\nvcount(trade2014.ig)\n\n\n[1] 186\n\necount(trade2014.ig)\n\n\n[1] 22451\n\necount(trade2014.ig) * 2 / vcount(trade2014.ig)\n\n\n[1] 241.4086\n\necount(trade2014.ig) / (vcount(trade2014.ig) * (vcount(trade2014.ig - 1)))\n\n\n[1] 0.6524557\n\n\n\n#summarize numeric network attribute\nsummary(E(trade2014.ig)$weight)\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n     0.0      0.2      4.9    813.1     78.5 472525.2 \n\nThe network in 2014 has 186 nodes, i.e. 186 countries involed in the trading network. There are 22451 egdes. Each country has 241 connected edges on average. On average, one country import 813 million dollars of good from another country each year. 65% of potential ties exit.\nLet’s classify all dyads and traids in the network:\n\n\n#Classify all dyads in the network:\nigraph::dyad.census(trade2014.ig)\n\n\n$mut\n[1] 9933\n\n$asym\n[1] 2585\n\n$null\n[1] 4687\n\n#Classify all triads in the network:\nigraph::triad_census(trade2014.ig)\n\n\n [1]  75574  62420  92513  11021   9514  11233  60137  45246   5530\n[10]    788 188669  14094   9006  15882 147383 306230\n\n75574 / sum(igraph::triad_census(trade2014.ig))\n\n\n[1] 0.07161783\n\n(75574+62420+92513+11021+9514+11233+60137+45246) / sum(igraph::triad_census(trade2014.ig))\n\n\n[1] 0.3484117\n\nigraph::components(trade2014.ig)$no\n\n\n[1] 1\n\nThere are 9933 mutual bilateral trade relations, 2585 unilateral trade relations, and 4687 pairs of coutries have no trading in 2014.\n7% of the triads are empty, and 65% of them are triangle. The network is quite dense.\nLet’s look at the distribution of nodes centrality.\n\n\ntrade2014.nodes$closeness <- centr_clo(trade2014.ig)$res\n\ntrade2014.nodes$betweenness <- centr_betw(trade2014.ig, directed = TRUE)$res\n\ntrade2014.nodes$eigen <- centr_eigen(trade2014.ig, directed=TRUE, scale=FALSE)$vector\n\ntrade2014.nodes$bonpow <- power_centrality(trade2014.ig)\n\n\nmat2014<-as.matrix(as_adjacency_matrix(trade2014.ig, attr=\"weight\"))\n\n#square the adjacency matrix\nmat2014sq<-t(mat2014) %*% mat2014\n\n#Calculate the proportion of reflected centrality.\ntrade2014.nodes$rc<-diag(mat2014sq)/rowSums(mat2014sq)\n#replace missing values with 0\ntrade2014.nodes$rc<-ifelse(is.nan(trade2014.nodes$rc),0,trade2014.nodes$rc)\n\n#Calculate received eigenvalue centrality\ntrade2014.nodes$eigen.rc<-trade2014.nodes$eigen*trade2014.nodes$rc\n\n#Calculate the proportion of derived centrality.\n  trade2014.nodes$dc<-1-diag(mat2014sq)/rowSums(mat2014sq)\n#replace missing values with 0\n  trade2014.nodes$dc<-ifelse(is.nan(trade2014.nodes$dc),1,trade2014.nodes$dc)\n#Calculate received eigenvalue centrality\ntrade2014.nodes$eigen.dc<-trade2014.nodes$eigen*trade2014.nodes$dc\n\n\n\nFollowing last week’s analysis, I continued to add brokerage.\nTo calculate brokerage scores with the trade dataset, I try to create a statnet network (whose import script is not provided.) I’m not sure what I did wrong. The betweenness is much different from what I expect (and very different from results igraph). Then I check the degree. The statnet gives a totally different outcome from igraph too. The two packages shouldn’t give different results for such a simple parameter.\nI also failed to calculate brokerage scores. I only got the total scores while all roles scores are NA.\nMy codes show below. What did I do wrongly?\n\n\n##I need the statnet package and network data to calculate brokerage.\nlibrary(statnet)\ntrade2014.stat <- network(as.matrix(network_edgelist[1:2], matrix.type = 'edgelist'))\n\nprint(trade2014.stat)\n\n\n Network attributes:\n  vertices = 186 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 22451 \n    missing edges= 0 \n    non-missing edges= 22451 \n\n Vertex attribute names: \n    vertex.names \n\n Edge attribute names not shown \n\ntrade2014.stat%e%\"weight\"      <- network_edgelist$weight\ntrade2014.stat%e%\"year\"      <- network_edgelist$year\n\ntrade2014.stat%v%\"long_name\" <- trade.nodes$statename[match(trade2014.stat%v%\"vertex.names\", trade.nodes$statename)]\ntrade2014.stat%v%\"short_name\" <- trade.nodes$stateabb[match(trade2014.stat%v%\"vertex.names\", trade.nodes$statename)]\ntrade2014.stat%v%\"ccode\" <- trade.nodes$ccode[match(trade2014.stat%v%\"vertex.names\", trade.nodes$statename)]\ntrade2014.stat%v%\"continent\" <- trade.nodes$continent[match(trade2014.stat%v%\"vertex.names\", trade.nodes$statename)]\n\nnetwork::list.vertex.attributes(trade2014.stat)\n\n\n[1] \"ccode\"        \"continent\"    \"long_name\"    \"na\"          \n[5] \"short_name\"   \"vertex.names\"\n\n\n\ntrade2014.nodes$between_stat <- sna::betweenness(trade2014.stat)\ntrade2014.nodes$degree <- igraph::degree(trade2014.ig)\ntrade2014.nodes$degree_stat <- sna::degree(trade2014.stat)\n\n\n\n\n\nbrokerage_stat <- data.frame(brokerage(trade2014.stat, cl = trade2014.nodes$continent)$z.nli)\ntrade2014.nodes<-trade2014.nodes %>%\n  mutate(broker.tot = brokerage_stat$t,\n         broker.coord = brokerage_stat$w_I,\n         broker.itin = brokerage_stat$w_O,\n         broker.rep = brokerage_stat$b_IO,\n         broker.gate = brokerage_stat$b_OI,\n         broker.lia = brokerage_stat$b_O)\n\n\n\n\n\n\n",
    "preview": {},
    "last_modified": "2022-03-03T12:51:33-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httprpubscomkbecenron/",
    "title": "Week 2 Assignment",
    "description": "Analyzing the Enron Emails dataset from the network package",
    "author": [
      {
        "name": "Kristina Becvar",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\r\n“Enron Emails.R” is a file in the course repository that consists of a network of emails between enron employees from the igraphdata package. According to the import script, this is a large, un-weighted, directed network with employees as nodes and emails as edges.\r\nThe import script also indicates that there are no node attributes. I found that there was, in fact, node attributes to be found in the igraph dataset in the form of what seems to be titles as ‘Notes’ and email addresses in ‘email’ without the domain name, but that was not relevant for this assignment.\r\nAdditionally, the import script indicated that but topic and time information is stored as edge attributes. This is correct, and another thing that I learned through working on this assignment about the dataset is that there is a topical dataset directory in the LDC details data frame that serves as a codebook for the topic codes assembled in the edgelist, for future reference.\r\nThe import script has created three objects that represent the network: network_edgelist (a data frame of an edge list and edge attributes), network_igraph (an igraph object), and network_statnet (a network object compatible with statnet packages like sna & ergm).\r\nWith that contextual introduction, I’ll go back to the start, and execute the import script. I also look at the R Documentation to view the detailed information on this data set via: enron {igraphdata}\r\nI load the libraries for statnet, igraph, and igraphdata\r\nNext, I read the data into the environment. This imports the data as an adjacency matrix\r\n\r\n\r\ndata(\"enron\", package = \"igraphdata\")\r\nnetwork_igraph <- enron\r\nrm(enron)\r\n\r\n\r\n\r\nThen, I create the edgelist\r\n\r\n\r\nnetwork_edgelist <- as.data.frame(as_edgelist(network_igraph))\r\n\r\n\r\n\r\nand add edge attributes to the edge list\r\n\r\n\r\nnetwork_edgelist <-cbind(network_edgelist, Time      = E(network_igraph)$Time, \r\n                                               Reciptype = E(network_igraph)$Reciptype, \r\n                                               Topic     = E(network_igraph)$Topic, \r\n                                               LDC_topic = E(network_igraph)$LDC_topic)\r\n\r\n\r\n\r\nThis collects details about the attribute “LDC Details” into a data frame\r\n\r\n\r\nLDC_details <- data.frame(LDC_topic_name = network_igraph$LDC_names, LDC_topic_desc = network_igraph$LDC_desc, LDC_topic = 1:32)\r\n\r\n\r\n\r\nThe data frame can then be added as details to the edge list\r\n\r\n\r\nnetwork_edgelist <- merge(network_edgelist, LDC_details, by = 'LDC_topic', all.x = TRUE)\r\n\r\n\r\n\r\nand then re-ordered within the edge list\r\n\r\n\r\nnetwork_edgelist <- network_edgelist[c(2:5,1,6,7)]\r\n\r\n\r\n\r\nNow I can create a statnet network object from our edge list\r\n\r\n\r\nnetwork_statnet <- network(as.matrix(network_edgelist[1:2]), matrix.type = \"edgelist\", directed = TRUE)\r\n\r\n\r\n\r\nand add attributes to the statnet network object\r\n\r\n\r\nnetwork_statnet%e%'Time' <- as.character(network_edgelist$Time)\r\nnetwork_statnet%e%'Reciptype' <- as.character(network_edgelist$Reciptype)\r\nnetwork_statnet%e%'Topic' <- as.character(network_edgelist$Topic)\r\nnetwork_statnet%e%'LDC_topic' <- as.character(network_edgelist$LDC_topic)\r\nnetwork_statnet%e%'LDC_topic_name' <- as.character(network_edgelist$LDC_topic_name)\r\nnetwork_statnet%e%'LDC_topic_desc' <- as.character(network_edgelist$LDC_topic_desc)\r\n\r\n\r\n\r\nFinally, I can clean up and remove any unnecessary objects if I no longer need the details as a reference, as in this assignment.\r\n\r\n\r\nrm(LDC_details)\r\n\r\n\r\n\r\nNow, I’ll take a first look at the network\r\n\r\n\r\nplot(network_statnet)\r\n\r\n\r\n\r\n\r\nThat’s interesting, but doesn’t tell me much about the network yet except that I may expect to see 2 isolates.\r\nUsing tools to inspect the network data and confirm the objects created through the import script are present\r\n\r\n\r\nls()\r\n\r\n\r\n[1] \"network_edgelist\" \"network_igraph\"   \"network_statnet\" \r\n\r\nI’ll inspect vertices and edges using commands in both igraph and statnet\r\n\r\n\r\nvcount(network_igraph)\r\n\r\n\r\n[1] 184\r\n\r\necount(network_igraph)\r\n\r\n\r\n[1] 125409\r\n\r\nprint(network_statnet) \r\n\r\n\r\n Network attributes:\r\n  vertices = 184 \r\n  directed = TRUE \r\n  hyper = FALSE \r\n  loops = FALSE \r\n  multiple = FALSE \r\n  bipartite = FALSE \r\n  total edges= 3010 \r\n    missing edges= 0 \r\n    non-missing edges= 3010 \r\n\r\n Vertex attribute names: \r\n    vertex.names \r\n\r\n Edge attribute names not shown \r\n\r\nThere is quite a difference between the number of edges in the igraph network (123,409) and the statnet network (3010), which leads me to believe there is something a bit off with the way the data was processed between the two network programs.\r\nLooking at more comparisons in the two network files, I can look at the network features.\r\n\r\n\r\nis_bipartite(network_igraph)\r\n\r\n\r\n[1] FALSE\r\n\r\nis_directed(network_igraph)\r\n\r\n\r\n[1] TRUE\r\n\r\nis_weighted(network_igraph)\r\n\r\n\r\n[1] FALSE\r\n\r\nvertex_attr_names(network_igraph)\r\n\r\n\r\n[1] \"Email\" \"Name\"  \"Note\" \r\n\r\nedge_attr_names(network_igraph)\r\n\r\n\r\n[1] \"Time\"      \"Reciptype\" \"Topic\"     \"LDC_topic\"\r\n\r\nLooking at the same features of the statnet network with the appropriate commands\r\n\r\n\r\nprint(network_statnet)\r\n\r\n\r\n Network attributes:\r\n  vertices = 184 \r\n  directed = TRUE \r\n  hyper = FALSE \r\n  loops = FALSE \r\n  multiple = FALSE \r\n  bipartite = FALSE \r\n  total edges= 3010 \r\n    missing edges= 0 \r\n    non-missing edges= 3010 \r\n\r\n Vertex attribute names: \r\n    vertex.names \r\n\r\n Edge attribute names not shown \r\n\r\nnetwork::list.vertex.attributes(network_statnet)\r\n\r\n\r\n[1] \"na\"           \"vertex.names\"\r\n\r\nnetwork::list.edge.attributes(network_statnet)\r\n\r\n\r\n[1] \"LDC_topic\"      \"LDC_topic_desc\" \"LDC_topic_name\"\r\n[4] \"na\"             \"Reciptype\"      \"Time\"          \r\n[7] \"Topic\"         \r\n\r\nUsing more tools to inspect the network data:\r\n\r\n\r\n#List network attributes: igraph\r\n\r\nigraph::vertex_attr_names(network_igraph)\r\n\r\n\r\n[1] \"Email\" \"Name\"  \"Note\" \r\n\r\nigraph::edge_attr_names(network_igraph)\r\n\r\n\r\n[1] \"Time\"      \"Reciptype\" \"Topic\"     \"LDC_topic\"\r\n\r\n#List network attributes: statnet\r\n\r\nnetwork::list.vertex.attributes(network_statnet)\r\n\r\n\r\n[1] \"na\"           \"vertex.names\"\r\n\r\nnetwork::list.edge.attributes(network_statnet)\r\n\r\n\r\n[1] \"LDC_topic\"      \"LDC_topic_desc\" \"LDC_topic_name\"\r\n[4] \"na\"             \"Reciptype\"      \"Time\"          \r\n[7] \"Topic\"         \r\n\r\nI want to look at specific attribute data. First using igraph\r\n\r\n\r\nhead(V(network_igraph)$Email)\r\n\r\n\r\n[1] \"albert.meyers\" \"a..martin\"     \"andrea.ring\"   \"andrew.lewis\" \r\n[5] \"andy.zipper\"   \"a..shankman\"  \r\n\r\nhead(V(network_igraph)$Name)\r\n\r\n\r\n[1] \"Albert Meyers\"    \"Thomas Martin\"    \"Andrea Ring\"     \r\n[4] \"Andrew Lewis\"     \"Andy Zipper\"      \"Jeffrey Shankman\"\r\n\r\nhead(V(network_igraph)$Note)\r\n\r\n\r\n[1] \"Employee, Specialist\"         \"Vice President\"              \r\n[3] \"NA\"                           \"Director\"                    \r\n[5] \"Vice President, Enron Online\" \"President, Enron Global Mkts\"\r\n\r\nhead(E(network_igraph)$Time)\r\n\r\n\r\n[1] \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\"\r\n[4] \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\"\r\n\r\nhead(E(network_igraph)$Reciptype)\r\n\r\n\r\n[1] \"to\"  \"to\"  \"cc\"  \"cc\"  \"bcc\" \"bcc\"\r\n\r\nhead(E(network_igraph)$Topic)\r\n\r\n\r\n[1] 1 1 3 3 3 3\r\n\r\nhead(E(network_igraph)$LDC_topic)\r\n\r\n\r\n[1]  0 -1 -1 -1 -1 -1\r\n\r\nNext, using statnet\r\n\r\n\r\nhead(network_statnet %v% \"na\")\r\n\r\n\r\n[1] FALSE FALSE FALSE FALSE FALSE FALSE\r\n\r\nnetwork_statnet %v% \"vertex.names\"\r\n\r\n\r\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\r\n [17]  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32\r\n [33]  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48\r\n [49]  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64\r\n [65]  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80\r\n [81]  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96\r\n [97]  97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112\r\n[113] 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128\r\n[129] 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144\r\n[145] 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160\r\n[161] 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176\r\n[177] 177 178 179 180 181 182 183 184\r\n\r\nhead(network_statnet %e% \"LDC_topic\")\r\n\r\n\r\n[1] \"-1\" \"-1\" \"-1\" \"-1\" \"-1\" \"-1\"\r\n\r\nhead(network_statnet %e% \"LDC_topic_desc\")\r\n\r\n\r\n[1] NA NA NA NA NA NA\r\n\r\nhead(network_statnet %e% \"LDC_topic_name\")\r\n\r\n\r\n[1] NA NA NA NA NA NA\r\n\r\nhead(network_statnet %e% \"na\")\r\n\r\n\r\n[1] FALSE FALSE FALSE FALSE FALSE FALSE\r\n\r\nhead(network_statnet %e% \"Reciptype\")\r\n\r\n\r\n[1] \"to\"  \"cc\"  \"cc\"  \"bcc\" \"bcc\" \"to\" \r\n\r\nhead(network_statnet %e% \"Time\")\r\n\r\n\r\n[1] \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\"\r\n[4] \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\"\r\n\r\nhead(network_statnet %e% \"Topic\")\r\n\r\n\r\n[1] \"1\" \"3\" \"3\" \"3\" \"3\" \"3\"\r\n\r\nClearly, there are differences in how the vertices are represented in igraph v. statnet. For example, the anonymized names are node attributes in igraph, but in statnet they are represented by numbers.\r\nNext, I want to look at the dyad census in igraph\r\n\r\n\r\nigraph::dyad.census(network_igraph)\r\n\r\n\r\n$mut\r\n[1] 30600\r\n\r\n$asym\r\n[1] 64208\r\n\r\n$null\r\n[1] -77972\r\n\r\nand in statnet\r\n\r\n\r\nsna::dyad.census(network_statnet)\r\n\r\n\r\n     Mut Asym  Null\r\n[1,] 913 1184 14739\r\n\r\nThe dyad census clearly gives vastly different responses between the two programs, but I am not sure how or why they are represented so differently yet.\r\nNext I’ll look at the triad census in igraph\r\n\r\n\r\nigraph::triad.census(network_igraph)\r\n\r\n\r\n [1] 700234  19530 249694   8409   2695   5176   7060  13227   1180\r\n[10]     59   6781   1023   1137    786   2782   1611\r\n\r\nand in statnet\r\n\r\n\r\nsna::triad.census(network_statnet)\r\n\r\n\r\n        003    012    102 021D 021U 021C 111D  111U 030T 030C  201\r\n[1,] 700234 150250 118974 8409 2695 5176 7060 13227 1180   59 6781\r\n     120D 120U 120C  210  300\r\n[1,] 1023 1137  786 2782 1611\r\n\r\nIf I use the igraph data, the enron network has 184 vertices, so if I want to see if the triad census is working correctly, I want to compare the data:\r\n\r\n\r\n#possible triads in network\r\n184*183*182/6\r\n\r\n\r\n[1] 1021384\r\n\r\nsum(igraph::triad.census(network_igraph))\r\n\r\n\r\n[1] 1021384\r\n\r\nSimilarly, if I use the statnet data, the enron network has 184 vertices, so if I want to see if the triad census is working correctly, I want to compare the data:\r\n\r\n\r\n#possible triads in network\r\n184*183*182/6\r\n\r\n\r\n[1] 1021384\r\n\r\nsum(sna::triad.census(network_statnet))\r\n\r\n\r\n[1] 1021384\r\n\r\nNow I’m getting somewhere! I don’t yet know exactly how the triad census informs my interpretations fully, but I know it is accurately being represented in this area of network analysis.\r\nLooking next at the global transitivity in statnet:\r\n\r\n\r\ngtrans(network_statnet)\r\n\r\n\r\n[1] 0.3580924\r\n\r\nLooking next at the network transitivity in igraph:\r\n\r\n\r\ntransitivity(network_igraph)\r\n\r\n\r\n[1] 0.3725138\r\n\r\nThey are not the same, but not completely out of the realm of reasonable differences given the different algorithms each program uses.\r\nLooking next at the ego transitivity for the employee names that appeared in the header of the igraph node information, but I cannot get the command to run which would give me the local transitivity for specific nodes, for some reason I will need to take more time to explore.\r\n#transitivity(network_igraph, type=“local”, vids=V(network_igraph)[c(“Albert Meyers”, “Thomas Martin:, Andrea Ring”, “Andrew Lewis”, “Andy Zipper”, “Jeffrey Shankman”)])\r\nHowevwer, I can look at global v. average local transitivity\r\n\r\n\r\ntransitivity(network_igraph, type=\"global\")\r\n\r\n\r\n[1] 0.3725138\r\n\r\ntransitivity(network_igraph, type=\"average\")\r\n\r\n\r\n[1] 0.5055302\r\n\r\nThis transitivity tells me that the average network transitivity is significantly higher than the global transitivity, indicating, from my still naive network knowledge, that the overall network is generally more loose, and that there is a more connected sub-network.\r\nLooking at the geodesic distance:\r\n\r\n\r\naverage.path.length(network_igraph,directed=T)\r\n\r\n\r\n[1] 2.390464\r\n\r\nThis tells me that on average, the path length is just over 2.\r\nGetting to look at the components of the network in igraph:\r\n\r\n\r\nnames(igraph::components(network_igraph))\r\n\r\n\r\n[1] \"membership\" \"csize\"      \"no\"        \r\n\r\nigraph::components(network_igraph)$no \r\n\r\n\r\n[1] 3\r\n\r\nigraph::components(network_igraph)$csize\r\n\r\n\r\n[1] 182   1   1\r\n\r\nIt shows that there are 3 components in the network, and 182 of the 182 nodes make up the giant component with 2 isolates.\r\nFinally, I get my answer on isolates.\r\n\r\n\r\nisolates(network_statnet)\r\n\r\n\r\n[1]  72 118\r\n\r\nSince I know that the nodes are Enron employees and they are assigned numbers in the statnet network, running the isolate command tells me that employee #72 and #118 are indeed the 2 isolates viewed in the initial graphic representation of the network.\r\n\r\n\r\n\r\n",
    "preview": "posts/httprpubscomkbecenron/distill-preview.png",
    "last_modified": "2022-02-17T13:44:46-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsnmilsteinumagithubioposts2022-01-31-the-sharpe-ratio/",
    "title": "Initial Network Analysis Florentine Family",
    "description": "Homework 2: Brief Analysis of the Florentine Family Set",
    "author": [
      {
        "name": "Noah Milstein",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\n\n\n\n\n\n\nChosen Network:\nThe Network I chose was the Florentine family dataset network from the network package. This dataset represents marriages between influential families in Florence. Each node represents a family with arrows indicating which family married into which other family.\nNetwork Size:\nNetwork size for the Florentine Family network dataset is described briefly by the code below:\n\n\nset.seed(2)\n# I access the florentine families dataset through the package \"network\"\n\ndata(flo, package=\"network\")\n\n# In order to make the dataset usable I make it into a matrix using as.matrix()\n\nmatrix_florentine <- as.matrix(flo) \n\n# Next I used the graph.adjacency command to make the florentine dataset into\n# An Adjacency Matrix \n\nflorentine<- graph.adjacency(flo, mode=\"directed\", weighted=NULL)\n\nplot(florentine, vertex.color=\"skyblue1\", vertex.label.color=\"navy\", \n     vertex.label.dist=1, vertex.size=7,  edge.arrow.size=0.5, margin=0000)\n\n\n\n\n\n\nvcount(florentine)\n\n\n[1] 16\n\necount(florentine)\n\n\n[1] 40\n\n\n\nstatted_florentine<-as.network(matrix_florentine)\nprint(statted_florentine)\n\n\n Network attributes:\n  vertices = 16 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 40 \n    missing edges= 0 \n    non-missing edges= 40 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nThe number of vertices in the dataset is 16, in this case these nodes each represent a florentine family. Te number of edges is 40. In this instance ties or edges, represent marriages between these influential families. The is the same in both the statnet and igraph outputs.\nNetwork Features\nNext the features of the dataset are described using the 3 commands in the code chunk below.\n\n\nis_bipartite(florentine)\n\n\n[1] FALSE\n\nis_directed(florentine)\n\n\n[1] TRUE\n\nis_weighted(florentine)\n\n\n[1] FALSE\n\nThese results suggests that the florentine family dataset is not bipartite, which would indicate that they do not fall into to sets. In addition the dataset’s ties are directed do they flow in directions as a result of which family is marrying to which, and the ties are unweighted because marriage cannot vary in numerican significance, it is simply a category that is either true or false between families.\n\n\nvertex_attr_names(florentine)\n\n\n[1] \"name\"\n\nedge_attr_names(florentine)\n\n\ncharacter(0)\n\n\n\nnetwork::list.vertex.attributes(statted_florentine)\n\n\n[1] \"na\"           \"vertex.names\"\n\nnetwork::list.edge.attributes(statted_florentine)\n\n\n[1] \"na\"\n\nThe vector attribute names are the names of the florentine families.\nThe edge attributes do not have name.\nDyad and Triad Census\nDyads\n\n\nigraph::dyad.census(florentine)\n\n\n$mut\n[1] 20\n\n$asym\n[1] 0\n\n$null\n[1] 100\n\n\n\nsna::dyad.census(statted_florentine)\n\n\n     Mut Asym Null\n[1,]  20    0  100\n\nThe dyad census indicates that amongest that among the dyad ties, being between 2 families, 20 are mutual and none are asymptotic. In addition 100 of the dyad are null, or not connected.\nTriads\n\n\nigraph::triad_census(florentine)\n\n\n [1] 324   0 195   0   0   0   0   0   0   0  38   0   0   0   0   3\n\n?triad_census(florentine)\n\n\n\n\n\nsna::triad.census(statted_florentine, mode=\"graph\")\n\n\n       0   1  2 3\n[1,] 324 195 38 3\n\n\n\nsum(sna::triad.census(statted_florentine, mode=\"graph\"))\n\n\n[1] 560\n\nFor dyads there are 16 possibilities. Here our results are as follows:\n324, 003 (A,B,C, the empty graph.)\n195, 102 (A<->B, C, the graph with a mutual connection between two vertices.)\nboth of which are vacuously transitive\n38, 030C (A<-B<-C, A->C.)\n3, 300 (A<->B<->C, A<->C, the complete graph.)\nwhich are both transitive\nBoth statnet and igraph confirm this, however igraph specifies the exact instances of each type of connection.\nNetwork Transitivity\n\n\ntransitivity(florentine, type=\"global\")\n\n\n[1] 0.1914894\n\nThe global transitivity of the graph is 0.1914894 which is the ratio of triangles to connected triangles.\n\n\ntransitivity(florentine, type=\"average\")\n\n\n[1] 0.2181818\n\nThe average transitivity is the average transitivity of local triad clusters. Here it is 0.2181818. This is the ratio of local triangles to all connected triangles.\n\n\ngtrans(statted_florentine)\n\n\n[1] 0.1914894\n\nStatnet code confirms this transitivity assessment.\n\n\nV(florentine)[c(\"Peruzzi\",\"Lamberteschi\", \"Ginori\")]\n\n\n+ 3/16 vertices, named, from e7ac6d4:\n[1] Peruzzi      Lamberteschi Ginori      \n\nNetwork Distances\nFirst we see that the average path length between 2 nodes in our dataset is 2.485714\n\n\naverage.path.length(florentine,directed=F)\n\n\n[1] 2.485714\n\nI then test the distances between 3 families, those being the Peruzzi, Lamberteschi, and Ginori\n\n\ndistances(florentine,\"Peruzzi\", \"Lamberteschi\")\n\n\n        Lamberteschi\nPeruzzi            3\n\nThe distance between the nodes of Peruzzi and Lamberteschi is 3\n\n\ndistances(florentine,\"Peruzzi\", \"Ginori\")\n\n\n        Ginori\nPeruzzi      4\n\nThe distance between the nodes of Peruzzi and Ginori is 4\n\n\ndistances(florentine,\"Lamberteschi\",\"Ginori\")\n\n\n             Ginori\nLamberteschi      3\n\nThe distance between the nodes of Lamberteschi and Ginori is 3.\n\n\nisolates(statted_florentine)\n\n\n[1] 12\n\nThe names of all families in our dataset is as follows:\n\n\nas.vector(statted_florentine%v%'vertex.names')\n\n\n [1] \"Acciaiuoli\"   \"Albizzi\"      \"Barbadori\"    \"Bischeri\"    \n [5] \"Castellani\"   \"Ginori\"       \"Guadagni\"     \"Lamberteschi\"\n [9] \"Medici\"       \"Pazzi\"        \"Peruzzi\"      \"Pucci\"       \n[13] \"Ridolfi\"      \"Salviati\"     \"Strozzi\"      \"Tornabuoni\"  \n\nThe names of the isolated influential families is as follows below:\n\n\nas.vector(statted_florentine%v%'vertex.names')[c(isolates(statted_florentine))]\n\n\n[1] \"Pucci\"\n\n\n\n\n",
    "preview": "posts/httpsnmilsteinumagithubioposts2022-01-31-the-sharpe-ratio/Homework_2_Noah_Milstein_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2022-02-17T13:44:37-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsnmilsteinumagithubioposts2022-02-07-florentine-families-week-3-assignment/",
    "title": "Florentine Families Week 3 Assignment",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Noah Milstein",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\n\n\n\n\n\nset.seed(1)\ncanvas_flow(colors = colorPalette(\"vrolik3\"), lines = 3000, lwd = 0.5,\n            iterations = 1000, stepmax = 0.1, angles = 'svm')\n\n\n\n# see ?canvas_flow for more input parameters of this function\n\n\n\nData Description:\n\n\ndata(flo, package=\"network\")\n\n\nstatted_florentine<-as.network(flo)\n\nprint(statted_florentine)\n\n\n Network attributes:\n  vertices = 16 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 40 \n    missing edges= 0 \n    non-missing edges= 40 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\n\n\nplot(statted_florentine)\n\n\n\n\nNodes and Edges:\nAs can be seen from the graph and summary statistics above the florentine family dataset is made up of 40 edges and 16 vertices. Each vertex or node is a family in florence. Each edge, or tie represents a marriage between the two.\nAs a result the ties are not weighted, so they are binary. However, though the dataset labels the ties are directed, they are actually all mutual so in essence, the dataset does not measure marriaage “into” a family but simply uses a mutual directed tie for every set of families with a marriage between them.\n\n\nsna::dyad.census(statted_florentine)\n\n\n     Mut Asym Null\n[1,]  20    0  100\n\nAs can be seen from the code above the dyads within the dataset are either mutual or null, meaning that between any two nodes there are no asymmetric dyads despite the fact that the network is labeled as being directed.\n\n\nsna::triad.census(statted_florentine)\n\n\n     003 012 102 021D 021U 021C 111D 111U 030T 030C 201 120D 120U\n[1,] 324   0 195    0    0    0    0    0    0    0  38    0    0\n     120C 210 300\n[1,]    0   0   3\n\nAs can be seen from the triad census above the types of triads in the dataset are 324 of the 003-type, 102 of the 102-type, 38 of the 201-type and 3 of the 300-type. The 324 of 003-type and 195 of the 102-type indicate that 519 of the 560 triads are vacuously transitive, the remaining 38 of the 201-type are intransitive and only the 3 300-types are transitive\nTransitivity\nAs can be seen in the code below indicates the the transitivity of the network as a whole is 0.1914894, which follows from the results above. This would indicate a relatively low rate of transitivity and thus low inter-connectedness of the nodes and potientally lower density overall.\n\n\ngtrans(statted_florentine)\n\n\n[1] 0.1914894\n\nIsolates\nThough the code below indicates that there are 12 isolates in the network, the data from our plot suggests that this is likely untrue and due to the discrepancy between the un-directed true nature of the network and its label as directed as a network object.\n\n\nisolates(statted_florentine)\n\n\n[1] 12\n\nDensity\nAs indicated by the code chunk below network density here is 0.1666667 indicating that only 16.67% of possible ties in the network are made.\n\n\nnetwork.density(statted_florentine)\n\n\n[1] 0.1666667\n\nDegree and Interesting Results\nEach of the 16 node’s degrees are acquired from the code bellow in integer form, from the digits alone it is difficult to distinguish any sort of overall pattern in the data.\n\n\nsna::degree(statted_florentine)\n\n\n [1]  2  6  4  6  6  2  8  2 12  2  6  0  6  4  8  6\n\nBelow I create a data frame with the overall degree of each family.\n\n\nflorentine.nodes<-data.frame(name=statted_florentine%v%\"vertex.names\",\n                             degree=sna::degree(statted_florentine))\nflorentine.nodes\n\n\n           name degree\n1    Acciaiuoli      2\n2       Albizzi      6\n3     Barbadori      4\n4      Bischeri      6\n5    Castellani      6\n6        Ginori      2\n7      Guadagni      8\n8  Lamberteschi      2\n9        Medici     12\n10        Pazzi      2\n11      Peruzzi      6\n12        Pucci      0\n13      Ridolfi      6\n14     Salviati      4\n15      Strozzi      8\n16   Tornabuoni      6\n\nBelow I then calculate each individual nodes indegree and out-degree.\nNotewory Results\nUpon running the above code I realized that despite the network being labeled “directed” all of its ties were actually mutual and thus the in-degree and out-degree would be identical since marriage is considered mutual. Though this follows from the fact that are generally considered mutual it is interesting to observe that marriages are not considered “into” another family but are represented as a mutual, but directed ties between nodes in every case.\n\n\nsna::degree(statted_florentine, cmode=\"indegree\")\n\n\n [1] 1 3 2 3 3 1 4 1 6 1 3 0 3 2 4 3\n\nsna::degree(statted_florentine, cmode=\"outdegree\")\n\n\n [1] 1 3 2 3 3 1 4 1 6 1 3 0 3 2 4 3\n\nAs can be seen from the code above each node has identical in-degrees and out-degrees\n\n\nflorentine.nodes <- data.frame(name=statted_florentine%v%\"vertex.names\",\n    totdegree=sna::degree(statted_florentine),\n    indegree=sna::degree(statted_florentine, cmode=\"indegree\"),\n    outdegree=sna::degree(statted_florentine, cmode=\"outdegree\"))\n\nflorentine.nodes\n\n\n           name totdegree indegree outdegree\n1    Acciaiuoli         2        1         1\n2       Albizzi         6        3         3\n3     Barbadori         4        2         2\n4      Bischeri         6        3         3\n5    Castellani         6        3         3\n6        Ginori         2        1         1\n7      Guadagni         8        4         4\n8  Lamberteschi         2        1         1\n9        Medici        12        6         6\n10        Pazzi         2        1         1\n11      Peruzzi         6        3         3\n12        Pucci         0        0         0\n13      Ridolfi         6        3         3\n14     Salviati         4        2         2\n15      Strozzi         8        4         4\n16   Tornabuoni         6        3         3\n\nThe notion is confirmed by the degree summaries in the code below and the table above. In both cases all indicators are identical for both in-degree and out-degree and sum to the values seen in the total-degree column.\n\n\nsummary(florentine.nodes)\n\n\n     name             totdegree     indegree     outdegree  \n Length:16          Min.   : 0   Min.   :0.0   Min.   :0.0  \n Class :character   1st Qu.: 2   1st Qu.:1.0   1st Qu.:1.0  \n Mode  :character   Median : 6   Median :3.0   Median :3.0  \n                    Mean   : 5   Mean   :2.5   Mean   :2.5  \n                    3rd Qu.: 6   3rd Qu.:3.0   3rd Qu.:3.0  \n                    Max.   :12   Max.   :6.0   Max.   :6.0  \n\nHistograms of the distribution of the degrees also illustrate that the only difference between in-degree, out-degree, and total degree is that total degree has values twice as large for marriages but the same relative frequency.\n\n\nhist(florentine.nodes$totdegree, main=\"Florentine Marriages: Total Degrees\", xlab=\"Marriages\")\n\n\n\n\n\n\nhist(florentine.nodes$indegree, main=\"Florentine Marriages: In-Degrees\", xlab=\"Marriages\")\n\n\n\n\n\n\nhist(florentine.nodes$outdegree, main=\"Florentine Marriages: Out-Degrees\", xlab=\"Marriages\")\n\n\n\n\nThese results do make degree analysis ineffectual on the dataset, but offer some potential questions. Specifically it would be useful to look at dynamics of marriages “into” other families as this would have been important at the time. Though marriage is considered symmetric in this dataset it was often used in asymmetric ways during the medieval and renaissance times as a means of diplomacy and establishing goodwill between nobility and as a result the ties between the families are not necessarily symmetric in all cases. It would be interesting to see married into what families in terms of sex and birth status hierarchy i.e. first, second, third born, etc.\n\n\nflo_sorted_by_total_degree<-florentine.nodes[order(-florentine.nodes$totdegree),]\n\nflo_sorted_by_total_degree\n\n\n           name totdegree indegree outdegree\n9        Medici        12        6         6\n7      Guadagni         8        4         4\n15      Strozzi         8        4         4\n2       Albizzi         6        3         3\n4      Bischeri         6        3         3\n5    Castellani         6        3         3\n11      Peruzzi         6        3         3\n13      Ridolfi         6        3         3\n16   Tornabuoni         6        3         3\n3     Barbadori         4        2         2\n14     Salviati         4        2         2\n1    Acciaiuoli         2        1         1\n6        Ginori         2        1         1\n8  Lamberteschi         2        1         1\n10        Pazzi         2        1         1\n12        Pucci         0        0         0\n\nThe results above indicate that the medici family are the most “central” node in the network having the most marriages and thus the most in-degrees and out-degrees. The mean of these two degrees is 2.5 in the dataset thus they have more than double the average marriages, however 4 other families have just 2, while the pucci’s have no ties.\nThis also poses the question as to whether or not there are more families that could be included and what the criteria was for allowance in the florentine family data. In this case 4-6 marriages is the most common with 6 nodes having 4-6 marriages.\nThe least central are the Pucci family who are included in the dataset but have no edges or connections to others families by marriage. The Acciaiuoli, Ginori, Lamberteschi, and Pazzi all have 2 total ties, one in and one out representing a single marriage.\n\n\ncentralization(statted_florentine, degree, cmode=\"indegree\")\n\n\n[1] 0.2488889\n\nThe measure of centralization above represents how concentrated edges between nodes are concentrated among actors. He centralization is slightly less than 25% which would indicate that concentration is relatively low this follows from the low transitivity of the network as a whole, there very few actual connections as compared to the possible connections. As a result of these findings it appears as if the network is not extremely centralized with most families having 2-3 marriages with the largest only being 6. The network also has a low level of transitivity as most nodes are not connected to one another.\nHowever it is important to note that we do not know aspects certain aspects of the families that are relevant to understanding the extent of the network’s true connectivity, this could be heirs with ties to both families marriages and the number of marriages between families that happened out of the possible number afforded to each family by their number of heirs. Having family tree measurements would allow for more meaningful analysis that could make the network truly directed by seeing who married into what family and what they represented to their families in terms of succession including their effects in creating prior generations that continued these connections.\n\n\n\n",
    "preview": "posts/httpsnmilsteinumagithubioposts2022-02-07-florentine-families-week-3-assignment/florentine-families-week-3-assignment_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2022-02-17T13:45:19-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsnmilsteinumagithubioposts2022-02-10-workwithmedievalnetworks/",
    "title": "Work with Medieval Networks",
    "description": "A Brief Analysis of Networks of Medieval Conflict.",
    "author": [
      {
        "name": "Noah Milstein",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\n\n\n\n\n\n\nBriefly Describe the Dataset You Are Using:\nQuestion: Identify initial network format\n\n\n\nNetwork Structure: Wars Startings in the 1000s\n\n Network attributes:\n  vertices = 117 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 153 \n    missing edges= 0 \n    non-missing edges= 153 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nNetwork Structure: Wars Startings in the 1100s\n\n Network attributes:\n  vertices = 78 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 225 \n    missing edges= 0 \n    non-missing edges= 225 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nNetwork Structure: Wars Startings in the 1200s\n\n Network attributes:\n  vertices = 161 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 313 \n    missing edges= 0 \n    non-missing edges= 313 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nQuestion: Describe and identify the nodes (including how many nodes are in the dataset)\nAnswer: Nodes or vertices in these datasets represent belligerents in wars throughout history, the involved parties in each conflict can be a nation, province, individual, or group so long as they are listed as involved in the conflict.\nQuestion: What constitutes a tie or edge (including how many ties, whether ties are directed/undirected and weighted/binary, and how to interpret the value of the tie if any)\nAnswer: A tie or edge in this dataset represents a war, this war can be between two nations or groups within a nation. These edges can represent a war that involved many more nations but are always tied to each and every party involved on both sides. These edges are directed and the direction indicates which side “won” the conflict.\nQuestion: Whether or not there are edge attributes that might be used to subset data or stack multiple networks (e.g., tie type, year, etc).\nAnswer: There are a number of attributes that could be used to subset the data, years that the conflict began or the length of time it lasted are available. Aspects like each side’s religion and the area where the conflict took place.\nCloseness Betweeness and Eigenvector Centrality\nQuestion: Calculate closeness, betweenness and eigenvector centrality measures for your network data, and bonachic-power if possible. Compare these measures to basic degree centrality measures. Try to interpret the results. Are there any interesting patterns in the distribution of measures or correlations between them that provide insight into the measures?\nCentralization: Wars Startings in the 1000s\n\nname\ntotdegree\nindegree\noutdegree\neigen\nCounty of Apulia\n7\n0\n7\n0.000000\nCounty of Aversa\n5\n0\n5\n0.000000\nKingdom of Sicily\n8\n3\n5\n0.000000\nGhaznavids\n2\n0\n2\n0.000000\nKingdom of Poland\n1\n0\n1\n0.182744\nKingdom of Hungary\n3\n0\n3\n0.000000\n\n\n\n\n\n\ncentralization(wars_in_1000s_network, degree, cmode=\"outdegree\") %>% kable()\n\n\nx\n0.1016647\n\ncentralization(wars_in_1000s_network, degree, cmode=\"indegree\") %>% kable()\n\n\nx\n0.0494946\n\ncentralization(wars_in_1000s_network, degree) %>% kable()\n\n\nx\n0.0674663\n\nAs can be seen above I have coded measures of indegree, outdegree, and total centralization in the wars in the 1000s dataset.\nCentralization: Wars Startings in the 1100s\n\nname\ntotdegree\nindegree\noutdegree\neigen\nSultanate of Rum\n23\n0\n23\n0.2893116\nDanishmends\n13\n0\n13\n0.0690251\nSeljuk Emirate of Aleppo\n13\n0\n13\n0.0690251\nKingdom of Jerusalem\n23\n11\n12\n0.5378974\nFatimids of Egypt\n1\n0\n1\n0.0973860\nKingdom of Norway\n4\n0\n4\n0.0398827\n\n\n\n\n\n\ncentralization(wars_in_1100s_network, degree, cmode=\"outdegree\") %>% kable()\n\n\nx\n0.2646315\n\ncentralization(wars_in_1100s_network, degree, cmode=\"indegree\") %>% kable()\n\n\nx\n0.1593861\n\ncentralization(wars_in_1100s_network, degree) %>% kable()\n\n\nx\n0.1148325\n\nI do the same above and calculate measures of indegree, outdegree, and total centralization in the wars in the 1100s dataset.\nCentralization: Wars Startings in the 1200s\n\nname\ntotdegree\nindegree\noutdegree\neigen\nForces of Bohemond IV of Antioch\n3\n0\n3\n0.0000000\nKnights Templar\n22\n3\n19\n0.4663665\nAyyubid Emirate of Aleppo\n3\n0\n3\n0.0000000\nKingdom of Jerusalem\n3\n0\n3\n0.0000000\nSultanate of Rum\n3\n0\n3\n0.0000000\nHoly Roman Empire\n11\n6\n5\n0.1770181\n\n\n\n\n\n\ncentralization(wars_in_1200s_network, degree, cmode=\"outdegree\") %>% kable()\n\n\nx\n0.2016016\n\ncentralization(wars_in_1200s_network, degree, cmode=\"indegree\") %>% kable()\n\n\nx\n0.0758203\n\ncentralization(wars_in_1200s_network, degree) %>% kable()\n\n\nx\n0.1174332\n\nFinally I calculate measures of indegree, outdegree, and total centralization in the wars in the 1200s dataset.\nEigenvector Centralization\nQuestion: You may also want to identify whether the same node(s) are more/less central using the different measures, and see if you can find any patterns in the results based on which nodes are high/low on each measures. Discuss (with any related evidence) whether or not the node(s) behavior is in line with or violates expectations based on the degree centrality measure, comparing across those measures using a data frame similar to that constructed in the syntax. Be sure to share your assignment with group members for comments.\n\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nByzantine Empire\n18\n5\n13\n0.478430\n0.3571429\n0.1708679\n0.6428571\n0.3075621\nHoly Roman Empire\n15\n2\n13\n0.295686\n1.0000000\n0.2956860\n0.0000000\n0.0000000\nMirdasid Emirate of Aleppo\n1\n0\n1\n0.295686\n0.0000000\n0.0000000\n1.0000000\n0.2956860\nKingdom of Georgia\n5\n1\n4\n0.295686\n0.0769231\n0.0227451\n0.9230769\n0.2729409\nDuklja\n1\n0\n1\n0.295686\n0.0000000\n0.0000000\n1.0000000\n0.2956860\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nKingdom of Jerusalem\n23\n11\n12\n0.5378974\n0.2980769\n0.1603348\n0.7019231\n0.3775626\nAyyubid Dynasty\n18\n10\n8\n0.5188525\n0.3200000\n0.1660328\n0.6800000\n0.3528197\nSultanate of Rum\n23\n0\n23\n0.2893116\n0.0000000\n0.0000000\n1.0000000\n0.2893116\nHoly Roman Empire\n12\n8\n4\n0.2303733\n0.0892857\n0.0205690\n0.9107143\n0.2098042\nAlmoravid Dynasty\n10\n0\n10\n0.2202864\n0.0000000\n0.0000000\n1.0000000\n0.2202864\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nKnights Templar\n22\n3\n19\n0.4663665\n0.1428571\n0.0666238\n0.8571429\n0.3997427\nAyyubid Dynasty\n23\n9\n14\n0.4263748\n0.1046512\n0.0446206\n0.8953488\n0.3817542\nBahris\n7\n0\n7\n0.2911519\n0.0000000\n0.0000000\n1.0000000\n0.2911519\nRepublic of Genoa\n18\n5\n13\n0.2880895\n0.1428571\n0.0411556\n0.8571429\n0.2469339\nMongol Empire\n41\n7\n34\n0.2228895\n0.1206897\n0.0269005\n0.8793103\n0.1959891\n\nAnswer: Looking at the outputs above we see that regular eigenvector centrality, which accounts for the centrality of nodes attached to our node of interest. Here we see the top 5 highest observations in each dataset, in the 1000s the Byzantine Empire has the highest war, which is logical historically as they represented a bridge between major fighting factions in the Crusades between the Muslim Middle East and European west. The Kingdom of Jerusalem in the 1100s would also be connected, through its wars to other important powers being contested territory between Muslim empires like the Ayyubid Dynasty and crusading states like the Holy Roman Empire.\n\n\narrange(wars_in_1000s.nodes.stat, desc(eigen.rc\n))%>%\n  slice(1:5) %>% kable()\n\n\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nHoly Roman Empire\n15\n2\n13\n0.295686\n1.0000000\n0.2956860\n0.0000000\n0.0000000\nByzantine Empire\n18\n5\n13\n0.478430\n0.3571429\n0.1708679\n0.6428571\n0.3075621\nSultanate of Rum\n11\n7\n4\n0.295686\n0.1186441\n0.0350814\n0.8813559\n0.2606046\nKingdom of Georgia\n5\n1\n4\n0.295686\n0.0769231\n0.0227451\n0.9230769\n0.2729409\nKingdom of France\n10\n3\n7\n0.182744\n0.1034483\n0.0189046\n0.8965517\n0.1638394\n\narrange(wars_in_1100s.nodes.stat, desc(eigen.rc\n))%>%\n  slice(1:5) %>% kable()\n\n\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nAyyubid Dynasty\n18\n10\n8\n0.5188525\n0.3200000\n0.1660328\n0.6800000\n0.3528197\nKingdom of Jerusalem\n23\n11\n12\n0.5378974\n0.2980769\n0.1603348\n0.7019231\n0.3775626\nFatimid Caliphate\n17\n7\n10\n0.2202864\n0.2884615\n0.0635442\n0.7115385\n0.1567423\nZengid Dynasty\n16\n6\n10\n0.2202864\n0.1714286\n0.0377634\n0.8285714\n0.1825230\nRepublic of Venice\n6\n1\n5\n0.0797655\n0.3333333\n0.0265885\n0.6666667\n0.0531770\n\narrange(wars_in_1200s.nodes.stat, desc(eigen.rc\n))%>%\n  slice(1:5) %>% kable()\n\n\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nKnights Templar\n22\n3\n19\n0.4663665\n0.1428571\n0.0666238\n0.8571429\n0.3997427\nAyyubid Dynasty\n23\n9\n14\n0.4263748\n0.1046512\n0.0446206\n0.8953488\n0.3817542\nRepublic of Genoa\n18\n5\n13\n0.2880895\n0.1428571\n0.0411556\n0.8571429\n0.2469339\nKingdom of Cyprus\n11\n4\n7\n0.2025283\n0.1428571\n0.0289326\n0.8571429\n0.1735957\nMongol Empire\n41\n7\n34\n0.2228895\n0.1206897\n0.0269005\n0.8793103\n0.1959891\n\nAnswer: Reflected centrality represents the centrality one nation receives from another another that is attributable to the first nations contribution to the other nations score. Looking at reflected centrality through wars we see relatively similar trends. In the 1000s the Holy Roman Empire and Byzantine Empire play a distinct role in the crusades so in this case we see how central a nation is in conflict dependent on how much centrality they contribute to a nation they have a conflict with. Being focal points in the center of Europe in the case of the HRE and the focal point of Christian, Muslim conflict in the case of the Byzantine empire. For both fighting minor nations gives the two a great deal of centrality to other, potentially less central groups that they fight. The Ayyubids and Kingdom of Jerusalem that each occupy a central position in conflict. Into the 1200s the Knights Templar and Ayyubids occupy this position.\n\n\narrange(wars_in_1000s.nodes.stat, desc(eigen.dc\n\n))%>%\n  slice(1:5) %>% kable()\n\n\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nByzantine Empire\n18\n5\n13\n0.478430\n0.3571429\n0.1708679\n0.6428571\n0.3075621\nMirdasid Emirate of Aleppo\n1\n0\n1\n0.295686\n0.0000000\n0.0000000\n1.0000000\n0.2956860\nDuklja\n1\n0\n1\n0.295686\n0.0000000\n0.0000000\n1.0000000\n0.2956860\nGreat Seljuq Empire\n4\n0\n4\n0.295686\n0.0000000\n0.0000000\n1.0000000\n0.2956860\nKingdom of Georgia\n5\n1\n4\n0.295686\n0.0769231\n0.0227451\n0.9230769\n0.2729409\n\narrange(wars_in_1100s.nodes.stat, desc(eigen.dc\n\n))%>%\n  slice(1:5) %>% kable()\n\n\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nKingdom of Jerusalem\n23\n11\n12\n0.5378974\n0.2980769\n0.1603348\n0.7019231\n0.3775626\nAyyubid Dynasty\n18\n10\n8\n0.5188525\n0.3200000\n0.1660328\n0.6800000\n0.3528197\nSultanate of Rum\n23\n0\n23\n0.2893116\n0.0000000\n0.0000000\n1.0000000\n0.2893116\nAlmoravid Dynasty\n10\n0\n10\n0.2202864\n0.0000000\n0.0000000\n1.0000000\n0.2202864\nAbbasid Caliphate\n10\n0\n10\n0.2202864\n0.0000000\n0.0000000\n1.0000000\n0.2202864\n\narrange(wars_in_1200s.nodes.stat, desc(eigen.dc\n\n))%>%\n  slice(1:5) %>% kable()\n\n\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nKnights Templar\n22\n3\n19\n0.4663665\n0.1428571\n0.0666238\n0.8571429\n0.3997427\nAyyubid Dynasty\n23\n9\n14\n0.4263748\n0.1046512\n0.0446206\n0.8953488\n0.3817542\nBahris\n7\n0\n7\n0.2911519\n0.0000000\n0.0000000\n1.0000000\n0.2911519\nRepublic of Genoa\n18\n5\n13\n0.2880895\n0.1428571\n0.0411556\n0.8571429\n0.2469339\nAnti-Imperial faction\n7\n0\n7\n0.2025283\n0.0000000\n0.0000000\n1.0000000\n0.2025283\n\nAnswer: Finally Derived Centrality measures the centrality a nation receives from fighting another nation that is not a reflection of the first nation’s contribution of centrality to the others. Here the Byzantine Empire remains one of the largest, potentially suggesting their status as a cosmopolitan being high in both derived and reflected centrality. However, nations like the Mirdasid Emirate of Aleppo have little to no reflected centrality by high derived centrality suggesting that they are are a pure bridge.\n\n\nwars_in_1000s.nodes<-data.frame(name=V(wars_in_1000s.ig)$name,\n    totdegree=igraph::degree(wars_in_1000s.ig, loops=FALSE),\n    indegree=igraph::degree(wars_in_1000s.ig, mode=\"in\", loops=FALSE),\n    outdegree=igraph::degree(wars_in_1000s.ig, mode=\"out\", loops=FALSE))\n\nwars_in_1100s.nodes<-data.frame(name=V(wars_in_1100s.ig)$name,\n    totdegree=igraph::degree(wars_in_1100s.ig, loops=FALSE),\n    indegree=igraph::degree(wars_in_1100s.ig, mode=\"in\", loops=FALSE),\n    outdegree=igraph::degree(wars_in_1100s.ig, mode=\"out\", loops=FALSE))\n\nwars_in_1200s.nodes<-data.frame(name=V(wars_in_1200s.ig)$name,\n    totdegree=igraph::degree(wars_in_1200s.ig, loops=FALSE),\n    indegree=igraph::degree(wars_in_1200s.ig, mode=\"in\", loops=FALSE),\n    outdegree=igraph::degree(wars_in_1200s.ig, mode=\"out\", loops=FALSE))\n\neigen_cent_wars_in_1000s<-centr_eigen(wars_in_1000s.ig,directed=T)\n\neigen_cent_wars_in_1100s<-centr_eigen(wars_in_1100s.ig,directed=T)\n\neigen_cent_wars_in_1200s<-centr_eigen(wars_in_1200s.ig,directed=T)\n\n\n\nSome Attempts at Visualization\nGraph 1:\nExplanation: Below I have graphed the network for the 1000s dataset using base plot and an edgelist\n\n\nplot(wars_in_1000s_edgelist_network_edgelist, vertex.size=2,  edge.arrow.size=.2, vertex.color=\"gold\", vertex.size=20, vertex.frame.color=\"gray\", vertex.label.color=\"black\", vertex.label.cex=0.25, vertex.label.dist=2, edge.curved=0.2)\n\n\n\n\nGraph 2:\nExplanation: Next I used the igraph network object and graphed it using the automatic, proportional clustering.\n\n\n\nGraph 3:\nExplanation: Finally I used the ggplot network and graphed it using a generic network object. This order follows for the visualization of the 1100s datasets and 1200s.\n\n\n\nGraph 4:\n\n\nplot(wars_in_1100s_edgelist_network_edgelist, vertex.size=2,  edge.arrow.size=.2, vertex.color=\"gold\", vertex.size=20, vertex.frame.color=\"gray\", vertex.label.color=\"black\", vertex.label.cex=0.25, vertex.label.dist=2, edge.curved=0.2)\n\n\n\n\nGraph 5:\n\n\n\nGraph 6:\n\n\n\nGraph 7:\n\n\nplot(wars_in_1200s_edgelist_network_edgelist, vertex.size=2,  edge.arrow.size=.2, vertex.color=\"gold\", vertex.size=20, vertex.frame.color=\"gray\", vertex.label.color=\"black\", vertex.label.cex=0.25, vertex.label.dist=2, edge.curved=0.2)\n\n\n\n\nGraph 8:\n\n\n\nGraph 9:\n\n\n\n\n$mut\n[1] 3\n\n$asym\n[1] 147\n\n$null\n[1] 6636\n\n\n [1] 243974  14792    744    288    149    129     11     28     13\n[10]      0      1      0      0      1      0      0\n\n\n[1] 0.06481481\n[1] 0.0774983\n[1] 0.093224\n\n\n[1] 0.01117686\n[1] 0.03698225\n[1] 0.01207515\n\n\n     name               degree      \n Length:117         Min.   : 1.000  \n Class :character   1st Qu.: 1.000  \n Mode  :character   Median : 1.000  \n                    Mean   : 2.615  \n                    3rd Qu.: 3.000  \n                    Max.   :18.000  \n\n\n                name degree\n15  Byzantine Empire     18\n25 Holy Roman Empire     15\n28  Sultanate of Rum     11\n47 Kingdom of France     10\n29  County of Sicily      9\n34           England      9\n\n\n     name               degree      \n Length:117         Min.   : 1.000  \n Class :character   1st Qu.: 1.000  \n Mode  :character   Median : 1.000  \n                    Mean   : 2.615  \n                    3rd Qu.: 3.000  \n                    Max.   :18.000  \n\n\n\n\n",
    "preview": "posts/httpsnmilsteinumagithubioposts2022-02-10-workwithmedievalnetworks/workwithmedievalnetworks_files/figure-html5/unnamed-chunk-20-1.png",
    "last_modified": "2022-02-17T13:45:57-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsrpubscomak64823865458/",
    "title": "The Human Disease Taana Baana",
    "description": "Gene to Gene Network Analysis (bird's eye view)",
    "author": [
      {
        "name": "Abhinav Kumar",
        "url": "https://www.linkedin.com/in/abhinavkumar2603/"
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\r\nData Description\r\nThis is a gene disease dataset set. This has been published by Carlos Castillo, a computer scientist based out o Barcelona Spain.The dataset has been used to teach network analysis to students at the university. The dataset was a result of the research conducted by Goh, K. I., Cusick, M. E., Valle, D., Childs, B., Vidal, M., & Barabási, A. L. (2007). “The human disease network”. Proceedings of the National Academy of Sciences, 104(21), 8685-8690. (https://doi.org/10.1073/pnas.0701361104). The effort here is to understand that many diseases may have common genetic origin. Hence, we want to find out which are those genes that may be connected by common among disorders. Therefore, here we will look Gene to Gene network. Below are the features of the data set:\r\nDisorder ID\r\nDisorder Name\r\nComma-separated list of Genes\r\nThe OMIM ID (Online Mendelian Inheritance in Man) of this disorder\r\nThe location in the Chromosome\r\nA disorder Class indicating the physiological system that is affected\r\nWe will only use the below two features:\r\nDisorder Name\r\nComma-separated list of Genes\r\nUsing these two features a bi-partite adjacency matrix will be created which then will be converted to one to one mode (Gene to Gene) by matrix operation. The disorder name would be pivoted in the data set to get the bi-partite matrix in place.\r\n\r\n\r\nlibrary(readr)\r\n\r\nurlfile = (\"https://raw.githubusercontent.com/chatox/networks-science-course/master/practicum/data/disease-genes.csv\")\r\n\r\ngeny = read_csv(url(urlfile))\r\nhead(geny)\r\n\r\n\r\n# A tibble: 6 x 6\r\n     ID Name                   Genes       `OMIM ID` Chromosome Class \r\n  <dbl> <chr>                  <chr>           <dbl> <chr>      <chr> \r\n1     1 17,20-lyase deficienc~ CYP17A1, C~    609300 10q24.3    Endoc~\r\n2     1 17-alpha-hydroxylase/~ CYP17A1, C~    609300 10q24.3    Endoc~\r\n3     3 2-methyl-3-hydroxybut~ HADH2, ERAB    300256 Xp11.2     Metab~\r\n4     4 2-methylbutyrylglycin~ ACADSB         600301 10q25-q26  Metab~\r\n5     5 3-beta-hydroxysteroid~ HSD3B2         201810 1p13.1     Metab~\r\n6     6 3-hydroxyacyl-CoA deh~ HADHSC, SC~    601609 4q22-q26   Metab~\r\n\r\nCleaning the Genes column in dataset\r\n\r\n\r\nlibrary(stringr)\r\n\r\n# Genes is character column and we need to split each row into list of genes\r\n# strsplit() will split the character to list of characters\r\n\r\n\r\ngeny$Genes <- strsplit(geny$Genes, split = \", \")\r\n\r\n\r\nhead(geny)\r\n\r\n\r\n# A tibble: 6 x 6\r\n     ID Name                       Genes   `OMIM ID` Chromosome Class \r\n  <dbl> <chr>                      <list>      <dbl> <chr>      <chr> \r\n1     1 17,20-lyase deficiency, i~ <chr [~    609300 10q24.3    Endoc~\r\n2     1 17-alpha-hydroxylase/17,2~ <chr [~    609300 10q24.3    Endoc~\r\n3     3 2-methyl-3-hydroxybutyryl~ <chr [~    300256 Xp11.2     Metab~\r\n4     4 2-methylbutyrylglycinuria  <chr [~    600301 10q25-q26  Metab~\r\n5     5 3-beta-hydroxysteroid deh~ <chr [~    201810 1p13.1     Metab~\r\n6     6 3-hydroxyacyl-CoA dehydro~ <chr [~    601609 4q22-q26   Metab~\r\n\r\n\r\n\r\n# creating a new dataframe\r\n\r\ngeny_new <- geny[, c(2,3)]\r\ncolnames(geny_new)[1] <- \"Disorder\"\r\n\r\nhead(geny_new)\r\n\r\n\r\n# A tibble: 6 x 2\r\n  Disorder                                                 Genes    \r\n  <chr>                                                    <list>   \r\n1 17,20-lyase deficiency, isolated                         <chr [3]>\r\n2 17-alpha-hydroxylase/17,20-lyase deficiency              <chr [3]>\r\n3 2-methyl-3-hydroxybutyryl-CoA dehydrogenase deficiency   <chr [2]>\r\n4 2-methylbutyrylglycinuria                                <chr [1]>\r\n5 3-beta-hydroxysteroid dehydrogenase, type II, deficiency <chr [1]>\r\n6 3-hydroxyacyl-CoA dehydrogenase deficiency               <chr [2]>\r\n\r\n\r\n\r\n# replicating rows for Genes having more than 1 gene per disease\r\nlibrary(tidyverse)\r\ngeny_new <- unnest(geny_new)\r\nhead(geny_new)\r\n\r\n\r\n# A tibble: 6 x 2\r\n  Disorder                                    Genes  \r\n  <chr>                                       <chr>  \r\n1 17,20-lyase deficiency, isolated            CYP17A1\r\n2 17,20-lyase deficiency, isolated            CYP17  \r\n3 17,20-lyase deficiency, isolated            P450C17\r\n4 17-alpha-hydroxylase/17,20-lyase deficiency CYP17A1\r\n5 17-alpha-hydroxylase/17,20-lyase deficiency CYP17  \r\n6 17-alpha-hydroxylase/17,20-lyase deficiency P450C17\r\n\r\n\r\n\r\ngeny_new[\"count\"] <- 1\r\nadmat <- geny_new %>%\r\n  pivot_wider(id_cols = Genes, names_from = Disorder, values_from = count, values_fn = list(count = ~1))\r\n\r\n# take out first column, make it column name:\r\nadmat2 <- as.matrix(admat[,-1])\r\nrownames(admat2) <- admat$Genes\r\n\r\n# now admat2 is the bipartite adjacency matrix\r\n\r\n# it can stay NA, too\r\nadmat2[is.na(admat2)] <- 0\r\n\r\n\r\n# this is now weighted, each cell will show how many disorders the genes share.\r\nadj_mat <- admat2 %*% t(admat2)\r\n\r\n\r\n\r\n\r\n\r\nlibrary(statnet)\r\n\r\n\r\nnetwork.stat<-network(adj_mat, directed=F, matrix.type=\"adjacency\", ignore.eval=FALSE, names.eval=\"weight\") \r\n\r\nprint(network.stat)\r\n\r\n\r\n Network attributes:\r\n  vertices = 3823 \r\n  directed = FALSE \r\n  hyper = FALSE \r\n  loops = FALSE \r\n  multiple = FALSE \r\n  bipartite = FALSE \r\n  total edges= 6643 \r\n    missing edges= 0 \r\n    non-missing edges= 6643 \r\n\r\n Vertex attribute names: \r\n    vertex.names \r\n\r\n Edge attribute names not shown \r\n\r\nThe gene to gene network has below details:\r\nNumber of Vertices = 3823\r\nNumber of Edges = 6643\r\nIt is an “undirected network”\r\nIt is a “single mode network”\r\nThe edges of the network are “weighted”\r\nExtracting vertex attribute values from statnet object\r\n\r\n\r\n# Extracting vertex attribute values from statnet object\r\n\r\nhead(network.stat %v% \"vertex.names\")\r\n\r\n\r\n[1] \"CYP17A1\" \"CYP17\"   \"P450C17\" \"HADH2\"   \"ERAB\"    \"ACADSB\" \r\n\r\nExtracting edge attribute values from statnet object\r\n\r\n\r\nhead(network.stat %e% \"weight\")\r\n\r\n\r\n[1] 2 2 2 1 1 1\r\n\r\nSummarizing numeric network attribute\r\n\r\n\r\nsummary(network.stat %e% \"weight\")\r\n\r\n\r\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \r\n  1.000   1.000   1.000   1.642   2.000  11.000 \r\n\r\nClassify all dyads in the network using statnet object\r\n\r\n\r\nsna::dyad.census(network.stat)\r\n\r\n\r\n      Mut Asym    Null\r\n[1,] 6643    0 7299110\r\n\r\nThere are 6643 mutual relationships of gene to gene in the , which share common disorders\r\nThere are no asymmetric gene to gene relationships\r\nThere are 7299110 Null dyads\r\n#Classify all triads in the networkusing statnet object\r\n\r\n\r\nsna::triad.census(network.stat, mode = \"graph\") \r\n\r\n\r\n              0        1    2     3\r\n[1,] 9279748342 25323442 7400 14887\r\n\r\nGlobal Transitivity\r\n\r\n\r\ngtrans(network.stat)\r\n\r\n\r\n[1] 0.857859\r\n\r\nIdentifying the Isolates in the network\r\n\r\n\r\nisolates(network.stat)\r\n\r\n\r\n  [1]    6    7   14   17   18   22   32   33   39   89  105  106  109\r\n [14]  119  131  145  156  197  202  203  204  205  225  226  227  273\r\n [27]  285  288  289  290  303  304  325  326  333  345  346  361  372\r\n [40]  381  382  383  389  390  391  395  415  424  479  488  504  519\r\n [53]  531  534  535  536  537  553  554  572  585  586  592  607  608\r\n [66]  609  610  621  629  636  644  647  656  661  668  674  679  683\r\n [79]  750  757  763  764  772  773  774  775  776  778  783  784  785\r\n [92]  786  808  809  813  825  866  874  881  915  928  940  975  978\r\n[105]  979  982  995 1029 1036 1043 1044 1061 1077 1090 1091 1092 1117\r\n[118] 1144 1167 1197 1211 1244 1254 1255 1278 1296 1328 1343 1344 1366\r\n[131] 1375 1379 1390 1391 1398 1399 1450 1453 1480 1492 1519 1527 1535\r\n[144] 1552 1556 1583 1586 1587 1593 1598 1599 1602 1610 1639 1655 1658\r\n[157] 1669 1682 1687 1698 1702 1708 1711 1725 1752 1771 1788 1792 1793\r\n[170] 1794 1795 1796 1799 1812 1815 1816 1822 1823 1824 1825 1830 1851\r\n[183] 1888 1889 1890 1895 1896 1910 1911 1912 1913 1914 1919 1920 1921\r\n[196] 1927 1939 1950 1974 1989 1994 1995 1996 2004 2012 2013 2018 2019\r\n[209] 2024 2025 2026 2027 2028 2029 2036 2037 2045 2056 2057 2058 2059\r\n[222] 2062 2086 2087 2104 2105 2108 2109 2112 2125 2128 2133 2173 2174\r\n[235] 2183 2184 2185 2187 2188 2217 2224 2227 2230 2231 2254 2262 2273\r\n[248] 2279 2291 2294 2314 2315 2332 2333 2354 2364 2370 2371 2386 2402\r\n[261] 2406 2427 2437 2446 2450 2456 2469 2472 2473 2478 2481 2515 2521\r\n[274] 2529 2542 2565 2566 2580 2581 2582 2603 2612 2615 2628 2636 2637\r\n[287] 2650 2651 2673 2702 2706 2707 2731 2751 2781 2782 2783 2784 2789\r\n[300] 2790 2791 2796 2809 2814 2823 2824 2844 2851 2863 2878 2928 2935\r\n[313] 2939 2948 2966 2971 2974 2987 2990 3041 3050 3059 3070 3071 3072\r\n[326] 3086 3087 3099 3105 3119 3122 3161 3211 3212 3237 3244 3248 3249\r\n[339] 3250 3251 3258 3264 3276 3279 3287 3291 3292 3310 3319 3327 3340\r\n[352] 3349 3357 3358 3363 3364 3384 3395 3407 3417 3418 3430 3431 3434\r\n[365] 3435 3446 3447 3467 3470 3471 3472 3473 3482 3486 3494 3496 3507\r\n[378] 3525 3528 3529 3532 3542 3551 3566 3585 3600 3608 3612 3616 3617\r\n[391] 3622 3639 3651 3652 3656 3657 3660 3668 3669 3674 3675 3689 3690\r\n[404] 3714 3715 3726 3738 3748 3749 3750 3751 3752 3753 3756 3773 3788\r\n[417] 3801 3802 3805 3822 3823\r\n\r\nIdentifying the name of the Genes that are isoltes\r\n\r\n\r\n#subset vertex.names attribute to get names of isolates\r\nx <- as.vector(network.stat%v%'vertex.names')[c(isolates(network.stat))]\r\n\r\nx\r\n\r\n\r\n  [1] \"ACADSB\"   \"HSD3B2\"   \"AUH\"      \"CUL7\"     \"TPMT\"    \r\n  [6] \"HLA-B\"    \"CAT\"      \"MDM2\"     \"COL2A1\"   \"EGFR\"    \r\n [11] \"ADA\"      \"ADSL\"     \"MEN1\"     \"POR\"      \"TBS19\"   \r\n [16] \"GCNT2\"    \"FGA\"      \"TYR\"      \"ALDH2\"    \"GABRA2\"  \r\n [21] \"ALDOA\"    \"CYP11B2\"  \"ACTN3\"    \"ACAT1\"    \"AMACR\"   \r\n [26] \"ENAM\"     \"AMPD3\"    \"APOA1\"    \"GSN\"      \"LYZ\"     \r\n [31] \"ALB\"      \"MC1R\"     \"NRAMP2\"   \"SPTB\"     \"COL3A1\"  \r\n [36] \"XPNPEP2\"  \"HP\"       \"AT3\"      \"FGF10\"    \"APOA2\"   \r\n [41] \"APOC3\"    \"APOH\"     \"VPS33B\"   \"ARG1\"     \"ASL\"     \r\n [46] \"DDC\"      \"AGA\"      \"ALOX5\"    \"TF\"       \"GATA4\"   \r\n [51] \"GLO1\"     \"DRD4\"     \"BBS1\"     \"BBS7\"     \"BBS2\"    \r\n [56] \"BBS4\"     \"BBS5\"     \"RFX5\"     \"RFXAP\"    \"BSND\"    \r\n [61] \"FTL\"      \"SLC19A3\"  \"MYF6\"     \"GP1BA\"    \"GP1BB\"   \r\n [66] \"GP9\"      \"HLA-DPB1\" \"BTD\"      \"HRAS\"     \"TBXA2R\"  \r\n [71] \"ABO\"      \"DAF\"      \"AQP3\"     \"KEL\"      \"LW\"      \r\n [76] \"BSG\"      \"RHCE\"     \"XG\"       \"PHB\"      \"PLOD2\"   \r\n [81] \"MAOA\"     \"MYC\"      \"C1QA\"     \"C1QB\"     \"C1QG\"    \r\n [86] \"C1S\"      \"C2\"       \"C3\"       \"C6\"       \"C7\"      \r\n [91] \"C8B\"      \"C9\"       \"ASPA\"     \"FGFR4\"    \"CPS1\"    \r\n [96] \"SCO2\"     \"TNNC1\"    \"COX15\"    \"MYH8\"     \"CRYBB1\"  \r\n[101] \"CD8A\"     \"CP\"       \"CLN2\"     \"CLN5\"     \"CLN6\"    \r\n[106] \"CETP\"     \"DNM2\"     \"KIAA1985\" \"CHD7\"     \"NSDHL\"   \r\n[111] \"CHIT\"     \"LIPA\"     \"EXT1\"     \"CYBA\"     \"NCF1\"    \r\n[116] \"NCF2\"     \"ASS\"      \"COH1\"     \"ODC1\"     \"BUB1\"    \r\n[121] \"NDUFS6\"   \"ALG6\"     \"ALG12\"    \"ALG8\"     \"PLG\"     \r\n[126] \"CPO\"      \"IGBP1\"    \"CPT1A\"    \"CPT2\"     \"HLA-DQB1\"\r\n[131] \"INSL3\"    \"ELN\"      \"CTH\"      \"CTNS\"     \"D2HGD\"   \r\n[136] \"HSD17B4\"  \"DFNA5\"    \"MYO1A\"    \"ESPN\"     \"KIAA1199\"\r\n[141] \"DRPLA\"    \"WT1\"      \"AQP2\"     \"INSR\"     \"GCK\"     \r\n[146] \"PTF1A\"    \"AKT2\"     \"IPF1\"     \"VEGF\"     \"LIG1\"    \r\n[151] \"TOP1\"     \"DBH\"      \"FAAH\"     \"F2\"       \"COL7A1\"  \r\n[156] \"EDARADD\"  \"PKP1\"     \"COL1A2\"   \"SPTA1\"    \"COX10\"   \r\n[161] \"TLR4\"     \"ENO3\"     \"EPX\"      \"ITGA6\"    \"ME2\"     \r\n[166] \"SYN1\"     \"OPCML\"    \"HBA1\"     \"HBB\"      \"HBA2\"    \r\n[171] \"EPOR\"     \"LOR\"      \"RNF6\"     \"EXT2\"     \"NPC1L1\"  \r\n[176] \"GLA\"      \"MCFD2\"    \"F7\"       \"F10\"      \"F11\"     \r\n[181] \"F13B\"     \"FANCF\"    \"LCAT\"     \"FMO3\"     \"KNG\"     \r\n[186] \"FSHB\"     \"TDGF1\"    \"FBP1\"     \"ALDOB\"    \"KHK\"     \r\n[191] \"FUCA1\"    \"FUT6\"     \"GALK1\"    \"GALE\"     \"GALT\"    \r\n[196] \"GAMT\"     \"GBA\"      \"CYP7B1\"   \"DMBT1\"    \"MC2R\"    \r\n[201] \"GCS1\"     \"FTCD\"     \"GCDH\"     \"GK\"       \"GNMT\"    \r\n[206] \"PHKG2\"    \"G6PT1\"    \"GAA\"      \"GBE1\"     \"GYS2\"    \r\n[211] \"PYGL\"     \"PFKM\"     \"GLB1\"     \"GM2A\"     \"KIAA1279\"\r\n[216] \"DHH\"      \"CTLA4\"    \"MLPH\"     \"GHRHR\"    \"STAT5B\"  \r\n[221] \"IGF1\"     \"OAT\"      \"ELA2\"     \"HMOX1\"    \"AK1\"     \r\n[226] \"BPGM\"     \"GPI\"      \"HK1\"      \"TPI1\"     \"F5\"      \r\n[231] \"LIPC\"     \"MET\"      \"HMGCL\"    \"HMGCS2\"   \"TBX5\"    \r\n[236] \"CBS\"      \"MTHFR\"    \"HBG1\"     \"HBG2\"     \"EPHX2\"   \r\n[241] \"GLRB\"     \"GLUD1\"    \"APOC2\"    \"AASS\"     \"INS\"     \r\n[246] \"KCNMB1\"   \"ADD1\"     \"TSHR\"     \"PAX9\"     \"LHB\"     \r\n[251] \"PTH\"      \"GCMB\"     \"PAX8\"     \"TSHB\"     \"ICHYN\"   \r\n[256] \"IGHG2\"    \"CD3E\"     \"CD3G\"     \"MYH2\"     \"ITPA\"    \r\n[261] \"GABRB3\"   \"IVD\"      \"AHI1\"     \"NAGA\"     \"IGKC\"    \r\n[266] \"DSG1\"     \"GALC\"     \"LDHB\"     \"PDX1\"     \"GHR\"     \r\n[271] \"ALAD\"     \"SURF1\"    \"COL4A6\"   \"TAL2\"     \"ARNT\"    \r\n[276] \"AF1Q\"     \"NUMA1\"    \"BCL2\"     \"TCRA\"     \"ABL1\"    \r\n[281] \"LIG4\"     \"STAR\"     \"ECM1\"     \"AKAP10\"   \"LPA\"     \r\n[286] \"CILP\"     \"RAP1GDS1\" \"BCL8\"     \"VMD2\"     \"MASP2\"   \r\n[291] \"PYGM\"     \"XK\"       \"NF2\"      \"OPHN1\"    \"ARSA\"    \r\n[296] \"COL10A1\"  \"CYB5\"     \"DIA1\"     \"MMAA\"     \"MMAB\"    \r\n[301] \"RFXANK\"   \"MCPH1\"    \"SIX6\"     \"EDNRA\"    \"TK2\"     \r\n[306] \"SUCLA2\"   \"MYMY3\"    \"GNPTAG\"   \"HYAL1\"    \"PHKA1\"   \r\n[311] \"IL12RB1\"  \"MDS1\"     \"CBFB\"     \"AMPD1\"    \"ECGF1\"   \r\n[316] \"ITGA7\"    \"CLCN1\"    \"NAGS\"     \"NHS\"      \"HSN2\"    \r\n[321] \"RAC2\"     \"GNAT1\"    \"NP\"       \"POMC\"     \"MC4R\"    \r\n[326] \"UCP3\"     \"MC3R\"     \"OA1\"      \"SAG\"      \"PAX2\"    \r\n[331] \"OTC\"      \"RIL\"      \"NDUFV2\"   \"PIGA\"     \"PEX12\"   \r\n[336] \"PTS\"      \"PHGDH\"    \"PRPS1\"    \"PHKB\"     \"PSP\"     \r\n[341] \"GLI2\"     \"LHX3\"     \"PKD1\"     \"PKDTS\"    \"COL4A1\"  \r\n[346] \"UROS\"     \"UROD\"     \"PEPD\"     \"MSR1\"     \"PROS1\"   \r\n[351] \"SRD5A2\"   \"PSORS6\"   \"CTSK\"     \"NOS1\"     \"PC\"      \r\n[356] \"PDHB\"     \"OGG1\"     \"CA2\"      \"OPRM1\"    \"LRAT\"    \r\n[361] \"IMPDH1\"   \"RP2\"      \"CERKL\"    \"RP9\"      \"USH2A\"   \r\n[366] \"MERTK\"    \"RBP4\"     \"RHD\"      \"CYP2R1\"   \"VDR\"     \r\n[371] \"ESCO2\"    \"WNT4\"     \"HEXB\"     \"NAGLU\"    \"EMX2\"    \r\n[376] \"TRAR4\"    \"SOST\"     \"SPR\"      \"USP26\"    \"IL7R\"    \r\n[381] \"LHX4\"     \"NODAL\"    \"TBX4\"     \"SPG3A\"    \"EPB42\"   \r\n[386] \"PPP2R2B\"  \"SCA25\"    \"PLEKHG4\"  \"SCA8\"     \"TDP1\"    \r\n[391] \"MESP2\"    \"HMGCR\"    \"SSADH\"    \"SI\"       \"SUOX\"    \r\n[396] \"SOD3\"     \"FBLN1\"    \"WHN\"      \"DAD1\"     \"HBD\"     \r\n[401] \"LCRB\"     \"HRG\"      \"PROC\"     \"TRHR\"     \"TBG\"     \r\n[406] \"TALDO1\"   \"TRPS1\"    \"HADHB\"    \"SPG20\"    \"FAH\"     \r\n[411] \"TAT\"      \"HPD\"      \"TBX3\"     \"APRT\"     \"GGCX\"    \r\n[416] \"TKT\"      \"XDH\"      \"XPA\"      \"DDB2\"     \"PEX16\"   \r\n[421] \"PEX3\"    \r\n\r\nPlotting the Gene to Gene network\r\n\r\n\r\nplot(network.stat)\r\n\r\n\r\n\r\noptions(warn=0)\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/httpsrpubscomak64823865458/distill-preview.png",
    "last_modified": "2022-02-17T13:45:34-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsrpubscombunnificent862631/",
    "title": "Social Network Analysis: Week 2: Basic Network Structure",
    "description": "use `igraph` and `statnet` tools to describe aspects of network structure introduced in the Week 2 Lecture: Dyads and Dyad Census, Triads and Triad Census, Network Transitivity and Clustering, Path Length & Geodesic",
    "author": [
      {
        "name": "Audra Jamai White",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\r\nSocial Network Analysis\r\nWeek 2 Assignment: Network Structure\r\nIdentify an existing data set.\r\nThis can be one provided in the course directory, in an R package or library, located online, or some other source. \r\nBriefly describe the network dataset.\r\nIdentify and describe content of nodes and links, and identify format of data set (i.e., matrix or edgelist, directed or not, weighted or not), and whether attribute data are present. Be sure to provide information about network size (e.g., information obtained from network description using week 1 network basics tutorial commands.)\r\nExplore the dataset using commands from week 2 tutorial.\r\nComment on the highlighted aspects of network structure such as geodesic and path distances, triads or transitivity, connectedness and.or component structure, etc. Be sure to both provide the relevant statistics calculated in R, as well as your own interpretation of these statistics.\r\n1. Identify an existing data set.\r\nData set: Florentine Families\r\nDescription: This is an adjacency matrix for a small, directed network of the marriages held by the Florentine family and others in Rome.\r\nPackage: network\r\nAccess:\r\nImport Script:\r\n>source(\"./Import Scripts/Florentine Families.R\")\r\nOrignial Format from Package:\r\n>install.packages(\"network\")\r\n>data(\"flo\", package = \"network\")\r\n\r\n\r\n\r\n  # install.packages(\"network\")\r\n  \r\n    data(\"flo\", package = \"network\")\r\n\r\n\r\n\r\n2. Briefly describe the network dataset.\r\nBe sure to provide information about network size (e.g., information obtained from network description using week 1 network basics tutorial commands.)\r\nIdentify and describe content of nodes and links,\r\neach of the 16 Florentine Family Names represent a Node in the network.\r\n\r\n [1] \"Acciaiuoli\"   \"Albizzi\"      \"Barbadori\"    \"Bischeri\"    \r\n [5] \"Castellani\"   \"Ginori\"       \"Guadagni\"     \"Lamberteschi\"\r\n [9] \"Medici\"       \"Pazzi\"        \"Peruzzi\"      \"Pucci\"       \r\n[13] \"Ridolfi\"      \"Salviati\"     \"Strozzi\"      \"Tornabuoni\"  \r\n\r\nIdentify format of data set (i.e., matrix or edgelist, directed or not, weighted or not), and\r\nFlo Format: Size: 16 x 16 square dimmentions indicate a adjacency matrix format\r\nNetwork attributes: vertices = 16 directed = TRUE hyper = FALSE loops = FALSE multiple = FALSE bipartite = FALSE total edges= 40 missing edges= 0 non-missing edges= 40\r\nVertex attribute names: vertex.names\r\nNo edge attributes\r\n\r\n\r\n  dim(flo)\r\n\r\n\r\n[1] 16 16\r\n\r\n\r\n\r\n  network(flo)\r\n\r\n\r\n Network attributes:\r\n  vertices = 16 \r\n  directed = TRUE \r\n  hyper = FALSE \r\n  loops = FALSE \r\n  multiple = FALSE \r\n  bipartite = FALSE \r\n  total edges= 40 \r\n    missing edges= 0 \r\n    non-missing edges= 40 \r\n\r\n Vertex attribute names: \r\n    vertex.names \r\n\r\nNo edge attributes\r\n\r\nIdentify whether attribute data are present.\r\n\r\n\r\n  summary(flo,\r\n          print.adj = TRUE\r\n          )\r\n\r\n\r\n   Acciaiuoli        Albizzi         Barbadori        Bischeri     \r\n Min.   :0.0000   Min.   :0.0000   Min.   :0.000   Min.   :0.0000  \r\n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.000   1st Qu.:0.0000  \r\n Median :0.0000   Median :0.0000   Median :0.000   Median :0.0000  \r\n Mean   :0.0625   Mean   :0.1875   Mean   :0.125   Mean   :0.1875  \r\n 3rd Qu.:0.0000   3rd Qu.:0.0000   3rd Qu.:0.000   3rd Qu.:0.0000  \r\n Max.   :1.0000   Max.   :1.0000   Max.   :1.000   Max.   :1.0000  \r\n   Castellani         Ginori          Guadagni     Lamberteschi   \r\n Min.   :0.0000   Min.   :0.0000   Min.   :0.00   Min.   :0.0000  \r\n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.00   1st Qu.:0.0000  \r\n Median :0.0000   Median :0.0000   Median :0.00   Median :0.0000  \r\n Mean   :0.1875   Mean   :0.0625   Mean   :0.25   Mean   :0.0625  \r\n 3rd Qu.:0.0000   3rd Qu.:0.0000   3rd Qu.:0.25   3rd Qu.:0.0000  \r\n Max.   :1.0000   Max.   :1.0000   Max.   :1.00   Max.   :1.0000  \r\n     Medici          Pazzi           Peruzzi           Pucci  \r\n Min.   :0.000   Min.   :0.0000   Min.   :0.0000   Min.   :0  \r\n 1st Qu.:0.000   1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0  \r\n Median :0.000   Median :0.0000   Median :0.0000   Median :0  \r\n Mean   :0.375   Mean   :0.0625   Mean   :0.1875   Mean   :0  \r\n 3rd Qu.:1.000   3rd Qu.:0.0000   3rd Qu.:0.0000   3rd Qu.:0  \r\n Max.   :1.000   Max.   :1.0000   Max.   :1.0000   Max.   :0  \r\n    Ridolfi          Salviati        Strozzi       Tornabuoni    \r\n Min.   :0.0000   Min.   :0.000   Min.   :0.00   Min.   :0.0000  \r\n 1st Qu.:0.0000   1st Qu.:0.000   1st Qu.:0.00   1st Qu.:0.0000  \r\n Median :0.0000   Median :0.000   Median :0.00   Median :0.0000  \r\n Mean   :0.1875   Mean   :0.125   Mean   :0.25   Mean   :0.1875  \r\n 3rd Qu.:0.0000   3rd Qu.:0.000   3rd Qu.:0.25   3rd Qu.:0.0000  \r\n Max.   :1.0000   Max.   :1.000   Max.   :1.00   Max.   :1.0000  \r\n\r\nCreate & Describe: Directed Adjacency Matrix\r\nFlorentine Families Directed Adjacency Matrix Network Objects: iGraph flo.ig Statnet flo.stat\r\niGraph and Statnet both use {r graph4} for Directed Adjacency Matrix Objects\r\n\r\n\r\n    flo.stat<-\r\n        network(\r\n        flo,\r\n        directed=F,\r\n        matrix.type=\"adjacency\"\r\n        )\r\n\r\n#     provides a description of several critical network features\r\n    print(flo.stat)\r\n\r\n\r\n Network attributes:\r\n  vertices = 16 \r\n  directed = FALSE \r\n  hyper = FALSE \r\n  loops = FALSE \r\n  multiple = FALSE \r\n  bipartite = FALSE \r\n  total edges= 20 \r\n    missing edges= 0 \r\n    non-missing edges= 20 \r\n\r\n Vertex attribute names: \r\n    vertex.names \r\n\r\nNo edge attributes\r\n\r\n\r\n\r\n    flo.ig<-\r\n      graph.adjacency(\r\n      flo,\r\n      mode=\"undirected\"\r\n      ) \r\n    print(flo.ig)\r\n\r\n\r\nIGRAPH 60a423d UN-- 16 20 -- \r\n+ attr: name (v/c)\r\n+ edges from 60a423d (vertex names):\r\n [1] Acciaiuoli--Medici       Albizzi   --Ginori      \r\n [3] Albizzi   --Guadagni     Albizzi   --Medici      \r\n [5] Barbadori --Castellani   Barbadori --Medici      \r\n [7] Bischeri  --Guadagni     Bischeri  --Peruzzi     \r\n [9] Bischeri  --Strozzi      Castellani--Peruzzi     \r\n[11] Castellani--Strozzi      Guadagni  --Lamberteschi\r\n[13] Guadagni  --Tornabuoni   Medici    --Ridolfi     \r\n[15] Medici    --Salviati     Medici    --Tornabuoni  \r\n+ ... omitted several edges\r\n\r\n\r\n\r\n#     Count Vertices\r\n    vcount(flo.ig)\r\n\r\n\r\n[1] 16\r\n\r\n#     Count Edges\r\n    ecount(flo.ig)\r\n\r\n\r\n[1] 20\r\n\r\n# Is this a Bipartite or single mode network?\r\n    is_bipartite(flo.ig)\r\n\r\n\r\n[1] FALSE\r\n\r\n#  Are edges directed or undirected?\r\n    is_directed(flo.ig)\r\n\r\n\r\n[1] FALSE\r\n\r\n#Are edges weighted or unweighted?\r\n    is_weighted(flo.ig)        \r\n\r\n\r\n[1] FALSE\r\n\r\nVertex and Edge Attributes\r\n\r\n\r\n#     access vertex attributes\r\n  head(flo.stat %v% \"vertex.names\")\r\n\r\n\r\n[1] \"Acciaiuoli\" \"Albizzi\"    \"Barbadori\"  \"Bischeri\"   \"Castellani\"\r\n[6] \"Ginori\"    \r\n\r\n#      list the names of vertex attributes\r\n  network::list.vertex.attributes(flo.stat)\r\n\r\n\r\n[1] \"na\"           \"vertex.names\"\r\n\r\n#     access edge attribute\r\n  head(flo.stat%e% \"weight\")\r\n\r\n\r\nNULL\r\n\r\n#  Generate a list the names of edge attributes\r\n  network::list.edge.attributes(flo.stat)\r\n\r\n\r\n[1] \"na\"\r\n\r\n#   summarize numeric network attribute\r\n  summary(flo.stat  %v% \"name\")\r\n\r\n\r\n   Mode    NA's \r\nlogical      16 \r\n\r\n\r\n\r\n#     access vertex attribute \r\n  V(flo.ig)$name\r\n\r\n\r\n [1] \"Acciaiuoli\"   \"Albizzi\"      \"Barbadori\"    \"Bischeri\"    \r\n [5] \"Castellani\"   \"Ginori\"       \"Guadagni\"     \"Lamberteschi\"\r\n [9] \"Medici\"       \"Pazzi\"        \"Peruzzi\"      \"Pucci\"       \r\n[13] \"Ridolfi\"      \"Salviati\"     \"Strozzi\"      \"Tornabuoni\"  \r\n\r\n#     Generate a list the names of vertex attributes\r\n  igraph::vertex_attr_names(flo.ig)\r\n\r\n\r\n[1] \"name\"\r\n\r\n#     access edge attribute\r\n  E(flo.ig)$weight\r\n\r\n\r\nNULL\r\n\r\n#   Generate a list the names of edge attributes  \r\n  igraph::edge_attr_names(flo.ig)\r\n\r\n\r\ncharacter(0)\r\n\r\n#   summarize numeric network attribute\r\n  summary(E(flo.ig)$weight)  \r\n\r\n\r\nLength  Class   Mode \r\n     0   NULL   NULL \r\n\r\n3. Explore the dataset using commands from week 2 tutorial.\r\ngeodesic and path distances,\r\nPath Length and Geodesic\r\n\r\n\r\n#     Calculate distances between two nodes\r\n    distances(flo.ig,\"Bischeri\",\"Ridolfi\")\r\n\r\n\r\n         Ridolfi\r\nBischeri       2\r\n\r\n#     Calculate distance between two nodes using unweighted edges\r\n    distances(flo.ig,\"Bischeri\", \"Castellani\",weights=NA)\r\n\r\n\r\n         Castellani\r\nBischeri          2\r\n\r\nWe can also find all of the shortest paths between two famalies in this network. These list the starting node and the ending node with all nodes inbetween for each path. The option weights=NA means that any available edge weights are ignored.\r\n\r\n\r\n#     isolating the distances between specific node\r\n    all_shortest_paths(flo.ig,\"Strozzi\",\"Tornabuoni\", weights=NA)$res\r\n\r\n\r\n[[1]]\r\n+ 3/16 vertices, named, from 60a423d:\r\n[1] Strozzi    Ridolfi    Tornabuoni\r\n\r\n## Note: manually tell igraph to ignore edge weights.\r\n\r\n\r\n\r\nThe concept of shortest path to describe the overall network structure can be more useful\r\n\r\n\r\n#     find average shortest path for network\r\n    average.path.length(flo.ig,directed=F)    \r\n\r\n\r\n[1] 2.485714\r\n\r\ntriads or transitivity,\r\nDyad Census\r\nClassifies all dyads in the network as: - Reciprocal (mutual), or mut - Asymmetric (non-mutual), or asym, and - Absent, or null\r\n\r\n\r\n    sna::dyad.census(flo.stat)\r\n\r\n\r\n     Mut Asym Null\r\n[1,]  20    0  100\r\n\r\n\r\n\r\n  igraph::dyad.census(flo.ig)\r\n\r\n\r\n$mut\r\n[1] 20\r\n\r\n$asym\r\n[1] 0\r\n\r\n$null\r\n[1] 100\r\n\r\nTriad Census\r\nClassifies all triads in the network. The triad census provides a fundamental descriptive insight into the types of triads found in a particular dataset.\r\n\r\n\r\n#     Classify all Triad in the network: Directed Network\r\n  sna::triad.census(flo.stat, mode= )\r\n\r\n\r\n     003 012 102 021D 021U 021C 111D 111U 030T 030C 201 120D 120U\r\n[1,] 324   0 195    0    0    0    0    0    0    0  38    0    0\r\n     120C 210 300\r\n[1,]    0   0   3\r\n\r\n#     Classify all Triad in the network: Undirected Network\r\n   sna::triad.census(flo.stat, mode=\"graph\")\r\n\r\n\r\n       0   1  2 3\r\n[1,] 324 195 38 3\r\n\r\n#     total number of all four triad types returned by triad census\r\n   sum(sna::triad.census(flo.stat, mode=\"graph\"))\r\n\r\n\r\n[1] 560\r\n\r\n\r\n\r\n#Classify all Triad in the network\r\n     igraph::triad_census(flo.ig)\r\n\r\n\r\n [1] 324   0 195   0   0   0   0   0   0   0  38   0   0   0   0   3\r\n\r\nTransitivity or Global Clustering\r\n\r\n\r\n#     network transitivity:\r\n    transitivity(flo.ig)\r\n\r\n\r\n[1] 0.1914894\r\n\r\n#     weighted network transitivity:\r\n#   igraph::transivity(flo.ig)\r\n\r\n\r\n\r\n\r\n\r\n#     Directed Networks transitivity:\r\n  gtrans(flo.stat)\r\n\r\n\r\n[1] 0.1914894\r\n\r\n#   methods for weighted networks, rank and correlation, along with the relevant references.\r\n#  sna::gtrans()\r\n\r\n\r\n\r\nLocal Transivity or Clustering\r\nLocal transitivity (local clustering coefficient), is a technical description of the density of an ego network.\r\n\r\n\r\n#     Retrive a list of the vertices we are interested\r\n    V(flo.ig)[c(\"Bischeri\" ,\r\n                \"Castellani\", \r\n                \"Medici\",\r\n                \"Ridolfi\")]\r\n\r\n\r\n+ 4/16 vertices, named, from 60a423d:\r\n[1] Bischeri   Castellani Medici     Ridolfi   \r\n\r\n#     check ego network transitivity\r\ntransitivity(flo.ig,\r\n             type=\"local\", \r\n             vids=V(flo.ig)\r\n             [c(\"Bischeri\",\r\n                \"Castellani\", \r\n                \"Medici\",\r\n                \"Ridolfi\")]) \r\n\r\n\r\n[1] 0.33333333 0.33333333 0.06666667 0.33333333\r\n\r\n#     get global clustering cofficient\r\n  transitivity(flo.ig, type=\"global\")\r\n\r\n\r\n[1] 0.1914894\r\n\r\n#     get average local clustering coefficient\r\n  transitivity(flo.ig, type=\"average\")\r\n\r\n\r\n[1] 0.2181818\r\n\r\nconnectedness and.or component structure, etc.\r\n\r\nDistill is a publication format for scientific and technical writing, native to the web.\r\nLearn more about using Distill for R Markdown at https://rstudio.github.io/distill.\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-02-17T13:45:02-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httpsrpubscomburnworthj864158/",
    "title": "Degree and Centrality",
    "description": "'My dataset includes every Supreme Court Justice and the school that their clerks attended. There are 187 vertices which contstitute the Justices and the different universiteis. There are 2487 edges and an edge means there is a connection between a Justice and a school because they have hired a clerk that graduated with their law degree from the university.The network density of the dataset is .149 not including loops. When looking at node degreee, you will see that Harvard has the highest count of relationships with 681, Yale is second wiht 464, and Chicago is third with 172.The median node degree is 3 and The mean is 27.33. While the max is 681. The centralziation score for both in and out degrees is 3.65. The nodes with the most outdegree are Harvard, Yale, Chicago, Standford, and Columbia. The nodes with the least outdegree are Penn, Northeastern, Virginia, Temple, Washington & Lee.'",
    "author": [
      {
        "name": "Justin Burnworth",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-02-17T13:45:08-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httpsrpubscomburnworthj867161/",
    "title": "Week 4",
    "description": "My dataset includes every Supreme Court Justice and the school that their clerks attended. There are 187 vertices which contstitute the Justices and the different universiteis. There are 2487 edges and an edge means there is a connection between a Justice and a school because they have hired a clerk that graduated with their law degree from the university.\n\nThe centralization score for the dataset is .952. The more modern Justices have a higher betweenness score and I believe that is attributed to the fact that the total number of clerks have significantly grown starting back in the 1950s. The schools with the highest scores are Harvard, Georgetown, GW all schools where there have been many clerks hired from. While the schools with a few or only one clerk hired from have much lower scores. \n\nWhen it comes to eigenvector centarlity, shows some intersting reults. A modern justice such as Justice Gorsuch has among the highest while Justice Scalia is more middle of the pack. Howver, an older justice, Justice William Howard Taft has just as high of a score as Justice Gorsuch. I am not really sure what these results man. Justice Gorsuch's high score might be explained because he both clerked for a Justice and is a Justice himself.\n\n  The school with the highest bonachi-power is Minnesota with -3.63 whil the lowest is Notre Dame. The Justice with the highest score is interestingly the newest Justice, Amy Coney-Barrett.",
    "author": [
      {
        "name": "Justin Burnworth",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\nD\n\n\n\n",
    "preview": {},
    "last_modified": "2022-02-17T13:46:16-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httpsrpubscomchester860583/",
    "title": "Testing",
    "description": "A new article created using the Distill format.",
    "author": [
      {
        "name": "Cynthia Hester",
        "url": "https://example.com/norajones"
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-02-17T13:43:51-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httpsrpubscomecaetanoesil865861/",
    "title": "Short Assignment 2",
    "description": "Describing Network Data",
    "author": [
      {
        "name": "Eunice C. Silva",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\nI am working with a dataset accessed from the network package -\nFlorentine Families. This dataset is already in a format suitable for\nnetwork analysis (an adjancecy matrix) and ready to work with. The\nmatrix shows the marriage links of different families in Florence. A 1\nindicates the presence of a marriage link, while a 0 indicates the\nabsence of a marriage link.\n\n\nlibrary(network)\nlibrary(igraph)\nlibrary(statnet)\ndata(\"flo\")\nnetwork_adjacencey<- flo\nnetwork_adjacencey \n\n\n             Acciaiuoli Albizzi Barbadori Bischeri Castellani Ginori\nAcciaiuoli            0       0         0        0          0      0\nAlbizzi               0       0         0        0          0      1\nBarbadori             0       0         0        0          1      0\nBischeri              0       0         0        0          0      0\nCastellani            0       0         1        0          0      0\nGinori                0       1         0        0          0      0\nGuadagni              0       1         0        1          0      0\nLamberteschi          0       0         0        0          0      0\nMedici                1       1         1        0          0      0\nPazzi                 0       0         0        0          0      0\nPeruzzi               0       0         0        1          1      0\nPucci                 0       0         0        0          0      0\nRidolfi               0       0         0        0          0      0\nSalviati              0       0         0        0          0      0\nStrozzi               0       0         0        1          1      0\nTornabuoni            0       0         0        0          0      0\n             Guadagni Lamberteschi Medici Pazzi Peruzzi Pucci Ridolfi\nAcciaiuoli          0            0      1     0       0     0       0\nAlbizzi             1            0      1     0       0     0       0\nBarbadori           0            0      1     0       0     0       0\nBischeri            1            0      0     0       1     0       0\nCastellani          0            0      0     0       1     0       0\nGinori              0            0      0     0       0     0       0\nGuadagni            0            1      0     0       0     0       0\nLamberteschi        1            0      0     0       0     0       0\nMedici              0            0      0     0       0     0       1\nPazzi               0            0      0     0       0     0       0\nPeruzzi             0            0      0     0       0     0       0\nPucci               0            0      0     0       0     0       0\nRidolfi             0            0      1     0       0     0       0\nSalviati            0            0      1     1       0     0       0\nStrozzi             0            0      0     0       1     0       1\nTornabuoni          1            0      1     0       0     0       1\n             Salviati Strozzi Tornabuoni\nAcciaiuoli          0       0          0\nAlbizzi             0       0          0\nBarbadori           0       0          0\nBischeri            0       1          0\nCastellani          0       1          0\nGinori              0       0          0\nGuadagni            0       0          1\nLamberteschi        0       0          0\nMedici              1       0          1\nPazzi               1       0          0\nPeruzzi             0       1          0\nPucci               0       0          0\nRidolfi             0       1          1\nSalviati            0       0          0\nStrozzi             0       0          0\nTornabuoni          0       0          0\n\nFollowing the script, I’ve created both a statnet and igraph network\nobject from the dataset (adjancecy matrix).\n\n\nnetwork_statnet <- network(network_adjacencey, direct = FALSE)\n\n\n\n\n\nnetwork_igraph <- graph_from_adjacency_matrix(network_adjacencey, mode = \"upper\", weighted = NULL)\n\n\n\nList of the objects available:\n\n\nls()\n\n\n[1] \"flo\"                \"network_adjacencey\" \"network_igraph\"    \n[4] \"network_statnet\"   \n\nWe already know that the Florentine Families dataset is in the format\nof a matrix. In terms of network size, the network has 16 vertices or\nnodes (16 families) connected by 20 edges (representing ties of\nmarriage, in this case).\n\n\nprint(network_statnet)\n\n\n Network attributes:\n  vertices = 16 \n  directed = FALSE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 20 \n    missing edges= 0 \n    non-missing edges= 20 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nWhen it comes to network features, we learn from running the codes\nbelow that the network is unweighted/binary (with 0 and 1 inidicating\nthe absence and presence of a marriage tie, respectively), undirected\n(meaning that the relationship between nodes is inherently symmetric, as\nmarriage relationships are), and single/not bipartite.\n\n\nis_weighted(network_igraph)\n\n\n[1] FALSE\n\n\n\nis_directed(network_igraph)\n\n\n[1] FALSE\n\n\n\nis_bipartite(network_igraph)\n\n\n[1] FALSE\n\nNetwork attributes:\n\n\nnetwork::list.vertex.attributes(network_statnet)\n\n\n[1] \"na\"           \"vertex.names\"\n\n\n\nnetwork::list.edge.attributes(network_statnet)\n\n\n[1] \"na\"\n\nNetwork structure comments\n\n\nsna::dyad.census(network_statnet)\n\n\n     Mut Asym Null\n[1,]  20    0  100\n\nSince the ties are undirected, the dyad census command confirms the\nexpected - that there are no assymetric edges. In ohter words, that all\nedges are reciprocal/mutual.\n\n\nsna::triad.census(network_statnet, mode = \"graph\")\n\n\n       0   1  2 3\n[1,] 324 195 38 3\n\n\n\nsum(sna::triad.census(network_statnet, mode = \"graph\"))\n\n\n[1] 560\n\nThe statnet command allowed me to indicate that the netwrok is\nundirected with the option mode=“graph”. There are 4 undirected triads,\nfor a total number of 560.\nHow transitive are the relationships? What proportion of the\nconnected triads are complete?\nLocal clustering (below)\n\n\ntransitivity(network_igraph, type = \"average\")\n\n\n[1] 0.2181818\n\nGlobal clustering (below)\n\n\ntransitivity(network_igraph, type = \"global\")\n\n\n[1] 0.1914894\n\nLocal clustering is higher than global clustering, but overall low\nproportion of connected triads that are complete, I think. But I am\nhaving difficulties understanding/explaining what this means in this\nmarriage dataset.\n\n\ngtrans(network_statnet)\n\n\n[1] 0.1914894\n\nAverage path length in whole network:\n\n\naverage.path.length(network_igraph, directed = F)\n\n\n[1] 2.485714\n\n\n\nnames(igraph::components(network_igraph))\n\n\n[1] \"membership\" \"csize\"      \"no\"        \n\n\n\nigraph::components(network_igraph)$no\n\n\n[1] 2\n\nThe network has 2 components…\n\n\nigraph::components(network_igraph)$csize\n\n\n[1] 15  1\n\n… 1 of the components is larger, with 15 members and the other has\none single member.\n\n\nisolates(network_statnet)\n\n\n[1] 12\n\nThere are 12 isolates in the network - 12 nodes that have no link to\nthe rest of the network.\n\n\nas.vector(network_statnet%v%'vertex.names')[c(isolates(network_statnet))]\n\n\n[1] \"Pucci\"\n\nWhen we retrieve the names of the isolates, they all refer to the\nPucci family, which is not linked by marriage to any of the other\nFlorentine families.\nDistill is a publication format for scientific and technical writing,\nnative to the web.\nLearn more about using Distill for R Markdown at https://rstudio.github.io/distill.\n\n\n\n",
    "preview": {},
    "last_modified": "2022-02-17T13:45:38-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httpsrpubscomlbateshaus862879/",
    "title": "Week 2 Assignment",
    "description": "An exploration of the Sampson's Monks dataset.",
    "author": [
      {
        "name": "Lissie  Bates-Haus, Ph.D.",
        "url": "https://github.com/lbateshaus"
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\nIn this assignment, I will be exploring the Sampson’s Monks dataset.\nFirst, I utilized the provided Import Script shared in the Google Classroom to import the data and create the relevant data formats to interact with igraph and statnet.\n\n\n#This script imports the sampson monk dataset from the ergm package.\n\n#Let's load the libraries you need (install them first if you need to)\n  if(\"statnet\" %in% rownames(installed.packages()) == FALSE) {install.packages(\"statnet\")}\n  if(\"igraph\"   %in% rownames(installed.packages()) == FALSE) {install.packages(\"igraph\")}\n  if(\"intergraph\"   %in% rownames(installed.packages()) == FALSE) {install.packages(\"intergraph\")}\n  \n  \n  library(statnet)\n  library(igraph)\n  library(intergraph)\n  \n#Lets read the data into the enviroment. This will import it as a \n  data(\"sampson\", package = \"ergm\")\n  network_statnet <- samplike\n  rm(samplike)\n\n#Let's create an edgelist version\n  network_edgelist <- as.data.frame(as.edgelist(network_statnet))\n  network_edgelist$nominaations <- network_statnet%e%'nominations'\n  \n#Let's create a dataframe of node attributes\n  network_nodes <- data.frame(cloisterville = network_statnet%v%'cloisterville',\n                              group         = network_statnet%v%'group',\n                              names         = network_statnet%v%'vertex.names'\n  )\n\n  \n#Finaly, lets make an igraph version\n  network_igraph <- asIgraph(network_statnet)\n\n\n\nInformation about the network data can be accessed by the command: “?sampson”\nFirst, using igraph:\n\n\ndim(network_edgelist)\n\n\n[1] 88  3\n\nThe dim() command tells us that we have a dataframe (called network_edgelist) which has 88 observations (rows) of 3 variables, which tells us that this (as the name indicates from the Import Script) an edgelist and not an adjacency matrix (which would be a square dataframe).\n\n\nis_bipartite(network_igraph)\n\n\n[1] FALSE\n\nis_directed(network_igraph)\n\n\n[1] TRUE\n\nis_weighted(network_igraph)\n\n\n[1] FALSE\n\nFrom these commands, we learn that this dataset is not bipartite, it is directed, and it is not weighted.\n\n\nvertex_attr_names(network_igraph)\n\n\n[1] \"cloisterville\" \"group\"         \"na\"            \"vertex.names\" \n\nFrom here we learn that our nodes have the following attributes (meaning, additional information available about each node): Cloisterville, Group, NA and vertex.names.\nNote: we have also created a Nodes dataframe, which has three columns: cloisterville, group and names. It’s not clear to me what the NA attribute is.\n\n\nedge_attr_names(network_igraph)\n\n\n[1] \"na\"          \"nominations\"\n\nOur edge attributes include na and nominations. In this case, the nominations value is the “the number of times (out of 3) that monk A nominated monk B.”\nWe can also utilize the statnet package to learn about our network:\n\n\nsummary(network_statnet)\n\n\nNetwork attributes:\n  vertices = 18\n  directed = TRUE\n  hyper = FALSE\n  loops = FALSE\n  multiple = FALSE\n total edges = 88 \n   missing edges = 0 \n   non-missing edges = 88 \n density = 0.2875817 \n\nVertex attributes:\n\n cloisterville:\n   logical valued attribute\n   attribute summary:\n   Mode   FALSE    TRUE \nlogical      12       6 \n\n group:\n   character valued attribute\n   attribute summary:\n   Loyal Outcasts    Turks \n       7        4        7 \n  vertex.names:\n   character valued attribute\n   18 valid vertex names\n\nEdge attributes:\n\n nominations:\n   numeric valued attribute\n   attribute summary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   1.000   2.000   1.909   3.000   3.000 \n\nNetwork edgelist matrix:\n      [,1] [,2]\n [1,]    5    1\n [2,]    7    1\n [3,]    1    2\n [4,]    3    2\n [5,]   12    2\n [6,]   15    2\n [7,]    1    3\n [8,]    5    4\n [9,]    1    5\n[10,]    4    5\n[11,]    6    5\n[12,]   13    7\n[13,]    9    8\n[14,]   10    8\n[15,]   11    8\n[16,]    8    9\n[17,]   10    9\n[18,]    8   10\n[19,]   14   12\n[20,]   10   13\n[21,]   18   13\n[22,]    2   15\n[23,]   16   15\n[24,]    9   16\n[25,]   18   17\n[26,]   17   18\n[27,]    2    1\n[28,]    3    1\n[29,]    6    1\n[30,]    8    1\n[31,]   12    1\n[32,]   14    1\n[33,]   15    1\n[34,]   16    1\n[35,]   18    1\n[36,]    7    2\n[37,]    8    2\n[38,]   14    2\n[39,]   16    2\n[40,]   17    2\n[41,]   18    2\n[42,]   17    3\n[43,]   18    3\n[44,]    6    4\n[45,]    8    4\n[46,]   10    4\n[47,]   11    4\n[48,]    9    5\n[49,]   10    5\n[50,]   11    5\n[51,]   13    5\n[52,]   15    5\n[53,]    4    6\n[54,]    8    6\n[55,]    2    7\n[56,]   12    7\n[57,]   15    7\n[58,]   16    7\n[59,]   18    7\n[60,]    1    8\n[61,]    7    8\n[62,]    5    9\n[63,]    6    9\n[64,]    4   10\n[65,]    4   11\n[66,]    5   11\n[67,]   14   11\n[68,]    1   12\n[69,]    2   12\n[70,]    7   12\n[71,]    9   12\n[72,]   15   12\n[73,]   16   12\n[74,]    3   13\n[75,]    5   13\n[76,]   17   13\n[77,]    1   14\n[78,]    2   14\n[79,]   10   14\n[80,]   11   14\n[81,]   12   14\n[82,]   15   14\n[83,]   14   15\n[84,]    7   16\n[85,]   11   16\n[86,]    3   17\n[87,]    3   18\n[88,]   13   18\n\nFrom here, we’ll run some assessments based on our Week 2 tutorial.\nFirst, we’ll run a dyad census:\n\n\nigraph::dyad.census(network_igraph)\n\n\n$mut\n[1] 28\n\n$asym\n[1] 32\n\n$null\n[1] 93\n\nThere are 153 possible combinations of dyads in a group of 18 people. What this tells us that of those 153 combinations, only 28 are mutual (where A chooses B and B chooses A). Another 32 are assymmetic, meaning only one pair of the dyad chooses another, and 93, or more than 60% are null.\nNext, we’ll look at a triad census (note: there are 816 possible triads in this network). We’ll confirm this:\n\n\nsum(sna::triad.census(network_statnet, mode=\"graph\"))\n\n\n[1] 816\n\n\n\n#Classify all triads in the network: statnet\n#note: omit the 'mode' option for a directed network\nsna::triad.census(network_statnet)\n\n\n     003 012 102 021D 021U 021C 111D 111U 030T 030C 201 120D 120U\n[1,] 167 205 190   12   24   24   68   34    5    0  35   15    6\n     120C 210 300\n[1,]    5  18   8\n\n\n\n#get network transitivity: igraph\ntransitivity(network_igraph)\n\n\n[1] 0.4646739\n\nthis measure states that about 46.5% of the triads in our network are connected. However, this is a directed network.\n\n\ngtrans(network_statnet)\n\n\n[1] 0.4074074\n\nWe can look at global vs local transitivity as well.\n\n\ntransitivity(network_igraph, type=\"global\")\n\n\n[1] 0.4646739\n\ntransitivity(network_igraph, type=\"average\")\n\n\n[1] 0.4925926\n\n\n\n\n",
    "preview": {},
    "last_modified": "2022-02-17T13:44:53-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httpsrpubscomlbateshaus867200/",
    "title": "Week 4 Data Exploration",
    "description": "An exploration of centrality and centralization in the Florentine Families dataset",
    "author": [
      {
        "name": "Lissie Bates-Haus",
        "url": "https://github.com/lbateshaus"
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\nFirst: copy over the import script provided:\n\n#################################################################################################\n\"Florentine Families.R\" has imported a network of weddings among powerful Florentine families. \n\nThis is a small, unweighted, undirected network stored as an adjacency matrix with no additional node or edge attributes. For more information use \"?flo\".\n\nThe import script has created three objects that represent the network:\n     -network_adjacency     (an adjacency matrix containing edges and node names)\n     -network_igraph        (an igraph object)\n     -network_statnet       (a network object compatable with statnet packages like sna & ergm)\n\nEach object name starts, quite generically, with \"network_\" and ends with the type of object it is. Note that the names are generic so that they are  compatable with other scripts you will use in this course. Feel free to rename the objects for your purposes. \n################################################################################################\n\nA brief description of the network:\n\n Network attributes:\n  vertices = 16 \n  directed = FALSE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 20 \n    missing edges= 0 \n    non-missing edges= 20 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n[1] FALSE\n\n\n[1] \"name\"\ncharacter(0)\n\nNodes are the names of 16 prominent families in Florentine during the earily 1400s. Ties are marriage connections between two families. This is an unweighted (binary), undirected graph.\nFirst, we’ll take a brief look at the structure of this network.\n\n[1] \"membership\" \"csize\"      \"no\"        \n[1] 2\n[1] 15  1\n     Mut Asym Null\n[1,]  20    0  100\n     003 012 102 021D 021U 021C 111D 111U 030T 030C 201 120D 120U\n[1,] 324   0 195    0    0    0    0    0    0    0  38    0    0\n     120C 210 300\n[1,]    0   0   3\n[1] 0.1914894\n\nFrom here, we see there are two components in this graph: one consisting of fifteen of the elements, and one consisting of one (one isolate). This is an undirected graph so there are no asymmetrical dyads. Our global transitivity statistic is approximately 0.191.\n\n\n\nThis plot is a visual representation of our two-component network, with 15 nodes conneted and 1 isolate (the Pucci family).\nNow we’ll run some measures of centrality.\n\n           name degree indegree outdegree      eigen   Bonacich\n1    Acciaiuoli      2        1         1 0.13215429 -0.3796632\n2       Albizzi      6        3         3 0.24395611 -2.0881476\n3     Barbadori      4        2         2 0.21170525 -1.5186528\n4      Bischeri      6        3         3 0.28280009  0.0000000\n5    Castellani      6        3         3 0.25902617 -1.3288212\n6        Ginori      2        1         1 0.07492271 -1.8983160\n7      Guadagni      8        4         4 0.28911560 -0.1898316\n8  Lamberteschi      2        1         1 0.08879189  0.0000000\n9        Medici     12        6         6 0.43030809 -0.5694948\n10        Pazzi      2        1         1 0.04481344  0.0000000\n11      Peruzzi      6        3         3 0.27573037 -0.5694948\n12        Pucci      0        0         0 0.00000000  0.0000000\n13      Ridolfi      6        3         3 0.34155264  1.3288212\n14     Salviati      4        2         2 0.14591720 -0.1898316\n15      Strozzi      8        4         4 0.35598045  0.1898316\n16   Tornabuoni      6        3         3 0.32584230  1.1389896\n          rc   eigen.rc        dc   eigen.dc\n1  0.1666667 0.02202572 0.8333333 0.11012858\n2  0.2727273 0.06653348 0.7272727 0.17742262\n3  0.2222222 0.04704561 0.7777778 0.16465964\n4  0.2727273 0.07712730 0.7272727 0.20567279\n5  0.3333333 0.08634206 0.6666667 0.17268411\n6  0.3333333 0.02497424 0.6666667 0.04994847\n7  0.4000000 0.11564624 0.6000000 0.17346936\n8  0.2500000 0.02219797 0.7500000 0.06659392\n9  0.4285714 0.18441775 0.5714286 0.24589034\n10 0.5000000 0.02240672 0.5000000 0.02240672\n11 0.3000000 0.08271911 0.7000000 0.19301126\n12 0.0000000 0.00000000 1.0000000 0.00000000\n13 0.2307692 0.07881984 0.7692308 0.26273280\n14 0.2857143 0.04169063 0.7142857 0.10422657\n15 0.3333333 0.11866015 0.6666667 0.23732030\n16 0.2307692 0.07519438 0.7692308 0.25064792\n\nThe question is, now that we’ve calculated all of these scores, what do we do with them?\nIf we simply sort by degree:\n\n           name degree indegree outdegree      eigen   Bonacich\n1        Medici     12        6         6 0.43030809 -0.5694948\n2      Guadagni      8        4         4 0.28911560 -0.1898316\n3       Strozzi      8        4         4 0.35598045  0.1898316\n4       Albizzi      6        3         3 0.24395611 -2.0881476\n5      Bischeri      6        3         3 0.28280009  0.0000000\n6    Castellani      6        3         3 0.25902617 -1.3288212\n7       Peruzzi      6        3         3 0.27573037 -0.5694948\n8       Ridolfi      6        3         3 0.34155264  1.3288212\n9    Tornabuoni      6        3         3 0.32584230  1.1389896\n10    Barbadori      4        2         2 0.21170525 -1.5186528\n11     Salviati      4        2         2 0.14591720 -0.1898316\n12   Acciaiuoli      2        1         1 0.13215429 -0.3796632\n13       Ginori      2        1         1 0.07492271 -1.8983160\n14 Lamberteschi      2        1         1 0.08879189  0.0000000\n15        Pazzi      2        1         1 0.04481344  0.0000000\n16        Pucci      0        0         0 0.00000000  0.0000000\n          rc   eigen.rc        dc   eigen.dc\n1  0.4285714 0.18441775 0.5714286 0.24589034\n2  0.4000000 0.11564624 0.6000000 0.17346936\n3  0.3333333 0.11866015 0.6666667 0.23732030\n4  0.2727273 0.06653348 0.7272727 0.17742262\n5  0.2727273 0.07712730 0.7272727 0.20567279\n6  0.3333333 0.08634206 0.6666667 0.17268411\n7  0.3000000 0.08271911 0.7000000 0.19301126\n8  0.2307692 0.07881984 0.7692308 0.26273280\n9  0.2307692 0.07519438 0.7692308 0.25064792\n10 0.2222222 0.04704561 0.7777778 0.16465964\n11 0.2857143 0.04169063 0.7142857 0.10422657\n12 0.1666667 0.02202572 0.8333333 0.11012858\n13 0.3333333 0.02497424 0.6666667 0.04994847\n14 0.2500000 0.02219797 0.7500000 0.06659392\n15 0.5000000 0.02240672 0.5000000 0.02240672\n16 0.0000000 0.00000000 1.0000000 0.00000000\n\nWe find, unsurprisingly, that the Medici family has the highest overall degree measure (12) as well as both the highest in- and out-degree measures, which suggest to me that the Medici family is the most highly connected of the Florentine Families. They also have the highest eigenvalue measure, which suggests again that they are most centrally connected and that they are connected to the most centrally connected other families.\nOf note is the Bonacich measure:\n\n           name degree indegree outdegree      eigen   Bonacich\n1       Ridolfi      6        3         3 0.34155264  1.3288212\n2    Tornabuoni      6        3         3 0.32584230  1.1389896\n3       Strozzi      8        4         4 0.35598045  0.1898316\n4      Bischeri      6        3         3 0.28280009  0.0000000\n5  Lamberteschi      2        1         1 0.08879189  0.0000000\n6         Pazzi      2        1         1 0.04481344  0.0000000\n7         Pucci      0        0         0 0.00000000  0.0000000\n8      Guadagni      8        4         4 0.28911560 -0.1898316\n9      Salviati      4        2         2 0.14591720 -0.1898316\n10   Acciaiuoli      2        1         1 0.13215429 -0.3796632\n11       Medici     12        6         6 0.43030809 -0.5694948\n12      Peruzzi      6        3         3 0.27573037 -0.5694948\n13   Castellani      6        3         3 0.25902617 -1.3288212\n14    Barbadori      4        2         2 0.21170525 -1.5186528\n15       Ginori      2        1         1 0.07492271 -1.8983160\n16      Albizzi      6        3         3 0.24395611 -2.0881476\n          rc   eigen.rc        dc   eigen.dc\n1  0.2307692 0.07881984 0.7692308 0.26273280\n2  0.2307692 0.07519438 0.7692308 0.25064792\n3  0.3333333 0.11866015 0.6666667 0.23732030\n4  0.2727273 0.07712730 0.7272727 0.20567279\n5  0.2500000 0.02219797 0.7500000 0.06659392\n6  0.5000000 0.02240672 0.5000000 0.02240672\n7  0.0000000 0.00000000 1.0000000 0.00000000\n8  0.4000000 0.11564624 0.6000000 0.17346936\n9  0.2857143 0.04169063 0.7142857 0.10422657\n10 0.1666667 0.02202572 0.8333333 0.11012858\n11 0.4285714 0.18441775 0.5714286 0.24589034\n12 0.3000000 0.08271911 0.7000000 0.19301126\n13 0.3333333 0.08634206 0.6666667 0.17268411\n14 0.2222222 0.04704561 0.7777778 0.16465964\n15 0.3333333 0.02497424 0.6666667 0.04994847\n16 0.2727273 0.06653348 0.7272727 0.17742262\n\nThis seems to be capturing something different about network position than the eigen score, and on this measure, the Medici family is at number 11. Per the igraph documentation:\n“…positive values imply that vertices become more powerful as their alters become more powerful (as occurs in cooperative relations), while negative values imply that vertices become more powerful only as their alters become weaker (as occurs in competitive or antagonistic relations).”\nOnly three families have positive Bonacich scores (I am not sure how to interpret a Bonacich score of 0?).\nThe last measure I’ll look at is the reflected and derived centrality scores. Note: a higher score of eigen reflected centrality indicates the node may occupy a hub position.\n\n           name degree indegree outdegree      eigen   Bonacich\n1        Medici     12        6         6 0.43030809 -0.5694948\n2       Strozzi      8        4         4 0.35598045  0.1898316\n3      Guadagni      8        4         4 0.28911560 -0.1898316\n4    Castellani      6        3         3 0.25902617 -1.3288212\n5       Peruzzi      6        3         3 0.27573037 -0.5694948\n6       Ridolfi      6        3         3 0.34155264  1.3288212\n7      Bischeri      6        3         3 0.28280009  0.0000000\n8    Tornabuoni      6        3         3 0.32584230  1.1389896\n9       Albizzi      6        3         3 0.24395611 -2.0881476\n10    Barbadori      4        2         2 0.21170525 -1.5186528\n11     Salviati      4        2         2 0.14591720 -0.1898316\n12       Ginori      2        1         1 0.07492271 -1.8983160\n13        Pazzi      2        1         1 0.04481344  0.0000000\n14 Lamberteschi      2        1         1 0.08879189  0.0000000\n15   Acciaiuoli      2        1         1 0.13215429 -0.3796632\n16        Pucci      0        0         0 0.00000000  0.0000000\n          rc   eigen.rc        dc   eigen.dc\n1  0.4285714 0.18441775 0.5714286 0.24589034\n2  0.3333333 0.11866015 0.6666667 0.23732030\n3  0.4000000 0.11564624 0.6000000 0.17346936\n4  0.3333333 0.08634206 0.6666667 0.17268411\n5  0.3000000 0.08271911 0.7000000 0.19301126\n6  0.2307692 0.07881984 0.7692308 0.26273280\n7  0.2727273 0.07712730 0.7272727 0.20567279\n8  0.2307692 0.07519438 0.7692308 0.25064792\n9  0.2727273 0.06653348 0.7272727 0.17742262\n10 0.2222222 0.04704561 0.7777778 0.16465964\n11 0.2857143 0.04169063 0.7142857 0.10422657\n12 0.3333333 0.02497424 0.6666667 0.04994847\n13 0.5000000 0.02240672 0.5000000 0.02240672\n14 0.2500000 0.02219797 0.7500000 0.06659392\n15 0.1666667 0.02202572 0.8333333 0.11012858\n16 0.0000000 0.00000000 1.0000000 0.00000000\n\nBy this metric, the Medici family is a hub, as well as the Strozzi and Guadagni families. If we look at our plot again, this makes sense.\n\n\n\nRecall that nodes with higher eigen derived centrality scores may occupy a bridge position.\n\n           name degree indegree outdegree      eigen   Bonacich\n1       Ridolfi      6        3         3 0.34155264  1.3288212\n2    Tornabuoni      6        3         3 0.32584230  1.1389896\n3        Medici     12        6         6 0.43030809 -0.5694948\n4       Strozzi      8        4         4 0.35598045  0.1898316\n5      Bischeri      6        3         3 0.28280009  0.0000000\n6       Peruzzi      6        3         3 0.27573037 -0.5694948\n7       Albizzi      6        3         3 0.24395611 -2.0881476\n8      Guadagni      8        4         4 0.28911560 -0.1898316\n9    Castellani      6        3         3 0.25902617 -1.3288212\n10    Barbadori      4        2         2 0.21170525 -1.5186528\n11   Acciaiuoli      2        1         1 0.13215429 -0.3796632\n12     Salviati      4        2         2 0.14591720 -0.1898316\n13 Lamberteschi      2        1         1 0.08879189  0.0000000\n14       Ginori      2        1         1 0.07492271 -1.8983160\n15        Pazzi      2        1         1 0.04481344  0.0000000\n16        Pucci      0        0         0 0.00000000  0.0000000\n          rc   eigen.rc        dc   eigen.dc\n1  0.2307692 0.07881984 0.7692308 0.26273280\n2  0.2307692 0.07519438 0.7692308 0.25064792\n3  0.4285714 0.18441775 0.5714286 0.24589034\n4  0.3333333 0.11866015 0.6666667 0.23732030\n5  0.2727273 0.07712730 0.7272727 0.20567279\n6  0.3000000 0.08271911 0.7000000 0.19301126\n7  0.2727273 0.06653348 0.7272727 0.17742262\n8  0.4000000 0.11564624 0.6000000 0.17346936\n9  0.3333333 0.08634206 0.6666667 0.17268411\n10 0.2222222 0.04704561 0.7777778 0.16465964\n11 0.1666667 0.02202572 0.8333333 0.11012858\n12 0.2857143 0.04169063 0.7142857 0.10422657\n13 0.2500000 0.02219797 0.7500000 0.06659392\n14 0.3333333 0.02497424 0.6666667 0.04994847\n15 0.5000000 0.02240672 0.5000000 0.02240672\n16 0.0000000 0.00000000 1.0000000 0.00000000\n\nBy this measure, the Ridolfi and Tornabuoni occupy bridge positions. Of note is that the Medici family is also high on this list, which perhaps speaks to the centrality of that family, regardless of measure.\n\n\n\n",
    "preview": "posts/httpsrpubscomlbateshaus867200/distill-preview.png",
    "last_modified": "2022-02-17T13:46:24-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsrpubscompjsulliv34864273/",
    "title": "Networks Hw 2",
    "description": "A closer look at Enrons Emails",
    "author": [
      {
        "name": "Peter Sullivan",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\r\nLooking at Nodes and Edges:\r\n\r\n\r\nls()\r\n\r\n\r\n[1] \"network_edgelist\" \"network_igraph\"   \"network_statnet\" \r\n\r\nvcount(network_igraph)\r\n\r\n\r\n[1] 184\r\n\r\necount(network_igraph)\r\n\r\n\r\n[1] 125409\r\n\r\nprint(network_statnet)\r\n\r\n\r\n Network attributes:\r\n  vertices = 184 \r\n  directed = TRUE \r\n  hyper = FALSE \r\n  loops = FALSE \r\n  multiple = FALSE \r\n  bipartite = FALSE \r\n  total edges= 3010 \r\n    missing edges= 0 \r\n    non-missing edges= 3010 \r\n\r\n Vertex attribute names: \r\n    vertex.names \r\n\r\n Edge attribute names not shown \r\n\r\n#print(network_igraph)\r\n\r\n\r\n\r\nIt looks like the igraph and statnet variables are showing different edges. The network igraph is showing 184 nodes and 125409 edges. The network statnet is showing 184 nodes, and 3010 edges.\r\n\r\nWeighted, Directed, Single Mode Network?\r\n\r\n\r\nis_bipartite(network_igraph)\r\n\r\n\r\n[1] FALSE\r\n\r\nis_directed(network_igraph)\r\n\r\n\r\n[1] TRUE\r\n\r\nis_weighted(network_igraph)\r\n\r\n\r\n[1] FALSE\r\n\r\nUsing the Network Igraph set, we have a single mode network, which is directed, and is not weighted.\r\n\r\nLooking at Vertex and Edge Attributes:\r\n\r\n\r\nvertex_attr_names(network_igraph)\r\n\r\n\r\n[1] \"Email\" \"Name\"  \"Note\" \r\n\r\nnetwork::list.vertex.attributes(network_statnet)\r\n\r\n\r\n[1] \"na\"           \"vertex.names\"\r\n\r\nedge_attr_names(network_igraph)\r\n\r\n\r\n[1] \"Time\"      \"Reciptype\" \"Topic\"     \"LDC_topic\"\r\n\r\nnetwork::list.edge.attributes(network_statnet)\r\n\r\n\r\n[1] \"LDC_topic\"      \"LDC_topic_desc\" \"LDC_topic_name\"\r\n[4] \"na\"             \"Reciptype\"      \"Time\"          \r\n[7] \"Topic\"         \r\n\r\nIgraph Attribute Names: Email, Name, Note\r\nIgraph edge names: Time, Reciptype, Topic, LDC_topic\r\nStatnet attribute names: na, vertex.names\r\nstatnet edge names: LDC_topic, LDC_topic_desc, LDC_topic_name, na, Reciptype, Time, Topic\r\n\r\nAccessing Attribute DATA:\r\n\r\n\r\nV(network_igraph)$Name %>% head()\r\n\r\n\r\n[1] \"Albert Meyers\"    \"Thomas Martin\"    \"Andrea Ring\"     \r\n[4] \"Andrew Lewis\"     \"Andy Zipper\"      \"Jeffrey Shankman\"\r\n\r\nV(network_igraph)$Email %>% head()\r\n\r\n\r\n[1] \"albert.meyers\" \"a..martin\"     \"andrea.ring\"   \"andrew.lewis\" \r\n[5] \"andy.zipper\"   \"a..shankman\"  \r\n\r\nV(network_igraph)$Note %>% head()\r\n\r\n\r\n[1] \"Employee, Specialist\"         \"Vice President\"              \r\n[3] \"NA\"                           \"Director\"                    \r\n[5] \"Vice President, Enron Online\" \"President, Enron Global Mkts\"\r\n\r\n(network_igraph)$Carrier %>% head()\r\n\r\n\r\nNULL\r\n\r\nhead(network_statnet %v% \"vertex.names\")\r\n\r\n\r\n[1] 1 2 3 4 5 6\r\n\r\nhead(network_statnet %e% \"Time\")\r\n\r\n\r\n[1] \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\"\r\n[4] \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\"\r\n\r\nhead(network_statnet %e% \"LDC_topic\")\r\n\r\n\r\n[1] \"-1\" \"-1\" \"-1\" \"-1\" \"-1\" \"-1\"\r\n\r\n\r\nSummarizing Attribute DATA\r\n\r\n\r\nsummary(E(network_igraph)$Time)\r\n\r\n\r\n   Length     Class      Mode \r\n   125409 character character \r\n\r\nsummary(network_statnet %e% \"Distance\")\r\n\r\n\r\nLength  Class   Mode \r\n     0   NULL   NULL \r\n\r\n #### Dyad Census\r\n\r\n\r\nigraph::dyad.census(network_igraph)\r\n\r\n\r\n$mut\r\n[1] 30600\r\n\r\n$asym\r\n[1] 64208\r\n\r\n$null\r\n[1] -77972\r\n\r\nsna::dyad.census(network_statnet)\r\n\r\n\r\n     Mut Asym  Null\r\n[1,] 913 1184 14739\r\n\r\nThe dyad census for null using igraph is coming up -77,972. This seems wrong.\r\n\r\nTriad Census\r\n\r\n\r\nigraph::triad.census(network_igraph)\r\n\r\n\r\n [1] 700234  19530 249694   8409   2695   5176   7060  13227   1180\r\n[10]     59   6781   1023   1137    786   2782   1611\r\n\r\nsna::triad.census(network_statnet)\r\n\r\n\r\n        003    012    102 021D 021U 021C 111D  111U 030T 030C  201\r\n[1,] 700234 150250 118974 8409 2695 5176 7060 13227 1180   59 6781\r\n     120D 120U 120C  210  300\r\n[1,] 1023 1137  786 2782 1611\r\n\r\n\r\nTransitivity\r\n\r\n\r\ntransitivity(network_igraph)\r\n\r\n\r\n[1] 0.3725138\r\n\r\ngtrans(network_statnet)\r\n\r\n\r\n[1] 0.3580924\r\n\r\ntransitivity(network_igraph, type = \"global\")\r\n\r\n\r\n[1] 0.3725138\r\n\r\ntransitivity(network_igraph, type = \"average\")\r\n\r\n\r\n[1] 0.5055302\r\n\r\ntransitivity(network_igraph, type = \"local\") %>% head()\r\n\r\n\r\n[1] 0.0023288309 0.0013788877 0.0008393993 0.0031740105 0.0007847921\r\n[6] 0.0017129438\r\n\r\nThe transitivity for igraph and statnet data sets were pretty close.\r\nThe global transitivity is .3725 while the average transitivity is higher at .5. This means that actors with fewer connections will have higher transitivity. This could be due to overweighted groups or this could be similar to different departments that know a lot of people in their department, but do not know others in the other departments.\r\n\r\nLocal Transitivity\r\n\r\n\r\nNames <- V(network_igraph)$Name\r\nNames %>% head()\r\n\r\n\r\n[1] \"Albert Meyers\"    \"Thomas Martin\"    \"Andrea Ring\"     \r\n[4] \"Andrew Lewis\"     \"Andy Zipper\"      \"Jeffrey Shankman\"\r\n\r\nLocal_transivity <- transitivity(network_igraph, type = \"local\")\r\n\r\ntransitivity_tibble <- tibble(Names = Names, Local_transivity = Local_transivity)\r\n\r\ntransitivity_tibble %>% arrange(desc(Local_transivity))\r\n\r\n\r\n# A tibble: 184 x 2\r\n   Names            Local_transivity\r\n   <chr>                       <dbl>\r\n 1 Thomas Martin             0.0571 \r\n 2 Joe Quenet                0.0179 \r\n 3 Mark Haedicke             0.0159 \r\n 4 Kim Ward                  0.0157 \r\n 5 Peter Keavey              0.0146 \r\n 6 Monika Causholli          0.0134 \r\n 7 David Delainey            0.00917\r\n 8 Susan Pereira             0.00909\r\n 9 Larry Campbell            0.00810\r\n10 NA                        0.00641\r\n# ... with 174 more rows\r\n\r\ngtrans(network_statnet)\r\n\r\n\r\n[1] 0.3580924\r\n\r\nFor some reason I am unable to pull local transitivity by type using the method used in HW 1 (vids = V()). I’m not sure if these local transivitys are correct. I ordered it by descending so the largest transivity would be thomas Martin at .05.\r\n\r\nDistances in the Network\r\n\r\n\r\n#distances(network_igraph, \"Thomas Martin\",\"Andrea Ring\")\r\n\r\n\r\n\r\naverage.path.length(network_igraph)\r\n\r\n\r\n[1] 2.390464\r\n\r\naverage.path.length(network_igraph, directed = F)\r\n\r\n\r\n[1] 2.085787\r\n\r\nI took these vertex names, so I’m a bit confused why these are not showing up correctly.\r\n\r\nIdentifying Isolates\r\n\r\n\r\nigraph::components(network_igraph)\r\n\r\n\r\n$membership\r\n  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n [33] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n [65] 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n [97] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 1 1 1\r\n[129] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n[161] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n\r\n$csize\r\n[1] 182   1   1\r\n\r\n$no\r\n[1] 3\r\n\r\n#Isolates\r\nisolates(network_statnet)\r\n\r\n\r\n[1]  72 118\r\n\r\nas.vector(network_statnet %v% \"vertex.names\")[c(isolates(network_statnet))]\r\n\r\n\r\n[1]  72 118\r\n\r\nFor some reason it seems that Network statnet vertex.names is only showing numbers, not actually the names. I wonder if the statnet was set up incorrectly.\r\nThere are two isolates. \r\nDensity\r\n\r\n\r\ngraph.density(network_igraph)\r\n\r\n\r\n[1] 3.72443\r\n\r\nnetwork.density(network_statnet)\r\n\r\n\r\n[1] 0.08939178\r\n\r\ngraph.density(network_igraph, loops = TRUE)\r\n\r\n\r\n[1] 3.704188\r\n\r\ngden(network_statnet, diag = FALSE)\r\n\r\n\r\n[1] 0.08939178\r\n\r\nThe Igraph density is over 1, and the network density is around 9%. Very different densities.\r\n\r\nVertex Degrees\r\n\r\n\r\nigraph::degree(network_igraph) %>% head()\r\n\r\n\r\n[1] 114 428 391 104 957 381\r\n\r\nsna::degree(network_statnet) %>% head()\r\n\r\n\r\n[1] 10 32 21  9 59 30\r\n\r\nThere is a significant difference between degrees from the igraph dataset compared to the statnet data.\r\n\r\n\r\n\r\nnetwork_degree <- data.frame(Name = V(network_igraph)$Name,\r\n                             degree = igraph::degree(network_igraph, loops =FALSE))\r\nnetwork_degree %>% arrange(desc(degree)) %>% slice(1:10)\r\n\r\n\r\n              Name degree\r\n1    Jeff Dasovich  13967\r\n2    James Steffes   9404\r\n3       Tana Jones   9307\r\n4  Richard Shapiro   8994\r\n5               NA   6591\r\n6      Steven Kean   6384\r\n7    John Lavorato   6177\r\n8  Michael Grigsby   5860\r\n9      Mark Taylor   5693\r\n10  Louise Kitchen   5362\r\n\r\nJeff Dasovich has the highest number of degrees around 13K. He must be very high up in the company.\r\n\r\nDegree in Directed Networks\r\n\r\n\r\nsna::degree(network_statnet, cmode = \"indegree\")%>% head()\r\n\r\n\r\n[1]  4 21 10  6 30 17\r\n\r\nsna::degree(network_statnet, cmode = \"outdegree\") %>% head()\r\n\r\n\r\n[1]  6 11 11  3 29 13\r\n\r\nigraph::degree(network_igraph, mode =\"in\", loops = FALSE) %>% head()\r\n\r\n\r\n[1]  78 334 224  88 614 210\r\n\r\nigraph::degree(network_igraph, mode =\"out\", loops = FALSE)%>%head()\r\n\r\n\r\n[1]  36  92 167  16 325 169\r\n\r\nDegree_network <- data.frame(Name = V(network_igraph)$Name,\r\n           total_degrees = igraph::degree(network_igraph, loops = FALSE),\r\n           in_degree = igraph::degree(network_igraph, mode =\"in\", loops = FALSE),\r\n           out_degree = igraph::degree(network_igraph, mode =\"out\", loops = FALSE) ) %>% arrange(desc(total_degrees))\r\n\r\nDegree_network %>% slice(1:10)\r\n\r\n\r\n              Name total_degrees in_degree out_degree\r\n1    Jeff Dasovich         13967      2612      11355\r\n2    James Steffes          9404      4988       4416\r\n3       Tana Jones          9307      2268       7039\r\n4  Richard Shapiro          8994      6893       2101\r\n5               NA          6591      2698       3893\r\n6      Steven Kean          6384      2676       3708\r\n7    John Lavorato          6177      3352       2825\r\n8  Michael Grigsby          5860      1097       4763\r\n9      Mark Taylor          5693      3694       1999\r\n10  Louise Kitchen          5362      2087       3275\r\n\r\nAs expected from someone high up in the company. They would mostly have out degree connections, with a select few in degree connections.\r\n\r\nSummary Statistics\r\n\r\n\r\nsummary(Degree_network)\r\n\r\n\r\n     Name           total_degrees       in_degree     \r\n Length:184         Min.   :    0.0   Min.   :   0.0  \r\n Class :character   1st Qu.:  212.8   1st Qu.: 150.5  \r\n Mode  :character   Median :  512.5   Median : 314.0  \r\n                    Mean   : 1184.0   Mean   : 592.0  \r\n                    3rd Qu.: 1401.2   3rd Qu.: 655.2  \r\n                    Max.   :13967.0   Max.   :6893.0  \r\n   out_degree      \r\n Min.   :    0.00  \r\n 1st Qu.:   30.75  \r\n Median :  159.00  \r\n Mean   :  591.99  \r\n 3rd Qu.:  600.50  \r\n Max.   :11355.00  \r\n\r\n\r\nDegree Distribution\r\n\r\n\r\nhist(Degree_network$total_degrees, main = \"Enron Degree Distribution\", xlab = \"Degree\")\r\n\r\n\r\n\r\nhist(Degree_network$out_degree, main =\"Enron Out-Degree Distribution\", xlab = \"Degree\")\r\n\r\n\r\n\r\nhist(Degree_network$in_degree, main = \"Enron In-Degree Distribution\", xlab = \"Degree\")\r\n\r\n\r\n\r\n\r\nMost people in the company have limited number of degrees of connections, while their are a select few with many connections.\r\nNetwork Degree Centralization\r\n\r\n\r\n#centralization(network_statnet, degree, cmode= \"indegree\")\r\n#centralization(network_statnet, degree, cmode = \"outdegree\")\r\n\r\n\r\ncentr_degree(network_igraph, loops = FALSE, mode = \"in\")$centralization\r\n\r\n\r\n[1] 34.61991\r\n\r\ncentr_degree(network_igraph, loops = FALSE, mode = \"out\")$centralization\r\n\r\n\r\n[1] 59.13566\r\n\r\nThere is a higher centralization for out-degree nodes compared to in-degree nodes.\r\n\r\n\r\n\r\n",
    "preview": "posts/httpsrpubscompjsulliv34864273/distill-preview.png",
    "last_modified": "2022-02-17T13:45:29-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsrpubscomyli210813861702/",
    "title": "Short Assignment 2",
    "description": "A new article created using the Distill format.",
    "author": [
      {
        "name": "Yifan Li",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\r\nLoad a built-in dataset from igraph.\r\n\r\n\r\n#Load the data.\r\nlibrary(igraphdata)\r\ndata(\"enron\",package=\"igraphdata\")\r\nls()\r\n\r\n\r\n[1] \"enron\"\r\n\r\nThis is an Enron email dataset has been made public by the U.S. Department of Justice. Let’s look at some of its basic descriptive statistics.\r\n\r\n\r\nlibrary(igraph)\r\n#Basic descriptive facts.\r\n#Network size\r\nvcount(enron)\r\n\r\n\r\n[1] 184\r\n\r\necount(enron)\r\n\r\n\r\n[1] 125409\r\n\r\n(ecount(enron) / vcount(enron))\r\n\r\n\r\n[1] 681.5707\r\n\r\n(ecount(enron) / (vcount(enron) * (vcount(enron) - 1)))\r\n\r\n\r\n[1] 3.72443\r\n\r\n#Find network features: \r\nis_bipartite(enron)\r\n\r\n\r\n[1] FALSE\r\n\r\nis_directed(enron)\r\n\r\n\r\n[1] TRUE\r\n\r\nis_weighted(enron)\r\n\r\n\r\n[1] FALSE\r\n\r\n#display vertex attributes\r\nvertex_attr_names(enron)\r\n\r\n\r\n[1] \"Email\" \"Name\"  \"Note\" \r\n\r\n#display edge attributes\r\nedge_attr_names(enron)\r\n\r\n\r\n[1] \"Time\"      \"Reciptype\" \"Topic\"     \"LDC_topic\"\r\n\r\n#summarize numeric network attribute\r\nhead(V(enron)$Email)\r\n\r\n\r\n[1] \"albert.meyers\" \"a..martin\"     \"andrea.ring\"   \"andrew.lewis\" \r\n[5] \"andy.zipper\"   \"a..shankman\"  \r\n\r\nhead(V(enron)$Name)\r\n\r\n\r\n[1] \"Albert Meyers\"    \"Thomas Martin\"    \"Andrea Ring\"     \r\n[4] \"Andrew Lewis\"     \"Andy Zipper\"      \"Jeffrey Shankman\"\r\n\r\nhead(V(enron)$Note)\r\n\r\n\r\n[1] \"Employee, Specialist\"         \"Vice President\"              \r\n[3] \"NA\"                           \"Director\"                    \r\n[5] \"Vice President, Enron Online\" \"President, Enron Global Mkts\"\r\n\r\nhead(E(enron)$Time)\r\n\r\n\r\n[1] \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\"\r\n[4] \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\" \"1979-12-31 21:00:00\"\r\n\r\nhead(E(enron)$Reciptype)\r\n\r\n\r\n[1] \"to\"  \"to\"  \"cc\"  \"cc\"  \"bcc\" \"bcc\"\r\n\r\nhead(E(enron)$Topic)\r\n\r\n\r\n[1] 1 1 3 3 3 3\r\n\r\nhead(E(enron)$LDC_topic)\r\n\r\n\r\n[1]  0 -1 -1 -1 -1 -1\r\n\r\nsummary(E(enron)$Topic)\r\n\r\n\r\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \r\n  0.000   1.000   1.000   1.711   3.000   3.000 \r\n\r\nsummary(E(enron)$LDC_Topic)\r\n\r\n\r\nLength  Class   Mode \r\n     0   NULL   NULL \r\n\r\nThis network has 184 nodes and 125409 edges. It is a non-bipartite, directed and unweighted network. Each node is a employee of Enron. The edge represents the email communication from one person to the other one. (Noticing it’s directed. So it is “from…to…” rather than “between”.) Each employee sent 681.57 messages on average, and averagely sent 3.72 messages to each potential receiver (collegue).\r\nEvery node has three attributes, which are Email, Name and Note. “Email” is the email address (omitting the domain name) of the person. “Name” is just the real name. “Note” is mainly about position and department.\r\nEach edge has four attributes, which are Time, Reciptype, Topic, and LDC-topic. “Time” is a string telling the when the email was sent. To make further analysis, we need to transfer the string to some kind of numeric data (which we haven’t learnt.) The “Reciptype” is how the recipient receive the email, ‘to’,‘cc’ or ‘bcc’.\r\n(Not sure about what Topic nad LDC_topic is about. Maybe categories assigned by the publisher describing types of topics.)\r\n\r\n\r\n#Classify all dyads in the network:\r\nigraph::dyad.census(enron)\r\n\r\n\r\n$mut\r\n[1] 30600\r\n\r\n$asym\r\n[1] 64208\r\n\r\n$null\r\n[1] -77972\r\n\r\nThere are 30600 mutual dyads, and 64208 asymmetric dyads. (Didn’t understand what negative 77972 means.)\r\n\r\n\r\n#Classify all triads in the network:\r\nigraph::triad_census(enron)\r\n\r\n\r\n [1] 700234  19530 249694   8409   2695   5176   7060  13227   1180\r\n[10]     59   6781   1023   1137    786   2782   1611\r\n\r\nsum(igraph::triad_census(enron))\r\n\r\n\r\n[1] 1021384\r\n\r\n(700234 / 1021384)\r\n\r\n\r\n[1] 0.6855737\r\n\r\n((19530 + 249694) / 1021384)\r\n\r\n\r\n[1] 0.2635874\r\n\r\n#get global clustering coefficient(i.e. network transitivity):\r\ntransitivity(enron, type=\"global\")\r\n\r\n\r\n[1] 0.3725138\r\n\r\n##get average local clustering coefficient:\r\ntransitivity(enron, type=\"average\")\r\n\r\n\r\n[1] 0.5055302\r\n\r\n#find average shortest path for network\r\naverage.path.length(enron,directed=F)\r\n\r\n\r\n[1] 2.085787\r\n\r\nAbove shows the census of 16 kinds of triads. Almost 69% triads are empty, and 26% are one egded. This implies a relatively loosely connected network. To learn more about the connectivity, let’s look at the transitivity. The global clustering coefficient is 0.3723, which means 37% of connected Triplets are closed, which is relatively loose. The average local clustering coefficient is 0.5055. It means on average, if two nodes are connected to a same node (two person respectively have email communication to one person), they have about 51% chance to connect to each other (communicate via email with each other.)\r\nThe local clustering coefficient is much larger than the global one, implying the network is clustering around, or concentrate to, some focus node. In other word, alters of employees who have few email communication are less likely to connect to each other than alters of employees with many other connections.(Not sure whether I understand it right. The Tuesday lecure recording link is wrong so I couldn’t watch it.)\r\nThe average geodesic distance is 2. It means onaverage, one need only one other person to have email connection to a random person in the network.\r\n\r\n\r\n#Number of components\r\nigraph::components(enron)$no \r\n\r\n\r\n[1] 3\r\n\r\n#Size of each component\r\nigraph::components(enron)$csize\r\n\r\n\r\n[1] 182   1   1\r\n\r\nThere are only 3 components in the network. 182 of the nodes are in the major componets, while there are two isolates.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-02-17T13:44:43-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httpssvirguezgithubioichrnetworksposts2022-02-02-describing-the-network-data/",
    "title": "Describing the Network Data",
    "description": "From raw data to network data",
    "author": [
      {
        "name": "Santiago Virgüez",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\nAs mentioned in the previous post, I’m working with a new database on the IAcHR rulings compiled by the PluriCourts project of the University of Oslo (Stiansen, Naurin, and Bøyum 2020). This dataset of amici actors has 425 observations of 2 variables (“Name of Amicus” and “Case ID”), indicating in which cases an amici actor participated in:\nA view of the dataset on amiciFrom raw data to an adjacency matrix\nIn order to work with this dataset, I need to put the data into a format that is suitable for network analysis. So, after cleaning the data, I create an adjacency matrix (nxn) where I can see how many times interveners have filed an amicus brief in the same case than each other. I asigned “0” to the diagonal of the matrix to ignore the ties from a node to itself.\n\n\ndata <- read.csv(\"CleanedData.csv\")\n\n#New column count\ndata$count <- 1\n\nlibrary(tidyr)\n\n#Gather the data at case level\nlev_data <- pivot_wider(data,id_cols = CaseID, names_from = `Name.of.Amicus`, values_from = count, values_fn = list(count = length), values_fill = list(count = 0))\n\n#Create the adjacency matrix\nmat <- as.matrix(lev_data[-1])\nad_matrix <- t(mat) %*% mat\ndiag(ad_matrix) <- 0\n\n\n\nAdjacency matrixDescribing the network dataset\nBefore describing the network dataset, I need first to create a network object from the dataset loaded (the adjacency network):\n\n\nlibrary(igraph)\namici_network <- graph.adjacency(ad_matrix, mode = \"undirected\", weighted = TRUE)\n\nis_directed(amici_network)\n\n\n[1] FALSE\n\nis_weighted(amici_network)\n\n\n[1] TRUE\n\nis_bipartite(amici_network)\n\n\n[1] FALSE\n\nNow, I can identify and describe content of nodes and links, and identify format of data set, Of course, from the previous steps we know that this a matrix, symmetric, and weighted. This means that each time there is a connection between two amici, each of them is filing a briefe before the court (symetrical), but these ties among amici are valued according to how many time they have intervened in the same cases.\nWe can also identify the network attributes:\n\n\n#size\nvcount(amici_network)\n\n\n[1] 403\n\necount(amici_network)\n\n\n[1] 3615\n\n#attributes names and content\nvertex_attr_names(amici_network)\n\n\n[1] \"name\"\n\nedge_attr_names(amici_network)\n\n\n[1] \"weight\"\n\nhead(V(amici_network)$name)\n\n\n[1] \"Fernando Linares Beltranena\"                                                     \n[2] \"Amnesty International\"                                                           \n[3] \"Association of the Bar of the City of New York\"                                  \n[4] \"Lawyers Committee for Human Rights\"                                              \n[5] \" The Central American Associaion of Families of Detained and Disappeared Persons\"\n[6] \"Minnesota Lawyers International Human Rights Committee\"                          \n\nhead(E(amici_network)$weight)\n\n\n[1] 2 2 1 3 1 1\n\nIt is also possible to describe the network structure:\n\n\n#Dyad census: because the ties are undirected we will expect that there is no assymetrical edges\nigraph::dyad.census(amici_network)\n\n\n$mut\n[1] 3615\n\n$asym\n[1] 0\n\n$null\n[1] 77388\n\n#Triad census\nigraph::triad_census(amici_network)\n\n\n [1] 9455588       0 1331612       0       0       0       0       0\n [9]       0       0    2600       0       0       0       0   37601\n\nIn terms of transitivity or global clustering, it is possible to see how the proption of connected triads in the network of amici that are complete is hight, meaning that almost all connected triads are transitive. Likewise, the local clustering coefficient (emphasis on low degree nodes) confirms the high transitivity of the network:\n\n\n#global clustering\ntransitivity(amici_network)\n\n\n[1] 0.9774703\n\n#local clustering coefficient\ntransitivity(amici_network, type=\"average\")\n\n\n[1] 0.9920321\n\n\n\n\n",
    "preview": {},
    "last_modified": "2022-02-17T13:44:26-05:00",
    "input_file": {}
  },
  {
    "path": "posts/httpssvirguezgithubioichrnetworksposts2022-02-16-status-and-centrality-measures-in-the-iachr-network/",
    "title": "Status and Centrality Measures in the IAcHR Network",
    "description": "A look at the status measures of the network",
    "author": [
      {
        "name": "Santiago Virgüez",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\nRecap Affiliation network\nLet’s organize the affiliation matrix (actor by case) first:\n\n\n#Affiliation network data\nlibrary(igraph)\nlibrary(tidyr)\ndata <- read.csv(\"CleanedData.csv\")\n##New column count\ndata$count <- 1\n\n##Gather the data at case level\nlev_data <- pivot_wider(data,id_cols = CaseID, names_from = `Name.of.Amicus`, \n                        values_from = count, values_fn = list(count = length), \n                        values_fill = list(count = 0))\n\n##transpose lev_data to have amici grouped by case\nlibrary(data.table)\nT_lev_data <- transpose(lev_data,)\nrownames(T_lev_data) <- colnames(lev_data)\ncolnames(T_lev_data) <- lev_data$CaseID\nT_lev_data <- T_lev_data[-c(1),]\n\n##create affiliation network graph using 'igraph'\nAff_network <- graph.incidence(T_lev_data)\n\n\n\nPloting the affiliation network\nWe haven’t provided a visualization of the affiliation network yet. Let’s plot it.\n\n\nplot(Aff_network, vertex.label=NA)\n\n\n\n\nRemember that in this affiliation network, so there are two types of nodes: one type for the amici actors and another type for the legal cases (case 16, case 18 …) to which the actors belong. Ties then connect the actors to those cases. So, as bipartite network it is better to plot the edges between the 2 types of nodes (the orange/circular nodes represent the amici actors, while the squared/blue nodes represent the cases):\n\n\nV(Aff_network)$color <- c(\"orange\", \"steel blue\")[V(Aff_network)$type+1]\nV(Aff_network)$shape <- c(\"circle\", \"square\")[V(Aff_network)$type+1]\n\nplot(Aff_network, vertex.label=NA, vertex.size=7, layout=layout.bipartite) \n\n\n\n\nDegree centrality by node{.tabset}g\nIn the last post, I presented centrality measures for the one matrix (actor x actor), which was aimed to show the ties between actors by virtue of their participation in the same cases. Nevertheless, we saw that actors such as the Colombian NGO ‘Dejusticia’ had a higher degree of centrality due to the fact that they participated in (only) one case where a greater number of other amici actors participated. These actors were not central in the amici network, they just happen to be part of a really famous case.\nSo, to have a better understanding of the centrality of the actors it is necessary to work with the affiliation network.\n\n\n#data frame for the nodes in the affiliation network\naff.nodes<-data.frame(name=V(Aff_network)$name, degree=igraph::degree(Aff_network))\n\n#data frame for the actors nodes\naff.nodes_amici <- aff.nodes[-c(404:482),]\n#data frame for the cases nodes\naff.nodes_cases <- aff.nodes[-c(1:403),]\n\n\n\nNow we can see the distribution of the centrality measures for each types of nodes. As you can see, both distributions are skewed towards zero, indicating the low degree centrality of the actors/cases.\n\n\n#distribution for actors\nhist(aff.nodes_amici$degree, main = \"Degree Distribution Actors to Cases\", xlab = \"# Cases in which an actor participated\")\n\n\n\n#distribution for cases\nhist(aff.nodes_cases$degree, main = \"Degree Distribution Cases to Actors\", xlab = \"# Actors that participated in the case\")\n\n\n\n\nWe can also see the actors and cases with the highest degree of centrality in the affiliation network:\n\n\nlibrary(dplyr)\n#top 3 actors\narrange(aff.nodes_amici, desc(degree))%>%slice(1:3)\n\n\n                                                                                                         name\nAmnesty International                                                                   Amnesty International\nMinnesota Lawyers International Human Rights Committee Minnesota Lawyers International Human Rights Committee\nThe International Human Rights Law Group                             The International Human Rights Law Group\n                                                       degree\nAmnesty International                                       9\nMinnesota Lawyers International Human Rights Committee      3\nThe International Human Rights Law Group                    3\n\n#top 3 cases\narrange(aff.nodes_cases, desc(degree))%>%slice(1:3)\n\n\n    name degree\n152  152     46\n203  203     41\n167  167     32\n\nAs expected, international organizations have a higher degree centrality, that is participation in a higher number of cases, due to the fact that they have political interests across different countries, while local NGOs focus on legal cases from their base country. In terms of the cases, it is possible to see that the ones that attracted a greater number of amicus briefs were:\nArtavia Murillo et al. (“In vitro fertilization”) v. Costa Rica. This case concerns human rights violations resulting from the State’s general prohibition of the practice of in vitro fertilization.\nAtala Riffo and Daughters v. Chile. This case concerns the discriminatory treatment and arbitrary interference in the private and family life of a lesbian mother, Ms. Karen Atala Riffo.\nNogueira de Carvalho et al. V. Brazil. Murder of Gilson Nogueira de Carvalho, a lawyer and human rights defender and the State failure to undertake an effective investigation into his death and failed to punish the responsible parties.\nEigenvector and Bonacich power centrality{.tabset}g\nWe can also compare different measures of centrality, including the eigen vector and Bonacich power. To do so, we need to add the data to the data frame of each type of node\n\n\n#eigen vector centrality\ntemp<-centr_eigen(Aff_network,directed=F)\naff.nodes$eigen<-temp$vector\n\n#bonacich power centrality\naff.nodes$bonpow <- power_centrality(Aff_network, exponent = 0.9)\n\naff.nodes_amici <- aff.nodes[-c(404:482),]\naff.nodes_cases <- aff.nodes[-c(1:403),]\n\n\n\nThen we can plot the distribution of the three measures of centrality. As you can see, there are not many central actors/cases in this network\n\n\n#plot distribution centrality measures\nlibrary(ggplot2)\naff.nodes_amici%>%\n  select(-name) %>% \n  gather() %>% \n  ggplot(aes(value)) +\n  geom_histogram() +\n  facet_wrap(~key, scales = \"free\")\n\n\n\n\nBecause the ties we are looking at are the connections between actors and cases, the eigenvector simply shows what actors are linked to the most central or ‘popular’ cases. On the other hand, the bonacich power centrality shows the actors that participated on the cases were no other people participated (therefore the actors with greater power of influence).\n\n\n#top 3 actors with highest eigenvector centrality\narrange(aff.nodes_amici, desc(eigen))%>%\n  slice(1:3)\n\n\n                                                                                                                                                                                                                                                                                       name\nCentro de Estudios of Derecho, Justicia y Sociedad (DEJUSTICIA)                                                                                                                                                             Centro de Estudios of Derecho, Justicia y Sociedad (DEJUSTICIA)\nViviana Bohórquez Monsalve, Beatriz Galli, Alma Beltra?n y Puga, A?lvaro Her-rero, Gastón Chillier, Lourdes Bascary and Agustina Ramón Michel Viviana Bohórquez Monsalve, Beatriz Galli, Alma Beltra?n y Puga, A?lvaro Her-rero, Gastón Chillier, Lourdes Bascary and Agustina Ramón Michel\nAlexandra Loría Beeche                                                                                                                                                                                                                                               Alexandra Loría Beeche\n                                                                                                                                              degree\nCentro de Estudios of Derecho, Justicia y Sociedad (DEJUSTICIA)                                                                                    2\nViviana Bohórquez Monsalve, Beatriz Galli, Alma Beltra?n y Puga, A?lvaro Her-rero, Gastón Chillier, Lourdes Bascary and Agustina Ramón Michel      1\nAlexandra Loría Beeche                                                                                                                             1\n                                                                                                                                                  eigen\nCentro de Estudios of Derecho, Justicia y Sociedad (DEJUSTICIA)                                                                               0.1577985\nViviana Bohórquez Monsalve, Beatriz Galli, Alma Beltra?n y Puga, A?lvaro Her-rero, Gastón Chillier, Lourdes Bascary and Agustina Ramón Michel 0.1473282\nAlexandra Loría Beeche                                                                                                                        0.1473282\n                                                                                                                                                  bonpow\nCentro de Estudios of Derecho, Justicia y Sociedad (DEJUSTICIA)                                                                               -0.6041584\nViviana Bohórquez Monsalve, Beatriz Galli, Alma Beltra?n y Puga, A?lvaro Her-rero, Gastón Chillier, Lourdes Bascary and Agustina Ramón Michel -0.3000833\nAlexandra Loría Beeche                                                                                                                        -0.3000833\n\n#top 3 actors with highest bonacich power centrality\narrange(aff.nodes_amici, desc(bonpow))%>%\n  slice(1:3)\n\n\n                                                                                                                                                           name\nFernando Linares Beltranena                                                                                                         Fernando Linares Beltranena\nOscar Augusto Díaz Urquizú, former Director of the Treasury Police of Guatemala Oscar Augusto Díaz Urquizú, former Director of the Treasury Police of Guatemala\nThe International Commission of Jurists                                                                                 The International Commission of Jurists\n                                                                                degree\nFernando Linares Beltranena                                                          1\nOscar Augusto Díaz Urquizú, former Director of the Treasury Police of Guatemala      1\nThe International Commission of Jurists                                              1\n                                                                                eigen\nFernando Linares Beltranena                                                         0\nOscar Augusto Díaz Urquizú, former Director of the Treasury Police of Guatemala     0\nThe International Commission of Jurists                                             0\n                                                                                  bonpow\nFernando Linares Beltranena                                                     2.624369\nOscar Augusto Díaz Urquizú, former Director of the Treasury Police of Guatemala 2.624369\nThe International Commission of Jurists                                         2.624369\n\nFinally, we can correlate the different measures of centrality. As you can see all of the measures have negative correlation with each other.\n\n\nlibrary(corrr)\nlibrary(seriation)\n\ncent.corr<-aff.nodes_amici %>% \n  select(degree,eigen,bonpow)%>%\n  correlate() %>%\n  rearrange()\n\ncent.corr\n\n\n# A tibble: 3 × 4\n  term    degree   eigen  bonpow\n  <chr>    <dbl>   <dbl>   <dbl>\n1 degree NA      -0.0194 -0.0515\n2 eigen  -0.0194 NA      -0.0402\n3 bonpow -0.0515 -0.0402 NA     \n\n\n\n\n",
    "preview": "posts/httpssvirguezgithubioichrnetworksposts2022-02-16-status-and-centrality-measures-in-the-iachr-network/status-and-centrality-measures-in-the-iachr-network_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2022-02-17T13:46:05-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpswalidmedanigithubionetworks-blogposts2022-02-02-assignment2/",
    "title": "Assignment_2",
    "description": "Network of militarized interstate disputes from 1870 to 2014. (https://correlatesofwar.org/data-sets/MIDs)",
    "author": [
      {
        "name": "Walid Medani",
        "url": "https://walidmedani.github.io/networks-blog/"
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\nNetwork Graph\n\n\n\nNetwork Size\n\n[1] 156\n[1] 1374\n\nAttributes\n\n[1] FALSE\n[1] FALSE\n[1] TRUE\n[1] \"name\"\n[1] \"weight\"\n\nNetwork isn’t bipartite nor directed however it is weighted.\nDyad & Triad Census\n\n$mut\n[1] 1374\n\n$asym\n[1] 0\n\n$null\n[1] 10716\n [1] 449446      0 144438      0      0      0      0      0      0\n[10]      0  13050      0      0      0      0  13686\n[1] 620620\n# A tibble: 1 x 3\n    Mut  Asym  Null\n  <dbl> <dbl> <dbl>\n1  1374     0 10716\n# A tibble: 1 x 5\n  Triad0 Triad1 Triad2 Triad3 Triadsum\n   <dbl>  <dbl>  <dbl>  <dbl>    <dbl>\n1 449446 144438  13050  13686   620620\n\nTransivity\n\n[1] 0.7588157\n[1] 0.6456076\n\nGlobal transivity shows a proportion of .76 of completely connected triads within the network and the density of the ego network is .65.\nGeodesic & Component structure\n\n[1] 3.038289\n[1] 4\n[1] 150   2   2   2\n\nThere are 4 components with the first comprising of 150 members and the next 3 components having only 2 members each.\nNetwork density\n\n[1] 0.1136476\n\n\n\n\n",
    "preview": "posts/httpswalidmedanigithubionetworks-blogposts2022-02-02-assignment2/assignment2_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2022-02-17T13:44:17-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpswalidmedanigithubionetworks-blogposts2022-02-07-assignment3/",
    "title": "Assignment_3",
    "description": "Degree and Centrality. (https://correlatesofwar.org/data-sets/MIDs)",
    "author": [
      {
        "name": "Walid Medani",
        "url": "https://walidmedani.github.io/networks-blog/"
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\nNetwork Graph\n\n\n\nDescription\nThere are 156 nodes within the militarized interstate dispute dataset. Edges are undirected and are defined as instances of when one state threatened, displayed, or used force directed towards the government, official representatives, official forces, property, or territory of another state.\nNetwork Density & Centralization\n\n[1] 0.1136476\n$res\n  [1] 74 56 64 60 47 63 53 51 58 55 43 59 46 62 17 22 20 63 23 36  2\n [22] 37  4 39 15  5  2  3  5  8  2 17  4  4  3  1  3  3  2  1  1  7\n [43] 41  7 13  8  5  8  8 33  5 12  3 36 23 39  2 19  6 18  6 18  7\n [64]  8  5  1  2 12  8  2  8 21  2  1  8 10  4  4  1  3  5 45 45 34\n [85] 47 54  2  7  1  1  3  2  7 45 46 45 45  1  1  1  2  1  1  1 36\n[106]  1  1  2 26  9  1  1  1  1  4  5  5 19 19 53 53 42  2  2  3  1\n[127]  7 37 37 44 38 37 44 44 37 44  3  1  3  1  1  1  1  1  3  1  1\n[148]  1  1  2  1  2  2 33 33  1\n\n$centralization\n[1] 0.3637717\n\n$theoretical_max\n[1] 24180\n\nDegrees\n\n    name degree\nUSA  USA     74\nUKG  UKG     64\nFRN  FRN     63\nRUS  RUS     63\nTUR  TUR     62\nNTH  NTH     60\n     name               degree     \n Length:156         Min.   : 1.00  \n Class :character   1st Qu.: 2.00  \n Mode  :character   Median : 7.00  \n                    Mean   :17.62  \n                    3rd Qu.:36.25  \n                    Max.   :74.00  \n\n\nResults\nUSA, UK, France, Russia, and Turkey are some of the most central nodes within the dataset. Whereas Tunisia, Kosovo, Jamaica, Sri Lanka, and Nepal are the lowest central nodes. The network density is low (.11) with not many actual connections despite the portion of potential connections. With a centralization score of .36, ties of the network aren’t too concentrated on a group of actors.\n\n\n\n",
    "preview": "posts/httpswalidmedanigithubionetworks-blogposts2022-02-07-assignment3/assignment3_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2022-02-17T13:45:00-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpswalidmedanigithubionetworks-blogposts2022-02-16-assignment4/",
    "title": "Assignment_4",
    "description": "Status and Eigenvector (https://correlatesofwar.org/data-sets/MIDs)",
    "author": [
      {
        "name": "Walid Medani",
        "url": "https://walidmedani.github.io/networks-blog/"
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\nNetwork Graph\n\n\n\nDescription\nThere are 156 nodes within the militarized interstate dispute dataset. Edges are undirected and are defined as instances of when one state threatened, displayed, or used force directed towards the government, official representatives, official forces, property, or territory of another state.\nNetwork Density & Degree Centralization\n\n[1] 0.1136476\n$res\n  [1] 74 56 64 60 47 63 53 51 58 55 43 59 46 62 17 22 20 63 23 36  2\n [22] 37  4 39 15  5  2  3  5  8  2 17  4  4  3  1  3  3  2  1  1  7\n [43] 41  7 13  8  5  8  8 33  5 12  3 36 23 39  2 19  6 18  6 18  7\n [64]  8  5  1  2 12  8  2  8 21  2  1  8 10  4  4  1  3  5 45 45 34\n [85] 47 54  2  7  1  1  3  2  7 45 46 45 45  1  1  1  2  1  1  1 36\n[106]  1  1  2 26  9  1  1  1  1  4  5  5 19 19 53 53 42  2  2  3  1\n[127]  7 37 37 44 38 37 44 44 37 44  3  1  3  1  1  1  1  1  3  1  1\n[148]  1  1  2  1  2  2 33 33  1\n\n$centralization\n[1] 0.3637717\n\n$theoretical_max\n[1] 24180\n\n\n    name degree\nUSA  USA     74\nUKG  UKG     64\nFRN  FRN     63\nRUS  RUS     63\nTUR  TUR     62\nNTH  NTH     60\n     name               degree     \n Length:156         Min.   : 1.00  \n Class :character   1st Qu.: 2.00  \n Mode  :character   Median : 7.00  \n                    Mean   :17.62  \n                    3rd Qu.:36.25  \n                    Max.   :74.00  \n\n\nCentrality Measures\nCloseness Centraility\n\n         USA          CAN          UKG          NTH          BEL \n6.082355e-05 6.068329e-05 5.990894e-05 6.071645e-05 5.998081e-05 \n         FRN \n6.110975e-05 \n\nBetweenness Centrality\n\n      USA       CAN       UKG       NTH       BEL       FRN \n1543.1492  199.5687  295.0000  124.3906  345.1667 3030.5423 \n\n\nEigen Centrality\n\n[1] 1.0000000 0.9302363 0.9867230 0.9781763 0.8832846 0.9820892\n[1] 0.7215986\n\n\n\n\n\n\n\n",
    "preview": "posts/httpswalidmedanigithubionetworks-blogposts2022-02-16-assignment4/assignment4_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2022-02-17T13:46:14-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsyli210813githubiosocialnetworkanalysishw3/",
    "title": "Homework 3",
    "description": "Week 3 Assignment: Degree and Centrality.",
    "author": [
      {
        "name": "Yifan Li",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\n\n\n\n\n\n\n\n[1] FALSE\n[1] TRUE\n[1] TRUE\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1870    1971    1990    1982    2003    2014 \n\nThe original dataset is the trade dataset version 4 from the Correlates of War Project. The original format is an edgelist. The nodes are countries, and the ties are the trading relations between countries from 1870 to 2014. The network is directed and weighted.\nThe original dataset is too dense. To identify the structure of the network more clearly, I create a subset which only keep ties with import larger than (or equal to) 100 million.\nLet’s look at some basic descriptive facts.\n\n[1] 207\n[1] 1773656\n[1] 17136.77\n[1] 41.59411\n[1] 189\n[1] 117168\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n     -9      -9       0     143       2  472525 \n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n   100.0    178.4    373.7   2139.9   1133.2 472525.2 \n\nThe original dataset has 207 nodes, i.e. 207 countries involed in the trading network. There are 1773656 egdes. It’s really a huge amount since each edge counts as the trading number for one year. On average, one country import 142 million dollars of good from another country each year.\nIn the subset, we only have 189 nodes, meaning there are 18 countries never have import or export larger than 100 million from 1870 to 2014. The number of egdes decrease to 117168, which is only about 6.6% of the whole dataset. It implies a skewed distribution among international trade. The much looser network give us more chance to identify characteristic of international trading network.\n(I will keep comparing the subset with the original one.)\nLet’s classify all dyads and traids in the network:\n\n$mut\n[1] 886828\n\n$asym\n[1] 0\n\n$null\n[1] -865507\n$mut\n[1] 45072\n\n$asym\n[1] 27024\n\n$null\n[1] -54330\n [1]    1884       0   73511       0       0       0       0       0\n [9]       0       0   73236       0       0       0       0 1308304\n [1] 576073  42173 270669   3983   9872  10708  48167  26529   1316\n[10]    228  54882   5108   2127   3675  23094  28810\n[1] 0.5201966\n[1] 0.2824978\n[1] 0.8923257\n\nIn the original network, we cannot find a single asymmetry dyad. It makes it look like a undirected network in some way, which constrain the finding we can get.\nIn the subset, we identify 45072 mutual dyads and 27024 asymmetry dyads, showing signs of trade imbalance. The triad census also show a large proportion (52%) of empty triads. 28% of them only have one egde. 89% of the triads are not triangle.\nTo get more sense of the pattern of the clustering, let’s calculate the coefficients.\n\n[1] 0.9816825\n[1] 0.5560647\n[1] 0.9825593\n[1] 0.8148533\n[1] 1.051686\n[1] 1.781887\n[1] 1\n[1] 1\n[1] 207\n[1] 189\n\nFor the original network, the global and average local clustering coefficient are both near 0.98, almost telling us nothing about the characteristics of the network. In the subset, the global coefficient is 0.57 and the average local one is 0.81. The local one is much larger. It shows the nodes are more clustering in local level. In other words, those trade partners of a country who has less trading relations tends to trade more to each other.\nThe average shortest path for the original network is 1.05, meaning almost every two country have direct trading relationship. How closely the global market is connected! Meanwhile, in the subset the average shortest path is 1.78. One country needs to take 0.78 more step to get another on average under the threshold. Still very close, isn’t it?\nIn both dataset, we can only identify one huge component. Global market!\n\n[1] 41.39317\n[1] 3.280087\n\nIn the original network, the density is 41.39, which is really dense. Not surprisingly, with the threshold we only get a density of 3.28, a much looser picture.\n\n     name               degree         indegree       outdegree    \n Length:207         Min.   :  142   Min.   :   71   Min.   :   71  \n Class :character   1st Qu.:12284   1st Qu.: 6142   1st Qu.: 6142  \n Mode  :character   Median :17716   Median : 8858   Median : 8858  \n                    Mean   :17137   Mean   : 8568   Mean   : 8568  \n                    3rd Qu.:23300   3rd Qu.:11650   3rd Qu.:11650  \n                    Max.   :27168   Max.   :13584   Max.   :13584  \n     name               degree         indegree        outdegree     \n Length:189         Min.   :    1   Min.   :   0.0   Min.   :   0.0  \n Class :character   1st Qu.:  129   1st Qu.:  40.0   1st Qu.:  72.0  \n Mode  :character   Median :  463   Median : 210.0   Median : 276.0  \n                    Mean   : 1240   Mean   : 619.9   Mean   : 619.9  \n                    3rd Qu.: 1708   3rd Qu.: 850.0   3rd Qu.: 855.0  \n                    Max.   :10305   Max.   :5366.0   Max.   :4939.0  \n\nOn average, each country has 17137 edges, or trade from 1870 to 2014. With the threshold, they only got 1240 on average. To learn more about it, let’s graph some histograms.\n\n\n\n\n\n\nThe original network has a distribution closer to normal distribution, while in with the threshold is highly right skewed. It’s another evidence of imbalance of economy and exchange among countries.\n\n[1] 24.46583\n[1] 24.46583\n[1] 25.3793\n[1] 23.09594\n\nSurprisingly, we found the original network and the subset have almost the same centralization. The world market goes around some giants no matter you look at the trivial exchange or huge trade.\n\n                      name degree indegree outdegree\n1 United States of America  27168    13584     13584\n2                   Mexico  27168    13584     13584\n3                Guatemala  27168    13584     13584\n4                 Colombia  27168    13584     13584\n5                Venezuela  27168    13584     13584\n                      name degree indegree outdegree\n1 United States of America  27168    13584     13584\n2                   Mexico  27168    13584     13584\n3                Guatemala  27168    13584     13584\n4                 Colombia  27168    13584     13584\n5                Venezuela  27168    13584     13584\n                      name degree indegree outdegree\n1 United States of America  27168    13584     13584\n2                   Mexico  27168    13584     13584\n3                Guatemala  27168    13584     13584\n4                 Colombia  27168    13584     13584\n5                Venezuela  27168    13584     13584\n                      name degree indegree outdegree\n1 United States of America  10305     5366      4939\n2           United Kingdom   8516     4254      4262\n3                   France   7651     3995      3656\n4                    Japan   6982     3881      3101\n5                    Italy   6829     3438      3391\n                      name degree indegree outdegree\n1 United States of America  10305     5366      4939\n2           United Kingdom   8516     4254      4262\n3                   France   7651     3995      3656\n4                    Italy   6829     3438      3391\n5                    Japan   6982     3881      3101\n                      name degree indegree outdegree\n1 United States of America  10305     5366      4939\n2           United Kingdom   8516     4254      4262\n3                   France   7651     3995      3656\n4                    Japan   6982     3881      3101\n5                    Italy   6829     3438      3391\n\nIn the original network, the US, Mexico, Guatemala, Colombia, and Venezuela have the highest degree, or most trading relations, which is quite against our common sense. Probably it is because the publisher managed to got more data in North and South America in early age. We could constrain our data to recent decades next time.\nIn the subset, we got the US, the UK, France, Japan and Italy on the top 5, which is not surprising. If we constrain our data to recent decades, maybe we can expect China to show up.\n\n\n\n",
    "preview": "posts/httpsyli210813githubiosocialnetworkanalysishw3/distill-preview.png",
    "last_modified": "2022-02-17T13:45:31-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/httpsyli210813githubiosocialnetworkanalysishw4/",
    "title": "Homework 4",
    "description": "Week 4 Assignment: Network Status.",
    "author": [
      {
        "name": "Yifan Li",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [],
    "contents": "\n\n\n\n\n\n\n\n[1] FALSE\n[1] TRUE\n[1] TRUE\n\nThe original dataset is the trade dataset version 4 from the Correlates of War Project. In this subject I only use trade data of year 2014. The format is edgelist. The nodes are countries, and the ties are the trading relations between countries in 2014. The network is directed and weighted.\nLet’s look at some basic descriptive facts.\n\n[1] 186\n[1] 22451\n[1] 241.4086\n[1] 0.6524557\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n     0.0      0.2      4.9    813.1     78.5 472525.2 \n\nThe network in 2014 has 186 nodes, i.e. 186 countries involed in the trading network. There are 22451 egdes. Each country has 241 connected edges on average. On average, one country import 813 million dollars of good from another country each year. 65% of potential ties exit.\nLet’s classify all dyads and traids in the network:\n\n$mut\n[1] 9933\n\n$asym\n[1] 2585\n\n$null\n[1] 4687\n [1]  75574  62420  92513  11021   9514  11233  60137  45246   5530\n[10]    788 188669  14094   9006  15882 147383 306230\n[1] 0.07161783\n[1] 0.3484117\n[1] 1\n\nThere are 9933 mutual bilateral trade relations, 2585 unilateral trade relations, and 4687 pairs of coutries have no trading in 2014.\n7% of the triads are empty, and 65% of them are triangle. The network is quite dense.\nLet’s look at the distribution of nodes centrality.\n\n\n\nThe betweenness centrality and reflected centrality are right-skewed as expected. Limited coutries locate at the central bridging positions. But the bonachic-power and closeness show nearly normal distribution, and the eigenvector centrality and deprived centrality are highly left-skewed, which might show a decentralized network. The deprived centrality contribute to largest part of eigenvector centrality. Every country kind of plays as bridge in the network.\n\n\n\n\n                      name short_name ccode closeness betweenness\n1                    China        CHN   710 0.9946237    316.8033\n2 United States of America        USA     2 0.9788360    306.0056\n3              South Korea        ROK   732 0.9840426    304.6967\n4                Australia        AUL   900 0.9788360    294.1315\n5                    India        IND   750 0.9893048    224.8866\n       eigen     bonpow         rc    eigen.rc        dc   eigen.dc\n1 0.09697295 -1.2742959 0.18197333 0.017646489 0.8180267 0.07932646\n2 0.09703836 -1.0694386 0.19337928 0.018765208 0.8066207 0.07827315\n3 0.09650158 -1.1175464 0.07623579 0.007356874 0.9237642 0.08914470\n4 0.09535200 -0.8813261 0.04057029 0.003868458 0.9594297 0.09148354\n5 0.09695131 -1.1636487 0.02262084 0.002193121 0.9773792 0.09475819\n                    name short_name ccode closeness betweenness\n1 Bosnia and Herzegovina        BOS   346 0.6271186    2.042703\n2           Saudi Arabia        SAU   670 0.8726415   83.004276\n3               Zimbabwe        ZIM   552 0.6902985   26.360045\n4     Dominican Republic        DOM    42 0.8258929   56.408439\n5               Malaysia        MAL   820 0.9487179  199.363801\n       eigen    bonpow           rc     eigen.rc        dc   eigen.dc\n1 0.05841333 0.6260723 0.0014683688 8.577231e-05 0.9985316 0.05832756\n2 0.08701319 0.5455796 0.0317620070 2.763714e-03 0.9682380 0.08424948\n3 0.07643869 0.5220134 0.0004566747 3.490762e-05 0.9995433 0.07640378\n4 0.07625539 0.4349504 0.0020462397 1.560368e-04 0.9979538 0.07609935\n5 0.09645108 0.4242820 0.0301872862 2.911596e-03 0.9698127 0.09353948\n            name short_name ccode closeness betweenness      eigen\n1          China        CHN   710 0.9946237    316.8033 0.09697295\n2 United Kingdom        UKG   200 0.9893048    224.4011 0.09698944\n3         France        FRN   220 0.9893048    217.5927 0.09701673\n4          India        IND   750 0.9893048    224.8866 0.09695131\n5    Netherlands        NTH   210 0.9840426    213.0323 0.09701673\n     bonpow         rc    eigen.rc        dc   eigen.dc\n1 -1.274296 0.18197333 0.017646489 0.8180267 0.07932646\n2 -1.000833 0.03264763 0.003166476 0.9673524 0.09382296\n3 -1.371359 0.04966972 0.004818793 0.9503303 0.09219793\n4 -1.163649 0.02262084 0.002193121 0.9773792 0.09475819\n5 -1.315812 0.10053860 0.009753925 0.8994614 0.08726280\n                      name short_name ccode closeness betweenness\n1 United States of America        USA     2 0.9788360    306.0056\n2              Netherlands        NTH   210 0.9840426    213.0323\n3                   France        FRN   220 0.9893048    217.5927\n4                  Denmark        DEN   390 0.9536082    186.4211\n5                    Spain        SPN   230 0.9536082    187.3443\n       eigen     bonpow          rc     eigen.rc        dc   eigen.dc\n1 0.09703836 -1.0694386 0.193379284 0.0187652082 0.8066207 0.07827315\n2 0.09701673 -1.3158118 0.100538595 0.0097539253 0.8994614 0.08726280\n3 0.09701673 -1.3713593 0.049669717 0.0048187933 0.9503303 0.09219793\n4 0.09701673 -0.7065288 0.009933439 0.0009637097 0.9900666 0.09605302\n5 0.09701673 -0.5716878 0.031197741 0.0030267026 0.9688023 0.09399002\n          name short_name ccode closeness betweenness      eigen\n1      Finland        FIN   375 0.8809524    141.8394 0.09667270\n2      Denmark        DEN   390 0.9536082    186.4211 0.09701673\n3       Turkey        TUR   640 0.9840426    208.8803 0.09679966\n4       Sweden        SWD   380 0.9788360    205.9708 0.09677237\n5 South Africa        SAF   560 0.9736842    200.3019 0.09685164\n      bonpow          rc     eigen.rc        dc   eigen.dc\n1  0.1099607 0.006087120 0.0005884583 0.9939129 0.09608424\n2 -0.7065288 0.009933439 0.0009637097 0.9900666 0.09605302\n3 -1.6759857 0.011984440 0.0011600897 0.9880156 0.09563957\n4 -1.1753454 0.013861294 0.0013413903 0.9861387 0.09543098\n5 -1.2631864 0.017108054 0.0016569431 0.9828919 0.09519470\n                      name short_name ccode closeness betweenness\n1 United States of America        USA     2 0.9788360    306.0056\n2                    China        CHN   710 0.9946237    316.8033\n3                   Canada        CAN    20 0.9788360    192.3823\n4              Netherlands        NTH   210 0.9840426    213.0323\n5                  Germany        GMY   255 0.9840426    219.4348\n       eigen     bonpow        rc    eigen.rc        dc   eigen.dc\n1 0.09703836 -1.0694386 0.1933793 0.018765208 0.8066207 0.07827315\n2 0.09697295 -1.2742959 0.1819733 0.017646489 0.8180267 0.07932646\n3 0.09672468 -1.3044404 0.1339702 0.012958227 0.8660298 0.08376646\n4 0.09701673 -1.3158118 0.1005386 0.009753925 0.8994614 0.08726280\n5 0.09689933 -0.6890218 0.1000104 0.009690938 0.8999896 0.08720839\n\nAmong these countries, China has the highest betweenness and closeness centrality. Bosnia and Herzegovina has the highest bonachic-power. The US gets the highest deprived centrality and eigenvector centrality. The Finland has the highest reflected centrality. On the top 5 lits of betweenness, closeness, deprived and eigenvector centrality, all we see are familiar trading powerhouses. But the list of bonachic-power has many unexpected country on the list. I don’t really understand what bonachic-power presents so don’t know how to interpret this outcome.\n\n         term closeness eigen betweenness eigen.dc eigen.rc bonpow\n1   closeness             .91         .91      .89      .51   -.02\n2       eigen       .91               .79      .99      .41    .01\n3 betweenness       .91   .79                  .74      .66   -.04\n4    eigen.dc       .89   .99         .74               .31    .02\n5    eigen.rc       .51   .41         .66      .31            -.07\n6      bonpow      -.02   .01        -.04      .02     -.07       \n\n\nCloseness, betweeness, eigenvector centrality are highly corralled. They are interchangeable measures of centrality. The reflected centrality is less correlated with those parameters, but it’s a small part compared with the deprived one. Bonachic-power is almost independent with other parameters.\n\n\n\n",
    "preview": "posts/httpsyli210813githubiosocialnetworkanalysishw4/distill-preview.png",
    "last_modified": "2022-02-17T13:46:26-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to DACSS 601",
    "description": "Welcome to DACSS 601: Foundations of Data Science. We hope you enjoy \nreading what we have to say!",
    "author": [
      {
        "name": "Meredith Rolfe",
        "url": "http://umass.edu/sbs/dacss"
      }
    ],
    "date": "2021-03-25",
    "categories": [
      "welcome"
    ],
    "contents": "\n\n\n\n",
    "preview": {},
    "last_modified": "2022-02-17T13:37:57-05:00",
    "input_file": {}
  }
]
